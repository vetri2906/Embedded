
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000267c  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000009  20000000  08002988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08002991  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000002c  08002991  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006bc2  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001155  00000000  00000000  00026c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000678  00000000  00000000  00027d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000005e0  00000000  00000000  000283d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030352  00000000  00000000  000289b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00006eb0  00000000  00000000  00058d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012dd5b  00000000  00000000  0005fbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0018d90d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001894  00000000  00000000  0018d960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	08002898 	.word	0x08002898

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	08002898 	.word	0x08002898

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fbea 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f814 	bl	80002a8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000280:	f000 f86e 	bl	8000360 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f87c 	bl	8000380 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOH, LED_RED_Pin);
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	4806      	ldr	r0, [pc, #24]	; (80002a4 <main+0x30>)
 800028c:	f000 ff5c 	bl	8001148 <HAL_GPIO_TogglePin>
	HAL_Delay(2000);
 8000290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000294:	f000 fc60 	bl	8000b58 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOH, LED_GREEN_Pin);
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	4802      	ldr	r0, [pc, #8]	; (80002a4 <main+0x30>)
 800029c:	f000 ff54 	bl	8001148 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOH, LED_RED_Pin);
 80002a0:	e7f2      	b.n	8000288 <main+0x14>
 80002a2:	bf00      	nop
 80002a4:	42021c00 	.word	0x42021c00

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b09e      	sub	sp, #120	; 0x78
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2260      	movs	r2, #96	; 0x60
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fae6 	bl	8002888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]
 80002ca:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002cc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80002d0:	f000 ff54 	bl	800117c <HAL_PWREx_ControlVoltageScaling>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002da:	f000 fb0d 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002de:	2310      	movs	r3, #16
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002e6:	2310      	movs	r3, #16
 80002e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f4:	2301      	movs	r3, #1
 80002f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000300:	2350      	movs	r3, #80	; 0x50
 8000302:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000304:	2302      	movs	r3, #2
 8000306:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000308:	2302      	movs	r3, #2
 800030a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800030c:	2302      	movs	r3, #2
 800030e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000310:	2300      	movs	r3, #0
 8000312:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f001 f81f 	bl	8001360 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000328:	f000 fae6 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	231f      	movs	r3, #31
 800032e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2303      	movs	r3, #3
 8000332:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2104      	movs	r1, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fedf 	bl	800210c <HAL_RCC_ClockConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000354:	f000 fad0 	bl	80008f8 <Error_Handler>
  }
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000364:	f000 ffdc 	bl	8001320 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000368:	f000 ffea 	bl	8001340 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800036c:	2002      	movs	r0, #2
 800036e:	f000 ff87 	bl	8001280 <HAL_PWREx_ConfigSupply>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8000378:	f000 fabe 	bl	80008f8 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08e      	sub	sp, #56	; 0x38
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000396:	4bbe      	ldr	r3, [pc, #760]	; (8000690 <MX_GPIO_Init+0x310>)
 8000398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800039c:	4abc      	ldr	r2, [pc, #752]	; (8000690 <MX_GPIO_Init+0x310>)
 800039e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80003a6:	4bba      	ldr	r3, [pc, #744]	; (8000690 <MX_GPIO_Init+0x310>)
 80003a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b0:	623b      	str	r3, [r7, #32]
 80003b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4bb6      	ldr	r3, [pc, #728]	; (8000690 <MX_GPIO_Init+0x310>)
 80003b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003ba:	4ab5      	ldr	r2, [pc, #724]	; (8000690 <MX_GPIO_Init+0x310>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80003c4:	4bb2      	ldr	r3, [pc, #712]	; (8000690 <MX_GPIO_Init+0x310>)
 80003c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	61fb      	str	r3, [r7, #28]
 80003d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4baf      	ldr	r3, [pc, #700]	; (8000690 <MX_GPIO_Init+0x310>)
 80003d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003d8:	4aad      	ldr	r2, [pc, #692]	; (8000690 <MX_GPIO_Init+0x310>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80003e2:	4bab      	ldr	r3, [pc, #684]	; (8000690 <MX_GPIO_Init+0x310>)
 80003e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	61bb      	str	r3, [r7, #24]
 80003ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80003f0:	4ba7      	ldr	r3, [pc, #668]	; (8000690 <MX_GPIO_Init+0x310>)
 80003f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003f6:	4aa6      	ldr	r2, [pc, #664]	; (8000690 <MX_GPIO_Init+0x310>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000400:	4ba3      	ldr	r3, [pc, #652]	; (8000690 <MX_GPIO_Init+0x310>)
 8000402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800040e:	4ba0      	ldr	r3, [pc, #640]	; (8000690 <MX_GPIO_Init+0x310>)
 8000410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000414:	4a9e      	ldr	r2, [pc, #632]	; (8000690 <MX_GPIO_Init+0x310>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800041a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800041e:	4b9c      	ldr	r3, [pc, #624]	; (8000690 <MX_GPIO_Init+0x310>)
 8000420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000428:	613b      	str	r3, [r7, #16]
 800042a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042c:	4b98      	ldr	r3, [pc, #608]	; (8000690 <MX_GPIO_Init+0x310>)
 800042e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000432:	4a97      	ldr	r2, [pc, #604]	; (8000690 <MX_GPIO_Init+0x310>)
 8000434:	f043 0302 	orr.w	r3, r3, #2
 8000438:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800043c:	4b94      	ldr	r3, [pc, #592]	; (8000690 <MX_GPIO_Init+0x310>)
 800043e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000442:	f003 0302 	and.w	r3, r3, #2
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800044a:	4b91      	ldr	r3, [pc, #580]	; (8000690 <MX_GPIO_Init+0x310>)
 800044c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000450:	4a8f      	ldr	r2, [pc, #572]	; (8000690 <MX_GPIO_Init+0x310>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800045a:	4b8d      	ldr	r3, [pc, #564]	; (8000690 <MX_GPIO_Init+0x310>)
 800045c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000468:	4b89      	ldr	r3, [pc, #548]	; (8000690 <MX_GPIO_Init+0x310>)
 800046a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800046e:	4a88      	ldr	r2, [pc, #544]	; (8000690 <MX_GPIO_Init+0x310>)
 8000470:	f043 0310 	orr.w	r3, r3, #16
 8000474:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000478:	4b85      	ldr	r3, [pc, #532]	; (8000690 <MX_GPIO_Init+0x310>)
 800047a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800047e:	f003 0310 	and.w	r3, r3, #16
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000486:	4b82      	ldr	r3, [pc, #520]	; (8000690 <MX_GPIO_Init+0x310>)
 8000488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800048c:	4a80      	ldr	r2, [pc, #512]	; (8000690 <MX_GPIO_Init+0x310>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000496:	4b7e      	ldr	r3, [pc, #504]	; (8000690 <MX_GPIO_Init+0x310>)
 8000498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800049c:	f003 0320 	and.w	r3, r3, #32
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2120      	movs	r1, #32
 80004a8:	487a      	ldr	r0, [pc, #488]	; (8000694 <MX_GPIO_Init+0x314>)
 80004aa:	f000 fe35 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	21c2      	movs	r1, #194	; 0xc2
 80004b2:	4879      	ldr	r0, [pc, #484]	; (8000698 <MX_GPIO_Init+0x318>)
 80004b4:	f000 fe30 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2140      	movs	r1, #64	; 0x40
 80004bc:	4877      	ldr	r0, [pc, #476]	; (800069c <MX_GPIO_Init+0x31c>)
 80004be:	f000 fe2b 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 80004c8:	4875      	ldr	r0, [pc, #468]	; (80006a0 <MX_GPIO_Init+0x320>)
 80004ca:	f000 fe25 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 80004ce:	f248 0324 	movw	r3, #32804	; 0x8024
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d4:	2300      	movs	r3, #0
 80004d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e0:	4619      	mov	r1, r3
 80004e2:	486e      	ldr	r0, [pc, #440]	; (800069c <MX_GPIO_Init+0x31c>)
 80004e4:	f000 fc40 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_UART4_RX_Pin WRLS_UART4_TX_Pin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 80004e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	2302      	movs	r3, #2
 80004f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	2300      	movs	r3, #0
 80004f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80004fa:	2308      	movs	r3, #8
 80004fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000502:	4619      	mov	r1, r3
 8000504:	4867      	ldr	r0, [pc, #412]	; (80006a4 <MX_GPIO_Init+0x324>)
 8000506:	f000 fc2f 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 800050a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000510:	2303      	movs	r3, #3
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051c:	4619      	mov	r1, r3
 800051e:	4862      	ldr	r0, [pc, #392]	; (80006a8 <MX_GPIO_Init+0x328>)
 8000520:	f000 fc22 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_F_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8000524:	2320      	movs	r3, #32
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000528:	2302      	movs	r3, #2
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000530:	2303      	movs	r3, #3
 8000532:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000534:	2305      	movs	r3, #5
 8000536:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8000538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053c:	4619      	mov	r1, r3
 800053e:	485b      	ldr	r0, [pc, #364]	; (80006ac <MX_GPIO_Init+0x32c>)
 8000540:	f000 fc12 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO5_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8000544:	2301      	movs	r3, #1
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000548:	2302      	movs	r3, #2
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000550:	2303      	movs	r3, #3
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000554:	2303      	movs	r3, #3
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055c:	4619      	mov	r1, r3
 800055e:	4853      	ldr	r0, [pc, #332]	; (80006ac <MX_GPIO_Init+0x32c>)
 8000560:	f000 fc02 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO7_Pin OCTOSPI_F_IO5_Pin OCTOSPI_F_IO6_Pin OCTOSPI_F_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8000564:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	2302      	movs	r3, #2
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000572:	2303      	movs	r3, #3
 8000574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000576:	2305      	movs	r3, #5
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800057a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057e:	4619      	mov	r1, r3
 8000580:	4845      	ldr	r0, [pc, #276]	; (8000698 <MX_GPIO_Init+0x318>)
 8000582:	f000 fbf1 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8000586:	2308      	movs	r3, #8
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058a:	2300      	movs	r3, #0
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	4619      	mov	r1, r3
 8000598:	483f      	ldr	r0, [pc, #252]	; (8000698 <MX_GPIO_Init+0x318>)
 800059a:	f000 fbe5 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 800059e:	2320      	movs	r3, #32
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b2:	4619      	mov	r1, r3
 80005b4:	4837      	ldr	r0, [pc, #220]	; (8000694 <MX_GPIO_Init+0x314>)
 80005b6:	f000 fbd7 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_SPI2_MOSI_Pin WRLS_SPI2_MISO_Pin WRLS_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 80005ba:	231a      	movs	r3, #26
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005ca:	2305      	movs	r3, #5
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d2:	4619      	mov	r1, r3
 80005d4:	4836      	ldr	r0, [pc, #216]	; (80006b0 <MX_GPIO_Init+0x330>)
 80005d6:	f000 fbc7 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80005da:	2308      	movs	r3, #8
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005de:	2302      	movs	r3, #2
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80005ea:	2303      	movs	r3, #3
 80005ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	4619      	mov	r1, r3
 80005f4:	482f      	ldr	r0, [pc, #188]	; (80006b4 <MX_GPIO_Init+0x334>)
 80005f6:	f000 fbb7 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80005fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000600:	2312      	movs	r3, #18
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800060c:	2304      	movs	r3, #4
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000614:	4619      	mov	r1, r3
 8000616:	481f      	ldr	r0, [pc, #124]	; (8000694 <MX_GPIO_Init+0x314>)
 8000618:	f000 fba6 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO7_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800062c:	230a      	movs	r3, #10
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000634:	4619      	mov	r1, r3
 8000636:	481e      	ldr	r0, [pc, #120]	; (80006b0 <MX_GPIO_Init+0x330>)
 8000638:	f000 fb96 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO0_Pin OCTOSPI_F_IO1_Pin OCTOSPI_F_IO2_Pin OCTOSPI_F_IO3_Pin
                           OCTOSPI_F_CLK_P_Pin OCTOSPI_F_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 800063c:	f241 031f 	movw	r3, #4127	; 0x101f
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064a:	2303      	movs	r3, #3
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800064e:	2305      	movs	r3, #5
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000656:	4619      	mov	r1, r3
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <MX_GPIO_Init+0x320>)
 800065a:	f000 fb85 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_GPIO_Init+0x324>)
 8000674:	f000 fb78 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000678:	2330      	movs	r3, #48	; 0x30
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800067c:	2312      	movs	r3, #18
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000688:	2304      	movs	r3, #4
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
 800068c:	e014      	b.n	80006b8 <MX_GPIO_Init+0x338>
 800068e:	bf00      	nop
 8000690:	46020c00 	.word	0x46020c00
 8000694:	42020400 	.word	0x42020400
 8000698:	42021c00 	.word	0x42021c00
 800069c:	42021800 	.word	0x42021800
 80006a0:	42021400 	.word	0x42021400
 80006a4:	42020800 	.word	0x42020800
 80006a8:	42020000 	.word	0x42020000
 80006ac:	42022000 	.word	0x42022000
 80006b0:	42020c00 	.word	0x42020c00
 80006b4:	42021000 	.word	0x42021000
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	4886      	ldr	r0, [pc, #536]	; (80008d8 <MX_GPIO_Init+0x558>)
 80006c0:	f000 fb52 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 80006c4:	23c2      	movs	r3, #194	; 0xc2
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d8:	4619      	mov	r1, r3
 80006da:	487f      	ldr	r0, [pc, #508]	; (80008d8 <MX_GPIO_Init+0x558>)
 80006dc:	f000 fb44 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_IO0_Pin OCTOSPI_R_IO2_Pin OCTOSPI_R_IO1_Pin OCTOSPI_R_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 80006e0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80006f2:	230a      	movs	r3, #10
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4619      	mov	r1, r3
 80006fc:	4877      	ldr	r0, [pc, #476]	; (80008dc <MX_GPIO_Init+0x55c>)
 80006fe:	f000 fb33 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8000702:	2304      	movs	r3, #4
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000712:	2303      	movs	r3, #3
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	486e      	ldr	r0, [pc, #440]	; (80008d8 <MX_GPIO_Init+0x558>)
 800071e:	f000 fb23 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_TX_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000734:	2307      	movs	r3, #7
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	4619      	mov	r1, r3
 800073e:	4868      	ldr	r0, [pc, #416]	; (80008e0 <MX_GPIO_Init+0x560>)
 8000740:	f000 fb12 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_C_P_Pin USB_C_PA11_Pin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8000744:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000756:	230a      	movs	r3, #10
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	485f      	ldr	r0, [pc, #380]	; (80008e0 <MX_GPIO_Init+0x560>)
 8000762:	f000 fb01 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8000766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000778:	2306      	movs	r3, #6
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000780:	4619      	mov	r1, r3
 8000782:	4856      	ldr	r0, [pc, #344]	; (80008dc <MX_GPIO_Init+0x55c>)
 8000784:	f000 faf0 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_SDINx_Pin MIC_CCK0_Pin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8000788:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 800079a:	2303      	movs	r3, #3
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	4619      	mov	r1, r3
 80007a4:	484f      	ldr	r0, [pc, #316]	; (80008e4 <MX_GPIO_Init+0x564>)
 80007a6:	f000 fadf 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4619      	mov	r1, r3
 80007c0:	4849      	ldr	r0, [pc, #292]	; (80008e8 <MX_GPIO_Init+0x568>)
 80007c2:	f000 fad1 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 80007c6:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	4844      	ldr	r0, [pc, #272]	; (80008ec <MX_GPIO_Init+0x56c>)
 80007dc:	f000 fac4 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO6_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80007e0:	2308      	movs	r3, #8
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80007f0:	230a      	movs	r3, #10
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	483d      	ldr	r0, [pc, #244]	; (80008f0 <MX_GPIO_Init+0x570>)
 80007fc:	f000 fab4 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8000800:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000812:	4619      	mov	r1, r3
 8000814:	4833      	ldr	r0, [pc, #204]	; (80008e4 <MX_GPIO_Init+0x564>)
 8000816:	f000 faa7 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_CLK_P_Pin OCTOSPI_R_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 800081a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800082c:	230a      	movs	r3, #10
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	4619      	mov	r1, r3
 8000836:	482f      	ldr	r0, [pc, #188]	; (80008f4 <MX_GPIO_Init+0x574>)
 8000838:	f000 fa96 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 800083c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	4822      	ldr	r0, [pc, #136]	; (80008dc <MX_GPIO_Init+0x55c>)
 8000852:	f000 fa89 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000868:	2305      	movs	r3, #5
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	4820      	ldr	r0, [pc, #128]	; (80008f4 <MX_GPIO_Init+0x574>)
 8000874:	f000 fa78 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 8000878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	4619      	mov	r1, r3
 800088c:	4819      	ldr	r0, [pc, #100]	; (80008f4 <MX_GPIO_Init+0x574>)
 800088e:	f000 fa6b 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8000892:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_GPIO_Init+0x55c>)
 80008ac:	f000 fa5c 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 80008b0:	2302      	movs	r3, #2
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80008c0:	2306      	movs	r3, #6
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	480a      	ldr	r0, [pc, #40]	; (80008f4 <MX_GPIO_Init+0x574>)
 80008cc:	f000 fa4c 	bl	8000d68 <HAL_GPIO_Init>

}
 80008d0:	bf00      	nop
 80008d2:	3738      	adds	r7, #56	; 0x38
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	42021c00 	.word	0x42021c00
 80008dc:	42021400 	.word	0x42021400
 80008e0:	42020000 	.word	0x42020000
 80008e4:	42021000 	.word	0x42021000
 80008e8:	42021800 	.word	0x42021800
 80008ec:	42020c00 	.word	0x42020c00
 80008f0:	42020800 	.word	0x42020800
 80008f4:	42020400 	.word	0x42020400

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_MspInit+0x30>)
 800090c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000910:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x30>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x30>)
 800091c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	46020c00 	.word	0x46020c00

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f8c8 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <SystemInit+0x68>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <SystemInit+0x68>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <SystemInit+0x6c>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <SystemInit+0x6c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <SystemInit+0x6c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <SystemInit+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <SystemInit+0x6c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <SystemInit+0x6c>)
 80009be:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009c2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <SystemInit+0x6c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <SystemInit+0x6c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <SystemInit+0x6c>)
 80009d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <SystemInit+0x6c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SystemInit+0x68>)
 80009e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009e6:	609a      	str	r2, [r3, #8]
  #endif
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00
 80009f8:	46020c00 	.word	0x46020c00

080009fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a02:	e003      	b.n	8000a0c <LoopCopyDataInit>

08000a04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a0a:	3104      	adds	r1, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a14:	d3f6      	bcc.n	8000a04 <CopyDataInit>
	ldr	r2, =_sbss
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a18:	e002      	b.n	8000a20 <LoopFillZerobss>

08000a1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a1c:	f842 3b04 	str.w	r3, [r2], #4

08000a20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <LoopForever+0x16>)
	cmp	r2, r3
 8000a22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a24:	d3f9      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a26:	f7ff ffb1 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f001 ff09 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a2e:	f7ff fc21 	bl	8000274 <main>

08000a32 <LoopForever>:

LoopForever:
    b LoopForever
 8000a32:	e7fe      	b.n	8000a32 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a34:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000a38:	08002988 	.word	0x08002988
	ldr	r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a40:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000a44:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a48:	2000002c 	.word	0x2000002c

08000a4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_Init+0x4c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <HAL_Init+0x4c>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f94f 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a66:	f001 fd43 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_Init+0x50>)
 8000a6e:	6a1b      	ldr	r3, [r3, #32]
 8000a70:	f003 030f 	and.w	r3, r3, #15
 8000a74:	490b      	ldr	r1, [pc, #44]	; (8000aa4 <HAL_Init+0x54>)
 8000a76:	5ccb      	ldrb	r3, [r1, r3]
 8000a78:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_Init+0x58>)
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f000 f813 	bl	8000aac <HAL_InitTick>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e002      	b.n	8000a96 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff ff38 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000
 8000aa0:	46020c00 	.word	0x46020c00
 8000aa4:	080028b0 	.word	0x080028b0
 8000aa8:	20000000 	.word	0x20000000

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_InitTick+0x60>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e021      	b.n	8000b04 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_InitTick+0x64>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_InitTick+0x60>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f939 	bl	8000d4e <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f911 	bl	8000d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x68>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000028 	.word	0x20000028

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000028 	.word	0x20000028

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff ffee 	bl	8000b40 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_Delay+0x44>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffde 	bl	8000b40 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff47 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff5e 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff90 	bl	8000c58 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5f 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffb2 	bl	8000cc0 <SysTick_Config>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d7a:	e1ba      	b.n	80010f2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 81aa 	beq.w	80010ec <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a55      	ldr	r2, [pc, #340]	; (8000ef0 <HAL_GPIO_Init+0x188>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d15d      	bne.n	8000e5c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000da6:	2201      	movs	r2, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000dd0:	4a48      	ldr	r2, [pc, #288]	; (8000ef4 <HAL_GPIO_Init+0x18c>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000dd8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000dda:	4a46      	ldr	r2, [pc, #280]	; (8000ef4 <HAL_GPIO_Init+0x18c>)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	4413      	add	r3, r2
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	3208      	adds	r2, #8
 8000dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220b      	movs	r2, #11
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	3208      	adds	r2, #8
 8000e26:	69f9      	ldr	r1, [r7, #28]
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2202      	movs	r2, #2
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	69fa      	ldr	r2, [r7, #28]
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e067      	b.n	8000f2c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x104>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b12      	cmp	r3, #18
 8000e6a:	d145      	bne.n	8000ef8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69fa      	ldr	r2, [r7, #28]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	f003 020f 	and.w	r2, r3, #15
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69f9      	ldr	r1, [r7, #28]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e01e      	b.n	8000f2c <HAL_GPIO_Init+0x1c4>
 8000eee:	bf00      	nop
 8000ef0:	46020000 	.word	0x46020000
 8000ef4:	08002900 	.word	0x08002900
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0203 	and.w	r2, r3, #3
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69fa      	ldr	r2, [r7, #28]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d00b      	beq.n	8000f4c <HAL_GPIO_Init+0x1e4>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d007      	beq.n	8000f4c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f40:	2b11      	cmp	r3, #17
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b12      	cmp	r3, #18
 8000f4a:	d130      	bne.n	8000fae <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000f82:	2201      	movs	r2, #1
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f003 0201 	and.w	r2, r3, #1
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d017      	beq.n	8000fe6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d07c      	beq.n	80010ec <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000ff2:	4a47      	ldr	r2, [pc, #284]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3318      	adds	r3, #24
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	4013      	ands	r3, r2
 8001014:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0a9a      	lsrs	r2, r3, #10
 800101a:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <HAL_GPIO_Init+0x3ac>)
 800101c:	4013      	ands	r3, r2
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	f002 0203 	and.w	r2, r2, #3
 8001024:	00d2      	lsls	r2, r2, #3
 8001026:	4093      	lsls	r3, r2
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	4313      	orrs	r3, r2
 800102c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800102e:	4938      	ldr	r1, [pc, #224]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3318      	adds	r3, #24
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800103c:	4b34      	ldr	r3, [pc, #208]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	4013      	ands	r3, r2
 800104a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	4013      	ands	r3, r2
 8001074:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800108a:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 8001092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001096:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	4013      	ands	r3, r2
 80010a0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 80010c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_GPIO_Init+0x3a8>)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa22 f303 	lsr.w	r3, r2, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f47f ae3d 	bne.w	8000d7c <HAL_GPIO_Init+0x14>
  }
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	3724      	adds	r7, #36	; 0x24
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	46022000 	.word	0x46022000
 8001114:	002f7f7f 	.word	0x002f7f7f

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001134:	e002      	b.n	800113c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4013      	ands	r3, r2
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43d9      	mvns	r1, r3
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	400b      	ands	r3, r1
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d101      	bne.n	800119a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e057      	b.n	800124a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a0:	d90a      	bls.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	4a2a      	ldr	r2, [pc, #168]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80011b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b4:	60d3      	str	r3, [r2, #12]
 80011b6:	e007      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80011c0:	4925      	ldr	r1, [pc, #148]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a24      	ldr	r2, [pc, #144]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	099b      	lsrs	r3, r3, #6
 80011d4:	2232      	movs	r2, #50	; 0x32
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	4a21      	ldr	r2, [pc, #132]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80011e6:	e002      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x84>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f3      	bne.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d01b      	beq.n	800123e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	099b      	lsrs	r3, r3, #6
 8001212:	2232      	movs	r2, #50	; 0x32
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	099b      	lsrs	r3, r3, #6
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001224:	e002      	b.n	800122c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3b01      	subs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800122e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f3      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e000      	b.n	800124a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	46020800 	.word	0x46020800
 800125c:	20000000 	.word	0x20000000
 8001260:	10624dd3 	.word	0x10624dd3

08001264 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_PWREx_GetVoltageRange+0x18>)
 800126a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	46020800 	.word	0x46020800

08001280 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_PWREx_ConfigSupply+0x94>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a22      	ldr	r2, [pc, #136]	; (8001318 <HAL_PWREx_ConfigSupply+0x98>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	099b      	lsrs	r3, r3, #6
 8001294:	2232      	movs	r2, #50	; 0x32
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_PWREx_ConfigSupply+0x98>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	099b      	lsrs	r3, r3, #6
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d113      	bne.n	80012d4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_PWREx_ConfigSupply+0x9c>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a1a      	ldr	r2, [pc, #104]	; (800131c <HAL_PWREx_ConfigSupply+0x9c>)
 80012b2:	f023 0302 	bic.w	r3, r3, #2
 80012b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80012b8:	e002      	b.n	80012c0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_PWREx_ConfigSupply+0x9c>)
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d116      	bne.n	80012fa <HAL_PWREx_ConfigSupply+0x7a>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f3      	bne.n	80012ba <HAL_PWREx_ConfigSupply+0x3a>
 80012d2:	e012      	b.n	80012fa <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_PWREx_ConfigSupply+0x9c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_PWREx_ConfigSupply+0x9c>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80012e0:	e002      	b.n	80012e8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_PWREx_ConfigSupply+0x9c>)
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <HAL_PWREx_ConfigSupply+0x7a>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f3      	bne.n	80012e2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e000      	b.n	8001306 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000000 	.word	0x20000000
 8001318:	10624dd3 	.word	0x10624dd3
 800131c:	46020800 	.word	0x46020800

08001320 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_PWREx_EnableVddIO2+0x1c>)
 800132a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800132e:	6113      	str	r3, [r2, #16]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	46020800 	.word	0x46020800

08001340 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	46020800 	.word	0x46020800

08001360 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	f000 bec3 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800137a:	4b9c      	ldr	r3, [pc, #624]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001384:	4b99      	ldr	r3, [pc, #612]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8172 	beq.w	8001680 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800139c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_RCC_OscConfig+0x52>
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	f040 80e4 	bne.w	8001572 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	f040 80e0 	bne.w	8001572 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b2:	4b8e      	ldr	r3, [pc, #568]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <HAL_RCC_OscConfig+0x6c>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f000 be9a 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d0:	4b86      	ldr	r3, [pc, #536]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_RCC_OscConfig+0x86>
 80013dc:	4b83      	ldr	r3, [pc, #524]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80013e4:	e005      	b.n	80013f2 <HAL_RCC_OscConfig+0x92>
 80013e6:	4b81      	ldr	r3, [pc, #516]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80013e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ec:	041b      	lsls	r3, r3, #16
 80013ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d255      	bcs.n	80014a2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80013f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10a      	bne.n	8001412 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	4618      	mov	r0, r3
 8001402:	f001 f997 	bl	8002734 <RCC_SetFlashLatencyFromMSIRange>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	f000 be77 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001412:	4b76      	ldr	r3, [pc, #472]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	4a75      	ldr	r2, [pc, #468]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800141c:	6093      	str	r3, [r2, #8]
 800141e:	4b73      	ldr	r3, [pc, #460]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	4970      	ldr	r1, [pc, #448]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001438:	d309      	bcc.n	800144e <HAL_RCC_OscConfig+0xee>
 800143a:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f023 021f 	bic.w	r2, r3, #31
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4969      	ldr	r1, [pc, #420]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001448:	4313      	orrs	r3, r2
 800144a:	60cb      	str	r3, [r1, #12]
 800144c:	e07e      	b.n	800154c <HAL_RCC_OscConfig+0x1ec>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	2b00      	cmp	r3, #0
 8001454:	da0a      	bge.n	800146c <HAL_RCC_OscConfig+0x10c>
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	015b      	lsls	r3, r3, #5
 8001464:	4961      	ldr	r1, [pc, #388]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001466:	4313      	orrs	r3, r2
 8001468:	60cb      	str	r3, [r1, #12]
 800146a:	e06f      	b.n	800154c <HAL_RCC_OscConfig+0x1ec>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001474:	d30a      	bcc.n	800148c <HAL_RCC_OscConfig+0x12c>
 8001476:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	029b      	lsls	r3, r3, #10
 8001484:	4959      	ldr	r1, [pc, #356]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001486:	4313      	orrs	r3, r2
 8001488:	60cb      	str	r3, [r1, #12]
 800148a:	e05f      	b.n	800154c <HAL_RCC_OscConfig+0x1ec>
 800148c:	4b57      	ldr	r3, [pc, #348]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	03db      	lsls	r3, r3, #15
 800149a:	4954      	ldr	r1, [pc, #336]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 800149c:	4313      	orrs	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
 80014a0:	e054      	b.n	800154c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80014a2:	4b52      	ldr	r3, [pc, #328]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4a51      	ldr	r2, [pc, #324]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80014a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ac:	6093      	str	r3, [r2, #8]
 80014ae:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	494c      	ldr	r1, [pc, #304]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80014c8:	d309      	bcc.n	80014de <HAL_RCC_OscConfig+0x17e>
 80014ca:	4b48      	ldr	r3, [pc, #288]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f023 021f 	bic.w	r2, r3, #31
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4945      	ldr	r1, [pc, #276]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	60cb      	str	r3, [r1, #12]
 80014dc:	e028      	b.n	8001530 <HAL_RCC_OscConfig+0x1d0>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da0a      	bge.n	80014fc <HAL_RCC_OscConfig+0x19c>
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	015b      	lsls	r3, r3, #5
 80014f4:	493d      	ldr	r1, [pc, #244]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60cb      	str	r3, [r1, #12]
 80014fa:	e019      	b.n	8001530 <HAL_RCC_OscConfig+0x1d0>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001504:	d30a      	bcc.n	800151c <HAL_RCC_OscConfig+0x1bc>
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4935      	ldr	r1, [pc, #212]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001516:	4313      	orrs	r3, r2
 8001518:	60cb      	str	r3, [r1, #12]
 800151a:	e009      	b.n	8001530 <HAL_RCC_OscConfig+0x1d0>
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	03db      	lsls	r3, r3, #15
 800152a:	4930      	ldr	r1, [pc, #192]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 800152c:	4313      	orrs	r3, r2
 800152e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	4618      	mov	r0, r3
 800153c:	f001 f8fa 	bl	8002734 <RCC_SetFlashLatencyFromMSIRange>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	f000 bdda 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800154c:	f001 f8d8 	bl	8002700 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_RCC_OscConfig+0x290>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff faa9 	bl	8000aac <HAL_InitTick>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 808a 	beq.w	800167e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800156a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800156e:	f000 bdc7 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d066      	beq.n	8001648 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001586:	f7ff fadb 	bl	8000b40 <HAL_GetTick>
 800158a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800158c:	e009      	b.n	80015a2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158e:	f7ff fad7 	bl	8000b40 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d902      	bls.n	80015a2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	f000 bdaf 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0ef      	beq.n	800158e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80015b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015b8:	6093      	str	r3, [r2, #8]
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	4909      	ldr	r1, [pc, #36]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80015d4:	d30e      	bcc.n	80015f4 <HAL_RCC_OscConfig+0x294>
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f023 021f 	bic.w	r2, r3, #31
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4902      	ldr	r1, [pc, #8]	; (80015ec <HAL_RCC_OscConfig+0x28c>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
 80015e8:	e04a      	b.n	8001680 <HAL_RCC_OscConfig+0x320>
 80015ea:	bf00      	nop
 80015ec:	46020c00 	.word	0x46020c00
 80015f0:	20000004 	.word	0x20000004
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da0a      	bge.n	8001612 <HAL_RCC_OscConfig+0x2b2>
 80015fc:	4b9b      	ldr	r3, [pc, #620]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	015b      	lsls	r3, r3, #5
 800160a:	4998      	ldr	r1, [pc, #608]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800160c:	4313      	orrs	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
 8001610:	e036      	b.n	8001680 <HAL_RCC_OscConfig+0x320>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161a:	d30a      	bcc.n	8001632 <HAL_RCC_OscConfig+0x2d2>
 800161c:	4b93      	ldr	r3, [pc, #588]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	029b      	lsls	r3, r3, #10
 800162a:	4990      	ldr	r1, [pc, #576]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800162c:	4313      	orrs	r3, r2
 800162e:	60cb      	str	r3, [r1, #12]
 8001630:	e026      	b.n	8001680 <HAL_RCC_OscConfig+0x320>
 8001632:	4b8e      	ldr	r3, [pc, #568]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	03db      	lsls	r3, r3, #15
 8001640:	498a      	ldr	r1, [pc, #552]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60cb      	str	r3, [r1, #12]
 8001646:	e01b      	b.n	8001680 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001648:	4b88      	ldr	r3, [pc, #544]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a87      	ldr	r2, [pc, #540]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001654:	f7ff fa74 	bl	8000b40 <HAL_GetTick>
 8001658:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800165a:	e009      	b.n	8001670 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800165c:	f7ff fa70 	bl	8000b40 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d902      	bls.n	8001670 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	f000 bd48 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001670:	4b7e      	ldr	r3, [pc, #504]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ef      	bne.n	800165c <HAL_RCC_OscConfig+0x2fc>
 800167c:	e000      	b.n	8001680 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800167e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8094 	beq.w	80017b6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001690:	2b08      	cmp	r3, #8
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x340>
 8001694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d110      	bne.n	80016bc <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	2b03      	cmp	r3, #3
 800169e:	d10d      	bne.n	80016bc <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	4b72      	ldr	r3, [pc, #456]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 8083 	beq.w	80017b4 <HAL_RCC_OscConfig+0x454>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d17e      	bne.n	80017b4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f000 bd22 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d106      	bne.n	80016d4 <HAL_RCC_OscConfig+0x374>
 80016c6:	4b69      	ldr	r3, [pc, #420]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a68      	ldr	r2, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e041      	b.n	8001758 <HAL_RCC_OscConfig+0x3f8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0x3a4>
 80016de:	4b63      	ldr	r3, [pc, #396]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a62      	ldr	r2, [pc, #392]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b60      	ldr	r3, [pc, #384]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5f      	ldr	r2, [pc, #380]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80016f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5c      	ldr	r2, [pc, #368]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e029      	b.n	8001758 <HAL_RCC_OscConfig+0x3f8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800170c:	d112      	bne.n	8001734 <HAL_RCC_OscConfig+0x3d4>
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b54      	ldr	r3, [pc, #336]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a53      	ldr	r2, [pc, #332]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b51      	ldr	r3, [pc, #324]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a50      	ldr	r2, [pc, #320]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e011      	b.n	8001758 <HAL_RCC_OscConfig+0x3f8>
 8001734:	4b4d      	ldr	r3, [pc, #308]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a4c      	ldr	r2, [pc, #304]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800173a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b4a      	ldr	r3, [pc, #296]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a49      	ldr	r2, [pc, #292]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a46      	ldr	r2, [pc, #280]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d014      	beq.n	800178a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8001760:	f7ff f9ee 	bl	8000b40 <HAL_GetTick>
 8001764:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001766:	e009      	b.n	800177c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff f9ea 	bl	8000b40 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d902      	bls.n	800177c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	f000 bcc2 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ef      	beq.n	8001768 <HAL_RCC_OscConfig+0x408>
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800178a:	f7ff f9d9 	bl	8000b40 <HAL_GetTick>
 800178e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001790:	e009      	b.n	80017a6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001792:	f7ff f9d5 	bl	8000b40 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b64      	cmp	r3, #100	; 0x64
 800179e:	d902      	bls.n	80017a6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f000 bcad 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ef      	bne.n	8001792 <HAL_RCC_OscConfig+0x432>
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d066      	beq.n	8001890 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_OscConfig+0x474>
 80017c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d11a      	bne.n	8001804 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d117      	bne.n	8001804 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_RCC_OscConfig+0x48e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f000 bc89 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	041b      	lsls	r3, r3, #16
 80017fc:	491b      	ldr	r1, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001802:	e045      	b.n	8001890 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d024      	beq.n	8001856 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a16      	ldr	r2, [pc, #88]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001818:	f7ff f992 	bl	8000b40 <HAL_GetTick>
 800181c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181e:	e009      	b.n	8001834 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff f98e 	bl	8000b40 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d902      	bls.n	8001834 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	f000 bc66 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	4907      	ldr	r1, [pc, #28]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001850:	4313      	orrs	r3, r2
 8001852:	610b      	str	r3, [r1, #16]
 8001854:	e01c      	b.n	8001890 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_RCC_OscConfig+0x50c>)
 800185c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001860:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001862:	f7ff f96d 	bl	8000b40 <HAL_GetTick>
 8001866:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001868:	e00c      	b.n	8001884 <HAL_RCC_OscConfig+0x524>
 800186a:	bf00      	nop
 800186c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff f966 	bl	8000b40 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d902      	bls.n	8001884 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	f000 bc3e 	b.w	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001884:	4baf      	ldr	r3, [pc, #700]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ef      	bne.n	8001870 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80c7 	beq.w	8001a2c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a4:	4ba7      	ldr	r3, [pc, #668]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d111      	bne.n	80018d6 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4ba4      	ldr	r3, [pc, #656]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 80018b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b8:	4aa2      	ldr	r2, [pc, #648]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80018c2:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018d6:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <HAL_RCC_OscConfig+0x7e8>)
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d118      	bne.n	8001914 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80018e2:	4b99      	ldr	r3, [pc, #612]	; (8001b48 <HAL_RCC_OscConfig+0x7e8>)
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	4a98      	ldr	r2, [pc, #608]	; (8001b48 <HAL_RCC_OscConfig+0x7e8>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff f927 	bl	8000b40 <HAL_GetTick>
 80018f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f6:	f7ff f923 	bl	8000b40 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e3fb      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001908:	4b8f      	ldr	r3, [pc, #572]	; (8001b48 <HAL_RCC_OscConfig+0x7e8>)
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d05f      	beq.n	80019dc <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800191c:	4b89      	ldr	r3, [pc, #548]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 800191e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001922:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699a      	ldr	r2, [r3, #24]
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	429a      	cmp	r2, r3
 8001930:	d037      	beq.n	80019a2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e3da      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01b      	beq.n	800198c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8001954:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800195a:	4a7a      	ldr	r2, [pc, #488]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 800195c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001960:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001964:	f7ff f8ec 	bl	8000b40 <HAL_GetTick>
 8001968:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff f8e8 	bl	8000b40 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e3c0      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800197e:	4b71      	ldr	r3, [pc, #452]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ef      	bne.n	800196c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800198c:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 800198e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001992:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	496a      	ldr	r1, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 800199c:	4313      	orrs	r3, r2
 800199e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80019a2:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 80019a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a8:	4a66      	ldr	r2, [pc, #408]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 80019aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80019b2:	f7ff f8c5 	bl	8000b40 <HAL_GetTick>
 80019b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ba:	f7ff f8c1 	bl	8000b40 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e399      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80019cc:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 80019ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0ef      	beq.n	80019ba <HAL_RCC_OscConfig+0x65a>
 80019da:	e01b      	b.n	8001a14 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80019dc:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 80019de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019e2:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 80019e4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80019e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80019ec:	f7ff f8a8 	bl	8000b40 <HAL_GetTick>
 80019f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f4:	f7ff f8a4 	bl	8000b40 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e37c      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a06:	4b4f      	ldr	r3, [pc, #316]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ef      	bne.n	80019f4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1c:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a22:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8112 	beq.w	8001c5e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d111      	bne.n	8001a72 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a54:	4a3b      	ldr	r2, [pc, #236]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001a5e:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <HAL_RCC_OscConfig+0x7e8>)
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d118      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001a7e:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <HAL_RCC_OscConfig+0x7e8>)
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <HAL_RCC_OscConfig+0x7e8>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f859 	bl	8000b40 <HAL_GetTick>
 8001a8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7ff f855 	bl	8000b40 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e32d      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_RCC_OscConfig+0x7e8>)
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01f      	beq.n	8001afc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d010      	beq.n	8001aea <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ace:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ade:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ae8:	e018      	b.n	8001b1c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001afa:	e00f      	b.n	8001b1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_RCC_OscConfig+0x7e4>)
 8001b14:	f023 0304 	bic.w	r3, r3, #4
 8001b18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d058      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8001b24:	f7ff f80c 	bl	8000b40 <HAL_GetTick>
 8001b28:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2a:	e00f      	b.n	8001b4c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f808 	bl	8000b40 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d906      	bls.n	8001b4c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e2de      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
 8001b42:	bf00      	nop
 8001b44:	46020c00 	.word	0x46020c00
 8001b48:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4c:	4b9c      	ldr	r3, [pc, #624]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0e8      	beq.n	8001b2c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d01b      	beq.n	8001b9e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b66:	4b96      	ldr	r3, [pc, #600]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b6c:	4a94      	ldr	r2, [pc, #592]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f7fe ffe2 	bl	8000b40 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e2b8      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b8e:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ed      	beq.n	8001b78 <HAL_RCC_OscConfig+0x818>
 8001b9c:	e053      	b.n	8001c46 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b9e:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba4:	4a86      	ldr	r2, [pc, #536]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001baa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7fe ffc6 	bl	8000b40 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e29c      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bc6:	4b7e      	ldr	r3, [pc, #504]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ed      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x850>
 8001bd4:	e037      	b.n	8001c46 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001bd6:	f7fe ffb3 	bl	8000b40 <HAL_GetTick>
 8001bda:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7fe ffaf 	bl	8000b40 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e285      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf4:	4b72      	ldr	r3, [pc, #456]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ed      	bne.n	8001bde <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001c02:	4b6f      	ldr	r3, [pc, #444]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01a      	beq.n	8001c46 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c10:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c16:	4a6a      	ldr	r2, [pc, #424]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7fe ff8d 	bl	8000b40 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e263      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c38:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ed      	bne.n	8001c22 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c54:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d036      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d019      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001c72:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c7c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c7e:	f7fe ff5f 	bl	8000b40 <HAL_GetTick>
 8001c82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c86:	f7fe ff5b 	bl	8000b40 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e233      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c98:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x926>
 8001ca4:	e018      	b.n	8001cd8 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cb0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001cb2:	f7fe ff45 	bl	8000b40 <HAL_GetTick>
 8001cb6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cba:	f7fe ff41 	bl	8000b40 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e219      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ccc:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f0      	bne.n	8001cba <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d036      	beq.n	8001d52 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d019      	beq.n	8001d20 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a33      	ldr	r2, [pc, #204]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001cf8:	f7fe ff22 	bl	8000b40 <HAL_GetTick>
 8001cfc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001d00:	f7fe ff1e 	bl	8000b40 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1f6      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x9a0>
 8001d1e:	e018      	b.n	8001d52 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001d2c:	f7fe ff08 	bl	8000b40 <HAL_GetTick>
 8001d30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001d34:	f7fe ff04 	bl	8000b40 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1dc      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d07f      	beq.n	8001e5e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d062      	beq.n	8001e2c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d70:	6093      	str	r3, [r2, #8]
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	4910      	ldr	r1, [pc, #64]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001d8c:	d309      	bcc.n	8001da2 <HAL_RCC_OscConfig+0xa42>
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f023 021f 	bic.w	r2, r3, #31
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4909      	ldr	r1, [pc, #36]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
 8001da0:	e02a      	b.n	8001df8 <HAL_RCC_OscConfig+0xa98>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	da0c      	bge.n	8001dc4 <HAL_RCC_OscConfig+0xa64>
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	015b      	lsls	r3, r3, #5
 8001db8:	4901      	ldr	r1, [pc, #4]	; (8001dc0 <HAL_RCC_OscConfig+0xa60>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60cb      	str	r3, [r1, #12]
 8001dbe:	e01b      	b.n	8001df8 <HAL_RCC_OscConfig+0xa98>
 8001dc0:	46020c00 	.word	0x46020c00
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dcc:	d30a      	bcc.n	8001de4 <HAL_RCC_OscConfig+0xa84>
 8001dce:	4ba5      	ldr	r3, [pc, #660]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	49a1      	ldr	r1, [pc, #644]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60cb      	str	r3, [r1, #12]
 8001de2:	e009      	b.n	8001df8 <HAL_RCC_OscConfig+0xa98>
 8001de4:	4b9f      	ldr	r3, [pc, #636]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	03db      	lsls	r3, r3, #15
 8001df2:	499c      	ldr	r1, [pc, #624]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001df8:	4b9a      	ldr	r3, [pc, #616]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a99      	ldr	r2, [pc, #612]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e04:	f7fe fe9c 	bl	8000b40 <HAL_GetTick>
 8001e08:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001e0c:	f7fe fe98 	bl	8000b40 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e170      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001e1e:	4b91      	ldr	r3, [pc, #580]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xaac>
 8001e2a:	e018      	b.n	8001e5e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001e2c:	4b8d      	ldr	r3, [pc, #564]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a8c      	ldr	r2, [pc, #560]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001e32:	f023 0310 	bic.w	r3, r3, #16
 8001e36:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e38:	f7fe fe82 	bl	8000b40 <HAL_GetTick>
 8001e3c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001e40:	f7fe fe7e 	bl	8000b40 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e156      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001e52:	4b84      	ldr	r3, [pc, #528]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 814b 	beq.w	80020fe <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6e:	4b7d      	ldr	r3, [pc, #500]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	f000 80fa 	beq.w	8002070 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	f040 80cc 	bne.w	800201e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b77      	ldr	r3, [pc, #476]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a76      	ldr	r2, [pc, #472]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e90:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e92:	f7fe fe55 	bl	8000b40 <HAL_GetTick>
 8001e96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7fe fe51 	bl	8000b40 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e129      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001eac:	4b6d      	ldr	r3, [pc, #436]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d111      	bne.n	8001eea <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ecc:	4a65      	ldr	r2, [pc, #404]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ed6:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001eea:	4b5f      	ldr	r3, [pc, #380]	; (8002068 <HAL_RCC_OscConfig+0xd08>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <HAL_RCC_OscConfig+0xd08>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	4a59      	ldr	r2, [pc, #356]	; (8002068 <HAL_RCC_OscConfig+0xd08>)
 8001f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f08:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001f0a:	4b56      	ldr	r3, [pc, #344]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f1e:	3a01      	subs	r2, #1
 8001f20:	0212      	lsls	r2, r2, #8
 8001f22:	4311      	orrs	r1, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	494e      	ldr	r1, [pc, #312]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8001f30:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_RCC_OscConfig+0xd0c>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f3c:	3a01      	subs	r2, #1
 8001f3e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f46:	3a01      	subs	r2, #1
 8001f48:	0252      	lsls	r2, r2, #9
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f52:	3a01      	subs	r2, #1
 8001f54:	0412      	lsls	r2, r2, #16
 8001f56:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001f60:	3a01      	subs	r2, #1
 8001f62:	0612      	lsls	r2, r2, #24
 8001f64:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	493e      	ldr	r1, [pc, #248]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f76:	f023 0310 	bic.w	r3, r3, #16
 8001f7a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001f7c:	4b39      	ldr	r3, [pc, #228]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f8c:	00d2      	lsls	r2, r2, #3
 8001f8e:	4935      	ldr	r1, [pc, #212]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f94:	4b33      	ldr	r3, [pc, #204]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	4a32      	ldr	r2, [pc, #200]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	f023 020c 	bic.w	r2, r3, #12
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	492d      	ldr	r1, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001fb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001fba:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_RCC_OscConfig+0xd08>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0xd08>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001fc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd4:	4a23      	ldr	r2, [pc, #140]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001fd6:	f023 0304 	bic.w	r3, r3, #4
 8001fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	4a20      	ldr	r2, [pc, #128]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8001ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ff6:	f7fe fda3 	bl	8000b40 <HAL_GetTick>
 8001ffa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe fd9f 	bl	8000b40 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e077      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0xc9e>
 800201c:	e06f      	b.n	80020fe <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8002024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002028:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800202a:	f7fe fd89 	bl	8000b40 <HAL_GetTick>
 800202e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7fe fd85 	bl	8000b40 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e05d      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	4a03      	ldr	r2, [pc, #12]	; (8002064 <HAL_RCC_OscConfig+0xd04>)
 8002056:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	6293      	str	r3, [r2, #40]	; 0x28
 8002060:	e04d      	b.n	80020fe <HAL_RCC_OscConfig+0xd9e>
 8002062:	bf00      	nop
 8002064:	46020c00 	.word	0x46020c00
 8002068:	46020800 	.word	0x46020800
 800206c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_RCC_OscConfig+0xda8>)
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_OscConfig+0xda8>)
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	2b01      	cmp	r3, #1
 8002082:	d03a      	beq.n	80020fa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0203 	and.w	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d133      	bne.n	80020fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d12a      	bne.n	80020fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	0b1b      	lsrs	r3, r3, #12
 80020a8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d122      	bne.n	80020fa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020be:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d11a      	bne.n	80020fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	0a5b      	lsrs	r3, r3, #9
 80020c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d111      	bne.n	80020fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d108      	bne.n	80020fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	0e1b      	lsrs	r3, r3, #24
 80020ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3738      	adds	r7, #56	; 0x38
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	46020c00 	.word	0x46020c00

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e1d9      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b9b      	ldr	r3, [pc, #620]	; (8002390 <HAL_RCC_ClockConfig+0x284>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b98      	ldr	r3, [pc, #608]	; (8002390 <HAL_RCC_ClockConfig+0x284>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 020f 	bic.w	r2, r3, #15
 8002136:	4996      	ldr	r1, [pc, #600]	; (8002390 <HAL_RCC_ClockConfig+0x284>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b94      	ldr	r3, [pc, #592]	; (8002390 <HAL_RCC_ClockConfig+0x284>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e1c1      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	4b8c      	ldr	r3, [pc, #560]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002168:	429a      	cmp	r2, r3
 800216a:	d908      	bls.n	800217e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800216c:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	4986      	ldr	r1, [pc, #536]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 800217a:	4313      	orrs	r3, r2
 800217c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d012      	beq.n	80021b0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	4b81      	ldr	r3, [pc, #516]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002198:	429a      	cmp	r2, r3
 800219a:	d909      	bls.n	80021b0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800219c:	4b7d      	ldr	r3, [pc, #500]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	497a      	ldr	r1, [pc, #488]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d010      	beq.n	80021de <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4b74      	ldr	r3, [pc, #464]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d908      	bls.n	80021de <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b71      	ldr	r3, [pc, #452]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	496e      	ldr	r1, [pc, #440]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d010      	beq.n	800220c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	4b69      	ldr	r3, [pc, #420]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d908      	bls.n	800220c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80021fa:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	f023 020f 	bic.w	r2, r3, #15
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	4963      	ldr	r1, [pc, #396]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002208:	4313      	orrs	r3, r2
 800220a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80d2 	beq.w	80023be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d143      	bne.n	80022ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b5b      	ldr	r3, [pc, #364]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d110      	bne.n	8002256 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b57      	ldr	r3, [pc, #348]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223a:	4a56      	ldr	r2, [pc, #344]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002256:	f7fe fc73 	bl	8000b40 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800225c:	4b4e      	ldr	r3, [pc, #312]	; (8002398 <HAL_RCC_ClockConfig+0x28c>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00f      	beq.n	8002288 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800226a:	f7fe fc69 	bl	8000b40 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e12b      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_ClockConfig+0x28c>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002294:	4a3f      	ldr	r2, [pc, #252]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d121      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e112      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d115      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e106      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0fa      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0f2      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4926      	ldr	r1, [pc, #152]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002300:	f7fe fc1e 	bl	8000b40 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d112      	bne.n	8002334 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7fe fc16 	bl	8000b40 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0d6      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d1ee      	bne.n	8002310 <HAL_RCC_ClockConfig+0x204>
 8002332:	e044      	b.n	80023be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d112      	bne.n	8002362 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233e:	f7fe fbff 	bl	8000b40 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0bf      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d1ee      	bne.n	800233e <HAL_RCC_ClockConfig+0x232>
 8002360:	e02d      	b.n	80023be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d123      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe fbe8 	bl	8000b40 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0a8      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HAL_RCC_ClockConfig+0x288>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ee      	bne.n	800236c <HAL_RCC_ClockConfig+0x260>
 800238e:	e016      	b.n	80023be <HAL_RCC_ClockConfig+0x2b2>
 8002390:	40022000 	.word	0x40022000
 8002394:	46020c00 	.word	0x46020c00
 8002398:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fe fbd0 	bl	8000b40 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e090      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b2:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d1ee      	bne.n	800239c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d208      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80023da:	4b40      	ldr	r3, [pc, #256]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f023 020f 	bic.w	r2, r3, #15
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	493d      	ldr	r1, [pc, #244]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b3c      	ldr	r3, [pc, #240]	; (80024e0 <HAL_RCC_ClockConfig+0x3d4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d210      	bcs.n	800241c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_ClockConfig+0x3d4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 020f 	bic.w	r2, r3, #15
 8002402:	4937      	ldr	r1, [pc, #220]	; (80024e0 <HAL_RCC_ClockConfig+0x3d4>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b35      	ldr	r3, [pc, #212]	; (80024e0 <HAL_RCC_ClockConfig+0x3d4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e05b      	b.n	80024d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d010      	beq.n	800244a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002434:	429a      	cmp	r2, r3
 8002436:	d208      	bcs.n	800244a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4925      	ldr	r1, [pc, #148]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 8002446:	4313      	orrs	r3, r2
 8002448:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002464:	429a      	cmp	r2, r3
 8002466:	d209      	bcs.n	800247c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002468:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	4919      	ldr	r1, [pc, #100]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002494:	429a      	cmp	r2, r3
 8002496:	d208      	bcs.n	80024aa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	490d      	ldr	r1, [pc, #52]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024aa:	f000 f821 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_RCC_ClockConfig+0x3d0>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	490a      	ldr	r1, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x3d8>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x3dc>)
 80024c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x3e0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe faef 	bl	8000aac <HAL_InitTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	46020c00 	.word	0x46020c00
 80024e0:	40022000 	.word	0x40022000
 80024e4:	080028b0 	.word	0x080028b0
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b08b      	sub	sp, #44	; 0x2c
 80024f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002508:	4b78      	ldr	r3, [pc, #480]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x34>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d121      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d11e      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002524:	4b71      	ldr	r3, [pc, #452]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002530:	4b6e      	ldr	r3, [pc, #440]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002536:	0b1b      	lsrs	r3, r3, #12
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
 800253e:	e005      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	0f1b      	lsrs	r3, r3, #28
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800254c:	4a68      	ldr	r2, [pc, #416]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d110      	bne.n	800257e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002560:	e00d      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002562:	4b62      	ldr	r3, [pc, #392]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b04      	cmp	r3, #4
 800256c:	d102      	bne.n	8002574 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800256e:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002570:	623b      	str	r3, [r7, #32]
 8002572:	e004      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b08      	cmp	r3, #8
 8002578:	d101      	bne.n	800257e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800257a:	4b5e      	ldr	r3, [pc, #376]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800257c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	f040 80ac 	bne.w	80026de <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002586:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002590:	4b56      	ldr	r3, [pc, #344]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	3301      	adds	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800259e:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80025aa:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	08db      	lsrs	r3, r3, #3
 80025b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8086 	beq.w	80026da <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d003      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0xec>
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d022      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x130>
 80025da:	e043      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e6:	eddf 6a44 	vldr	s13, [pc, #272]	; 80026f8 <HAL_RCC_GetSysClockFreq+0x208>
 80025ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ee:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80025fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8002602:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80026fc <HAL_RCC_GetSysClockFreq+0x20c>
 8002606:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800260a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800260e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002612:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800261e:	e046      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262a:	eddf 6a33 	vldr	s13, [pc, #204]	; 80026f8 <HAL_RCC_GetSysClockFreq+0x208>
 800262e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002632:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002642:	ed97 6a01 	vldr	s12, [r7, #4]
 8002646:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80026fc <HAL_RCC_GetSysClockFreq+0x20c>
 800264a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800264e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002656:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002662:	e024      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800268c:	ed97 6a01 	vldr	s12, [r7, #4]
 8002690:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80026fc <HAL_RCC_GetSysClockFreq+0x20c>
 8002694:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002698:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800269c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80026ac:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b2:	0e1b      	lsrs	r3, r3, #24
 80026b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b8:	3301      	adds	r3, #1
 80026ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80026ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d2:	ee17 3a90 	vmov	r3, s15
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	e001      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80026de:	6a3b      	ldr	r3, [r7, #32]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	372c      	adds	r7, #44	; 0x2c
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	46020c00 	.word	0x46020c00
 80026f0:	080028c0 	.word	0x080028c0
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	4b742400 	.word	0x4b742400
 80026fc:	46000000 	.word	0x46000000

08002700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002704:	f7ff fef4 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCC_GetHCLKFreq+0x28>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	4906      	ldr	r1, [pc, #24]	; (800272c <HAL_RCC_GetHCLKFreq+0x2c>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <HAL_RCC_GetHCLKFreq+0x30>)
 800271c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_RCC_GetHCLKFreq+0x30>)
 8002720:	681b      	ldr	r3, [r3, #0]
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	46020c00 	.word	0x46020c00
 800272c:	080028b0 	.word	0x080028b0
 8002730:	20000000 	.word	0x20000000

08002734 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800273c:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800274a:	f7fe fd8b 	bl	8001264 <HAL_PWREx_GetVoltageRange>
 800274e:	6178      	str	r0, [r7, #20]
 8002750:	e019      	b.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002758:	4a37      	ldr	r2, [pc, #220]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002762:	4b35      	ldr	r3, [pc, #212]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002770:	f7fe fd78 	bl	8001264 <HAL_PWREx_GetVoltageRange>
 8002774:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002776:	4b30      	ldr	r3, [pc, #192]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277c:	4a2e      	ldr	r2, [pc, #184]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800277e:	f023 0304 	bic.w	r3, r3, #4
 8002782:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800278c:	d003      	beq.n	8002796 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002794:	d109      	bne.n	80027aa <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800279c:	d202      	bcs.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800279e:	2301      	movs	r3, #1
 80027a0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80027a2:	e033      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80027a8:	e030      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027b0:	d208      	bcs.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b8:	d102      	bne.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80027ba:	2303      	movs	r3, #3
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	e025      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e035      	b.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ca:	d90f      	bls.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80027d8:	d902      	bls.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e015      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80027e0:	2301      	movs	r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e012      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e00f      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f2:	d109      	bne.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fa:	d102      	bne.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	e004      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002802:	2302      	movs	r3, #2
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	e001      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002808:	2301      	movs	r3, #1
 800280a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 020f 	bic.w	r2, r3, #15
 8002814:	4909      	ldr	r1, [pc, #36]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	46020c00 	.word	0x46020c00
 800283c:	40022000 	.word	0x40022000

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	4d0d      	ldr	r5, [pc, #52]	; (8002878 <__libc_init_array+0x38>)
 8002844:	2600      	movs	r6, #0
 8002846:	4c0d      	ldr	r4, [pc, #52]	; (800287c <__libc_init_array+0x3c>)
 8002848:	1b64      	subs	r4, r4, r5
 800284a:	10a4      	asrs	r4, r4, #2
 800284c:	42a6      	cmp	r6, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	4d0b      	ldr	r5, [pc, #44]	; (8002880 <__libc_init_array+0x40>)
 8002852:	2600      	movs	r6, #0
 8002854:	4c0b      	ldr	r4, [pc, #44]	; (8002884 <__libc_init_array+0x44>)
 8002856:	f000 f81f 	bl	8002898 <_init>
 800285a:	1b64      	subs	r4, r4, r5
 800285c:	10a4      	asrs	r4, r4, #2
 800285e:	42a6      	cmp	r6, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	f855 3b04 	ldr.w	r3, [r5], #4
 8002868:	3601      	adds	r6, #1
 800286a:	4798      	blx	r3
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002872:	3601      	adds	r6, #1
 8002874:	4798      	blx	r3
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	08002980 	.word	0x08002980
 800287c:	08002980 	.word	0x08002980
 8002880:	08002980 	.word	0x08002980
 8002884:	08002984 	.word	0x08002984

08002888 <memset>:
 8002888:	4402      	add	r2, r0
 800288a:	4603      	mov	r3, r0
 800288c:	4293      	cmp	r3, r2
 800288e:	d100      	bne.n	8002892 <memset+0xa>
 8002890:	4770      	bx	lr
 8002892:	f803 1b01 	strb.w	r1, [r3], #1
 8002896:	e7f9      	b.n	800288c <memset+0x4>

08002898 <_init>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr

080028a4 <_fini>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr
