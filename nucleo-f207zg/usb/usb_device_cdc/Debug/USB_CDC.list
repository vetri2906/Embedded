
USB_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006578  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006770  08006770  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006770  08006770  00016770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006778  08006778  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08006780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b10  200001d0  08006950  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce0  08006950  00021ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c987  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a33  00000000  00000000  0002cbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082f  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002173e  00000000  00000000  0003094f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1a5  00000000  00000000  0005208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc053  00000000  00000000  00061232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f40  00000000  00000000  0011d288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001d0 	.word	0x200001d0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080066e4 	.word	0x080066e4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001d4 	.word	0x200001d4
 80001c0:	080066e4 	.word	0x080066e4

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	468e      	mov	lr, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14c      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d967      	bls.n	80002ea <__udivmoddi4+0xe6>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b153      	cbz	r3, 8000236 <__udivmoddi4+0x32>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	fa01 fe03 	lsl.w	lr, r1, r3
 800022c:	fa20 f202 	lsr.w	r2, r0, r2
 8000230:	ea42 0e0e 	orr.w	lr, r2, lr
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fbbe f1f7 	udiv	r1, lr, r7
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fb07 ee11 	mls	lr, r7, r1, lr
 8000246:	fb01 f005 	mul.w	r0, r1, r5
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x66>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 3eff 	add.w	lr, r1, #4294967295
 800025c:	f080 8119 	bcs.w	8000492 <__udivmoddi4+0x28e>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8116 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000270:	fb07 2210 	mls	r2, r7, r0, r2
 8000274:	fb00 f505 	mul.w	r5, r0, r5
 8000278:	b2a4      	uxth	r4, r4
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8104 	bcs.w	8000496 <__udivmoddi4+0x292>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8101 	bls.w	8000496 <__udivmoddi4+0x292>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	2100      	movs	r1, #0
 800029e:	1b64      	subs	r4, r4, r5
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xc0>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ea 	beq.w	800048c <__udivmoddi4+0x288>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d148      	bne.n	800035e <__udivmoddi4+0x15a>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xd2>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4696      	mov	lr, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002e4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa6>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xea>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 808e 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f8:	1a88      	subs	r0, r1, r2
 80002fa:	2101      	movs	r1, #1
 80002fc:	0c17      	lsrs	r7, r2, #16
 80002fe:	fa1f fe82 	uxth.w	lr, r2
 8000302:	fbb0 f5f7 	udiv	r5, r0, r7
 8000306:	fb07 0015 	mls	r0, r7, r5, r0
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000310:	fb0e f005 	mul.w	r0, lr, r5
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x126>
 8000318:	eb1c 0202 	adds.w	r2, ip, r2
 800031c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 80cc 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000328:	4645      	mov	r5, r8
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033e:	45a6      	cmp	lr, r4
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x150>
 8000342:	eb1c 0404 	adds.w	r4, ip, r4
 8000346:	f100 32ff 	add.w	r2, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14e>
 800034c:	45a6      	cmp	lr, r4
 800034e:	f200 80b4 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 8000352:	4610      	mov	r0, r2
 8000354:	eba4 040e 	sub.w	r4, r4, lr
 8000358:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035c:	e7a0      	b.n	80002a0 <__udivmoddi4+0x9c>
 800035e:	f1c1 0720 	rsb	r7, r1, #32
 8000362:	408b      	lsls	r3, r1
 8000364:	fa22 fc07 	lsr.w	ip, r2, r7
 8000368:	ea4c 0c03 	orr.w	ip, ip, r3
 800036c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	fbba f8f9 	udiv	r8, sl, r9
 8000378:	408d      	lsls	r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	432b      	orrs	r3, r5
 8000388:	fa00 f501 	lsl.w	r5, r0, r1
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	0c1c      	lsrs	r4, r3, #16
 8000392:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000396:	42a0      	cmp	r0, r4
 8000398:	fa02 f201 	lsl.w	r2, r2, r1
 800039c:	d90b      	bls.n	80003b6 <__udivmoddi4+0x1b2>
 800039e:	eb1c 0404 	adds.w	r4, ip, r4
 80003a2:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a6:	f080 8086 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003aa:	42a0      	cmp	r0, r4
 80003ac:	f240 8083 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003b0:	f1a8 0802 	sub.w	r8, r8, #2
 80003b4:	4464      	add	r4, ip
 80003b6:	1a24      	subs	r4, r4, r0
 80003b8:	b298      	uxth	r0, r3
 80003ba:	fbb4 f3f9 	udiv	r3, r4, r9
 80003be:	fb09 4413 	mls	r4, r9, r3, r4
 80003c2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d6:	d26a      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d968      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003dc:	3b02      	subs	r3, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003e4:	fba0 9302 	umull	r9, r3, r0, r2
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	429c      	cmp	r4, r3
 80003ee:	46c8      	mov	r8, r9
 80003f0:	469e      	mov	lr, r3
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d067      	beq.n	80004ca <__udivmoddi4+0x2c6>
 80003fa:	ebb5 0308 	subs.w	r3, r5, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	40cb      	lsrs	r3, r1
 8000404:	fa04 f707 	lsl.w	r7, r4, r7
 8000408:	431f      	orrs	r7, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	2100      	movs	r1, #0
 8000412:	e74a      	b.n	80002aa <__udivmoddi4+0xa6>
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	f1c3 0020 	rsb	r0, r3, #32
 800041c:	40c1      	lsrs	r1, r0
 800041e:	409d      	lsls	r5, r3
 8000420:	fa24 f000 	lsr.w	r0, r4, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	4328      	orrs	r0, r5
 800042a:	fbb1 f5f7 	udiv	r5, r1, r7
 800042e:	fb07 1115 	mls	r1, r7, r5, r1
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	0c02      	lsrs	r2, r0, #16
 8000438:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800043c:	fb05 f10e 	mul.w	r1, r5, lr
 8000440:	4291      	cmp	r1, r2
 8000442:	fa04 f403 	lsl.w	r4, r4, r3
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x256>
 8000448:	eb1c 0202 	adds.w	r2, ip, r2
 800044c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	4291      	cmp	r1, r2
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3d02      	subs	r5, #2
 8000458:	4462      	add	r2, ip
 800045a:	1a52      	subs	r2, r2, r1
 800045c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000460:	fb07 2211 	mls	r2, r7, r1, r2
 8000464:	b280      	uxth	r0, r0
 8000466:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800046a:	fb01 f20e 	mul.w	r2, r1, lr
 800046e:	4282      	cmp	r2, r0
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x280>
 8000472:	eb1c 0000 	adds.w	r0, ip, r0
 8000476:	f101 38ff 	add.w	r8, r1, #4294967295
 800047a:	d216      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047c:	4282      	cmp	r2, r0
 800047e:	d914      	bls.n	80004aa <__udivmoddi4+0x2a6>
 8000480:	3902      	subs	r1, #2
 8000482:	4460      	add	r0, ip
 8000484:	1a80      	subs	r0, r0, r2
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4631      	mov	r1, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e70b      	b.n	80002aa <__udivmoddi4+0xa6>
 8000492:	4671      	mov	r1, lr
 8000494:	e6e9      	b.n	800026a <__udivmoddi4+0x66>
 8000496:	4610      	mov	r0, r2
 8000498:	e6fe      	b.n	8000298 <__udivmoddi4+0x94>
 800049a:	454d      	cmp	r5, r9
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb9 0802 	subs.w	r8, r9, r2
 80004a2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7a5      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004aa:	4641      	mov	r1, r8
 80004ac:	e7ea      	b.n	8000484 <__udivmoddi4+0x280>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b2:	4645      	mov	r5, r8
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	46d0      	mov	r8, sl
 80004b8:	e77d      	b.n	80003b6 <__udivmoddi4+0x1b2>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e749      	b.n	8000354 <__udivmoddi4+0x150>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e731      	b.n	800032a <__udivmoddi4+0x126>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xdc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e6ed      	b.n	80002aa <__udivmoddi4+0xa6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b598      	push	{r3, r4, r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa2a 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f818 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f85e 	bl	80005a0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f005 fab8 	bl	8005a58 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    CDC_Transmit_FS(data, strlen(data));
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <main+0x38>)
 80004ea:	681c      	ldr	r4, [r3, #0]
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <main+0x38>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff fe67 	bl	80001c4 <strlen>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4619      	mov	r1, r3
 80004fa:	4620      	mov	r0, r4
 80004fc:	f005 fb6a 	bl	8005bd4 <CDC_Transmit_FS>
	  HAL_Delay (1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 fa82 	bl	8000a0c <HAL_Delay>
  {
 8000508:	e7ee      	b.n	80004e8 <main+0x14>
 800050a:	bf00      	nop
 800050c:	20000000 	.word	0x20000000

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b092      	sub	sp, #72	; 0x48
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0318 	add.w	r3, r7, #24
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f006 f854 	bl	80065cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000532:	2302      	movs	r3, #2
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	2310      	movs	r3, #16
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000542:	2300      	movs	r3, #0
 8000544:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000546:	230d      	movs	r3, #13
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 800054a:	23c3      	movs	r3, #195	; 0xc3
 800054c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000552:	2305      	movs	r3, #5
 8000554:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	4618      	mov	r0, r3
 800055c:	f001 ff5e 	bl	800241c <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000566:	f000 f91f 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2302      	movs	r3, #2
 8000570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000576:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800057a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800057c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000580:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2103      	movs	r1, #3
 8000586:	4618      	mov	r0, r3
 8000588:	f002 f99c 	bl	80028c4 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000592:	f000 f909 	bl	80007a8 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3748      	adds	r7, #72	; 0x48
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	; 0x30
 80005a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
 80005ba:	4b75      	ldr	r3, [pc, #468]	; (8000790 <MX_GPIO_Init+0x1f0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a74      	ldr	r2, [pc, #464]	; (8000790 <MX_GPIO_Init+0x1f0>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b72      	ldr	r3, [pc, #456]	; (8000790 <MX_GPIO_Init+0x1f0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	4b6e      	ldr	r3, [pc, #440]	; (8000790 <MX_GPIO_Init+0x1f0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a6d      	ldr	r2, [pc, #436]	; (8000790 <MX_GPIO_Init+0x1f0>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b6b      	ldr	r3, [pc, #428]	; (8000790 <MX_GPIO_Init+0x1f0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	4b67      	ldr	r3, [pc, #412]	; (8000790 <MX_GPIO_Init+0x1f0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a66      	ldr	r2, [pc, #408]	; (8000790 <MX_GPIO_Init+0x1f0>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b64      	ldr	r3, [pc, #400]	; (8000790 <MX_GPIO_Init+0x1f0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b60      	ldr	r3, [pc, #384]	; (8000790 <MX_GPIO_Init+0x1f0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a5f      	ldr	r2, [pc, #380]	; (8000790 <MX_GPIO_Init+0x1f0>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b5d      	ldr	r3, [pc, #372]	; (8000790 <MX_GPIO_Init+0x1f0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b59      	ldr	r3, [pc, #356]	; (8000790 <MX_GPIO_Init+0x1f0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a58      	ldr	r2, [pc, #352]	; (8000790 <MX_GPIO_Init+0x1f0>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b56      	ldr	r3, [pc, #344]	; (8000790 <MX_GPIO_Init+0x1f0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b52      	ldr	r3, [pc, #328]	; (8000790 <MX_GPIO_Init+0x1f0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a51      	ldr	r2, [pc, #324]	; (8000790 <MX_GPIO_Init+0x1f0>)
 800064c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b4f      	ldr	r3, [pc, #316]	; (8000790 <MX_GPIO_Init+0x1f0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f244 0181 	movw	r1, #16513	; 0x4081
 8000664:	484b      	ldr	r0, [pc, #300]	; (8000794 <MX_GPIO_Init+0x1f4>)
 8000666:	f000 fca1 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	484a      	ldr	r0, [pc, #296]	; (8000798 <MX_GPIO_Init+0x1f8>)
 8000670:	f000 fc9c 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800067a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4844      	ldr	r0, [pc, #272]	; (800079c <MX_GPIO_Init+0x1fc>)
 800068c:	f000 faf0 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000690:	2332      	movs	r3, #50	; 0x32
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006a0:	230b      	movs	r3, #11
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	483c      	ldr	r0, [pc, #240]	; (800079c <MX_GPIO_Init+0x1fc>)
 80006ac:	f000 fae0 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006b0:	2386      	movs	r3, #134	; 0x86
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c0:	230b      	movs	r3, #11
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4835      	ldr	r0, [pc, #212]	; (80007a0 <MX_GPIO_Init+0x200>)
 80006cc:	f000 fad0 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006d0:	f244 0381 	movw	r3, #16513	; 0x4081
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	482a      	ldr	r0, [pc, #168]	; (8000794 <MX_GPIO_Init+0x1f4>)
 80006ea:	f000 fac1 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000700:	230b      	movs	r3, #11
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4822      	ldr	r0, [pc, #136]	; (8000794 <MX_GPIO_Init+0x1f4>)
 800070c:	f000 fab0 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000710:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000722:	2307      	movs	r3, #7
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	481d      	ldr	r0, [pc, #116]	; (80007a4 <MX_GPIO_Init+0x204>)
 800072e:	f000 fa9f 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000732:	2340      	movs	r3, #64	; 0x40
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <MX_GPIO_Init+0x1f8>)
 800074a:	f000 fa91 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_GPIO_Init+0x1f8>)
 8000762:	f000 fa85 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000766:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000778:	230b      	movs	r3, #11
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_GPIO_Init+0x1f8>)
 8000784:	f000 fa74 	bl	8000c70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	bf00      	nop
 800078a:	3730      	adds	r7, #48	; 0x30
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020400 	.word	0x40020400
 8000798:	40021800 	.word	0x40021800
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020c00 	.word	0x40020c00

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x48>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x48>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x48>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_MspInit+0x48>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_MspInit+0x48>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_MspInit+0x48>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40023800 	.word	0x40023800

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000846:	f000 f8c5 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <OTG_FS_IRQHandler+0x10>)
 8000856:	f000 fcf2 	bl	800123e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200016bc 	.word	0x200016bc

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f005 feb2 	bl	80065fc <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <_sbrk+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20020000 	.word	0x20020000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	200001ec 	.word	0x200001ec
 80008cc:	20001ce0 	.word	0x20001ce0

080008d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80008e0:	f7ff fff6 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f005 fe7d 	bl	8006608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fde1 	bl	80004d4 <main>
  bx  lr
 8000912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000920:	08006780 	.word	0x08006780
  ldr r2, =_sbss
 8000924:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000928:	20001ce0 	.word	0x20001ce0

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_Init+0x40>)
 800093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_Init+0x40>)
 8000946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x40>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f947 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff ff26 	bl	80007b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f95f 	bl	8000c56 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f927 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000004 	.word	0x20000004
 80009cc:	2000000c 	.word	0x2000000c
 80009d0:	20000008 	.word	0x20000008

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	200001f0 	.word	0x200001f0

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	200001f0 	.word	0x200001f0

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000000c 	.word	0x2000000c

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4906      	ldr	r1, [pc, #24]	; (8000aec <__NVIC_EnableIRQ+0x34>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff90 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff2d 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff42 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff90 	bl	8000b44 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5f 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff35 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffa2 	bl	8000ba8 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7e:	e16f      	b.n	8000f60 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	2101      	movs	r1, #1
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 8161 	beq.w	8000f5a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d005      	beq.n	8000cb0 <HAL_GPIO_Init+0x40>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d130      	bne.n	8000d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	f003 0201 	and.w	r2, r3, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d017      	beq.n	8000d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d123      	bne.n	8000da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	08da      	lsrs	r2, r3, #3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3208      	adds	r2, #8
 8000d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	220f      	movs	r2, #15
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	691a      	ldr	r2, [r3, #16]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	6939      	ldr	r1, [r7, #16]
 8000d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0203 	and.w	r2, r3, #3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 80bb 	beq.w	8000f5a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <HAL_GPIO_Init+0x30c>)
 8000dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dec:	4a63      	ldr	r2, [pc, #396]	; (8000f7c <HAL_GPIO_Init+0x30c>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	6453      	str	r3, [r2, #68]	; 0x44
 8000df4:	4b61      	ldr	r3, [pc, #388]	; (8000f7c <HAL_GPIO_Init+0x30c>)
 8000df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e00:	4a5f      	ldr	r2, [pc, #380]	; (8000f80 <HAL_GPIO_Init+0x310>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a57      	ldr	r2, [pc, #348]	; (8000f84 <HAL_GPIO_Init+0x314>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d031      	beq.n	8000e90 <HAL_GPIO_Init+0x220>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a56      	ldr	r2, [pc, #344]	; (8000f88 <HAL_GPIO_Init+0x318>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d02b      	beq.n	8000e8c <HAL_GPIO_Init+0x21c>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a55      	ldr	r2, [pc, #340]	; (8000f8c <HAL_GPIO_Init+0x31c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d025      	beq.n	8000e88 <HAL_GPIO_Init+0x218>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a54      	ldr	r2, [pc, #336]	; (8000f90 <HAL_GPIO_Init+0x320>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d01f      	beq.n	8000e84 <HAL_GPIO_Init+0x214>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a53      	ldr	r2, [pc, #332]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d019      	beq.n	8000e80 <HAL_GPIO_Init+0x210>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a52      	ldr	r2, [pc, #328]	; (8000f98 <HAL_GPIO_Init+0x328>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d013      	beq.n	8000e7c <HAL_GPIO_Init+0x20c>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_GPIO_Init+0x32c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_Init+0x208>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a4f      	ldr	r2, [pc, #316]	; (8000fa4 <HAL_GPIO_Init+0x334>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <HAL_GPIO_Init+0x200>
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	e010      	b.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e70:	2309      	movs	r3, #9
 8000e72:	e00e      	b.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e74:	2307      	movs	r3, #7
 8000e76:	e00c      	b.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e78:	2306      	movs	r3, #6
 8000e7a:	e00a      	b.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	e008      	b.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e80:	2304      	movs	r3, #4
 8000e82:	e006      	b.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e84:	2303      	movs	r3, #3
 8000e86:	e004      	b.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e90:	2300      	movs	r3, #0
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea4:	4936      	ldr	r1, [pc, #216]	; (8000f80 <HAL_GPIO_Init+0x310>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <HAL_GPIO_Init+0x338>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed6:	4a34      	ldr	r2, [pc, #208]	; (8000fa8 <HAL_GPIO_Init+0x338>)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <HAL_GPIO_Init+0x338>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <HAL_GPIO_Init+0x338>)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f06:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_GPIO_Init+0x338>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <HAL_GPIO_Init+0x338>)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_GPIO_Init+0x338>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_GPIO_Init+0x338>)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f47f ae88 	bne.w	8000c80 <HAL_GPIO_Init+0x10>
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40013800 	.word	0x40013800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	40021c00 	.word	0x40021c00
 8000fa4:	40022000 	.word	0x40022000
 8000fa8:	40013c00 	.word	0x40013c00

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc8:	e003      	b.n	8000fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	041a      	lsls	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	619a      	str	r2, [r3, #24]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e101      	b.n	80011f2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d106      	bne.n	800100e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f004 ff17 	bl	8005e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2203      	movs	r2, #3
 8001012:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800101c:	d102      	bne.n	8001024 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f001 ff59 	bl	8002ee0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7c1a      	ldrb	r2, [r3, #16]
 8001036:	f88d 2000 	strb.w	r2, [sp]
 800103a:	3304      	adds	r3, #4
 800103c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800103e:	f001 fe43 	bl	8002cc8 <USB_CoreInit>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2202      	movs	r2, #2
 800104c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0ce      	b.n	80011f2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f001 ff50 	bl	8002f00 <USB_SetCurrentMode>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2202      	movs	r2, #2
 800106a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0bf      	b.n	80011f2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e04a      	b.n	800110e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	3315      	adds	r3, #21
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	3314      	adds	r3, #20
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	b298      	uxth	r0, r3
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	332e      	adds	r3, #46	; 0x2e
 80010b4:	4602      	mov	r2, r0
 80010b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3318      	adds	r3, #24
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	331c      	adds	r3, #28
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	3320      	adds	r3, #32
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	3324      	adds	r3, #36	; 0x24
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	3301      	adds	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3af      	bcc.n	8001078 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e044      	b.n	80011a8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	3301      	adds	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d3b5      	bcc.n	800111e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7c1a      	ldrb	r2, [r3, #16]
 80011ba:	f88d 2000 	strb.w	r2, [sp]
 80011be:	3304      	adds	r3, #4
 80011c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c2:	f001 fee9 	bl	8002f98 <USB_DevInit>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2202      	movs	r2, #2
 80011d0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e00c      	b.n	80011f2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 ff20 	bl	8004030 <USB_DevDisconnect>

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <HAL_PCD_Start+0x16>
 800120c:	2302      	movs	r3, #2
 800120e:	e012      	b.n	8001236 <HAL_PCD_Start+0x3c>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  __HAL_PCD_ENABLE(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fe4f 	bl	8002ec0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fee2 	bl	8003ff0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800123e:	b590      	push	{r4, r7, lr}
 8001240:	b08d      	sub	sp, #52	; 0x34
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f002 ff99 	bl	800418c <USB_GetMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	f040 847e 	bne.w	8001b5e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f002 ff02 	bl	8004070 <USB_ReadInterrupts>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8474 	beq.w	8001b5c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f002 feef 	bl	8004070 <USB_ReadInterrupts>
 8001292:	4603      	mov	r3, r0
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b02      	cmp	r3, #2
 800129a:	d107      	bne.n	80012ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f002 0202 	and.w	r2, r2, #2
 80012aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 fedd 	bl	8004070 <USB_ReadInterrupts>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	2b10      	cmp	r3, #16
 80012be:	d161      	bne.n	8001384 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0210 	bic.w	r2, r2, #16
 80012ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	f003 020f 	and.w	r2, r3, #15
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	3304      	adds	r3, #4
 80012ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	0c5b      	lsrs	r3, r3, #17
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d124      	bne.n	8001346 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d035      	beq.n	8001374 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001316:	b29b      	uxth	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	6a38      	ldr	r0, [r7, #32]
 800131c:	f002 fd1a 	bl	8003d54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132c:	441a      	add	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133e:	441a      	add	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	e016      	b.n	8001374 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	0c5b      	lsrs	r3, r3, #17
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	2b06      	cmp	r3, #6
 8001350:	d110      	bne.n	8001374 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001358:	2208      	movs	r2, #8
 800135a:	4619      	mov	r1, r3
 800135c:	6a38      	ldr	r0, [r7, #32]
 800135e:	f002 fcf9 	bl	8003d54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136e:	441a      	add	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0210 	orr.w	r2, r2, #16
 8001382:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fe71 	bl	8004070 <USB_ReadInterrupts>
 800138e:	4603      	mov	r3, r0
 8001390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001394:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001398:	f040 80a7 	bne.w	80014ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fe75 	bl	8004094 <USB_ReadDevAllOutEpInterrupt>
 80013aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013ac:	e099      	b.n	80014e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 808e 	beq.w	80014d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fe97 	bl	80040f8 <USB_ReadDevOutEPInterrupt>
 80013ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00c      	beq.n	80013f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	015a      	lsls	r2, r3, #5
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013e2:	461a      	mov	r2, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 fe92 	bl	8002114 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00c      	beq.n	8001414 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	015a      	lsls	r2, r3, #5
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	4413      	add	r3, r2
 8001402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001406:	461a      	mov	r2, r3
 8001408:	2308      	movs	r3, #8
 800140a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800140c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 ff68 	bl	80022e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	015a      	lsls	r2, r3, #5
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	4413      	add	r3, r2
 8001426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142a:	461a      	mov	r2, r3
 800142c:	2310      	movs	r3, #16
 800142e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d030      	beq.n	800149c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	2b80      	cmp	r3, #128	; 0x80
 8001444:	d109      	bne.n	800145a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001458:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	3304      	adds	r3, #4
 800146e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	78db      	ldrb	r3, [r3, #3]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d108      	bne.n	800148a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2200      	movs	r2, #0
 800147c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f004 fded 	bl	8006064 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001496:	461a      	mov	r2, r3
 8001498:	2302      	movs	r3, #2
 800149a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d008      	beq.n	80014b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b2:	461a      	mov	r2, r3
 80014b4:	2320      	movs	r3, #32
 80014b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d009      	beq.n	80014d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	015a      	lsls	r2, r3, #5
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ce:	461a      	mov	r2, r3
 80014d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	3301      	adds	r3, #1
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014de:	085b      	lsrs	r3, r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f47f af62 	bne.w	80013ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fdbe 	bl	8004070 <USB_ReadInterrupts>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014fe:	f040 80db 	bne.w	80016b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fddd 	bl	80040c6 <USB_ReadDevAllInEpInterrupt>
 800150c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001512:	e0cd      	b.n	80016b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80c2 	beq.w	80016a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fe01 	bl	8004132 <USB_ReadDevInEPInterrupt>
 8001530:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d057      	beq.n	80015ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	2201      	movs	r2, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	69f9      	ldr	r1, [r7, #28]
 8001558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800155c:	4013      	ands	r3, r2
 800155e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4413      	add	r3, r2
 8001568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800156c:	461a      	mov	r2, r3
 800156e:	2301      	movs	r3, #1
 8001570:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	799b      	ldrb	r3, [r3, #6]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d132      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3320      	adds	r3, #32
 800158a:	6819      	ldr	r1, [r3, #0]
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4403      	add	r3, r0
 800159a:	331c      	adds	r3, #28
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4419      	add	r1, r3
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4403      	add	r3, r0
 80015ae:	3320      	adds	r3, #32
 80015b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d113      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x3a2>
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3324      	adds	r3, #36	; 0x24
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d108      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80015d8:	461a      	mov	r2, r3
 80015da:	2101      	movs	r1, #1
 80015dc:	f002 fe06 	bl	80041ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f004 fcb7 	bl	8005f5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001602:	461a      	mov	r2, r3
 8001604:	2308      	movs	r3, #8
 8001606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800161e:	461a      	mov	r2, r3
 8001620:	2310      	movs	r3, #16
 8001622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	015a      	lsls	r2, r3, #5
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800163a:	461a      	mov	r2, r3
 800163c:	2340      	movs	r3, #64	; 0x40
 800163e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d023      	beq.n	8001692 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800164a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800164c:	6a38      	ldr	r0, [r7, #32]
 800164e:	f001 fe07 	bl	8003260 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001654:	4613      	mov	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	3310      	adds	r3, #16
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	3304      	adds	r3, #4
 8001664:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	78db      	ldrb	r3, [r3, #3]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2200      	movs	r2, #0
 8001672:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4619      	mov	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f004 fd04 	bl	8006088 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168c:	461a      	mov	r2, r3
 800168e:	2302      	movs	r3, #2
 8001690:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800169c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fcac 	bl	8001ffc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	3301      	adds	r3, #1
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f47f af2e 	bne.w	8001514 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 fcd7 	bl	8004070 <USB_ReadInterrupts>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016cc:	d114      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f004 fcb0 	bl	8006048 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fcb7 	bl	8004070 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800170c:	d112      	bne.n	8001734 <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d102      	bne.n	8001724 <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f004 fc6c 	bl	8005ffc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001732:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fc99 	bl	8004070 <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001748:	f040 80b7 	bne.w	80018ba <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2110      	movs	r1, #16
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fd7a 	bl	8003260 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001770:	e046      	b.n	8001800 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177e:	461a      	mov	r2, r3
 8001780:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001784:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001796:	0151      	lsls	r1, r2, #5
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	440a      	add	r2, r1
 800179c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b2:	461a      	mov	r2, r3
 80017b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	015a      	lsls	r2, r3, #5
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ca:	0151      	lsls	r1, r2, #5
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	440a      	add	r2, r1
 80017d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ea:	0151      	lsls	r1, r2, #5
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	440a      	add	r2, r1
 80017f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	3301      	adds	r3, #1
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	461a      	mov	r2, r3
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	4293      	cmp	r3, r2
 800180a:	d3b2      	bcc.n	8001772 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800181e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7bdb      	ldrb	r3, [r3, #15]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d016      	beq.n	8001856 <HAL_PCD_IRQHandler+0x618>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001838:	f043 030b 	orr.w	r3, r3, #11
 800183c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	f043 030b 	orr.w	r3, r3, #11
 8001852:	6453      	str	r3, [r2, #68]	; 0x44
 8001854:	e015      	b.n	8001882 <HAL_PCD_IRQHandler+0x644>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001868:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800186c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187c:	f043 030b 	orr.w	r3, r3, #11
 8001880:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001890:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001894:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018a4:	461a      	mov	r2, r3
 80018a6:	f002 fca1 	bl	80041ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fbd6 	bl	8004070 <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ce:	d123      	bne.n	8001918 <HAL_PCD_IRQHandler+0x6da>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fc66 	bl	80041a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 fd34 	bl	800334c <USB_GetDevSpeed>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681c      	ldr	r4, [r3, #0]
 80018f0:	f001 f9e0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 80018f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018fa:	461a      	mov	r2, r3
 80018fc:	4620      	mov	r0, r4
 80018fe:	f001 fa3d 	bl	8002d7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f004 fb51 	bl	8005faa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001916:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fba7 	bl	8004070 <USB_ReadInterrupts>
 8001922:	4603      	mov	r3, r0
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b08      	cmp	r3, #8
 800192a:	d10a      	bne.n	8001942 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f004 fb2e 	bl	8005f8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f002 0208 	and.w	r2, r2, #8
 8001940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fb92 	bl	8004070 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	2b80      	cmp	r3, #128	; 0x80
 8001954:	d123      	bne.n	800199e <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001962:	2301      	movs	r3, #1
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e014      	b.n	8001992 <HAL_PCD_IRQHandler+0x754>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	f203 2357 	addw	r3, r3, #599	; 0x257
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_PCD_IRQHandler+0x74e>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fb07 	bl	8001f9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3301      	adds	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	791b      	ldrb	r3, [r3, #4]
 8001996:	461a      	mov	r2, r3
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	4293      	cmp	r3, r2
 800199c:	d3e4      	bcc.n	8001968 <HAL_PCD_IRQHandler+0x72a>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fb64 	bl	8004070 <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019b2:	d13c      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x7f0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b4:	2301      	movs	r3, #1
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	e02b      	b.n	8001a12 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	3318      	adds	r3, #24
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d115      	bne.n	8001a0c <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da12      	bge.n	8001a0c <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	3317      	adds	r3, #23
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fac7 	bl	8001f9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3301      	adds	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	791b      	ldrb	r3, [r3, #4]
 8001a16:	461a      	mov	r2, r3
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d3cd      	bcc.n	80019ba <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fb1c 	bl	8004070 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a42:	d156      	bne.n	8001af2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a44:	2301      	movs	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	e045      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x898>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d12e      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x892>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a72:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da2b      	bge.n	8001ad0 <HAL_PCD_IRQHandler+0x892>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001a84:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d121      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x892>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x892>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001acc:	6053      	str	r3, [r2, #4]
            break;
 8001ace:	e008      	b.n	8001ae2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	791b      	ldrb	r3, [r3, #4]
 8001ada:	461a      	mov	r2, r3
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d3b3      	bcc.n	8001a4a <HAL_PCD_IRQHandler+0x80c>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 faba 	bl	8004070 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b06:	d10a      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f004 facf 	bl	80060ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 faa4 	bl	8004070 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d115      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f004 fabf 	bl	80060c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	e000      	b.n	8001b5e <HAL_PCD_IRQHandler+0x920>
      return;
 8001b5c:	bf00      	nop
    }
  }
}
 8001b5e:	3734      	adds	r7, #52	; 0x34
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}

08001b64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_PCD_SetAddress+0x1a>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e012      	b.n	8001ba4 <HAL_PCD_SetAddress+0x40>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fa06 	bl	8003fa6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4603      	mov	r3, r0
 8001bbc:	70fb      	strb	r3, [r7, #3]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	803b      	strh	r3, [r7, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da0f      	bge.n	8001bf2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	f003 020f 	and.w	r2, r3, #15
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	3310      	adds	r3, #16
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	3304      	adds	r3, #4
 8001be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	705a      	strb	r2, [r3, #1]
 8001bf0:	e00f      	b.n	8001c12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	f003 020f 	and.w	r2, r3, #15
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	3304      	adds	r3, #4
 8001c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c1e:	883a      	ldrh	r2, [r7, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	78ba      	ldrb	r2, [r7, #2]
 8001c28:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c3c:	78bb      	ldrb	r3, [r7, #2]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d102      	bne.n	8001c48 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_PCD_EP_Open+0xaa>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e00e      	b.n	8001c74 <HAL_PCD_EP_Open+0xc8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68f9      	ldr	r1, [r7, #12]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 fb95 	bl	8003394 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001c72:	7afb      	ldrb	r3, [r7, #11]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da0f      	bge.n	8001cb0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 020f 	and.w	r2, r3, #15
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	3310      	adds	r3, #16
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	705a      	strb	r2, [r3, #1]
 8001cae:	e00f      	b.n	8001cd0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 020f 	and.w	r2, r3, #15
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_PCD_EP_Close+0x6e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e00e      	b.n	8001d08 <HAL_PCD_EP_Close+0x8c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 fbd1 	bl	80034a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d20:	7afb      	ldrb	r3, [r7, #11]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4413      	add	r3, r2
 8001d36:	3304      	adds	r3, #4
 8001d38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	799b      	ldrb	r3, [r3, #6]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	799b      	ldrb	r3, [r3, #6]
 8001d74:	461a      	mov	r2, r3
 8001d76:	6979      	ldr	r1, [r7, #20]
 8001d78:	f001 fc6e 	bl	8003658 <USB_EPStartXfer>

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	f003 020f 	and.w	r2, r3, #15
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001da8:	681b      	ldr	r3, [r3, #0]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc4:	7afb      	ldrb	r3, [r7, #11]
 8001dc6:	f003 020f 	and.w	r2, r3, #15
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	3310      	adds	r3, #16
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2201      	movs	r2, #1
 8001df2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	799b      	ldrb	r3, [r3, #6]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	799b      	ldrb	r3, [r3, #6]
 8001e16:	461a      	mov	r2, r3
 8001e18:	6979      	ldr	r1, [r7, #20]
 8001e1a:	f001 fc1d 	bl	8003658 <USB_EPStartXfer>

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	7912      	ldrb	r2, [r2, #4]
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e04f      	b.n	8001ee6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da0f      	bge.n	8001e6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	705a      	strb	r2, [r3, #1]
 8001e6c:	e00d      	b.n	8001e8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_PCD_EP_SetStall+0x82>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e01d      	b.n	8001ee6 <HAL_PCD_EP_SetStall+0xbe>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 ffa2 	bl	8003e02 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7999      	ldrb	r1, [r3, #6]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f002 f988 	bl	80041ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	7912      	ldrb	r2, [r2, #4]
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e042      	b.n	8001f92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da0f      	bge.n	8001f34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	3310      	adds	r3, #16
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	705a      	strb	r2, [r3, #1]
 8001f32:	e00f      	b.n	8001f54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 020f 	and.w	r2, r3, #15
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_PCD_EP_ClrStall+0x86>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e00e      	b.n	8001f92 <HAL_PCD_EP_ClrStall+0xa4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 ffaa 	bl	8003edc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da0c      	bge.n	8001fc8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	3310      	adds	r3, #16
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e00c      	b.n	8001fe2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 020f 	and.w	r2, r3, #15
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68f9      	ldr	r1, [r7, #12]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 fdcd 	bl	8003b88 <USB_EPStopXfer>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af02      	add	r7, sp, #8
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	3310      	adds	r3, #16
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	3304      	adds	r3, #4
 8002022:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d901      	bls.n	8002034 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e06b      	b.n	800210c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	429a      	cmp	r2, r3
 8002048:	d902      	bls.n	8002050 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	3303      	adds	r3, #3
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002058:	e02a      	b.n	80020b0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	d902      	bls.n	8002076 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3303      	adds	r3, #3
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68d9      	ldr	r1, [r3, #12]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4603      	mov	r3, r0
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f001 fe21 	bl	8003cda <USB_WritePacket>

    ep->xfer_buff  += len;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	441a      	add	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	441a      	add	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d809      	bhi.n	80020da <PCD_WriteEmptyTxFifo+0xde>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d203      	bcs.n	80020da <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1bf      	bne.n	800205a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d811      	bhi.n	800210a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	2201      	movs	r2, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	43db      	mvns	r3, r3
 8002100:	6939      	ldr	r1, [r7, #16]
 8002102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002106:	4013      	ands	r3, r2
 8002108:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	333c      	adds	r3, #60	; 0x3c
 800212c:	3304      	adds	r3, #4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	799b      	ldrb	r3, [r3, #6]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d17b      	bne.n	8002242 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d015      	beq.n	8002180 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4a61      	ldr	r2, [pc, #388]	; (80022dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	f240 80b9 	bls.w	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80b3 	beq.w	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	461a      	mov	r2, r3
 8002178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217c:	6093      	str	r3, [r2, #8]
 800217e:	e0a7      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002196:	461a      	mov	r2, r3
 8002198:	2320      	movs	r3, #32
 800219a:	6093      	str	r3, [r2, #8]
 800219c:	e098      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 8093 	bne.w	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d90f      	bls.n	80021d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c8:	461a      	mov	r2, r3
 80021ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ce:	6093      	str	r3, [r2, #8]
 80021d0:	e07e      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	0159      	lsls	r1, r3, #5
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	1ad2      	subs	r2, r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d114      	bne.n	8002234 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800221c:	461a      	mov	r2, r3
 800221e:	2101      	movs	r1, #1
 8002220:	f001 ffe4 	bl	80041ec <USB_EP0_OutStart>
 8002224:	e006      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	441a      	add	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f003 fe72 	bl	8005f24 <HAL_PCD_DataOutStageCallback>
 8002240:	e046      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d124      	bne.n	8002294 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002266:	6093      	str	r3, [r2, #8]
 8002268:	e032      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002280:	461a      	mov	r2, r3
 8002282:	2320      	movs	r3, #32
 8002284:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f003 fe49 	bl	8005f24 <HAL_PCD_DataOutStageCallback>
 8002292:	e01d      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d114      	bne.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d108      	bne.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80022bc:	461a      	mov	r2, r3
 80022be:	2100      	movs	r1, #0
 80022c0:	f001 ff94 	bl	80041ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f003 fe2a 	bl	8005f24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	4f54300a 	.word	0x4f54300a
 80022e0:	4f54310a 	.word	0x4f54310a

080022e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	333c      	adds	r3, #60	; 0x3c
 80022fc:	3304      	adds	r3, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <PCD_EP_OutSetupPacket_int+0x88>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d90e      	bls.n	8002338 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002330:	461a      	mov	r2, r3
 8002332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002336:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f003 fde1 	bl	8005f00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <PCD_EP_OutSetupPacket_int+0x88>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d90c      	bls.n	8002360 <PCD_EP_OutSetupPacket_int+0x7c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	799b      	ldrb	r3, [r3, #6]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d108      	bne.n	8002360 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002358:	461a      	mov	r2, r3
 800235a:	2101      	movs	r1, #1
 800235c:	f001 ff46 	bl	80041ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	4f54300a 	.word	0x4f54300a

08002370 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
 800237c:	4613      	mov	r3, r2
 800237e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d107      	bne.n	800239e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800238e:	883b      	ldrh	r3, [r7, #0]
 8002390:	0419      	lsls	r1, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	430a      	orrs	r2, r1
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
 800239c:	e028      	b.n	80023f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4413      	add	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e00d      	b.n	80023ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	3340      	adds	r3, #64	; 0x40
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	3301      	adds	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d3ec      	bcc.n	80023b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023d8:	883b      	ldrh	r3, [r7, #0]
 80023da:	0418      	lsls	r0, r3, #16
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	4302      	orrs	r2, r0
 80023e8:	3340      	adds	r3, #64	; 0x40
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	887a      	ldrh	r2, [r7, #2]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e23b      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d050      	beq.n	80024dc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243a:	4b9e      	ldr	r3, [pc, #632]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b9b      	ldr	r3, [pc, #620]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b98      	ldr	r3, [pc, #608]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b94      	ldr	r3, [pc, #592]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d036      	beq.n	80024da <HAL_RCC_OscConfig+0xbe>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d132      	bne.n	80024da <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e216      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4b8e      	ldr	r3, [pc, #568]	; (80026b8 <HAL_RCC_OscConfig+0x29c>)
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d013      	beq.n	80024b2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe fab5 	bl	80009f8 <HAL_GetTick>
 800248e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002492:	f7fe fab1 	bl	80009f8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b64      	cmp	r3, #100	; 0x64
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e200      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a4:	4b83      	ldr	r3, [pc, #524]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x76>
 80024b0:	e014      	b.n	80024dc <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe faa1 	bl	80009f8 <HAL_GetTick>
 80024b6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ba:	f7fe fa9d 	bl	80009f8 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b64      	cmp	r3, #100	; 0x64
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1ec      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024cc:	4b79      	ldr	r3, [pc, #484]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x9e>
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d077      	beq.n	80025d8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e8:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d126      	bne.n	800254e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002500:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d120      	bne.n	800254e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250c:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_OscConfig+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e1c0      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	21f8      	movs	r1, #248	; 0xf8
 8002532:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	69b9      	ldr	r1, [r7, #24]
 8002536:	fa91 f1a1 	rbit	r1, r1
 800253a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800253c:	6979      	ldr	r1, [r7, #20]
 800253e:	fab1 f181 	clz	r1, r1
 8002542:	b2c9      	uxtb	r1, r1
 8002544:	408b      	lsls	r3, r1
 8002546:	495b      	ldr	r1, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254c:	e044      	b.n	80025d8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d02a      	beq.n	80025ac <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002556:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCC_OscConfig+0x2a0>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fa4c 	bl	80009f8 <HAL_GetTick>
 8002560:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe fa48 	bl	80009f8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e197      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b4f      	ldr	r3, [pc, #316]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	21f8      	movs	r1, #248	; 0xf8
 8002590:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6939      	ldr	r1, [r7, #16]
 8002594:	fa91 f1a1 	rbit	r1, r1
 8002598:	60f9      	str	r1, [r7, #12]
  return result;
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	fab1 f181 	clz	r1, r1
 80025a0:	b2c9      	uxtb	r1, r1
 80025a2:	408b      	lsls	r3, r1
 80025a4:	4943      	ldr	r1, [pc, #268]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
 80025aa:	e015      	b.n	80025d8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_RCC_OscConfig+0x2a0>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe fa21 	bl	80009f8 <HAL_GetTick>
 80025b6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ba:	f7fe fa1d 	bl	80009f8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e16c      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d030      	beq.n	8002646 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ec:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <HAL_RCC_OscConfig+0x2a4>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f2:	f7fe fa01 	bl	80009f8 <HAL_GetTick>
 80025f6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fa:	f7fe f9fd 	bl	80009f8 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e14c      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800260e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x1de>
 8002618:	e015      	b.n	8002646 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_RCC_OscConfig+0x2a4>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7fe f9ea 	bl	80009f8 <HAL_GetTick>
 8002624:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002628:	f7fe f9e6 	bl	80009f8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e135      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800263c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8087 	beq.w	8002762 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d110      	bne.n	8002688 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_RCC_OscConfig+0x2a8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <HAL_RCC_OscConfig+0x2a8>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002692:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_OscConfig+0x2a8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d122      	bne.n	80026e6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCC_OscConfig+0x2a8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <HAL_RCC_OscConfig+0x2a8>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ac:	f7fe f9a4 	bl	80009f8 <HAL_GetTick>
 80026b0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	e012      	b.n	80026da <HAL_RCC_OscConfig+0x2be>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40023802 	.word	0x40023802
 80026bc:	42470000 	.word	0x42470000
 80026c0:	42470e80 	.word	0x42470e80
 80026c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c8:	f7fe f996 	bl	80009f8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0e5      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b75      	ldr	r3, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x494>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	4b72      	ldr	r3, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x498>)
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d015      	beq.n	8002724 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7fe f97e 	bl	80009f8 <HAL_GetTick>
 80026fc:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe f97a 	bl	80009f8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0c7      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ee      	beq.n	8002700 <HAL_RCC_OscConfig+0x2e4>
 8002722:	e014      	b.n	800274e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7fe f968 	bl	80009f8 <HAL_GetTick>
 8002728:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7fe f964 	bl	80009f8 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0b1      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002742:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ee      	bne.n	800272c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800274e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a57      	ldr	r2, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 809c 	beq.w	80028a4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800276c:	4b52      	ldr	r3, [pc, #328]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b08      	cmp	r3, #8
 8002776:	d061      	beq.n	800283c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d146      	bne.n	800280e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002780:	4b4e      	ldr	r3, [pc, #312]	; (80028bc <HAL_RCC_OscConfig+0x4a0>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe f937 	bl	80009f8 <HAL_GetTick>
 800278a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe f933 	bl	80009f8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b64      	cmp	r3, #100	; 0x64
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e082      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a0:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	69d1      	ldr	r1, [r2, #28]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6a12      	ldr	r2, [r2, #32]
 80027bc:	4311      	orrs	r1, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027c2:	0192      	lsls	r2, r2, #6
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027ca:	0612      	lsls	r2, r2, #24
 80027cc:	4311      	orrs	r1, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027d2:	0852      	lsrs	r2, r2, #1
 80027d4:	3a01      	subs	r2, #1
 80027d6:	0412      	lsls	r2, r2, #16
 80027d8:	430a      	orrs	r2, r1
 80027da:	4937      	ldr	r1, [pc, #220]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCC_OscConfig+0x4a0>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe f907 	bl	80009f8 <HAL_GetTick>
 80027ea:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe f903 	bl	80009f8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e052      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x3d2>
 800280c:	e04a      	b.n	80028a4 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCC_OscConfig+0x4a0>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe f8f0 	bl	80009f8 <HAL_GetTick>
 8002818:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe f8ec 	bl	80009f8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e03b      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x400>
 800283a:	e033      	b.n	80028a4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e02e      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x49c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	429a      	cmp	r2, r3
 800285a:	d121      	bne.n	80028a0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d11a      	bne.n	80028a0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002876:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002878:	4293      	cmp	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	3b01      	subs	r3, #1
 800288a:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3728      	adds	r7, #40	; 0x28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40007000 	.word	0x40007000
 80028b4:	40023870 	.word	0x40023870
 80028b8:	40023800 	.word	0x40023800
 80028bc:	42470060 	.word	0x42470060
 80028c0:	f0bc8000 	.word	0xf0bc8000

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0d2      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d90c      	bls.n	8002900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0be      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002930:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a55      	ldr	r2, [pc, #340]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4950      	ldr	r1, [pc, #320]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e085      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e079      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e071      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4939      	ldr	r1, [pc, #228]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7fe f824 	bl	80009f8 <HAL_GetTick>
 80029b0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe f820 	bl	80009f8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e059      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d20c      	bcs.n	8002a04 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e03c      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	491b      	ldr	r1, [pc, #108]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4913      	ldr	r1, [pc, #76]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002a42:	f000 f82b 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a46:	4601      	mov	r1, r0
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a50:	22f0      	movs	r2, #240	; 0xf0
 8002a52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	fa92 f2a2 	rbit	r2, r2
 8002a5a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	fab2 f282 	clz	r2, r2
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	40d3      	lsrs	r3, r2
 8002a66:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x1cc>)
 8002a68:	5cd3      	ldrb	r3, [r2, r3]
 8002a6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1d0>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1d4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd ff7c 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08006760 	.word	0x08006760
 8002a94:	20000004 	.word	0x20000004
 8002a98:	20000008 	.word	0x20000008

08002a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa0:	b094      	sub	sp, #80	; 0x50
 8002aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aac:	2300      	movs	r3, #0
 8002aae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab4:	4b7c      	ldr	r3, [pc, #496]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d00d      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x40>
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	f200 80e7 	bhi.w	8002c94 <HAL_RCC_GetSysClockFreq+0x1f8>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ace:	e0e1      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b76      	ldr	r3, [pc, #472]	; (8002cac <HAL_RCC_GetSysClockFreq+0x210>)
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ad4:	e0e1      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad6:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x214>)
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ada:	e0de      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002adc:	4b72      	ldr	r3, [pc, #456]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae6:	4b70      	ldr	r3, [pc, #448]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d065      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b6d      	ldr	r3, [pc, #436]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	2200      	movs	r2, #0
 8002afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002afc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
 8002b06:	2300      	movs	r3, #0
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4621      	mov	r1, r4
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	6139      	str	r1, [r7, #16]
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b40:	4659      	mov	r1, fp
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	46d4      	mov	ip, sl
 8002b50:	ebb2 080c 	subs.w	r8, r2, ip
 8002b54:	4659      	mov	r1, fp
 8002b56:	eb63 0901 	sbc.w	r9, r3, r1
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6e:	4690      	mov	r8, r2
 8002b70:	4699      	mov	r9, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	eb18 0303 	adds.w	r3, r8, r3
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	462b      	mov	r3, r5
 8002b7c:	eb49 0303 	adc.w	r3, r9, r3
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	024b      	lsls	r3, r1, #9
 8002b92:	4620      	mov	r0, r4
 8002b94:	4629      	mov	r1, r5
 8002b96:	4604      	mov	r4, r0
 8002b98:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002b9c:	4601      	mov	r1, r0
 8002b9e:	024a      	lsls	r2, r1, #9
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bb0:	f7fd fb10 	bl	80001d4 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bbc:	e05c      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bd8:	4642      	mov	r2, r8
 8002bda:	464b      	mov	r3, r9
 8002bdc:	f04f 0000 	mov.w	r0, #0
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	0159      	lsls	r1, r3, #5
 8002be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bea:	0150      	lsls	r0, r2, #5
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	46c4      	mov	ip, r8
 8002bf2:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	468c      	mov	ip, r1
 8002bfc:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c14:	ebb2 040a 	subs.w	r4, r2, sl
 8002c18:	eb63 050b 	sbc.w	r5, r3, fp
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	00eb      	lsls	r3, r5, #3
 8002c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2a:	00e2      	lsls	r2, r4, #3
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	461d      	mov	r5, r3
 8002c30:	4603      	mov	r3, r0
 8002c32:	18e3      	adds	r3, r4, r3
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	460b      	mov	r3, r1
 8002c38:	eb45 0303 	adc.w	r3, r5, r3
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	028b      	lsls	r3, r1, #10
 8002c4e:	4620      	mov	r0, r4
 8002c50:	4629      	mov	r1, r5
 8002c52:	4604      	mov	r4, r0
 8002c54:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002c58:	4601      	mov	r1, r0
 8002c5a:	028a      	lsls	r2, r1, #10
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c62:	2200      	movs	r2, #0
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	61fa      	str	r2, [r7, #28]
 8002c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6c:	f7fd fab2 	bl	80001d4 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetSysClockFreq+0x210>)
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3750      	adds	r7, #80	; 0x50
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cc8:	b084      	sub	sp, #16
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	f107 001c 	add.w	r0, r7, #28
 8002cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cda:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d123      	bne.n	8002d2a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f001 fac0 	bl	80042a4 <USB_CoreReset>
 8002d24:	4603      	mov	r3, r0
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e010      	b.n	8002d4c <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f001 fab4 	bl	80042a4 <USB_CoreReset>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002d4c:	7fbb      	ldrb	r3, [r7, #30]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10b      	bne.n	8002d6a <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f043 0206 	orr.w	r2, r3, #6
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d76:	b004      	add	sp, #16
 8002d78:	4770      	bx	lr
	...

08002d7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d165      	bne.n	8002e5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a41      	ldr	r2, [pc, #260]	; (8002e98 <USB_SetTurnaroundTime+0x11c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d906      	bls.n	8002da6 <USB_SetTurnaroundTime+0x2a>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4a40      	ldr	r2, [pc, #256]	; (8002e9c <USB_SetTurnaroundTime+0x120>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d202      	bcs.n	8002da6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002da0:	230f      	movs	r3, #15
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	e062      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4a3c      	ldr	r2, [pc, #240]	; (8002e9c <USB_SetTurnaroundTime+0x120>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d306      	bcc.n	8002dbc <USB_SetTurnaroundTime+0x40>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4a3b      	ldr	r2, [pc, #236]	; (8002ea0 <USB_SetTurnaroundTime+0x124>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d202      	bcs.n	8002dbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002db6:	230e      	movs	r3, #14
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e057      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4a38      	ldr	r2, [pc, #224]	; (8002ea0 <USB_SetTurnaroundTime+0x124>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d306      	bcc.n	8002dd2 <USB_SetTurnaroundTime+0x56>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4a37      	ldr	r2, [pc, #220]	; (8002ea4 <USB_SetTurnaroundTime+0x128>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d202      	bcs.n	8002dd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002dcc:	230d      	movs	r3, #13
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e04c      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4a33      	ldr	r2, [pc, #204]	; (8002ea4 <USB_SetTurnaroundTime+0x128>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d306      	bcc.n	8002de8 <USB_SetTurnaroundTime+0x6c>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <USB_SetTurnaroundTime+0x12c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d802      	bhi.n	8002de8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002de2:	230c      	movs	r3, #12
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e041      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4a2f      	ldr	r2, [pc, #188]	; (8002ea8 <USB_SetTurnaroundTime+0x12c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d906      	bls.n	8002dfe <USB_SetTurnaroundTime+0x82>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <USB_SetTurnaroundTime+0x130>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d802      	bhi.n	8002dfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002df8:	230b      	movs	r3, #11
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e036      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <USB_SetTurnaroundTime+0x130>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d906      	bls.n	8002e14 <USB_SetTurnaroundTime+0x98>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <USB_SetTurnaroundTime+0x134>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d802      	bhi.n	8002e14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e0e:	230a      	movs	r3, #10
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e02b      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <USB_SetTurnaroundTime+0x134>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d906      	bls.n	8002e2a <USB_SetTurnaroundTime+0xae>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4a25      	ldr	r2, [pc, #148]	; (8002eb4 <USB_SetTurnaroundTime+0x138>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d202      	bcs.n	8002e2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e24:	2309      	movs	r3, #9
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e020      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <USB_SetTurnaroundTime+0x138>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d306      	bcc.n	8002e40 <USB_SetTurnaroundTime+0xc4>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <USB_SetTurnaroundTime+0x13c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d802      	bhi.n	8002e40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e015      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <USB_SetTurnaroundTime+0x13c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d906      	bls.n	8002e56 <USB_SetTurnaroundTime+0xda>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <USB_SetTurnaroundTime+0x140>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d202      	bcs.n	8002e56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e50:	2307      	movs	r3, #7
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e00a      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e56:	2306      	movs	r3, #6
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e007      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e62:	2309      	movs	r3, #9
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e001      	b.n	8002e6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e68:	2309      	movs	r3, #9
 8002e6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	029b      	lsls	r3, r3, #10
 8002e80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	00d8acbf 	.word	0x00d8acbf
 8002e9c:	00e4e1c0 	.word	0x00e4e1c0
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	01067380 	.word	0x01067380
 8002ea8:	011a499f 	.word	0x011a499f
 8002eac:	01312cff 	.word	0x01312cff
 8002eb0:	014ca43f 	.word	0x014ca43f
 8002eb4:	016e3600 	.word	0x016e3600
 8002eb8:	01a6ab1f 	.word	0x01a6ab1f
 8002ebc:	01e84800 	.word	0x01e84800

08002ec0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 0201 	bic.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d115      	bne.n	8002f4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f2e:	200a      	movs	r0, #10
 8002f30:	f7fd fd6c 	bl	8000a0c <HAL_Delay>
      ms += 10U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	330a      	adds	r3, #10
 8002f38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f001 f926 	bl	800418c <USB_GetMode>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d01e      	beq.n	8002f84 <USB_SetCurrentMode+0x84>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2bc7      	cmp	r3, #199	; 0xc7
 8002f4a:	d9f0      	bls.n	8002f2e <USB_SetCurrentMode+0x2e>
 8002f4c:	e01a      	b.n	8002f84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d115      	bne.n	8002f80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f60:	200a      	movs	r0, #10
 8002f62:	f7fd fd53 	bl	8000a0c <HAL_Delay>
      ms += 10U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	330a      	adds	r3, #10
 8002f6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f001 f90d 	bl	800418c <USB_GetMode>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <USB_SetCurrentMode+0x84>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2bc7      	cmp	r3, #199	; 0xc7
 8002f7c:	d9f0      	bls.n	8002f60 <USB_SetCurrentMode+0x60>
 8002f7e:	e001      	b.n	8002f84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e005      	b.n	8002f90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2bc8      	cmp	r3, #200	; 0xc8
 8002f88:	d101      	bne.n	8002f8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f98:	b084      	sub	sp, #16
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	e009      	b.n	8002fcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	3340      	adds	r3, #64	; 0x40
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b0e      	cmp	r3, #14
 8002fd0:	d9f2      	bls.n	8002fb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11c      	bne.n	8003014 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
 8003012:	e00b      	b.n	800302c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003032:	461a      	mov	r2, r3
 8003034:	2300      	movs	r3, #0
 8003036:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003038:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10d      	bne.n	800305c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003048:	2100      	movs	r1, #0
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f966 	bl	800331c <USB_SetDevSpeed>
 8003050:	e008      	b.n	8003064 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003052:	2101      	movs	r1, #1
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f961 	bl	800331c <USB_SetDevSpeed>
 800305a:	e003      	b.n	8003064 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800305c:	2103      	movs	r1, #3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f95c 	bl	800331c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003064:	2110      	movs	r1, #16
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8fa 	bl	8003260 <USB_FlushTxFifo>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f923 	bl	80032c2 <USB_FlushRxFifo>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308c:	461a      	mov	r2, r3
 800308e:	2300      	movs	r3, #0
 8003090:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003098:	461a      	mov	r2, r3
 800309a:	2300      	movs	r3, #0
 800309c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	461a      	mov	r2, r3
 80030a6:	2300      	movs	r3, #0
 80030a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	e043      	b.n	8003138 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030c6:	d118      	bne.n	80030fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030da:	461a      	mov	r2, r3
 80030dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e013      	b.n	800310c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f0:	461a      	mov	r2, r3
 80030f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	e008      	b.n	800310c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003106:	461a      	mov	r2, r3
 8003108:	2300      	movs	r3, #0
 800310a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003118:	461a      	mov	r2, r3
 800311a:	2300      	movs	r3, #0
 800311c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312a:	461a      	mov	r2, r3
 800312c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003130:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	3301      	adds	r3, #1
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800313c:	461a      	mov	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4293      	cmp	r3, r2
 8003142:	d3b5      	bcc.n	80030b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	e043      	b.n	80031d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800315c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003160:	d118      	bne.n	8003194 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003174:	461a      	mov	r2, r3
 8003176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e013      	b.n	80031a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4413      	add	r3, r2
 8003186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318a:	461a      	mov	r2, r3
 800318c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e008      	b.n	80031a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a0:	461a      	mov	r2, r3
 80031a2:	2300      	movs	r3, #0
 80031a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b2:	461a      	mov	r2, r3
 80031b4:	2300      	movs	r3, #0
 80031b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c4:	461a      	mov	r2, r3
 80031c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	3301      	adds	r3, #1
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031d6:	461a      	mov	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4293      	cmp	r3, r2
 80031dc:	d3b5      	bcc.n	800314a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f043 0210 	orr.w	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <USB_DevInit+0x2c4>)
 800321a:	4313      	orrs	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003220:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f043 0208 	orr.w	r2, r3, #8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003234:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800324c:	7dfb      	ldrb	r3, [r7, #23]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003258:	b004      	add	sp, #16
 800325a:	4770      	bx	lr
 800325c:	803c3800 	.word	0x803c3800

08003260 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800327a:	d901      	bls.n	8003280 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e01b      	b.n	80032b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	daf2      	bge.n	800326e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	019b      	lsls	r3, r3, #6
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80032a4:	d901      	bls.n	80032aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e006      	b.n	80032b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d0f0      	beq.n	8003298 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3301      	adds	r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80032da:	d901      	bls.n	80032e0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e018      	b.n	8003312 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	daf2      	bge.n	80032ce <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2210      	movs	r2, #16
 80032f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80032fe:	d901      	bls.n	8003304 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e006      	b.n	8003312 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d0f0      	beq.n	80032f2 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0306 	and.w	r3, r3, #6
 8003364:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]
 8003370:	e00a      	b.n	8003388 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d002      	beq.n	800337e <USB_GetDevSpeed+0x32>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d102      	bne.n	8003384 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800337e:	2302      	movs	r3, #2
 8003380:	75fb      	strb	r3, [r7, #23]
 8003382:	e001      	b.n	8003388 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003384:	230f      	movs	r3, #15
 8003386:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003388:	7dfb      	ldrb	r3, [r7, #23]
}
 800338a:	4618      	mov	r0, r3
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d13a      	bne.n	8003426 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d155      	bne.n	8003494 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	791b      	ldrb	r3, [r3, #4]
 8003402:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003404:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	059b      	lsls	r3, r3, #22
 800340a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800340c:	4313      	orrs	r3, r2
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	440a      	add	r2, r1
 8003416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	e036      	b.n	8003494 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003444:	4313      	orrs	r3, r2
 8003446:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d11a      	bne.n	8003494 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	791b      	ldrb	r3, [r3, #4]
 8003478:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800347a:	430b      	orrs	r3, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	0151      	lsls	r1, r2, #5
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	440a      	add	r2, r1
 8003486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003492:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d161      	bne.n	8003580 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d2:	d11f      	bne.n	8003514 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	0151      	lsls	r1, r2, #5
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	440a      	add	r2, r1
 80034ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	0151      	lsls	r1, r2, #5
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	440a      	add	r2, r1
 800350a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800350e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003512:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	b29b      	uxth	r3, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003534:	4013      	ands	r3, r2
 8003536:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	b29b      	uxth	r3, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003558:	4013      	ands	r3, r2
 800355a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	0159      	lsls	r1, r3, #5
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	440b      	add	r3, r1
 8003572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003576:	4619      	mov	r1, r3
 8003578:	4b35      	ldr	r3, [pc, #212]	; (8003650 <USB_DeactivateEndpoint+0x1b0>)
 800357a:	4013      	ands	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
 800357e:	e060      	b.n	8003642 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003596:	d11f      	bne.n	80035d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	43db      	mvns	r3, r3
 80035f2:	68f9      	ldr	r1, [r7, #12]
 80035f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035f8:	4013      	ands	r3, r2
 80035fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	43db      	mvns	r3, r3
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800361c:	4013      	ands	r3, r2
 800361e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	0159      	lsls	r1, r3, #5
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	440b      	add	r3, r1
 8003636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363a:	4619      	mov	r1, r3
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <USB_DeactivateEndpoint+0x1b4>)
 800363e:	4013      	ands	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	ec337800 	.word	0xec337800
 8003654:	eff37800 	.word	0xeff37800

08003658 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b01      	cmp	r3, #1
 8003676:	f040 817a 	bne.w	800396e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d132      	bne.n	80036e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	0151      	lsls	r1, r2, #5
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	440a      	add	r2, r1
 8003698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800369c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	0151      	lsls	r1, r2, #5
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	440a      	add	r2, r1
 80036dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e0:	0cdb      	lsrs	r3, r3, #19
 80036e2:	04db      	lsls	r3, r3, #19
 80036e4:	6113      	str	r3, [r2, #16]
 80036e6:	e092      	b.n	800380e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003702:	0cdb      	lsrs	r3, r3, #19
 8003704:	04db      	lsls	r3, r3, #19
 8003706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	0151      	lsls	r1, r2, #5
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	440a      	add	r2, r1
 800371e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003722:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003726:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800372a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d11a      	bne.n	8003768 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d903      	bls.n	8003746 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003764:	6113      	str	r3, [r2, #16]
 8003766:	e01b      	b.n	80037a0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003774:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6919      	ldr	r1, [r3, #16]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	440b      	add	r3, r1
 8003780:	1e59      	subs	r1, r3, #1
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	fbb1 f3f3 	udiv	r3, r1, r3
 800378a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800378c:	4ba2      	ldr	r3, [pc, #648]	; (8003a18 <USB_EPStartXfer+0x3c0>)
 800378e:	400b      	ands	r3, r1
 8003790:	69b9      	ldr	r1, [r7, #24]
 8003792:	0148      	lsls	r0, r1, #5
 8003794:	69f9      	ldr	r1, [r7, #28]
 8003796:	4401      	add	r1, r0
 8003798:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800379c:	4313      	orrs	r3, r2
 800379e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b6:	69b9      	ldr	r1, [r7, #24]
 80037b8:	0148      	lsls	r0, r1, #5
 80037ba:	69f9      	ldr	r1, [r7, #28]
 80037bc:	4401      	add	r1, r0
 80037be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037c2:	4313      	orrs	r3, r2
 80037c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	791b      	ldrb	r3, [r3, #4]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d11f      	bne.n	800380e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	0151      	lsls	r1, r2, #5
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	440a      	add	r2, r1
 8003804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800380c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d14b      	bne.n	80038ac <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	791b      	ldrb	r3, [r3, #4]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d128      	bne.n	800388a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d110      	bne.n	800386a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e00f      	b.n	800388a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	0151      	lsls	r1, r2, #5
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	440a      	add	r2, r1
 8003880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	0151      	lsls	r1, r2, #5
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	440a      	add	r2, r1
 80038a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e165      	b.n	8003b78 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	0151      	lsls	r1, r2, #5
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	440a      	add	r2, r1
 80038c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	791b      	ldrb	r3, [r3, #4]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d015      	beq.n	8003900 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 814d 	beq.w	8003b78 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	69f9      	ldr	r1, [r7, #28]
 80038f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038fa:	4313      	orrs	r3, r2
 80038fc:	634b      	str	r3, [r1, #52]	; 0x34
 80038fe:	e13b      	b.n	8003b78 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d110      	bne.n	8003932 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	0151      	lsls	r1, r2, #5
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	440a      	add	r2, r1
 8003926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e00f      	b.n	8003952 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	0151      	lsls	r1, r2, #5
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	440a      	add	r2, r1
 8003948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	68d9      	ldr	r1, [r3, #12]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	b298      	uxth	r0, r3
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4603      	mov	r3, r0
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f9b7 	bl	8003cda <USB_WritePacket>
 800396c:	e104      	b.n	8003b78 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	0151      	lsls	r1, r2, #5
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	440a      	add	r2, r1
 8003984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003988:	0cdb      	lsrs	r3, r3, #19
 800398a:	04db      	lsls	r3, r3, #19
 800398c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	0151      	lsls	r1, r2, #5
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	440a      	add	r2, r1
 80039a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039b0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d131      	bne.n	8003a1c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	69b9      	ldr	r1, [r7, #24]
 80039e8:	0148      	lsls	r0, r1, #5
 80039ea:	69f9      	ldr	r1, [r7, #28]
 80039ec:	4401      	add	r1, r0
 80039ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039f2:	4313      	orrs	r3, r2
 80039f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	0151      	lsls	r1, r2, #5
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	440a      	add	r2, r1
 8003a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a14:	6113      	str	r3, [r2, #16]
 8003a16:	e061      	b.n	8003adc <USB_EPStartXfer+0x484>
 8003a18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d123      	bne.n	8003a6c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	0148      	lsls	r0, r1, #5
 8003a3e:	69f9      	ldr	r1, [r7, #28]
 8003a40:	4401      	add	r1, r0
 8003a42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a46:	4313      	orrs	r3, r2
 8003a48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	0151      	lsls	r1, r2, #5
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	440a      	add	r2, r1
 8003a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a68:	6113      	str	r3, [r2, #16]
 8003a6a:	e037      	b.n	8003adc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4413      	add	r3, r2
 8003a76:	1e5a      	subs	r2, r3, #1
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	8afa      	ldrh	r2, [r7, #22]
 8003a88:	fb03 f202 	mul.w	r2, r3, r2
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	8afb      	ldrh	r3, [r7, #22]
 8003aa0:	04d9      	lsls	r1, r3, #19
 8003aa2:	4b38      	ldr	r3, [pc, #224]	; (8003b84 <USB_EPStartXfer+0x52c>)
 8003aa4:	400b      	ands	r3, r1
 8003aa6:	69b9      	ldr	r1, [r7, #24]
 8003aa8:	0148      	lsls	r0, r1, #5
 8003aaa:	69f9      	ldr	r1, [r7, #28]
 8003aac:	4401      	add	r1, r0
 8003aae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003acc:	69b9      	ldr	r1, [r7, #24]
 8003ace:	0148      	lsls	r0, r1, #5
 8003ad0:	69f9      	ldr	r1, [r7, #28]
 8003ad2:	4401      	add	r1, r0
 8003ad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d10d      	bne.n	8003afe <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	68d9      	ldr	r1, [r3, #12]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afa:	460a      	mov	r2, r1
 8003afc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	791b      	ldrb	r3, [r3, #4]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d128      	bne.n	8003b58 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d110      	bne.n	8003b38 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	0151      	lsls	r1, r2, #5
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	440a      	add	r2, r1
 8003b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e00f      	b.n	8003b58 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	1ff80000 	.word	0x1ff80000

08003b88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	785b      	ldrb	r3, [r3, #1]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d14a      	bne.n	8003c3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bbe:	f040 8086 	bne.w	8003cce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	7812      	ldrb	r2, [r2, #0]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003be4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	0151      	lsls	r1, r2, #5
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	440a      	add	r2, r1
 8003c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d902      	bls.n	8003c20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8003c1e:	e056      	b.n	8003cce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c38:	d0e7      	beq.n	8003c0a <USB_EPStopXfer+0x82>
 8003c3a:	e048      	b.n	8003cce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c54:	d13b      	bne.n	8003cce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	7812      	ldrb	r2, [r2, #0]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d902      	bls.n	8003cb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8003cb2:	e00c      	b.n	8003cce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ccc:	d0e7      	beq.n	8003c9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b089      	sub	sp, #36	; 0x24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	460b      	mov	r3, r1
 8003cea:	71fb      	strb	r3, [r7, #7]
 8003cec:	4613      	mov	r3, r2
 8003cee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003cf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d123      	bne.n	8003d48 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d00:	88bb      	ldrh	r3, [r7, #4]
 8003d02:	3303      	adds	r3, #3
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e018      	b.n	8003d40 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	031a      	lsls	r2, r3, #12
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3301      	adds	r3, #1
 8003d32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	3301      	adds	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3e2      	bcc.n	8003d0e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3724      	adds	r7, #36	; 0x24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b08b      	sub	sp, #44	; 0x2c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
 8003d7e:	e014      	b.n	8003daa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	3301      	adds	r3, #1
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	3301      	adds	r3, #1
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	3301      	adds	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	3301      	adds	r3, #1
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	6a3a      	ldr	r2, [r7, #32]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d3e6      	bcc.n	8003d80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003db2:	8bfb      	ldrh	r3, [r7, #30]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01e      	beq.n	8003df6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f107 0310 	add.w	r3, r7, #16
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	701a      	strb	r2, [r3, #0]
      i++;
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	3301      	adds	r3, #1
 8003de2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	3301      	adds	r3, #1
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003dea:	8bfb      	ldrh	r3, [r7, #30]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003df0:	8bfb      	ldrh	r3, [r7, #30]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ea      	bne.n	8003dcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	372c      	adds	r7, #44	; 0x2c
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d12c      	bne.n	8003e78 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db12      	blt.n	8003e56 <USB_EPSetStall+0x54>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00f      	beq.n	8003e56 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e54:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e02b      	b.n	8003ed0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	db12      	blt.n	8003eb0 <USB_EPSetStall+0xae>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00f      	beq.n	8003eb0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	0151      	lsls	r1, r2, #5
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	440a      	add	r2, r1
 8003ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	0151      	lsls	r1, r2, #5
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ece:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d128      	bne.n	8003f4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	791b      	ldrb	r3, [r3, #4]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d003      	beq.n	8003f28 <USB_EPClearStall+0x4c>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	791b      	ldrb	r3, [r3, #4]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d138      	bne.n	8003f9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	e027      	b.n	8003f9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	791b      	ldrb	r3, [r3, #4]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d003      	beq.n	8003f7a <USB_EPClearStall+0x9e>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	791b      	ldrb	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d10f      	bne.n	8003f9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	0151      	lsls	r1, r2, #5
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	440a      	add	r2, r1
 8003f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fc8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003fda:	68f9      	ldr	r1, [r7, #12]
 8003fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800400a:	f023 0303 	bic.w	r3, r3, #3
 800400e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800401e:	f023 0302 	bic.w	r3, r3, #2
 8004022:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405e:	f043 0302 	orr.w	r3, r3, #2
 8004062:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr

08004070 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004088:	68fb      	ldr	r3, [r7, #12]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	0c1b      	lsrs	r3, r3, #16
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	b29b      	uxth	r3, r3
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004126:	68bb      	ldr	r3, [r7, #8]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004132:	b480      	push	{r7}
 8004134:	b087      	sub	sp, #28
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004154:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	fa22 f303 	lsr.w	r3, r2, r3
 8004162:	01db      	lsls	r3, r3, #7
 8004164:	b2db      	uxtb	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4013      	ands	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004180:	68bb      	ldr	r3, [r7, #8]
}
 8004182:	4618      	mov	r0, r3
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0301 	and.w	r3, r3, #1
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80041c4:	f023 0307 	bic.w	r3, r3, #7
 80041c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
	...

080041ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	460b      	mov	r3, r1
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	333c      	adds	r3, #60	; 0x3c
 8004202:	3304      	adds	r3, #4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4a25      	ldr	r2, [pc, #148]	; (80042a0 <USB_EP0_OutStart+0xb4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d90a      	bls.n	8004226 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800421c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004220:	d101      	bne.n	8004226 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e037      	b.n	8004296 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	2300      	movs	r3, #0
 8004230:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004254:	f043 0318 	orr.w	r3, r3, #24
 8004258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004268:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800426c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800426e:	7afb      	ldrb	r3, [r7, #11]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d10f      	bne.n	8004294 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800428e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004292:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	4f54300a 	.word	0x4f54300a

080042a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3301      	adds	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80042bc:	d901      	bls.n	80042c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e01b      	b.n	80042fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	daf2      	bge.n	80042b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f043 0201 	orr.w	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3301      	adds	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80042e6:	d901      	bls.n	80042ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e006      	b.n	80042fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d0f0      	beq.n	80042da <USB_CoreReset+0x36>

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	7c1b      	ldrb	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d115      	bne.n	8004348 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800431c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004320:	2202      	movs	r2, #2
 8004322:	2181      	movs	r1, #129	; 0x81
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f001 ff42 	bl	80061ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004334:	2202      	movs	r2, #2
 8004336:	2101      	movs	r1, #1
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f001 ff38 	bl	80061ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004346:	e012      	b.n	800436e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004348:	2340      	movs	r3, #64	; 0x40
 800434a:	2202      	movs	r2, #2
 800434c:	2181      	movs	r1, #129	; 0x81
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f001 ff2d 	bl	80061ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800435a:	2340      	movs	r3, #64	; 0x40
 800435c:	2202      	movs	r2, #2
 800435e:	2101      	movs	r1, #1
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f001 ff24 	bl	80061ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800436e:	2308      	movs	r3, #8
 8004370:	2203      	movs	r2, #3
 8004372:	2182      	movs	r1, #130	; 0x82
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f001 ff1a 	bl	80061ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004380:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004384:	f002 f866 	bl	8006454 <malloc>
 8004388:	4603      	mov	r3, r0
 800438a:	461a      	mov	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
 80043a0:	e026      	b.n	80043f0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043a8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	7c1b      	ldrb	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043d6:	2101      	movs	r1, #1
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f001 ffd8 	bl	800638e <USBD_LL_PrepareReceive>
 80043de:	e007      	b.n	80043f0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043e6:	2340      	movs	r3, #64	; 0x40
 80043e8:	2101      	movs	r1, #1
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f001 ffcf 	bl	800638e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800440a:	2181      	movs	r1, #129	; 0x81
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f001 fef4 	bl	80061fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004418:	2101      	movs	r1, #1
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f001 feed 	bl	80061fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004428:	2182      	movs	r1, #130	; 0x82
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f001 fee5 	bl	80061fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00e      	beq.n	800445e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004450:	4618      	mov	r0, r3
 8004452:	f002 f807 	bl	8006464 <free>
    pdev->pClassData = NULL;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004478:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800448e:	2b00      	cmp	r3, #0
 8004490:	d039      	beq.n	8004506 <USBD_CDC_Setup+0x9e>
 8004492:	2b20      	cmp	r3, #32
 8004494:	d17f      	bne.n	8004596 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	88db      	ldrh	r3, [r3, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d029      	beq.n	80044f2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b25b      	sxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	da11      	bge.n	80044cc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80044b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	88d2      	ldrh	r2, [r2, #6]
 80044ba:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80044bc:	6939      	ldr	r1, [r7, #16]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	88db      	ldrh	r3, [r3, #6]
 80044c2:	461a      	mov	r2, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f001 fa42 	bl	800594e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80044ca:	e06b      	b.n	80045a4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	785a      	ldrb	r2, [r3, #1]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	88db      	ldrh	r3, [r3, #6]
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80044e2:	6939      	ldr	r1, [r7, #16]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	88db      	ldrh	r3, [r3, #6]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 fa5d 	bl	80059aa <USBD_CtlPrepareRx>
      break;
 80044f0:	e058      	b.n	80045a4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	7850      	ldrb	r0, [r2, #1]
 80044fe:	2200      	movs	r2, #0
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	4798      	blx	r3
      break;
 8004504:	e04e      	b.n	80045a4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	2b0b      	cmp	r3, #11
 800450c:	d02e      	beq.n	800456c <USBD_CDC_Setup+0x104>
 800450e:	2b0b      	cmp	r3, #11
 8004510:	dc38      	bgt.n	8004584 <USBD_CDC_Setup+0x11c>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <USBD_CDC_Setup+0xb4>
 8004516:	2b0a      	cmp	r3, #10
 8004518:	d014      	beq.n	8004544 <USBD_CDC_Setup+0xdc>
 800451a:	e033      	b.n	8004584 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004522:	2b03      	cmp	r3, #3
 8004524:	d107      	bne.n	8004536 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004526:	f107 030c 	add.w	r3, r7, #12
 800452a:	2202      	movs	r2, #2
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f001 fa0d 	bl	800594e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004534:	e02e      	b.n	8004594 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f001 f99e 	bl	800587a <USBD_CtlError>
            ret = USBD_FAIL;
 800453e:	2302      	movs	r3, #2
 8004540:	75fb      	strb	r3, [r7, #23]
          break;
 8004542:	e027      	b.n	8004594 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800454a:	2b03      	cmp	r3, #3
 800454c:	d107      	bne.n	800455e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800454e:	f107 030f 	add.w	r3, r7, #15
 8004552:	2201      	movs	r2, #1
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f001 f9f9 	bl	800594e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800455c:	e01a      	b.n	8004594 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800455e:	6839      	ldr	r1, [r7, #0]
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f001 f98a 	bl	800587a <USBD_CtlError>
            ret = USBD_FAIL;
 8004566:	2302      	movs	r3, #2
 8004568:	75fb      	strb	r3, [r7, #23]
          break;
 800456a:	e013      	b.n	8004594 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004572:	2b03      	cmp	r3, #3
 8004574:	d00d      	beq.n	8004592 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8004576:	6839      	ldr	r1, [r7, #0]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f001 f97e 	bl	800587a <USBD_CtlError>
            ret = USBD_FAIL;
 800457e:	2302      	movs	r3, #2
 8004580:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004582:	e006      	b.n	8004592 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f001 f977 	bl	800587a <USBD_CtlError>
          ret = USBD_FAIL;
 800458c:	2302      	movs	r3, #2
 800458e:	75fb      	strb	r3, [r7, #23]
          break;
 8004590:	e000      	b.n	8004594 <USBD_CDC_Setup+0x12c>
          break;
 8004592:	bf00      	nop
      }
      break;
 8004594:	e006      	b.n	80045a4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8004596:	6839      	ldr	r1, [r7, #0]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f001 f96e 	bl	800587a <USBD_CtlError>
      ret = USBD_FAIL;
 800459e:	2302      	movs	r3, #2
 80045a0:	75fb      	strb	r3, [r7, #23]
      break;
 80045a2:	bf00      	nop
  }

  return ret;
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045c0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045c8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d03a      	beq.n	800464a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	331c      	adds	r3, #28
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d029      	beq.n	800463e <USBD_CDC_DataIn+0x90>
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	331c      	adds	r3, #28
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	78f9      	ldrb	r1, [r7, #3]
 80045fe:	68b8      	ldr	r0, [r7, #8]
 8004600:	460b      	mov	r3, r1
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	440b      	add	r3, r1
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4403      	add	r3, r0
 800460a:	331c      	adds	r3, #28
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d110      	bne.n	800463e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	331c      	adds	r3, #28
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004630:	78f9      	ldrb	r1, [r7, #3]
 8004632:	2300      	movs	r3, #0
 8004634:	2200      	movs	r2, #0
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 fe86 	bl	8006348 <USBD_LL_Transmit>
 800463c:	e003      	b.n	8004646 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e000      	b.n	800464c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800464a:	2302      	movs	r3, #2
  }
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004666:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f001 feb1 	bl	80063d4 <USBD_LL_GetRxDataSize>
 8004672:	4602      	mov	r2, r0
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004698:	4611      	mov	r1, r2
 800469a:	4798      	blx	r3

    return USBD_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046b8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <USBD_CDC_EP0_RxReady+0x46>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80046ca:	2bff      	cmp	r3, #255	; 0xff
 80046cc:	d010      	beq.n	80046f0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80046dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80046e4:	b292      	uxth	r2, r2
 80046e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	22ff      	movs	r2, #255	; 0xff
 80046ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2243      	movs	r2, #67	; 0x43
 8004708:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800470a:	4b03      	ldr	r3, [pc, #12]	; (8004718 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000098 	.word	0x20000098

0800471c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2243      	movs	r2, #67	; 0x43
 8004728:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800472a:	4b03      	ldr	r3, [pc, #12]	; (8004738 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000054 	.word	0x20000054

0800473c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2243      	movs	r2, #67	; 0x43
 8004748:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800474a:	4b03      	ldr	r3, [pc, #12]	; (8004758 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	200000dc 	.word	0x200000dc

0800475c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	220a      	movs	r2, #10
 8004768:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800476a:	4b03      	ldr	r3, [pc, #12]	; (8004778 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000010 	.word	0x20000010

0800477c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004786:	2302      	movs	r3, #2
 8004788:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800480e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01c      	beq.n	8004854 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004820:	2b00      	cmp	r3, #0
 8004822:	d115      	bne.n	8004850 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004842:	b29b      	uxth	r3, r3
 8004844:	2181      	movs	r1, #129	; 0x81
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 fd7e 	bl	8006348 <USBD_LL_Transmit>

      return USBD_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	e002      	b.n	8004856 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800486c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d017      	beq.n	80048a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	7c1b      	ldrb	r3, [r3, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800488a:	2101      	movs	r1, #1
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f001 fd7e 	bl	800638e <USBD_LL_PrepareReceive>
 8004892:	e007      	b.n	80048a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	2101      	movs	r1, #1
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f001 fd75 	bl	800638e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80048c6:	2302      	movs	r3, #2
 80048c8:	e01a      	b.n	8004900 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	79fa      	ldrb	r2, [r7, #7]
 80048f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f001 fbf3 	bl	80060e4 <USBD_LL_Init>

  return USBD_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d006      	beq.n	800492a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]
 8004928:	e001      	b.n	800492e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800492a:	2302      	movs	r3, #2
 800492c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800492e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr

0800493a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f001 fc18 	bl	8006178 <USBD_LL_Start>

  return USBD_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	460b      	mov	r3, r1
 8004970:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004972:	2302      	movs	r3, #2
 8004974:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	4611      	mov	r1, r2
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	4798      	blx	r3
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	4611      	mov	r1, r2
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4798      	blx	r3

  return USBD_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80049da:	6839      	ldr	r1, [r7, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 ff10 	bl	8005802 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d016      	beq.n	8004a34 <USBD_LL_SetupStage+0x6a>
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d81c      	bhi.n	8004a44 <USBD_LL_SetupStage+0x7a>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <USBD_LL_SetupStage+0x4a>
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d008      	beq.n	8004a24 <USBD_LL_SetupStage+0x5a>
 8004a12:	e017      	b.n	8004a44 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fa03 	bl	8004e28 <USBD_StdDevReq>
      break;
 8004a22:	e01a      	b.n	8004a5a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fa65 	bl	8004efc <USBD_StdItfReq>
      break;
 8004a32:	e012      	b.n	8004a5a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 faa5 	bl	8004f8c <USBD_StdEPReq>
      break;
 8004a42:	e00a      	b.n	8004a5a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 fbf0 	bl	8006238 <USBD_LL_StallEP>
      break;
 8004a58:	bf00      	nop
  }

  return USBD_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004a72:	7afb      	ldrb	r3, [r7, #11]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d14b      	bne.n	8004b10 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004a7e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d134      	bne.n	8004af4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d919      	bls.n	8004aca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d203      	bcs.n	8004ab8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	e002      	b.n	8004abe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 ff8f 	bl	80059e6 <USBD_CtlContinueRx>
 8004ac8:	e038      	b.n	8004b3c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d105      	bne.n	8004aec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 ff8c 	bl	8005a0a <USBD_CtlSendStatus>
 8004af2:	e023      	b.n	8004b3c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	d11e      	bne.n	8004b3c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004b06:	2100      	movs	r1, #0
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f001 fb95 	bl	8006238 <USBD_LL_StallEP>
 8004b0e:	e015      	b.n	8004b3c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00d      	beq.n	8004b38 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d108      	bne.n	8004b38 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	7afa      	ldrb	r2, [r7, #11]
 8004b30:	4611      	mov	r1, r2
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	4798      	blx	r3
 8004b36:	e001      	b.n	8004b3c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e000      	b.n	8004b3e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004b54:	7afb      	ldrb	r3, [r7, #11]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d17f      	bne.n	8004c5a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3314      	adds	r3, #20
 8004b5e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d15c      	bne.n	8004c24 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d915      	bls.n	8004ba2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fef9 	bl	8005986 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b94:	2300      	movs	r3, #0
 8004b96:	2200      	movs	r2, #0
 8004b98:	2100      	movs	r1, #0
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f001 fbf7 	bl	800638e <USBD_LL_PrepareReceive>
 8004ba0:	e04e      	b.n	8004c40 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	6912      	ldr	r2, [r2, #16]
 8004baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bae:	fb01 f202 	mul.w	r2, r1, r2
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d11c      	bne.n	8004bf2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d316      	bcc.n	8004bf2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d20f      	bcs.n	8004bf2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 fed5 	bl	8005986 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004be4:	2300      	movs	r3, #0
 8004be6:	2200      	movs	r2, #0
 8004be8:	2100      	movs	r1, #0
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f001 fbcf 	bl	800638e <USBD_LL_PrepareReceive>
 8004bf0:	e026      	b.n	8004c40 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d105      	bne.n	8004c14 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004c14:	2180      	movs	r1, #128	; 0x80
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f001 fb0e 	bl	8006238 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 ff07 	bl	8005a30 <USBD_CtlReceiveStatus>
 8004c22:	e00d      	b.n	8004c40 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d004      	beq.n	8004c38 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004c38:	2180      	movs	r1, #128	; 0x80
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f001 fafc 	bl	8006238 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d11d      	bne.n	8004c86 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff fe81 	bl	8004952 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004c58:	e015      	b.n	8004c86 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d108      	bne.n	8004c82 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	7afa      	ldrb	r2, [r7, #11]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	4798      	blx	r3
 8004c80:	e001      	b.n	8004c86 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004c82:	2302      	movs	r3, #2
 8004c84:	e000      	b.n	8004c88 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c98:	2340      	movs	r3, #64	; 0x40
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f001 fa85 	bl	80061ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2240      	movs	r2, #64	; 0x40
 8004cb0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004cb4:	2340      	movs	r3, #64	; 0x40
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2180      	movs	r1, #128	; 0x80
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 fa77 	bl	80061ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2240      	movs	r2, #64	; 0x40
 8004cca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d009      	beq.n	8004d08 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6852      	ldr	r2, [r2, #4]
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	4611      	mov	r1, r2
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
  }

  return USBD_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2204      	movs	r2, #4
 8004d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr

08004d58 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d105      	bne.n	8004d76 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d10b      	bne.n	8004dac <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr

08004dfa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6852      	ldr	r2, [r2, #4]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	4611      	mov	r1, r2
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3

  return USBD_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d005      	beq.n	8004e4e <USBD_StdDevReq+0x26>
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	d84f      	bhi.n	8004ee6 <USBD_StdDevReq+0xbe>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <USBD_StdDevReq+0x36>
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d14b      	bne.n	8004ee6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	4798      	blx	r3
      break;
 8004e5c:	e048      	b.n	8004ef0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	2b09      	cmp	r3, #9
 8004e64:	d839      	bhi.n	8004eda <USBD_StdDevReq+0xb2>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <USBD_StdDevReq+0x44>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004ebd 	.word	0x08004ebd
 8004e70:	08004ed1 	.word	0x08004ed1
 8004e74:	08004edb 	.word	0x08004edb
 8004e78:	08004ec7 	.word	0x08004ec7
 8004e7c:	08004edb 	.word	0x08004edb
 8004e80:	08004e9f 	.word	0x08004e9f
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004edb 	.word	0x08004edb
 8004e8c:	08004eb3 	.word	0x08004eb3
 8004e90:	08004ea9 	.word	0x08004ea9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9dc 	bl	8005254 <USBD_GetDescriptor>
          break;
 8004e9c:	e022      	b.n	8004ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fb3f 	bl	8005524 <USBD_SetAddress>
          break;
 8004ea6:	e01d      	b.n	8004ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fb7e 	bl	80055ac <USBD_SetConfig>
          break;
 8004eb0:	e018      	b.n	8004ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fc07 	bl	80056c8 <USBD_GetConfig>
          break;
 8004eba:	e013      	b.n	8004ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004ebc:	6839      	ldr	r1, [r7, #0]
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fc37 	bl	8005732 <USBD_GetStatus>
          break;
 8004ec4:	e00e      	b.n	8004ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004ec6:	6839      	ldr	r1, [r7, #0]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fc65 	bl	8005798 <USBD_SetFeature>
          break;
 8004ece:	e009      	b.n	8004ee4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004ed0:	6839      	ldr	r1, [r7, #0]
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fc74 	bl	80057c0 <USBD_ClrFeature>
          break;
 8004ed8:	e004      	b.n	8004ee4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fccc 	bl	800587a <USBD_CtlError>
          break;
 8004ee2:	bf00      	nop
      }
      break;
 8004ee4:	e004      	b.n	8004ef0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fcc6 	bl	800587a <USBD_CtlError>
      break;
 8004eee:	bf00      	nop
  }

  return ret;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop

08004efc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d005      	beq.n	8004f22 <USBD_StdItfReq+0x26>
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d82e      	bhi.n	8004f78 <USBD_StdItfReq+0x7c>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <USBD_StdItfReq+0x26>
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d12a      	bne.n	8004f78 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d81d      	bhi.n	8004f6a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	889b      	ldrh	r3, [r3, #4]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d813      	bhi.n	8004f60 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	88db      	ldrh	r3, [r3, #6]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d110      	bne.n	8004f74 <USBD_StdItfReq+0x78>
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10d      	bne.n	8004f74 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fd56 	bl	8005a0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004f5e:	e009      	b.n	8004f74 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fc89 	bl	800587a <USBD_CtlError>
          break;
 8004f68:	e004      	b.n	8004f74 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8004f6a:	6839      	ldr	r1, [r7, #0]
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fc84 	bl	800587a <USBD_CtlError>
          break;
 8004f72:	e000      	b.n	8004f76 <USBD_StdItfReq+0x7a>
          break;
 8004f74:	bf00      	nop
      }
      break;
 8004f76:	e004      	b.n	8004f82 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8004f78:	6839      	ldr	r1, [r7, #0]
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fc7d 	bl	800587a <USBD_CtlError>
      break;
 8004f80:	bf00      	nop
  }

  return USBD_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	889b      	ldrh	r3, [r3, #4]
 8004f9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d007      	beq.n	8004fbc <USBD_StdEPReq+0x30>
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	f200 8146 	bhi.w	800523e <USBD_StdEPReq+0x2b2>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <USBD_StdEPReq+0x40>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	f040 8141 	bne.w	800523e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
      break;
 8004fca:	e13d      	b.n	8005248 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d10a      	bne.n	8004fee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	e12d      	b.n	800524a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d007      	beq.n	8005006 <USBD_StdEPReq+0x7a>
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	f300 811b 	bgt.w	8005232 <USBD_StdEPReq+0x2a6>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d072      	beq.n	80050e6 <USBD_StdEPReq+0x15a>
 8005000:	2b01      	cmp	r3, #1
 8005002:	d03a      	beq.n	800507a <USBD_StdEPReq+0xee>
 8005004:	e115      	b.n	8005232 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800500c:	2b02      	cmp	r3, #2
 800500e:	d002      	beq.n	8005016 <USBD_StdEPReq+0x8a>
 8005010:	2b03      	cmp	r3, #3
 8005012:	d015      	beq.n	8005040 <USBD_StdEPReq+0xb4>
 8005014:	e02b      	b.n	800506e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005016:	7bbb      	ldrb	r3, [r7, #14]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00c      	beq.n	8005036 <USBD_StdEPReq+0xaa>
 800501c:	7bbb      	ldrb	r3, [r7, #14]
 800501e:	2b80      	cmp	r3, #128	; 0x80
 8005020:	d009      	beq.n	8005036 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005022:	7bbb      	ldrb	r3, [r7, #14]
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 f906 	bl	8006238 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 f902 	bl	8006238 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005034:	e020      	b.n	8005078 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005036:	6839      	ldr	r1, [r7, #0]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fc1e 	bl	800587a <USBD_CtlError>
              break;
 800503e:	e01b      	b.n	8005078 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	885b      	ldrh	r3, [r3, #2]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10e      	bne.n	8005066 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005048:	7bbb      	ldrb	r3, [r7, #14]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <USBD_StdEPReq+0xda>
 800504e:	7bbb      	ldrb	r3, [r7, #14]
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d008      	beq.n	8005066 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	88db      	ldrh	r3, [r3, #6]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800505c:	7bbb      	ldrb	r3, [r7, #14]
 800505e:	4619      	mov	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 f8e9 	bl	8006238 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fccf 	bl	8005a0a <USBD_CtlSendStatus>

              break;
 800506c:	e004      	b.n	8005078 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fc02 	bl	800587a <USBD_CtlError>
              break;
 8005076:	bf00      	nop
          }
          break;
 8005078:	e0e0      	b.n	800523c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005080:	2b02      	cmp	r3, #2
 8005082:	d002      	beq.n	800508a <USBD_StdEPReq+0xfe>
 8005084:	2b03      	cmp	r3, #3
 8005086:	d015      	beq.n	80050b4 <USBD_StdEPReq+0x128>
 8005088:	e026      	b.n	80050d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800508a:	7bbb      	ldrb	r3, [r7, #14]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <USBD_StdEPReq+0x11e>
 8005090:	7bbb      	ldrb	r3, [r7, #14]
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d009      	beq.n	80050aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005096:	7bbb      	ldrb	r3, [r7, #14]
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f001 f8cc 	bl	8006238 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80050a0:	2180      	movs	r1, #128	; 0x80
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 f8c8 	bl	8006238 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80050a8:	e01c      	b.n	80050e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fbe4 	bl	800587a <USBD_CtlError>
              break;
 80050b2:	e017      	b.n	80050e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	885b      	ldrh	r3, [r3, #2]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d112      	bne.n	80050e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80050bc:	7bbb      	ldrb	r3, [r7, #14]
 80050be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80050c6:	7bbb      	ldrb	r3, [r7, #14]
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 f8d3 	bl	8006276 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fc9a 	bl	8005a0a <USBD_CtlSendStatus>
              }
              break;
 80050d6:	e004      	b.n	80050e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fbcd 	bl	800587a <USBD_CtlError>
              break;
 80050e0:	e000      	b.n	80050e4 <USBD_StdEPReq+0x158>
              break;
 80050e2:	bf00      	nop
          }
          break;
 80050e4:	e0aa      	b.n	800523c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d002      	beq.n	80050f6 <USBD_StdEPReq+0x16a>
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d032      	beq.n	800515a <USBD_StdEPReq+0x1ce>
 80050f4:	e097      	b.n	8005226 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050f6:	7bbb      	ldrb	r3, [r7, #14]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <USBD_StdEPReq+0x180>
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	2b80      	cmp	r3, #128	; 0x80
 8005100:	d004      	beq.n	800510c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005102:	6839      	ldr	r1, [r7, #0]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fbb8 	bl	800587a <USBD_CtlError>
                break;
 800510a:	e091      	b.n	8005230 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800510c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005110:	2b00      	cmp	r3, #0
 8005112:	da0b      	bge.n	800512c <USBD_StdEPReq+0x1a0>
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	3310      	adds	r3, #16
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	3304      	adds	r3, #4
 800512a:	e00b      	b.n	8005144 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800512c:	7bbb      	ldrb	r3, [r7, #14]
 800512e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	3304      	adds	r3, #4
 8005144:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2202      	movs	r2, #2
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fbfb 	bl	800594e <USBD_CtlSendData>
              break;
 8005158:	e06a      	b.n	8005230 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800515a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800515e:	2b00      	cmp	r3, #0
 8005160:	da11      	bge.n	8005186 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005162:	7bbb      	ldrb	r3, [r7, #14]
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	3318      	adds	r3, #24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d117      	bne.n	80051ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fb7b 	bl	800587a <USBD_CtlError>
                  break;
 8005184:	e054      	b.n	8005230 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005186:	7bbb      	ldrb	r3, [r7, #14]
 8005188:	f003 020f 	and.w	r2, r3, #15
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb68 	bl	800587a <USBD_CtlError>
                  break;
 80051aa:	e041      	b.n	8005230 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	da0b      	bge.n	80051cc <USBD_StdEPReq+0x240>
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	3310      	adds	r3, #16
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	4413      	add	r3, r2
 80051c8:	3304      	adds	r3, #4
 80051ca:	e00b      	b.n	80051e4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80051cc:	7bbb      	ldrb	r3, [r7, #14]
 80051ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	3304      	adds	r3, #4
 80051e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80051e6:	7bbb      	ldrb	r3, [r7, #14]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <USBD_StdEPReq+0x266>
 80051ec:	7bbb      	ldrb	r3, [r7, #14]
 80051ee:	2b80      	cmp	r3, #128	; 0x80
 80051f0:	d103      	bne.n	80051fa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e00e      	b.n	8005218 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80051fa:	7bbb      	ldrb	r3, [r7, #14]
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f001 f858 	bl	80062b4 <USBD_LL_IsStallEP>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e002      	b.n	8005218 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2202      	movs	r2, #2
 800521c:	4619      	mov	r1, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fb95 	bl	800594e <USBD_CtlSendData>
              break;
 8005224:	e004      	b.n	8005230 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005226:	6839      	ldr	r1, [r7, #0]
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fb26 	bl	800587a <USBD_CtlError>
              break;
 800522e:	bf00      	nop
          }
          break;
 8005230:	e004      	b.n	800523c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005232:	6839      	ldr	r1, [r7, #0]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fb20 	bl	800587a <USBD_CtlError>
          break;
 800523a:	bf00      	nop
      }
      break;
 800523c:	e004      	b.n	8005248 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb1a 	bl	800587a <USBD_CtlError>
      break;
 8005246:	bf00      	nop
  }

  return ret;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	885b      	ldrh	r3, [r3, #2]
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	2b06      	cmp	r3, #6
 8005276:	f200 8128 	bhi.w	80054ca <USBD_GetDescriptor+0x276>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <USBD_GetDescriptor+0x2c>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	0800529d 	.word	0x0800529d
 8005284:	080052b5 	.word	0x080052b5
 8005288:	080052f5 	.word	0x080052f5
 800528c:	080054cb 	.word	0x080054cb
 8005290:	080054cb 	.word	0x080054cb
 8005294:	0800546b 	.word	0x0800546b
 8005298:	08005497 	.word	0x08005497
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	7c12      	ldrb	r2, [r2, #16]
 80052a8:	f107 0108 	add.w	r1, r7, #8
 80052ac:	4610      	mov	r0, r2
 80052ae:	4798      	blx	r3
 80052b0:	60f8      	str	r0, [r7, #12]
      break;
 80052b2:	e112      	b.n	80054da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	7c1b      	ldrb	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10d      	bne.n	80052d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	f107 0208 	add.w	r2, r7, #8
 80052c8:	4610      	mov	r0, r2
 80052ca:	4798      	blx	r3
 80052cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3301      	adds	r3, #1
 80052d2:	2202      	movs	r2, #2
 80052d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80052d6:	e100      	b.n	80054da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f107 0208 	add.w	r2, r7, #8
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3301      	adds	r3, #1
 80052ee:	2202      	movs	r2, #2
 80052f0:	701a      	strb	r2, [r3, #0]
      break;
 80052f2:	e0f2      	b.n	80054da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	885b      	ldrh	r3, [r3, #2]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	f200 80ac 	bhi.w	8005458 <USBD_GetDescriptor+0x204>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <USBD_GetDescriptor+0xb4>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	08005321 	.word	0x08005321
 800530c:	08005355 	.word	0x08005355
 8005310:	08005389 	.word	0x08005389
 8005314:	080053bd 	.word	0x080053bd
 8005318:	080053f1 	.word	0x080053f1
 800531c:	08005425 	.word	0x08005425
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	7c12      	ldrb	r2, [r2, #16]
 8005338:	f107 0108 	add.w	r1, r7, #8
 800533c:	4610      	mov	r0, r2
 800533e:	4798      	blx	r3
 8005340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005342:	e091      	b.n	8005468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa97 	bl	800587a <USBD_CtlError>
            err++;
 800534c:	7afb      	ldrb	r3, [r7, #11]
 800534e:	3301      	adds	r3, #1
 8005350:	72fb      	strb	r3, [r7, #11]
          break;
 8005352:	e089      	b.n	8005468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	7c12      	ldrb	r2, [r2, #16]
 800536c:	f107 0108 	add.w	r1, r7, #8
 8005370:	4610      	mov	r0, r2
 8005372:	4798      	blx	r3
 8005374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005376:	e077      	b.n	8005468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fa7d 	bl	800587a <USBD_CtlError>
            err++;
 8005380:	7afb      	ldrb	r3, [r7, #11]
 8005382:	3301      	adds	r3, #1
 8005384:	72fb      	strb	r3, [r7, #11]
          break;
 8005386:	e06f      	b.n	8005468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	7c12      	ldrb	r2, [r2, #16]
 80053a0:	f107 0108 	add.w	r1, r7, #8
 80053a4:	4610      	mov	r0, r2
 80053a6:	4798      	blx	r3
 80053a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053aa:	e05d      	b.n	8005468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa63 	bl	800587a <USBD_CtlError>
            err++;
 80053b4:	7afb      	ldrb	r3, [r7, #11]
 80053b6:	3301      	adds	r3, #1
 80053b8:	72fb      	strb	r3, [r7, #11]
          break;
 80053ba:	e055      	b.n	8005468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	7c12      	ldrb	r2, [r2, #16]
 80053d4:	f107 0108 	add.w	r1, r7, #8
 80053d8:	4610      	mov	r0, r2
 80053da:	4798      	blx	r3
 80053dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053de:	e043      	b.n	8005468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa49 	bl	800587a <USBD_CtlError>
            err++;
 80053e8:	7afb      	ldrb	r3, [r7, #11]
 80053ea:	3301      	adds	r3, #1
 80053ec:	72fb      	strb	r3, [r7, #11]
          break;
 80053ee:	e03b      	b.n	8005468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	7c12      	ldrb	r2, [r2, #16]
 8005408:	f107 0108 	add.w	r1, r7, #8
 800540c:	4610      	mov	r0, r2
 800540e:	4798      	blx	r3
 8005410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005412:	e029      	b.n	8005468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa2f 	bl	800587a <USBD_CtlError>
            err++;
 800541c:	7afb      	ldrb	r3, [r7, #11]
 800541e:	3301      	adds	r3, #1
 8005420:	72fb      	strb	r3, [r7, #11]
          break;
 8005422:	e021      	b.n	8005468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00b      	beq.n	8005448 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	7c12      	ldrb	r2, [r2, #16]
 800543c:	f107 0108 	add.w	r1, r7, #8
 8005440:	4610      	mov	r0, r2
 8005442:	4798      	blx	r3
 8005444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005446:	e00f      	b.n	8005468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fa15 	bl	800587a <USBD_CtlError>
            err++;
 8005450:	7afb      	ldrb	r3, [r7, #11]
 8005452:	3301      	adds	r3, #1
 8005454:	72fb      	strb	r3, [r7, #11]
          break;
 8005456:	e007      	b.n	8005468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa0d 	bl	800587a <USBD_CtlError>
          err++;
 8005460:	7afb      	ldrb	r3, [r7, #11]
 8005462:	3301      	adds	r3, #1
 8005464:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005466:	e038      	b.n	80054da <USBD_GetDescriptor+0x286>
 8005468:	e037      	b.n	80054da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7c1b      	ldrb	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	f107 0208 	add.w	r2, r7, #8
 800547e:	4610      	mov	r0, r2
 8005480:	4798      	blx	r3
 8005482:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005484:	e029      	b.n	80054da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f9f6 	bl	800587a <USBD_CtlError>
        err++;
 800548e:	7afb      	ldrb	r3, [r7, #11]
 8005490:	3301      	adds	r3, #1
 8005492:	72fb      	strb	r3, [r7, #11]
      break;
 8005494:	e021      	b.n	80054da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	7c1b      	ldrb	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10d      	bne.n	80054ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	f107 0208 	add.w	r2, r7, #8
 80054aa:	4610      	mov	r0, r2
 80054ac:	4798      	blx	r3
 80054ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3301      	adds	r3, #1
 80054b4:	2207      	movs	r2, #7
 80054b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80054b8:	e00f      	b.n	80054da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f9dc 	bl	800587a <USBD_CtlError>
        err++;
 80054c2:	7afb      	ldrb	r3, [r7, #11]
 80054c4:	3301      	adds	r3, #1
 80054c6:	72fb      	strb	r3, [r7, #11]
      break;
 80054c8:	e007      	b.n	80054da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f9d4 	bl	800587a <USBD_CtlError>
      err++;
 80054d2:	7afb      	ldrb	r3, [r7, #11]
 80054d4:	3301      	adds	r3, #1
 80054d6:	72fb      	strb	r3, [r7, #11]
      break;
 80054d8:	bf00      	nop
  }

  if (err != 0U)
 80054da:	7afb      	ldrb	r3, [r7, #11]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11c      	bne.n	800551a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80054e0:	893b      	ldrh	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d011      	beq.n	800550a <USBD_GetDescriptor+0x2b6>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	88db      	ldrh	r3, [r3, #6]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	88da      	ldrh	r2, [r3, #6]
 80054f2:	893b      	ldrh	r3, [r7, #8]
 80054f4:	4293      	cmp	r3, r2
 80054f6:	bf28      	it	cs
 80054f8:	4613      	movcs	r3, r2
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80054fe:	893b      	ldrh	r3, [r7, #8]
 8005500:	461a      	mov	r2, r3
 8005502:	68f9      	ldr	r1, [r7, #12]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fa22 	bl	800594e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	88db      	ldrh	r3, [r3, #6]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa79 	bl	8005a0a <USBD_CtlSendStatus>
 8005518:	e000      	b.n	800551c <USBD_GetDescriptor+0x2c8>
    return;
 800551a:	bf00      	nop
    }
  }
}
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop

08005524 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	889b      	ldrh	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d130      	bne.n	8005598 <USBD_SetAddress+0x74>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	88db      	ldrh	r3, [r3, #6]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d12c      	bne.n	8005598 <USBD_SetAddress+0x74>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	885b      	ldrh	r3, [r3, #2]
 8005542:	2b7f      	cmp	r3, #127	; 0x7f
 8005544:	d828      	bhi.n	8005598 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	885b      	ldrh	r3, [r3, #2]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005550:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005558:	2b03      	cmp	r3, #3
 800555a:	d104      	bne.n	8005566 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f98b 	bl	800587a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005564:	e01d      	b.n	80055a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7bfa      	ldrb	r2, [r7, #15]
 800556a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fec9 	bl	800630a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fa46 	bl	8005a0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d004      	beq.n	800558e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800558c:	e009      	b.n	80055a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005596:	e004      	b.n	80055a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f96d 	bl	800587a <USBD_CtlError>
  }
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	885b      	ldrh	r3, [r3, #2]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	4b41      	ldr	r3, [pc, #260]	; (80056c4 <USBD_SetConfig+0x118>)
 80055be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80055c0:	4b40      	ldr	r3, [pc, #256]	; (80056c4 <USBD_SetConfig+0x118>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d904      	bls.n	80055d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f955 	bl	800587a <USBD_CtlError>
 80055d0:	e075      	b.n	80056be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d002      	beq.n	80055e2 <USBD_SetConfig+0x36>
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d023      	beq.n	8005628 <USBD_SetConfig+0x7c>
 80055e0:	e062      	b.n	80056a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80055e2:	4b38      	ldr	r3, [pc, #224]	; (80056c4 <USBD_SetConfig+0x118>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01a      	beq.n	8005620 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80055ea:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <USBD_SetConfig+0x118>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2203      	movs	r2, #3
 80055f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80055fc:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <USBD_SetConfig+0x118>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff f9af 	bl	8004966 <USBD_SetClassConfig>
 8005608:	4603      	mov	r3, r0
 800560a:	2b02      	cmp	r3, #2
 800560c:	d104      	bne.n	8005618 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f932 	bl	800587a <USBD_CtlError>
            return;
 8005616:	e052      	b.n	80056be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f9f6 	bl	8005a0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800561e:	e04e      	b.n	80056be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f9f2 	bl	8005a0a <USBD_CtlSendStatus>
        break;
 8005626:	e04a      	b.n	80056be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005628:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <USBD_SetConfig+0x118>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d112      	bne.n	8005656 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005638:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <USBD_SetConfig+0x118>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005642:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <USBD_SetConfig+0x118>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff f9ab 	bl	80049a4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9db 	bl	8005a0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005654:	e033      	b.n	80056be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005656:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <USBD_SetConfig+0x118>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d01d      	beq.n	80056a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff f999 	bl	80049a4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <USBD_SetConfig+0x118>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800567c:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <USBD_SetConfig+0x118>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff f96f 	bl	8004966 <USBD_SetClassConfig>
 8005688:	4603      	mov	r3, r0
 800568a:	2b02      	cmp	r3, #2
 800568c:	d104      	bne.n	8005698 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f8f2 	bl	800587a <USBD_CtlError>
            return;
 8005696:	e012      	b.n	80056be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f9b6 	bl	8005a0a <USBD_CtlSendStatus>
        break;
 800569e:	e00e      	b.n	80056be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f9b2 	bl	8005a0a <USBD_CtlSendStatus>
        break;
 80056a6:	e00a      	b.n	80056be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f8e5 	bl	800587a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <USBD_SetConfig+0x118>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff f974 	bl	80049a4 <USBD_ClrClassConfig>
        break;
 80056bc:	bf00      	nop
    }
  }
}
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	200001f4 	.word	0x200001f4

080056c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	88db      	ldrh	r3, [r3, #6]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d004      	beq.n	80056e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f8cc 	bl	800587a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80056e2:	e022      	b.n	800572a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	dc02      	bgt.n	80056f4 <USBD_GetConfig+0x2c>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dc03      	bgt.n	80056fa <USBD_GetConfig+0x32>
 80056f2:	e015      	b.n	8005720 <USBD_GetConfig+0x58>
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d00b      	beq.n	8005710 <USBD_GetConfig+0x48>
 80056f8:	e012      	b.n	8005720 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3308      	adds	r3, #8
 8005704:	2201      	movs	r2, #1
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f920 	bl	800594e <USBD_CtlSendData>
        break;
 800570e:	e00c      	b.n	800572a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	2201      	movs	r2, #1
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f918 	bl	800594e <USBD_CtlSendData>
        break;
 800571e:	e004      	b.n	800572a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8a9 	bl	800587a <USBD_CtlError>
        break;
 8005728:	bf00      	nop
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005742:	3b01      	subs	r3, #1
 8005744:	2b02      	cmp	r3, #2
 8005746:	d81e      	bhi.n	8005786 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	88db      	ldrh	r3, [r3, #6]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d004      	beq.n	800575a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f891 	bl	800587a <USBD_CtlError>
        break;
 8005758:	e01a      	b.n	8005790 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f043 0202 	orr.w	r2, r3, #2
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	330c      	adds	r3, #12
 800577a:	2202      	movs	r2, #2
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f8e5 	bl	800594e <USBD_CtlSendData>
      break;
 8005784:	e004      	b.n	8005790 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f876 	bl	800587a <USBD_CtlError>
      break;
 800578e:	bf00      	nop
  }
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	885b      	ldrh	r3, [r3, #2]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d106      	bne.n	80057b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f929 	bl	8005a0a <USBD_CtlSendStatus>
  }
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d0:	3b01      	subs	r3, #1
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d80b      	bhi.n	80057ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	885b      	ldrh	r3, [r3, #2]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d10c      	bne.n	80057f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f90f 	bl	8005a0a <USBD_CtlSendStatus>
      }
      break;
 80057ec:	e004      	b.n	80057f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f842 	bl	800587a <USBD_CtlError>
      break;
 80057f6:	e000      	b.n	80057fa <USBD_ClrFeature+0x3a>
      break;
 80057f8:	bf00      	nop
  }
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	785a      	ldrb	r2, [r3, #1]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	3302      	adds	r3, #2
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b29a      	uxth	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	3303      	adds	r3, #3
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	b29b      	uxth	r3, r3
 8005830:	4413      	add	r3, r2
 8005832:	b29a      	uxth	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	3304      	adds	r3, #4
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b29a      	uxth	r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	3305      	adds	r3, #5
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	b29b      	uxth	r3, r3
 800584c:	4413      	add	r3, r2
 800584e:	b29a      	uxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	3306      	adds	r3, #6
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b29a      	uxth	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	3307      	adds	r3, #7
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	b29b      	uxth	r3, r3
 8005868:	4413      	add	r3, r2
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	80da      	strh	r2, [r3, #6]

}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005884:	2180      	movs	r1, #128	; 0x80
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fcd6 	bl	8006238 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800588c:	2100      	movs	r1, #0
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fcd2 	bl	8006238 <USBD_LL_StallEP>
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d032      	beq.n	8005918 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f834 	bl	8005920 <USBD_GetLen>
 80058b8:	4603      	mov	r3, r0
 80058ba:	3301      	adds	r3, #1
 80058bc:	b29b      	uxth	r3, r3
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	75fa      	strb	r2, [r7, #23]
 80058cc:	461a      	mov	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4413      	add	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	75fa      	strb	r2, [r7, #23]
 80058de:	461a      	mov	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4413      	add	r3, r2
 80058e4:	2203      	movs	r2, #3
 80058e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80058e8:	e012      	b.n	8005910 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	60fa      	str	r2, [r7, #12]
 80058f0:	7dfa      	ldrb	r2, [r7, #23]
 80058f2:	1c51      	adds	r1, r2, #1
 80058f4:	75f9      	strb	r1, [r7, #23]
 80058f6:	4611      	mov	r1, r2
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	440a      	add	r2, r1
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	75fa      	strb	r2, [r7, #23]
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4413      	add	r3, r2
 800590c:	2200      	movs	r2, #0
 800590e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e8      	bne.n	80058ea <USBD_GetString+0x4e>
    }
  }
}
 8005918:	bf00      	nop
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800592c:	e005      	b.n	800593a <USBD_GetLen+0x1a>
  {
    len++;
 800592e:	7bfb      	ldrb	r3, [r7, #15]
 8005930:	3301      	adds	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3301      	adds	r3, #1
 8005938:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f5      	bne.n	800592e <USBD_GetLen+0xe>
  }

  return len;
 8005942:	7bfb      	ldrb	r3, [r7, #15]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	4613      	mov	r3, r2
 800595a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2202      	movs	r2, #2
 8005960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	2100      	movs	r1, #0
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fce6 	bl	8006348 <USBD_LL_Transmit>

  return USBD_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	4613      	mov	r3, r2
 8005992:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	2100      	movs	r1, #0
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fcd4 	bl	8006348 <USBD_LL_Transmit>

  return USBD_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	4613      	mov	r3, r2
 80059b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2203      	movs	r2, #3
 80059bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80059c0:	88fa      	ldrh	r2, [r7, #6]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80059c8:	88fa      	ldrh	r2, [r7, #6]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	2100      	movs	r1, #0
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fcd9 	bl	800638e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	4613      	mov	r3, r2
 80059f2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	2100      	movs	r1, #0
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fcc7 	bl	800638e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2204      	movs	r2, #4
 8005a16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2100      	movs	r1, #0
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fc91 	bl	8006348 <USBD_LL_Transmit>

  return USBD_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2205      	movs	r2, #5
 8005a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a40:	2300      	movs	r3, #0
 8005a42:	2200      	movs	r2, #0
 8005a44:	2100      	movs	r1, #0
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fca1 	bl	800638e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4912      	ldr	r1, [pc, #72]	; (8005aa8 <MX_USB_DEVICE_Init+0x50>)
 8005a60:	4812      	ldr	r0, [pc, #72]	; (8005aac <MX_USB_DEVICE_Init+0x54>)
 8005a62:	f7fe ff26 	bl	80048b2 <USBD_Init>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005a6c:	f7fa fe9c 	bl	80007a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005a70:	490f      	ldr	r1, [pc, #60]	; (8005ab0 <MX_USB_DEVICE_Init+0x58>)
 8005a72:	480e      	ldr	r0, [pc, #56]	; (8005aac <MX_USB_DEVICE_Init+0x54>)
 8005a74:	f7fe ff48 	bl	8004908 <USBD_RegisterClass>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005a7e:	f7fa fe93 	bl	80007a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005a82:	490c      	ldr	r1, [pc, #48]	; (8005ab4 <MX_USB_DEVICE_Init+0x5c>)
 8005a84:	4809      	ldr	r0, [pc, #36]	; (8005aac <MX_USB_DEVICE_Init+0x54>)
 8005a86:	f7fe fe79 	bl	800477c <USBD_CDC_RegisterInterface>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005a90:	f7fa fe8a 	bl	80007a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005a94:	4805      	ldr	r0, [pc, #20]	; (8005aac <MX_USB_DEVICE_Init+0x54>)
 8005a96:	f7fe ff50 	bl	800493a <USBD_Start>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005aa0:	f7fa fe82 	bl	80007a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005aa4:	bf00      	nop
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000130 	.word	0x20000130
 8005aac:	200001f8 	.word	0x200001f8
 8005ab0:	2000001c 	.word	0x2000001c
 8005ab4:	20000120 	.word	0x20000120

08005ab8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005abc:	2200      	movs	r2, #0
 8005abe:	4905      	ldr	r1, [pc, #20]	; (8005ad4 <CDC_Init_FS+0x1c>)
 8005ac0:	4805      	ldr	r0, [pc, #20]	; (8005ad8 <CDC_Init_FS+0x20>)
 8005ac2:	f7fe fe71 	bl	80047a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005ac6:	4905      	ldr	r1, [pc, #20]	; (8005adc <CDC_Init_FS+0x24>)
 8005ac8:	4803      	ldr	r0, [pc, #12]	; (8005ad8 <CDC_Init_FS+0x20>)
 8005aca:	f7fe fe86 	bl	80047da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005ace:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000cbc 	.word	0x20000cbc
 8005ad8:	200001f8 	.word	0x200001f8
 8005adc:	200004bc 	.word	0x200004bc

08005ae0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005ae4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr
	...

08005af0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	6039      	str	r1, [r7, #0]
 8005afa:	71fb      	strb	r3, [r7, #7]
 8005afc:	4613      	mov	r3, r2
 8005afe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b23      	cmp	r3, #35	; 0x23
 8005b04:	d84a      	bhi.n	8005b9c <CDC_Control_FS+0xac>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <CDC_Control_FS+0x1c>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b9d 	.word	0x08005b9d
 8005b10:	08005b9d 	.word	0x08005b9d
 8005b14:	08005b9d 	.word	0x08005b9d
 8005b18:	08005b9d 	.word	0x08005b9d
 8005b1c:	08005b9d 	.word	0x08005b9d
 8005b20:	08005b9d 	.word	0x08005b9d
 8005b24:	08005b9d 	.word	0x08005b9d
 8005b28:	08005b9d 	.word	0x08005b9d
 8005b2c:	08005b9d 	.word	0x08005b9d
 8005b30:	08005b9d 	.word	0x08005b9d
 8005b34:	08005b9d 	.word	0x08005b9d
 8005b38:	08005b9d 	.word	0x08005b9d
 8005b3c:	08005b9d 	.word	0x08005b9d
 8005b40:	08005b9d 	.word	0x08005b9d
 8005b44:	08005b9d 	.word	0x08005b9d
 8005b48:	08005b9d 	.word	0x08005b9d
 8005b4c:	08005b9d 	.word	0x08005b9d
 8005b50:	08005b9d 	.word	0x08005b9d
 8005b54:	08005b9d 	.word	0x08005b9d
 8005b58:	08005b9d 	.word	0x08005b9d
 8005b5c:	08005b9d 	.word	0x08005b9d
 8005b60:	08005b9d 	.word	0x08005b9d
 8005b64:	08005b9d 	.word	0x08005b9d
 8005b68:	08005b9d 	.word	0x08005b9d
 8005b6c:	08005b9d 	.word	0x08005b9d
 8005b70:	08005b9d 	.word	0x08005b9d
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005b9d 	.word	0x08005b9d
 8005b80:	08005b9d 	.word	0x08005b9d
 8005b84:	08005b9d 	.word	0x08005b9d
 8005b88:	08005b9d 	.word	0x08005b9d
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005b9d 	.word	0x08005b9d
 8005b94:	08005b9d 	.word	0x08005b9d
 8005b98:	08005b9d 	.word	0x08005b9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005b9c:	bf00      	nop
  }

  return (USBD_OK);
 8005b9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop

08005bac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4805      	ldr	r0, [pc, #20]	; (8005bd0 <CDC_Receive_FS+0x24>)
 8005bba:	f7fe fe0e 	bl	80047da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005bbe:	4804      	ldr	r0, [pc, #16]	; (8005bd0 <CDC_Receive_FS+0x24>)
 8005bc0:	f7fe fe4d 	bl	800485e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005bc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200001f8 	.word	0x200001f8

08005bd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <CDC_Transmit_FS+0x48>)
 8005be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e00b      	b.n	8005c12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005bfa:	887b      	ldrh	r3, [r7, #2]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4806      	ldr	r0, [pc, #24]	; (8005c1c <CDC_Transmit_FS+0x48>)
 8005c02:	f7fe fdd1 	bl	80047a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005c06:	4805      	ldr	r0, [pc, #20]	; (8005c1c <CDC_Transmit_FS+0x48>)
 8005c08:	f7fe fdfa 	bl	8004800 <USBD_CDC_TransmitPacket>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200001f8 	.word	0x200001f8

08005c20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2212      	movs	r2, #18
 8005c30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005c32:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	2000014c 	.word	0x2000014c

08005c44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	6039      	str	r1, [r7, #0]
 8005c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2204      	movs	r2, #4
 8005c54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005c56:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20000160 	.word	0x20000160

08005c68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d105      	bne.n	8005c86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	4907      	ldr	r1, [pc, #28]	; (8005c9c <USBD_FS_ProductStrDescriptor+0x34>)
 8005c7e:	4808      	ldr	r0, [pc, #32]	; (8005ca0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c80:	f7ff fe0c 	bl	800589c <USBD_GetString>
 8005c84:	e004      	b.n	8005c90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	4904      	ldr	r1, [pc, #16]	; (8005c9c <USBD_FS_ProductStrDescriptor+0x34>)
 8005c8a:	4805      	ldr	r0, [pc, #20]	; (8005ca0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c8c:	f7ff fe06 	bl	800589c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c90:	4b02      	ldr	r3, [pc, #8]	; (8005c9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200014bc 	.word	0x200014bc
 8005ca0:	08006718 	.word	0x08006718

08005ca4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	4904      	ldr	r1, [pc, #16]	; (8005cc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005cb4:	4804      	ldr	r0, [pc, #16]	; (8005cc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005cb6:	f7ff fdf1 	bl	800589c <USBD_GetString>
  return USBD_StrDesc;
 8005cba:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	200014bc 	.word	0x200014bc
 8005cc8:	08006730 	.word	0x08006730

08005ccc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	6039      	str	r1, [r7, #0]
 8005cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	221a      	movs	r2, #26
 8005cdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005cde:	f000 f843 	bl	8005d68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005ce2:	4b02      	ldr	r3, [pc, #8]	; (8005cec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000164 	.word	0x20000164

08005cf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	6039      	str	r1, [r7, #0]
 8005cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d105      	bne.n	8005d0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	4907      	ldr	r1, [pc, #28]	; (8005d24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005d06:	4808      	ldr	r0, [pc, #32]	; (8005d28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005d08:	f7ff fdc8 	bl	800589c <USBD_GetString>
 8005d0c:	e004      	b.n	8005d18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	4904      	ldr	r1, [pc, #16]	; (8005d24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005d12:	4805      	ldr	r0, [pc, #20]	; (8005d28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005d14:	f7ff fdc2 	bl	800589c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d18:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200014bc 	.word	0x200014bc
 8005d28:	08006744 	.word	0x08006744

08005d2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	6039      	str	r1, [r7, #0]
 8005d36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	4907      	ldr	r1, [pc, #28]	; (8005d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005d42:	4808      	ldr	r0, [pc, #32]	; (8005d64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005d44:	f7ff fdaa 	bl	800589c <USBD_GetString>
 8005d48:	e004      	b.n	8005d54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	4904      	ldr	r1, [pc, #16]	; (8005d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005d4e:	4805      	ldr	r0, [pc, #20]	; (8005d64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005d50:	f7ff fda4 	bl	800589c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d54:	4b02      	ldr	r3, [pc, #8]	; (8005d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	200014bc 	.word	0x200014bc
 8005d64:	08006750 	.word	0x08006750

08005d68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <Get_SerialNum+0x44>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <Get_SerialNum+0x48>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d7a:	4b0e      	ldr	r3, [pc, #56]	; (8005db4 <Get_SerialNum+0x4c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d8e:	2208      	movs	r2, #8
 8005d90:	4909      	ldr	r1, [pc, #36]	; (8005db8 <Get_SerialNum+0x50>)
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f814 	bl	8005dc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d98:	2204      	movs	r2, #4
 8005d9a:	4908      	ldr	r1, [pc, #32]	; (8005dbc <Get_SerialNum+0x54>)
 8005d9c:	68b8      	ldr	r0, [r7, #8]
 8005d9e:	f000 f80f 	bl	8005dc0 <IntToUnicode>
  }
}
 8005da2:	bf00      	nop
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	1fff7a10 	.word	0x1fff7a10
 8005db0:	1fff7a14 	.word	0x1fff7a14
 8005db4:	1fff7a18 	.word	0x1fff7a18
 8005db8:	20000166 	.word	0x20000166
 8005dbc:	20000176 	.word	0x20000176

08005dc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]
 8005dd6:	e027      	b.n	8005e28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	0f1b      	lsrs	r3, r3, #28
 8005ddc:	2b09      	cmp	r3, #9
 8005dde:	d80b      	bhi.n	8005df8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	0f1b      	lsrs	r3, r3, #28
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	4619      	mov	r1, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	440b      	add	r3, r1
 8005df0:	3230      	adds	r2, #48	; 0x30
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	e00a      	b.n	8005e0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	0f1b      	lsrs	r3, r3, #28
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	4619      	mov	r1, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	440b      	add	r3, r1
 8005e08:	3237      	adds	r2, #55	; 0x37
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	3301      	adds	r3, #1
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	3301      	adds	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
 8005e28:	7dfa      	ldrb	r2, [r7, #23]
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d3d3      	bcc.n	8005dd8 <IntToUnicode+0x18>
  }
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e5c:	d147      	bne.n	8005eee <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e5e:	2300      	movs	r3, #0
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	4b25      	ldr	r3, [pc, #148]	; (8005ef8 <HAL_PCD_MspInit+0xbc>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	4a24      	ldr	r2, [pc, #144]	; (8005ef8 <HAL_PCD_MspInit+0xbc>)
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e6e:	4b22      	ldr	r3, [pc, #136]	; (8005ef8 <HAL_PCD_MspInit+0xbc>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005e7a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e80:	2302      	movs	r3, #2
 8005e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005e8c:	230a      	movs	r3, #10
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4619      	mov	r1, r3
 8005e96:	4819      	ldr	r0, [pc, #100]	; (8005efc <HAL_PCD_MspInit+0xc0>)
 8005e98:	f7fa feea 	bl	8000c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005eaa:	f107 0314 	add.w	r3, r7, #20
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4812      	ldr	r0, [pc, #72]	; (8005efc <HAL_PCD_MspInit+0xc0>)
 8005eb2:	f7fa fedd 	bl	8000c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005eb6:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <HAL_PCD_MspInit+0xbc>)
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	4a0f      	ldr	r2, [pc, #60]	; (8005ef8 <HAL_PCD_MspInit+0xbc>)
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	6353      	str	r3, [r2, #52]	; 0x34
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <HAL_PCD_MspInit+0xbc>)
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	4a0b      	ldr	r2, [pc, #44]	; (8005ef8 <HAL_PCD_MspInit+0xbc>)
 8005ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ed2:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <HAL_PCD_MspInit+0xbc>)
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	2043      	movs	r0, #67	; 0x43
 8005ee4:	f7fa fe8d 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005ee8:	2043      	movs	r0, #67	; 0x43
 8005eea:	f7fa fea6 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005eee:	bf00      	nop
 8005ef0:	3728      	adds	r7, #40	; 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40020000 	.word	0x40020000

08005f00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fe fd57 	bl	80049ca <USBD_LL_SetupStage>
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8005f36:	78fa      	ldrb	r2, [r7, #3]
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f7fe fd89 	bl	8004a64 <USBD_LL_DataOutStage>
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	3320      	adds	r3, #32
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	4619      	mov	r1, r3
 8005f82:	f7fe fde0 	bl	8004b46 <USBD_LL_DataInStage>
}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fe fef0 	bl	8004d82 <USBD_LL_SOF>
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	79db      	ldrb	r3, [r3, #7]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
 8005fc2:	e008      	b.n	8005fd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	79db      	ldrb	r3, [r3, #7]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d102      	bne.n	8005fd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e001      	b.n	8005fd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005fd2:	f7fa fbe9 	bl	80007a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8005fdc:	7bfa      	ldrb	r2, [r7, #15]
 8005fde:	4611      	mov	r1, r2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe fe96 	bl	8004d12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe fe4f 	bl	8004c90 <USBD_LL_Reset>
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fe90 	bl	8004d30 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7adb      	ldrb	r3, [r3, #11]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006030:	4b04      	ldr	r3, [pc, #16]	; (8006044 <HAL_PCD_SuspendCallback+0x48>)
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	4a03      	ldr	r2, [pc, #12]	; (8006044 <HAL_PCD_SuspendCallback+0x48>)
 8006036:	f043 0306 	orr.w	r3, r3, #6
 800603a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	e000ed00 	.word	0xe000ed00

08006048 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fe7e 	bl	8004d58 <USBD_LL_Resume>
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	4611      	mov	r1, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fea7 	bl	8004dce <USBD_LL_IsoOUTIncomplete>
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fe89 	bl	8004db6 <USBD_LL_IsoINIncomplete>
}
 80060a4:	bf00      	nop
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fe93 	bl	8004de6 <USBD_LL_DevConnected>
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe fe8f 	bl	8004dfa <USBD_LL_DevDisconnected>
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d139      	bne.n	8006168 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80060f4:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <USBD_LL_Init+0x90>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c2 34d8 	str.w	r3, [r2, #1240]	; 0x4d8
  pdev->pData = &hpcd_USB_OTG_FS;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a1d      	ldr	r2, [pc, #116]	; (8006174 <USBD_LL_Init+0x90>)
 8006100:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <USBD_LL_Init+0x90>)
 8006106:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800610a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800610c:	4b19      	ldr	r3, [pc, #100]	; (8006174 <USBD_LL_Init+0x90>)
 800610e:	2204      	movs	r2, #4
 8006110:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006112:	4b18      	ldr	r3, [pc, #96]	; (8006174 <USBD_LL_Init+0x90>)
 8006114:	2202      	movs	r2, #2
 8006116:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006118:	4b16      	ldr	r3, [pc, #88]	; (8006174 <USBD_LL_Init+0x90>)
 800611a:	2200      	movs	r2, #0
 800611c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800611e:	4b15      	ldr	r3, [pc, #84]	; (8006174 <USBD_LL_Init+0x90>)
 8006120:	2202      	movs	r2, #2
 8006122:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006124:	4b13      	ldr	r3, [pc, #76]	; (8006174 <USBD_LL_Init+0x90>)
 8006126:	2200      	movs	r2, #0
 8006128:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800612a:	4b12      	ldr	r3, [pc, #72]	; (8006174 <USBD_LL_Init+0x90>)
 800612c:	2200      	movs	r2, #0
 800612e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006130:	4b10      	ldr	r3, [pc, #64]	; (8006174 <USBD_LL_Init+0x90>)
 8006132:	2200      	movs	r2, #0
 8006134:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006136:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <USBD_LL_Init+0x90>)
 8006138:	2200      	movs	r2, #0
 800613a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800613c:	480d      	ldr	r0, [pc, #52]	; (8006174 <USBD_LL_Init+0x90>)
 800613e:	f7fa ff4d 	bl	8000fdc <HAL_PCD_Init>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006148:	f7fa fb2e 	bl	80007a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800614c:	2180      	movs	r1, #128	; 0x80
 800614e:	4809      	ldr	r0, [pc, #36]	; (8006174 <USBD_LL_Init+0x90>)
 8006150:	f7fc f954 	bl	80023fc <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006154:	2240      	movs	r2, #64	; 0x40
 8006156:	2100      	movs	r1, #0
 8006158:	4806      	ldr	r0, [pc, #24]	; (8006174 <USBD_LL_Init+0x90>)
 800615a:	f7fc f909 	bl	8002370 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800615e:	2280      	movs	r2, #128	; 0x80
 8006160:	2101      	movs	r1, #1
 8006162:	4804      	ldr	r0, [pc, #16]	; (8006174 <USBD_LL_Init+0x90>)
 8006164:	f7fc f904 	bl	8002370 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200016bc 	.word	0x200016bc

08006178 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800618e:	4618      	mov	r0, r3
 8006190:	f7fb f833 	bl	80011fa <HAL_PCD_Start>
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f92e 	bl	80063fc <USBD_Get_USB_Status>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	4608      	mov	r0, r1
 80061b8:	4611      	mov	r1, r2
 80061ba:	461a      	mov	r2, r3
 80061bc:	4603      	mov	r3, r0
 80061be:	70fb      	strb	r3, [r7, #3]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70bb      	strb	r3, [r7, #2]
 80061c4:	4613      	mov	r3, r2
 80061c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80061d6:	78bb      	ldrb	r3, [r7, #2]
 80061d8:	883a      	ldrh	r2, [r7, #0]
 80061da:	78f9      	ldrb	r1, [r7, #3]
 80061dc:	f7fb fce6 	bl	8001bac <HAL_PCD_EP_Open>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f908 	bl	80063fc <USBD_Get_USB_Status>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	4611      	mov	r1, r2
 8006218:	4618      	mov	r0, r3
 800621a:	f7fb fd2f 	bl	8001c7c <HAL_PCD_EP_Close>
 800621e:	4603      	mov	r3, r0
 8006220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f8e9 	bl	80063fc <USBD_Get_USB_Status>
 800622a:	4603      	mov	r3, r0
 800622c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800622e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006252:	78fa      	ldrb	r2, [r7, #3]
 8006254:	4611      	mov	r1, r2
 8006256:	4618      	mov	r0, r3
 8006258:	f7fb fde6 	bl	8001e28 <HAL_PCD_EP_SetStall>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f8ca 	bl	80063fc <USBD_Get_USB_Status>
 8006268:	4603      	mov	r3, r0
 800626a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800626c:	7bbb      	ldrb	r3, [r7, #14]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f7fb fe2a 	bl	8001eee <HAL_PCD_EP_ClrStall>
 800629a:	4603      	mov	r3, r0
 800629c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f8ab 	bl	80063fc <USBD_Get_USB_Status>
 80062a6:	4603      	mov	r3, r0
 80062a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80062c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	da0b      	bge.n	80062e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	4613      	mov	r3, r2
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	3316      	adds	r3, #22
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	e00b      	b.n	8006300 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ee:	68f9      	ldr	r1, [r7, #12]
 80062f0:	4613      	mov	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	f203 2356 	addw	r3, r3, #598	; 0x256
 80062fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr

0800630a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006324:	78fa      	ldrb	r2, [r7, #3]
 8006326:	4611      	mov	r1, r2
 8006328:	4618      	mov	r0, r3
 800632a:	f7fb fc1b 	bl	8001b64 <HAL_PCD_SetAddress>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	4618      	mov	r0, r3
 8006336:	f000 f861 	bl	80063fc <USBD_Get_USB_Status>
 800633a:	4603      	mov	r3, r0
 800633c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800633e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	607a      	str	r2, [r7, #4]
 8006352:	461a      	mov	r2, r3
 8006354:	460b      	mov	r3, r1
 8006356:	72fb      	strb	r3, [r7, #11]
 8006358:	4613      	mov	r3, r2
 800635a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800636a:	893b      	ldrh	r3, [r7, #8]
 800636c:	7af9      	ldrb	r1, [r7, #11]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	f7fb fd20 	bl	8001db4 <HAL_PCD_EP_Transmit>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	4618      	mov	r0, r3
 800637c:	f000 f83e 	bl	80063fc <USBD_Get_USB_Status>
 8006380:	4603      	mov	r3, r0
 8006382:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006384:	7dbb      	ldrb	r3, [r7, #22]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b086      	sub	sp, #24
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	461a      	mov	r2, r3
 800639a:	460b      	mov	r3, r1
 800639c:	72fb      	strb	r3, [r7, #11]
 800639e:	4613      	mov	r3, r2
 80063a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80063b0:	893b      	ldrh	r3, [r7, #8]
 80063b2:	7af9      	ldrb	r1, [r7, #11]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	f7fb fcab 	bl	8001d10 <HAL_PCD_EP_Receive>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 f81b 	bl	80063fc <USBD_Get_USB_Status>
 80063c6:	4603      	mov	r3, r0
 80063c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80063ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063e6:	78fa      	ldrb	r2, [r7, #3]
 80063e8:	4611      	mov	r1, r2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fb fccb 	bl	8001d86 <HAL_PCD_EP_GetRxCount>
 80063f0:	4603      	mov	r3, r0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d817      	bhi.n	8006440 <USBD_Get_USB_Status+0x44>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <USBD_Get_USB_Status+0x1c>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	08006429 	.word	0x08006429
 800641c:	0800642f 	.word	0x0800642f
 8006420:	08006435 	.word	0x08006435
 8006424:	0800643b 	.word	0x0800643b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]
    break;
 800642c:	e00b      	b.n	8006446 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800642e:	2302      	movs	r3, #2
 8006430:	73fb      	strb	r3, [r7, #15]
    break;
 8006432:	e008      	b.n	8006446 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
    break;
 8006438:	e005      	b.n	8006446 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800643a:	2302      	movs	r3, #2
 800643c:	73fb      	strb	r3, [r7, #15]
    break;
 800643e:	e002      	b.n	8006446 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006440:	2302      	movs	r3, #2
 8006442:	73fb      	strb	r3, [r7, #15]
    break;
 8006444:	bf00      	nop
  }
  return usb_status;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <malloc>:
 8006454:	4b02      	ldr	r3, [pc, #8]	; (8006460 <malloc+0xc>)
 8006456:	4601      	mov	r1, r0
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	f000 b82b 	b.w	80064b4 <_malloc_r>
 800645e:	bf00      	nop
 8006460:	200001cc 	.word	0x200001cc

08006464 <free>:
 8006464:	4b02      	ldr	r3, [pc, #8]	; (8006470 <free+0xc>)
 8006466:	4601      	mov	r1, r0
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	f000 b8f3 	b.w	8006654 <_free_r>
 800646e:	bf00      	nop
 8006470:	200001cc 	.word	0x200001cc

08006474 <sbrk_aligned>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	4e0e      	ldr	r6, [pc, #56]	; (80064b0 <sbrk_aligned+0x3c>)
 8006478:	460c      	mov	r4, r1
 800647a:	6831      	ldr	r1, [r6, #0]
 800647c:	4605      	mov	r5, r0
 800647e:	b911      	cbnz	r1, 8006486 <sbrk_aligned+0x12>
 8006480:	f000 f8ac 	bl	80065dc <_sbrk_r>
 8006484:	6030      	str	r0, [r6, #0]
 8006486:	4621      	mov	r1, r4
 8006488:	4628      	mov	r0, r5
 800648a:	f000 f8a7 	bl	80065dc <_sbrk_r>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	d00a      	beq.n	80064a8 <sbrk_aligned+0x34>
 8006492:	1cc4      	adds	r4, r0, #3
 8006494:	f024 0403 	bic.w	r4, r4, #3
 8006498:	42a0      	cmp	r0, r4
 800649a:	d007      	beq.n	80064ac <sbrk_aligned+0x38>
 800649c:	1a21      	subs	r1, r4, r0
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 f89c 	bl	80065dc <_sbrk_r>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d101      	bne.n	80064ac <sbrk_aligned+0x38>
 80064a8:	f04f 34ff 	mov.w	r4, #4294967295
 80064ac:	4620      	mov	r0, r4
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	20001b9c 	.word	0x20001b9c

080064b4 <_malloc_r>:
 80064b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b8:	1ccd      	adds	r5, r1, #3
 80064ba:	f025 0503 	bic.w	r5, r5, #3
 80064be:	3508      	adds	r5, #8
 80064c0:	2d0c      	cmp	r5, #12
 80064c2:	bf38      	it	cc
 80064c4:	250c      	movcc	r5, #12
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	4607      	mov	r7, r0
 80064ca:	db01      	blt.n	80064d0 <_malloc_r+0x1c>
 80064cc:	42a9      	cmp	r1, r5
 80064ce:	d905      	bls.n	80064dc <_malloc_r+0x28>
 80064d0:	230c      	movs	r3, #12
 80064d2:	2600      	movs	r6, #0
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	4630      	mov	r0, r6
 80064d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065b0 <_malloc_r+0xfc>
 80064e0:	f000 f868 	bl	80065b4 <__malloc_lock>
 80064e4:	f8d8 3000 	ldr.w	r3, [r8]
 80064e8:	461c      	mov	r4, r3
 80064ea:	bb5c      	cbnz	r4, 8006544 <_malloc_r+0x90>
 80064ec:	4629      	mov	r1, r5
 80064ee:	4638      	mov	r0, r7
 80064f0:	f7ff ffc0 	bl	8006474 <sbrk_aligned>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	4604      	mov	r4, r0
 80064f8:	d155      	bne.n	80065a6 <_malloc_r+0xf2>
 80064fa:	f8d8 4000 	ldr.w	r4, [r8]
 80064fe:	4626      	mov	r6, r4
 8006500:	2e00      	cmp	r6, #0
 8006502:	d145      	bne.n	8006590 <_malloc_r+0xdc>
 8006504:	2c00      	cmp	r4, #0
 8006506:	d048      	beq.n	800659a <_malloc_r+0xe6>
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	4631      	mov	r1, r6
 800650c:	4638      	mov	r0, r7
 800650e:	eb04 0903 	add.w	r9, r4, r3
 8006512:	f000 f863 	bl	80065dc <_sbrk_r>
 8006516:	4581      	cmp	r9, r0
 8006518:	d13f      	bne.n	800659a <_malloc_r+0xe6>
 800651a:	6821      	ldr	r1, [r4, #0]
 800651c:	4638      	mov	r0, r7
 800651e:	1a6d      	subs	r5, r5, r1
 8006520:	4629      	mov	r1, r5
 8006522:	f7ff ffa7 	bl	8006474 <sbrk_aligned>
 8006526:	3001      	adds	r0, #1
 8006528:	d037      	beq.n	800659a <_malloc_r+0xe6>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	442b      	add	r3, r5
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	f8d8 3000 	ldr.w	r3, [r8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d038      	beq.n	80065aa <_malloc_r+0xf6>
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	42a2      	cmp	r2, r4
 800653c:	d12b      	bne.n	8006596 <_malloc_r+0xe2>
 800653e:	2200      	movs	r2, #0
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	e00f      	b.n	8006564 <_malloc_r+0xb0>
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	1b52      	subs	r2, r2, r5
 8006548:	d41f      	bmi.n	800658a <_malloc_r+0xd6>
 800654a:	2a0b      	cmp	r2, #11
 800654c:	d917      	bls.n	800657e <_malloc_r+0xca>
 800654e:	1961      	adds	r1, r4, r5
 8006550:	42a3      	cmp	r3, r4
 8006552:	6025      	str	r5, [r4, #0]
 8006554:	bf18      	it	ne
 8006556:	6059      	strne	r1, [r3, #4]
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	bf08      	it	eq
 800655c:	f8c8 1000 	streq.w	r1, [r8]
 8006560:	5162      	str	r2, [r4, r5]
 8006562:	604b      	str	r3, [r1, #4]
 8006564:	4638      	mov	r0, r7
 8006566:	f104 060b 	add.w	r6, r4, #11
 800656a:	f000 f829 	bl	80065c0 <__malloc_unlock>
 800656e:	f026 0607 	bic.w	r6, r6, #7
 8006572:	1d23      	adds	r3, r4, #4
 8006574:	1af2      	subs	r2, r6, r3
 8006576:	d0ae      	beq.n	80064d6 <_malloc_r+0x22>
 8006578:	1b9b      	subs	r3, r3, r6
 800657a:	50a3      	str	r3, [r4, r2]
 800657c:	e7ab      	b.n	80064d6 <_malloc_r+0x22>
 800657e:	42a3      	cmp	r3, r4
 8006580:	6862      	ldr	r2, [r4, #4]
 8006582:	d1dd      	bne.n	8006540 <_malloc_r+0x8c>
 8006584:	f8c8 2000 	str.w	r2, [r8]
 8006588:	e7ec      	b.n	8006564 <_malloc_r+0xb0>
 800658a:	4623      	mov	r3, r4
 800658c:	6864      	ldr	r4, [r4, #4]
 800658e:	e7ac      	b.n	80064ea <_malloc_r+0x36>
 8006590:	4634      	mov	r4, r6
 8006592:	6876      	ldr	r6, [r6, #4]
 8006594:	e7b4      	b.n	8006500 <_malloc_r+0x4c>
 8006596:	4613      	mov	r3, r2
 8006598:	e7cc      	b.n	8006534 <_malloc_r+0x80>
 800659a:	230c      	movs	r3, #12
 800659c:	4638      	mov	r0, r7
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	f000 f80e 	bl	80065c0 <__malloc_unlock>
 80065a4:	e797      	b.n	80064d6 <_malloc_r+0x22>
 80065a6:	6025      	str	r5, [r4, #0]
 80065a8:	e7dc      	b.n	8006564 <_malloc_r+0xb0>
 80065aa:	605b      	str	r3, [r3, #4]
 80065ac:	deff      	udf	#255	; 0xff
 80065ae:	bf00      	nop
 80065b0:	20001b98 	.word	0x20001b98

080065b4 <__malloc_lock>:
 80065b4:	4801      	ldr	r0, [pc, #4]	; (80065bc <__malloc_lock+0x8>)
 80065b6:	f000 b84b 	b.w	8006650 <__retarget_lock_acquire_recursive>
 80065ba:	bf00      	nop
 80065bc:	20001cdc 	.word	0x20001cdc

080065c0 <__malloc_unlock>:
 80065c0:	4801      	ldr	r0, [pc, #4]	; (80065c8 <__malloc_unlock+0x8>)
 80065c2:	f000 b846 	b.w	8006652 <__retarget_lock_release_recursive>
 80065c6:	bf00      	nop
 80065c8:	20001cdc 	.word	0x20001cdc

080065cc <memset>:
 80065cc:	4603      	mov	r3, r0
 80065ce:	4402      	add	r2, r0
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d100      	bne.n	80065d6 <memset+0xa>
 80065d4:	4770      	bx	lr
 80065d6:	f803 1b01 	strb.w	r1, [r3], #1
 80065da:	e7f9      	b.n	80065d0 <memset+0x4>

080065dc <_sbrk_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	2300      	movs	r3, #0
 80065e0:	4d05      	ldr	r5, [pc, #20]	; (80065f8 <_sbrk_r+0x1c>)
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	602b      	str	r3, [r5, #0]
 80065e8:	f7fa f93c 	bl	8000864 <_sbrk>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_sbrk_r+0x1a>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_sbrk_r+0x1a>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	20001cd8 	.word	0x20001cd8

080065fc <__errno>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	; (8006604 <__errno+0x8>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	200001cc 	.word	0x200001cc

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	2600      	movs	r6, #0
 800660c:	4d0c      	ldr	r5, [pc, #48]	; (8006640 <__libc_init_array+0x38>)
 800660e:	4c0d      	ldr	r4, [pc, #52]	; (8006644 <__libc_init_array+0x3c>)
 8006610:	1b64      	subs	r4, r4, r5
 8006612:	10a4      	asrs	r4, r4, #2
 8006614:	42a6      	cmp	r6, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	f000 f864 	bl	80066e4 <_init>
 800661c:	2600      	movs	r6, #0
 800661e:	4d0a      	ldr	r5, [pc, #40]	; (8006648 <__libc_init_array+0x40>)
 8006620:	4c0a      	ldr	r4, [pc, #40]	; (800664c <__libc_init_array+0x44>)
 8006622:	1b64      	subs	r4, r4, r5
 8006624:	10a4      	asrs	r4, r4, #2
 8006626:	42a6      	cmp	r6, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006630:	4798      	blx	r3
 8006632:	3601      	adds	r6, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	f855 3b04 	ldr.w	r3, [r5], #4
 800663a:	4798      	blx	r3
 800663c:	3601      	adds	r6, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	08006778 	.word	0x08006778
 8006644:	08006778 	.word	0x08006778
 8006648:	08006778 	.word	0x08006778
 800664c:	0800677c 	.word	0x0800677c

08006650 <__retarget_lock_acquire_recursive>:
 8006650:	4770      	bx	lr

08006652 <__retarget_lock_release_recursive>:
 8006652:	4770      	bx	lr

08006654 <_free_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4605      	mov	r5, r0
 8006658:	2900      	cmp	r1, #0
 800665a:	d040      	beq.n	80066de <_free_r+0x8a>
 800665c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006660:	1f0c      	subs	r4, r1, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	bfb8      	it	lt
 8006666:	18e4      	addlt	r4, r4, r3
 8006668:	f7ff ffa4 	bl	80065b4 <__malloc_lock>
 800666c:	4a1c      	ldr	r2, [pc, #112]	; (80066e0 <_free_r+0x8c>)
 800666e:	6813      	ldr	r3, [r2, #0]
 8006670:	b933      	cbnz	r3, 8006680 <_free_r+0x2c>
 8006672:	6063      	str	r3, [r4, #4]
 8006674:	6014      	str	r4, [r2, #0]
 8006676:	4628      	mov	r0, r5
 8006678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800667c:	f7ff bfa0 	b.w	80065c0 <__malloc_unlock>
 8006680:	42a3      	cmp	r3, r4
 8006682:	d908      	bls.n	8006696 <_free_r+0x42>
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	1821      	adds	r1, r4, r0
 8006688:	428b      	cmp	r3, r1
 800668a:	bf01      	itttt	eq
 800668c:	6819      	ldreq	r1, [r3, #0]
 800668e:	685b      	ldreq	r3, [r3, #4]
 8006690:	1809      	addeq	r1, r1, r0
 8006692:	6021      	streq	r1, [r4, #0]
 8006694:	e7ed      	b.n	8006672 <_free_r+0x1e>
 8006696:	461a      	mov	r2, r3
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	b10b      	cbz	r3, 80066a0 <_free_r+0x4c>
 800669c:	42a3      	cmp	r3, r4
 800669e:	d9fa      	bls.n	8006696 <_free_r+0x42>
 80066a0:	6811      	ldr	r1, [r2, #0]
 80066a2:	1850      	adds	r0, r2, r1
 80066a4:	42a0      	cmp	r0, r4
 80066a6:	d10b      	bne.n	80066c0 <_free_r+0x6c>
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	4401      	add	r1, r0
 80066ac:	1850      	adds	r0, r2, r1
 80066ae:	4283      	cmp	r3, r0
 80066b0:	6011      	str	r1, [r2, #0]
 80066b2:	d1e0      	bne.n	8006676 <_free_r+0x22>
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4408      	add	r0, r1
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	6053      	str	r3, [r2, #4]
 80066be:	e7da      	b.n	8006676 <_free_r+0x22>
 80066c0:	d902      	bls.n	80066c8 <_free_r+0x74>
 80066c2:	230c      	movs	r3, #12
 80066c4:	602b      	str	r3, [r5, #0]
 80066c6:	e7d6      	b.n	8006676 <_free_r+0x22>
 80066c8:	6820      	ldr	r0, [r4, #0]
 80066ca:	1821      	adds	r1, r4, r0
 80066cc:	428b      	cmp	r3, r1
 80066ce:	bf01      	itttt	eq
 80066d0:	6819      	ldreq	r1, [r3, #0]
 80066d2:	685b      	ldreq	r3, [r3, #4]
 80066d4:	1809      	addeq	r1, r1, r0
 80066d6:	6021      	streq	r1, [r4, #0]
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	6054      	str	r4, [r2, #4]
 80066dc:	e7cb      	b.n	8006676 <_free_r+0x22>
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	20001b98 	.word	0x20001b98

080066e4 <_init>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr

080066f0 <_fini>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr
