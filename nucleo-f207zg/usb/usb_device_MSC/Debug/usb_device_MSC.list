
usb_device_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ec  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007600  08007600  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08007600  08007600  00017600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007608  08007608  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08007610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019b10  20000170  08007780  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019c80  08007780  00029c80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020199  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcea  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eea  00000000  00000000  0002dec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  00030db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008db  00000000  00000000  000319d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002256c  00000000  00000000  000322b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116eb  00000000  00000000  0005481f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bca2f  00000000  00000000  00065f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032f8  00000000  00000000  0012293c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00125c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000170 	.word	0x20000170
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08007558 	.word	0x08007558

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000174 	.word	0x20000174
 80001c0:	08007558 	.word	0x08007558

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa16 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f805 	bl	80004da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f84a 	bl	8000568 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f006 fa0c 	bl	80068f0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x14>

080004da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b092      	sub	sp, #72	; 0x48
 80004de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e0:	f107 0318 	add.w	r3, r7, #24
 80004e4:	2230      	movs	r2, #48	; 0x30
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f006 ff9b 	bl	8007424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000504:	2310      	movs	r3, #16
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000508:	2302      	movs	r3, #2
 800050a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050c:	2300      	movs	r3, #0
 800050e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000510:	2310      	movs	r3, #16
 8000512:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000514:	23c0      	movs	r3, #192	; 0xc0
 8000516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000518:	2302      	movs	r3, #2
 800051a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800051c:	2304      	movs	r3, #4
 800051e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	f107 0318 	add.w	r3, r7, #24
 8000524:	4618      	mov	r0, r3
 8000526:	f001 ff8b 	bl	8002440 <HAL_RCC_OscConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000530:	f000 f91e 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000534:	230f      	movs	r3, #15
 8000536:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 f9ca 	bl	80028e8 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x84>
  {
    Error_Handler();
 800055a:	f000 f909 	bl	8000770 <Error_Handler>
  }
}
 800055e:	bf00      	nop
 8000560:	3748      	adds	r7, #72	; 0x48
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b75      	ldr	r3, [pc, #468]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a74      	ldr	r2, [pc, #464]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b72      	ldr	r3, [pc, #456]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4b6e      	ldr	r3, [pc, #440]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a6d      	ldr	r2, [pc, #436]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b6b      	ldr	r3, [pc, #428]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b67      	ldr	r3, [pc, #412]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a66      	ldr	r2, [pc, #408]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b64      	ldr	r3, [pc, #400]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b60      	ldr	r3, [pc, #384]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a5f      	ldr	r2, [pc, #380]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b59      	ldr	r3, [pc, #356]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a58      	ldr	r2, [pc, #352]	; (8000758 <MX_GPIO_Init+0x1f0>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b56      	ldr	r3, [pc, #344]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b52      	ldr	r3, [pc, #328]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a51      	ldr	r2, [pc, #324]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b4f      	ldr	r3, [pc, #316]	; (8000758 <MX_GPIO_Init+0x1f0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f244 0181 	movw	r1, #16513	; 0x4081
 800062c:	484b      	ldr	r0, [pc, #300]	; (800075c <MX_GPIO_Init+0x1f4>)
 800062e:	f000 fca1 	bl	8000f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	484a      	ldr	r0, [pc, #296]	; (8000760 <MX_GPIO_Init+0x1f8>)
 8000638:	f000 fc9c 	bl	8000f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800063c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000642:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	4844      	ldr	r0, [pc, #272]	; (8000764 <MX_GPIO_Init+0x1fc>)
 8000654:	f000 faf0 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000658:	2332      	movs	r3, #50	; 0x32
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000668:	230b      	movs	r3, #11
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	483c      	ldr	r0, [pc, #240]	; (8000764 <MX_GPIO_Init+0x1fc>)
 8000674:	f000 fae0 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000678:	2386      	movs	r3, #134	; 0x86
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000688:	230b      	movs	r3, #11
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4835      	ldr	r0, [pc, #212]	; (8000768 <MX_GPIO_Init+0x200>)
 8000694:	f000 fad0 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000698:	f244 0381 	movw	r3, #16513	; 0x4081
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	482a      	ldr	r0, [pc, #168]	; (800075c <MX_GPIO_Init+0x1f4>)
 80006b2:	f000 fac1 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c8:	230b      	movs	r3, #11
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	4822      	ldr	r0, [pc, #136]	; (800075c <MX_GPIO_Init+0x1f4>)
 80006d4:	f000 fab0 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80006d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006ea:	2307      	movs	r3, #7
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	481d      	ldr	r0, [pc, #116]	; (800076c <MX_GPIO_Init+0x204>)
 80006f6:	f000 fa9f 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4813      	ldr	r0, [pc, #76]	; (8000760 <MX_GPIO_Init+0x1f8>)
 8000712:	f000 fa91 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_GPIO_Init+0x1f8>)
 800072a:	f000 fa85 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800072e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_GPIO_Init+0x1f8>)
 800074c:	f000 fa74 	bl	8000c38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3730      	adds	r7, #48	; 0x30
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400
 8000760:	40021800 	.word	0x40021800
 8000764:	40020800 	.word	0x40020800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020c00 	.word	0x40020c00

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x48>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x48>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x48>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_MspInit+0x48>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_MspInit+0x48>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_MspInit+0x48>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40023800 	.word	0x40023800

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080e:	f000 f8c5 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <OTG_FS_IRQHandler+0x10>)
 800081e:	f000 fcf2 	bl	8001206 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2001965c 	.word	0x2001965c

0800082c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <_sbrk+0x5c>)
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <_sbrk+0x60>)
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <_sbrk+0x64>)
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <_sbrk+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <_sbrk+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	429a      	cmp	r2, r3
 800085a:	d207      	bcs.n	800086c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800085c:	f006 fdfa 	bl	8007454 <__errno>
 8000860:	4603      	mov	r3, r0
 8000862:	220c      	movs	r2, #12
 8000864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	e009      	b.n	8000880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_sbrk+0x64>)
 800087c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20020000 	.word	0x20020000
 800088c:	00000400 	.word	0x00000400
 8000890:	2000018c 	.word	0x2000018c
 8000894:	20019c80 	.word	0x20019c80

08000898 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80008a8:	f7ff fff6 	bl	8000898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	; (80008f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f006 fdc5 	bl	8007460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fdf5 	bl	80004c4 <main>
  bx  lr
 80008da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80008e8:	08007610 	.word	0x08007610
  ldr r2, =_sbss
 80008ec:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80008f0:	20019c80 	.word	0x20019c80

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f947 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	2000      	movs	r0, #0
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff ff26 	bl	800077c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f95f 	bl	8000c1e <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f927 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x20>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000190 	.word	0x20000190

080009c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000190 	.word	0x20000190

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff fff0 	bl	80009c0 <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffe0 	bl	80009c0 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4906      	ldr	r1, [pc, #24]	; (8000ab4 <__NVIC_EnableIRQ+0x34>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f7ff ff90 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff2d 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff42 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff90 	bl	8000b0c <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5f 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff35 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa2 	bl	8000b70 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c46:	e16f      	b.n	8000f28 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8161 	beq.w	8000f22 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d005      	beq.n	8000c78 <HAL_GPIO_Init+0x40>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d130      	bne.n	8000cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	f003 0201 	and.w	r2, r3, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d017      	beq.n	8000d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d123      	bne.n	8000d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	6939      	ldr	r1, [r7, #16]
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0203 	and.w	r2, r3, #3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 80bb 	beq.w	8000f22 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b64      	ldr	r3, [pc, #400]	; (8000f44 <HAL_GPIO_Init+0x30c>)
 8000db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db4:	4a63      	ldr	r2, [pc, #396]	; (8000f44 <HAL_GPIO_Init+0x30c>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbc:	4b61      	ldr	r3, [pc, #388]	; (8000f44 <HAL_GPIO_Init+0x30c>)
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc8:	4a5f      	ldr	r2, [pc, #380]	; (8000f48 <HAL_GPIO_Init+0x310>)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a57      	ldr	r2, [pc, #348]	; (8000f4c <HAL_GPIO_Init+0x314>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d031      	beq.n	8000e58 <HAL_GPIO_Init+0x220>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a56      	ldr	r2, [pc, #344]	; (8000f50 <HAL_GPIO_Init+0x318>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d02b      	beq.n	8000e54 <HAL_GPIO_Init+0x21c>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a55      	ldr	r2, [pc, #340]	; (8000f54 <HAL_GPIO_Init+0x31c>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d025      	beq.n	8000e50 <HAL_GPIO_Init+0x218>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a54      	ldr	r2, [pc, #336]	; (8000f58 <HAL_GPIO_Init+0x320>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d01f      	beq.n	8000e4c <HAL_GPIO_Init+0x214>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <HAL_GPIO_Init+0x324>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d019      	beq.n	8000e48 <HAL_GPIO_Init+0x210>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a52      	ldr	r2, [pc, #328]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d013      	beq.n	8000e44 <HAL_GPIO_Init+0x20c>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a51      	ldr	r2, [pc, #324]	; (8000f64 <HAL_GPIO_Init+0x32c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_Init+0x208>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a50      	ldr	r2, [pc, #320]	; (8000f68 <HAL_GPIO_Init+0x330>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a4f      	ldr	r2, [pc, #316]	; (8000f6c <HAL_GPIO_Init+0x334>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <HAL_GPIO_Init+0x200>
 8000e34:	2308      	movs	r3, #8
 8000e36:	e010      	b.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e38:	2309      	movs	r3, #9
 8000e3a:	e00e      	b.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	e00c      	b.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e40:	2306      	movs	r3, #6
 8000e42:	e00a      	b.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e44:	2305      	movs	r3, #5
 8000e46:	e008      	b.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e48:	2304      	movs	r3, #4
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e004      	b.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e002      	b.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	f002 0203 	and.w	r2, r2, #3
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	4093      	lsls	r3, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e6c:	4936      	ldr	r1, [pc, #216]	; (8000f48 <HAL_GPIO_Init+0x310>)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7a:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <HAL_GPIO_Init+0x338>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e9e:	4a34      	ldr	r2, [pc, #208]	; (8000f70 <HAL_GPIO_Init+0x338>)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <HAL_GPIO_Init+0x338>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ec8:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <HAL_GPIO_Init+0x338>)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <HAL_GPIO_Init+0x338>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef2:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <HAL_GPIO_Init+0x338>)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_GPIO_Init+0x338>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_GPIO_Init+0x338>)
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f47f ae88 	bne.w	8000c48 <HAL_GPIO_Init+0x10>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020c00 	.word	0x40020c00
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40021400 	.word	0x40021400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40021c00 	.word	0x40021c00
 8000f6c:	40022000 	.word	0x40022000
 8000f70:	40013c00 	.word	0x40013c00

08000f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
 8000f80:	4613      	mov	r3, r2
 8000f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f84:	787b      	ldrb	r3, [r7, #1]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f90:	e003      	b.n	8000f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	041a      	lsls	r2, r3, #16
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	619a      	str	r2, [r3, #24]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e101      	b.n	80011ba <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d106      	bne.n	8000fd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f005 fe41 	bl	8006c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fe4:	d102      	bne.n	8000fec <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 ff87 	bl	8002f04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7c1a      	ldrb	r2, [r3, #16]
 8000ffe:	f88d 2000 	strb.w	r2, [sp]
 8001002:	3304      	adds	r3, #4
 8001004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001006:	f001 fe71 	bl	8002cec <USB_CoreInit>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2202      	movs	r2, #2
 8001014:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0ce      	b.n	80011ba <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f001 ff7e 	bl	8002f24 <USB_SetCurrentMode>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2202      	movs	r2, #2
 8001032:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0bf      	b.n	80011ba <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e04a      	b.n	80010d6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3315      	adds	r3, #21
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	3314      	adds	r3, #20
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	b298      	uxth	r0, r3
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	332e      	adds	r3, #46	; 0x2e
 800107c:	4602      	mov	r2, r0
 800107e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	3318      	adds	r3, #24
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	331c      	adds	r3, #28
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	3320      	adds	r3, #32
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	3324      	adds	r3, #36	; 0x24
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	3301      	adds	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	791b      	ldrb	r3, [r3, #4]
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3af      	bcc.n	8001040 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e044      	b.n	8001170 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	f203 2355 	addw	r3, r3, #597	; 0x255
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	3301      	adds	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	429a      	cmp	r2, r3
 8001178:	d3b5      	bcc.n	80010e6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7c1a      	ldrb	r2, [r3, #16]
 8001182:	f88d 2000 	strb.w	r2, [sp]
 8001186:	3304      	adds	r3, #4
 8001188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118a:	f001 ff17 	bl	8002fbc <USB_DevInit>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2202      	movs	r2, #2
 8001198:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e00c      	b.n	80011ba <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 ff4e 	bl	8004054 <USB_DevDisconnect>

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_PCD_Start+0x16>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e012      	b.n	80011fe <HAL_PCD_Start+0x3c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  __HAL_PCD_ENABLE(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fe7d 	bl	8002ee4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 ff10 	bl	8004014 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001206:	b590      	push	{r4, r7, lr}
 8001208:	b08d      	sub	sp, #52	; 0x34
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f002 ffc7 	bl	80041b0 <USB_GetMode>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	f040 847e 	bne.w	8001b26 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f002 ff30 	bl	8004094 <USB_ReadInterrupts>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8474 	beq.w	8001b24 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f002 ff1d 	bl	8004094 <USB_ReadInterrupts>
 800125a:	4603      	mov	r3, r0
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b02      	cmp	r3, #2
 8001262:	d107      	bne.n	8001274 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f002 0202 	and.w	r2, r2, #2
 8001272:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f002 ff0b 	bl	8004094 <USB_ReadInterrupts>
 800127e:	4603      	mov	r3, r0
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b10      	cmp	r3, #16
 8001286:	d161      	bne.n	800134c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0210 	bic.w	r2, r2, #16
 8001296:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	f003 020f 	and.w	r2, r3, #15
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	3304      	adds	r3, #4
 80012b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	0c5b      	lsrs	r3, r3, #17
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d124      	bne.n	800130e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d035      	beq.n	800133c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012de:	b29b      	uxth	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	6a38      	ldr	r0, [r7, #32]
 80012e4:	f002 fd48 	bl	8003d78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f4:	441a      	add	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001306:	441a      	add	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	e016      	b.n	800133c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	0c5b      	lsrs	r3, r3, #17
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	2b06      	cmp	r3, #6
 8001318:	d110      	bne.n	800133c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001320:	2208      	movs	r2, #8
 8001322:	4619      	mov	r1, r3
 8001324:	6a38      	ldr	r0, [r7, #32]
 8001326:	f002 fd27 	bl	8003d78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001336:	441a      	add	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	699a      	ldr	r2, [r3, #24]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0210 	orr.w	r2, r2, #16
 800134a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fe9f 	bl	8004094 <USB_ReadInterrupts>
 8001356:	4603      	mov	r3, r0
 8001358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800135c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001360:	f040 80a7 	bne.w	80014b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fea3 	bl	80040b8 <USB_ReadDevAllOutEpInterrupt>
 8001372:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001374:	e099      	b.n	80014aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 808e 	beq.w	800149e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fec5 	bl	800411c <USB_ReadDevOutEPInterrupt>
 8001392:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00c      	beq.n	80013b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013aa:	461a      	mov	r2, r3
 80013ac:	2301      	movs	r3, #1
 80013ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fec0 	bl	8002138 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00c      	beq.n	80013dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ce:	461a      	mov	r2, r3
 80013d0:	2308      	movs	r3, #8
 80013d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 ff96 	bl	8002308 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	2310      	movs	r3, #16
 80013f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d030      	beq.n	8001464 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	2b80      	cmp	r3, #128	; 0x80
 800140c:	d109      	bne.n	8001422 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800141c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001420:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	3304      	adds	r3, #4
 8001436:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	78db      	ldrb	r3, [r3, #3]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d108      	bne.n	8001452 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2200      	movs	r2, #0
 8001444:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f005 fd17 	bl	8006e80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4413      	add	r3, r2
 800145a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800145e:	461a      	mov	r2, r3
 8001460:	2302      	movs	r3, #2
 8001462:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147a:	461a      	mov	r2, r3
 800147c:	2320      	movs	r3, #32
 800147e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d009      	beq.n	800149e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001496:	461a      	mov	r2, r3
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	3301      	adds	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f47f af62 	bne.w	8001376 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fdec 	bl	8004094 <USB_ReadInterrupts>
 80014bc:	4603      	mov	r3, r0
 80014be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014c6:	f040 80db 	bne.w	8001680 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fe0b 	bl	80040ea <USB_ReadDevAllInEpInterrupt>
 80014d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014da:	e0cd      	b.n	8001678 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80c2 	beq.w	800166c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fe2f 	bl	8004156 <USB_ReadDevInEPInterrupt>
 80014f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d057      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	2201      	movs	r2, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	69f9      	ldr	r1, [r7, #28]
 8001520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001524:	4013      	ands	r3, r2
 8001526:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	015a      	lsls	r2, r3, #5
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4413      	add	r3, r2
 8001530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001534:	461a      	mov	r2, r3
 8001536:	2301      	movs	r3, #1
 8001538:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	799b      	ldrb	r3, [r3, #6]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d132      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3320      	adds	r3, #32
 8001552:	6819      	ldr	r1, [r3, #0]
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4403      	add	r3, r0
 8001562:	331c      	adds	r3, #28
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4419      	add	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4403      	add	r3, r0
 8001576:	3320      	adds	r3, #32
 8001578:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	2b00      	cmp	r3, #0
 800157e:	d113      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x3a2>
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3324      	adds	r3, #36	; 0x24
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d108      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80015a0:	461a      	mov	r2, r3
 80015a2:	2101      	movs	r1, #1
 80015a4:	f002 fe34 	bl	8004210 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f005 fbe1 	bl	8006d76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ca:	461a      	mov	r2, r3
 80015cc:	2308      	movs	r3, #8
 80015ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e6:	461a      	mov	r2, r3
 80015e8:	2310      	movs	r3, #16
 80015ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001602:	461a      	mov	r2, r3
 8001604:	2340      	movs	r3, #64	; 0x40
 8001606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d023      	beq.n	800165a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001614:	6a38      	ldr	r0, [r7, #32]
 8001616:	f001 fe35 	bl	8003284 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	3310      	adds	r3, #16
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	3304      	adds	r3, #4
 800162c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	78db      	ldrb	r3, [r3, #3]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2200      	movs	r2, #0
 800163a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f005 fc2e 	bl	8006ea4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	015a      	lsls	r2, r3, #5
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4413      	add	r3, r2
 8001650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001654:	461a      	mov	r2, r3
 8001656:	2302      	movs	r3, #2
 8001658:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fcd9 	bl	800201e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	3301      	adds	r3, #1
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	2b00      	cmp	r3, #0
 800167c:	f47f af2e 	bne.w	80014dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fd05 	bl	8004094 <USB_ReadInterrupts>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001694:	d114      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f005 fbda 	bl	8006e64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 fce5 	bl	8004094 <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016d4:	d112      	bne.n	80016fc <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d102      	bne.n	80016ec <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f005 fb96 	bl	8006e18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016fa:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fcc7 	bl	8004094 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001710:	f040 80b7 	bne.w	8001882 <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2110      	movs	r1, #16
 800172e:	4618      	mov	r0, r3
 8001730:	f001 fda8 	bl	8003284 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001738:	e046      	b.n	80017c8 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	015a      	lsls	r2, r3, #5
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	4413      	add	r3, r2
 8001742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001746:	461a      	mov	r2, r3
 8001748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800174c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	015a      	lsls	r2, r3, #5
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	4413      	add	r3, r2
 8001756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175e:	0151      	lsls	r1, r2, #5
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	440a      	add	r2, r1
 8001764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001768:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800176c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4413      	add	r3, r2
 8001776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177a:	461a      	mov	r2, r3
 800177c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001780:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	4413      	add	r3, r2
 800178a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001792:	0151      	lsls	r1, r2, #5
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	440a      	add	r2, r1
 8001798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800179c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b2:	0151      	lsls	r1, r2, #5
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	440a      	add	r2, r1
 80017b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c4:	3301      	adds	r3, #1
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	791b      	ldrb	r3, [r3, #4]
 80017cc:	461a      	mov	r2, r3
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d3b2      	bcc.n	800173a <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7bdb      	ldrb	r3, [r3, #15]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d016      	beq.n	800181e <HAL_PCD_IRQHandler+0x618>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001800:	f043 030b 	orr.w	r3, r3, #11
 8001804:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001816:	f043 030b 	orr.w	r3, r3, #11
 800181a:	6453      	str	r3, [r2, #68]	; 0x44
 800181c:	e015      	b.n	800184a <HAL_PCD_IRQHandler+0x644>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001830:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001834:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001844:	f043 030b 	orr.w	r3, r3, #11
 8001848:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001858:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800185c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800186c:	461a      	mov	r2, r3
 800186e:	f002 fccf 	bl	8004210 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fc04 	bl	8004094 <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001896:	d123      	bne.n	80018e0 <HAL_PCD_IRQHandler+0x6da>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fc94 	bl	80041ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 fd62 	bl	8003370 <USB_GetDevSpeed>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681c      	ldr	r4, [r3, #0]
 80018b8:	f001 fa0e 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 80018bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018c2:	461a      	mov	r2, r3
 80018c4:	4620      	mov	r0, r4
 80018c6:	f001 fa6b 	bl	8002da0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f005 fa7b 	bl	8006dc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 fbd5 	bl	8004094 <USB_ReadInterrupts>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d10a      	bne.n	800190a <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f005 fa58 	bl	8006daa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f002 0208 	and.w	r2, r2, #8
 8001908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fbc0 	bl	8004094 <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b80      	cmp	r3, #128	; 0x80
 800191c:	d123      	bne.n	8001966 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192a:	2301      	movs	r3, #1
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	e014      	b.n	800195a <HAL_PCD_IRQHandler+0x754>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_PCD_IRQHandler+0x74e>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4619      	mov	r1, r3
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fb07 	bl	8001f62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	3301      	adds	r3, #1
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	791b      	ldrb	r3, [r3, #4]
 800195e:	461a      	mov	r2, r3
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	4293      	cmp	r3, r2
 8001964:	d3e4      	bcc.n	8001930 <HAL_PCD_IRQHandler+0x72a>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fb92 	bl	8004094 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800197a:	d13c      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x7f0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800197c:	2301      	movs	r3, #1
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	e02b      	b.n	80019da <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	015a      	lsls	r2, r3, #5
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	4413      	add	r3, r2
 800198a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	3318      	adds	r3, #24
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d115      	bne.n	80019d4 <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da12      	bge.n	80019d4 <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	3317      	adds	r3, #23
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fac7 	bl	8001f62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	3301      	adds	r3, #1
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d3cd      	bcc.n	8001982 <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fb4a 	bl	8004094 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a0a:	d156      	bne.n	8001aba <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	e045      	b.n	8001a9e <HAL_PCD_IRQHandler+0x898>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d12e      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x892>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da2b      	bge.n	8001a98 <HAL_PCD_IRQHandler+0x892>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001a4c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d121      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x892>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10a      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x892>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a94:	6053      	str	r3, [r2, #4]
            break;
 8001a96:	e008      	b.n	8001aaa <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d3b3      	bcc.n	8001a12 <HAL_PCD_IRQHandler+0x80c>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fae8 	bl	8004094 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ace:	d10a      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f005 f9f9 	bl	8006ec8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fad2 	bl	8004094 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d115      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f005 f9e9 	bl	8006ee4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	e000      	b.n	8001b26 <HAL_PCD_IRQHandler+0x920>
      return;
 8001b24:	bf00      	nop
    }
  }
}
 8001b26:	3734      	adds	r7, #52	; 0x34
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}

08001b2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_PCD_SetAddress+0x1a>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e012      	b.n	8001b6c <HAL_PCD_SetAddress+0x40>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 fa34 	bl	8003fca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	4611      	mov	r1, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	4603      	mov	r3, r0
 8001b84:	70fb      	strb	r3, [r7, #3]
 8001b86:	460b      	mov	r3, r1
 8001b88:	803b      	strh	r3, [r7, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da0f      	bge.n	8001bba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3310      	adds	r3, #16
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
 8001bb8:	e00f      	b.n	8001bda <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 020f 	and.w	r2, r3, #15
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001be6:	883a      	ldrh	r2, [r7, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	78ba      	ldrb	r2, [r7, #2]
 8001bf0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c04:	78bb      	ldrb	r3, [r7, #2]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d102      	bne.n	8001c10 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_EP_Open+0xaa>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e00e      	b.n	8001c3c <HAL_PCD_EP_Open+0xc8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fbc3 	bl	80033b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	da0f      	bge.n	8001c78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	3310      	adds	r3, #16
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	705a      	strb	r2, [r3, #1]
 8001c76:	e00f      	b.n	8001c98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_PCD_EP_Close+0x6e>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e00e      	b.n	8001cd0 <HAL_PCD_EP_Close+0x8c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68f9      	ldr	r1, [r7, #12]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fbff 	bl	80034c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	f003 020f 	and.w	r2, r3, #15
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2200      	movs	r2, #0
 8001d18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	799b      	ldrb	r3, [r3, #6]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	799b      	ldrb	r3, [r3, #6]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6979      	ldr	r1, [r7, #20]
 8001d40:	f001 fc9c 	bl	800367c <USB_EPStartXfer>

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001d70:	681b      	ldr	r3, [r3, #0]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	3310      	adds	r3, #16
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3304      	adds	r3, #4
 8001da2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2201      	movs	r2, #1
 8001dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	799b      	ldrb	r3, [r3, #6]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d102      	bne.n	8001dd6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	799b      	ldrb	r3, [r3, #6]
 8001dde:	461a      	mov	r2, r3
 8001de0:	6979      	ldr	r1, [r7, #20]
 8001de2:	f001 fc4b 	bl	800367c <USB_EPStartXfer>

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	7912      	ldrb	r2, [r2, #4]
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e04f      	b.n	8001eae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da0f      	bge.n	8001e36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	f003 020f 	and.w	r2, r3, #15
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	3310      	adds	r3, #16
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	705a      	strb	r2, [r3, #1]
 8001e34:	e00d      	b.n	8001e52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_PCD_EP_SetStall+0x82>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e01d      	b.n	8001eae <HAL_PCD_EP_SetStall+0xbe>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68f9      	ldr	r1, [r7, #12]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 ffd0 	bl	8003e26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7999      	ldrb	r1, [r3, #6]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f002 f9b6 	bl	8004210 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	7912      	ldrb	r2, [r2, #4]
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e042      	b.n	8001f5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da0f      	bge.n	8001efc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	3310      	adds	r3, #16
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	705a      	strb	r2, [r3, #1]
 8001efa:	e00f      	b.n	8001f1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_PCD_EP_ClrStall+0x86>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e00e      	b.n	8001f5a <HAL_PCD_EP_ClrStall+0xa4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 ffd8 	bl	8003f00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	da0c      	bge.n	8001f90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3310      	adds	r3, #16
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e00c      	b.n	8001faa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 020f 	and.w	r2, r3, #15
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68f9      	ldr	r1, [r7, #12]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fdfb 	bl	8003bac <USB_EPStopXfer>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fba:	7afb      	ldrb	r3, [r7, #11]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_PCD_EP_Flush+0x1a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e01b      	b.n	8002016 <HAL_PCD_EP_Flush+0x52>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8001fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da09      	bge.n	8002002 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f001 f942 	bl	8003284 <USB_FlushTxFifo>
 8002000:	e004      	b.n	800200c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f001 f96d 	bl	80032e6 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b08a      	sub	sp, #40	; 0x28
 8002022:	af02      	add	r7, sp, #8
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	3310      	adds	r3, #16
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	429a      	cmp	r2, r3
 8002050:	d901      	bls.n	8002056 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e06b      	b.n	800212e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	429a      	cmp	r2, r3
 800206a:	d902      	bls.n	8002072 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3303      	adds	r3, #3
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800207a:	e02a      	b.n	80020d2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	429a      	cmp	r2, r3
 8002090:	d902      	bls.n	8002098 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3303      	adds	r3, #3
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68d9      	ldr	r1, [r3, #12]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4603      	mov	r3, r0
 80020b4:	6978      	ldr	r0, [r7, #20]
 80020b6:	f001 fe22 	bl	8003cfe <USB_WritePacket>

    ep->xfer_buff  += len;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	441a      	add	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	441a      	add	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d809      	bhi.n	80020fc <PCD_WriteEmptyTxFifo+0xde>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d203      	bcs.n	80020fc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1bf      	bne.n	800207c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	429a      	cmp	r2, r3
 8002106:	d811      	bhi.n	800212c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	2201      	movs	r2, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	43db      	mvns	r3, r3
 8002122:	6939      	ldr	r1, [r7, #16]
 8002124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002128:	4013      	ands	r3, r2
 800212a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	333c      	adds	r3, #60	; 0x3c
 8002150:	3304      	adds	r3, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	799b      	ldrb	r3, [r3, #6]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d17b      	bne.n	8002266 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4a61      	ldr	r2, [pc, #388]	; (8002300 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	f240 80b9 	bls.w	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80b3 	beq.w	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219a:	461a      	mov	r2, r3
 800219c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a0:	6093      	str	r3, [r2, #8]
 80021a2:	e0a7      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ba:	461a      	mov	r2, r3
 80021bc:	2320      	movs	r3, #32
 80021be:	6093      	str	r3, [r2, #8]
 80021c0:	e098      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 8093 	bne.w	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d90f      	bls.n	80021f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ec:	461a      	mov	r2, r3
 80021ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f2:	6093      	str	r3, [r2, #8]
 80021f4:	e07e      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	3304      	adds	r3, #4
 800220a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a1a      	ldr	r2, [r3, #32]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	440b      	add	r3, r1
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	1ad2      	subs	r2, r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d114      	bne.n	8002258 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002240:	461a      	mov	r2, r3
 8002242:	2101      	movs	r1, #1
 8002244:	f001 ffe4 	bl	8004210 <USB_EP0_OutStart>
 8002248:	e006      	b.n	8002258 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	441a      	add	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f004 fd6e 	bl	8006d40 <HAL_PCD_DataOutStageCallback>
 8002264:	e046      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d124      	bne.n	80022b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002284:	461a      	mov	r2, r3
 8002286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228a:	6093      	str	r3, [r2, #8]
 800228c:	e032      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a4:	461a      	mov	r2, r3
 80022a6:	2320      	movs	r3, #32
 80022a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f004 fd45 	bl	8006d40 <HAL_PCD_DataOutStageCallback>
 80022b6:	e01d      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d114      	bne.n	80022e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80022e0:	461a      	mov	r2, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	f001 ff94 	bl	8004210 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f004 fd26 	bl	8006d40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	4f54300a 	.word	0x4f54300a
 8002304:	4f54310a 	.word	0x4f54310a

08002308 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	333c      	adds	r3, #60	; 0x3c
 8002320:	3304      	adds	r3, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <PCD_EP_OutSetupPacket_int+0x88>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d90e      	bls.n	800235c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f004 fcdd 	bl	8006d1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <PCD_EP_OutSetupPacket_int+0x88>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d90c      	bls.n	8002384 <PCD_EP_OutSetupPacket_int+0x7c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	799b      	ldrb	r3, [r3, #6]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d108      	bne.n	8002384 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800237c:	461a      	mov	r2, r3
 800237e:	2101      	movs	r1, #1
 8002380:	f001 ff46 	bl	8004210 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	4f54300a 	.word	0x4f54300a

08002394 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
 80023a0:	4613      	mov	r3, r2
 80023a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023b2:	883b      	ldrh	r3, [r7, #0]
 80023b4:	0419      	lsls	r1, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	430a      	orrs	r2, r1
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
 80023c0:	e028      	b.n	8002414 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	4413      	add	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e00d      	b.n	80023f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	3340      	adds	r3, #64	; 0x40
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	4413      	add	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	3301      	adds	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d3ec      	bcc.n	80023d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023fc:	883b      	ldrh	r3, [r7, #0]
 80023fe:	0418      	lsls	r0, r3, #16
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	3b01      	subs	r3, #1
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	4302      	orrs	r2, r0
 800240c:	3340      	adds	r3, #64	; 0x40
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	887a      	ldrh	r2, [r7, #2]
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e23b      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d050      	beq.n	8002500 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245e:	4b9e      	ldr	r3, [pc, #632]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b04      	cmp	r3, #4
 8002468:	d00c      	beq.n	8002484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b9b      	ldr	r3, [pc, #620]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	2b08      	cmp	r3, #8
 8002474:	d112      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002476:	4b98      	ldr	r3, [pc, #608]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002482:	d10b      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	4b94      	ldr	r3, [pc, #592]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d036      	beq.n	80024fe <HAL_RCC_OscConfig+0xbe>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d132      	bne.n	80024fe <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e216      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	4b8e      	ldr	r3, [pc, #568]	; (80026dc <HAL_RCC_OscConfig+0x29c>)
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d013      	beq.n	80024d6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe fa87 	bl	80009c0 <HAL_GetTick>
 80024b2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b6:	f7fe fa83 	bl	80009c0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	; 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e200      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	4b83      	ldr	r3, [pc, #524]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x76>
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fa73 	bl	80009c0 <HAL_GetTick>
 80024da:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024de:	f7fe fa6f 	bl	80009c0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1ec      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f0:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x9e>
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d077      	beq.n	80025fc <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250c:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00b      	beq.n	8002530 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002520:	2b08      	cmp	r3, #8
 8002522:	d126      	bne.n	8002572 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002524:	4b6c      	ldr	r3, [pc, #432]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d120      	bne.n	8002572 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002530:	4b69      	ldr	r3, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_OscConfig+0x108>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e1c0      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002548:	4b63      	ldr	r3, [pc, #396]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	21f8      	movs	r1, #248	; 0xf8
 8002556:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	69b9      	ldr	r1, [r7, #24]
 800255a:	fa91 f1a1 	rbit	r1, r1
 800255e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002560:	6979      	ldr	r1, [r7, #20]
 8002562:	fab1 f181 	clz	r1, r1
 8002566:	b2c9      	uxtb	r1, r1
 8002568:	408b      	lsls	r3, r1
 800256a:	495b      	ldr	r1, [pc, #364]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002570:	e044      	b.n	80025fc <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d02a      	beq.n	80025d0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257a:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCC_OscConfig+0x2a0>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fa1e 	bl	80009c0 <HAL_GetTick>
 8002584:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002588:	f7fe fa1a 	bl	80009c0 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e197      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b4f      	ldr	r3, [pc, #316]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b4c      	ldr	r3, [pc, #304]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	21f8      	movs	r1, #248	; 0xf8
 80025b4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	6939      	ldr	r1, [r7, #16]
 80025b8:	fa91 f1a1 	rbit	r1, r1
 80025bc:	60f9      	str	r1, [r7, #12]
  return result;
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	fab1 f181 	clz	r1, r1
 80025c4:	b2c9      	uxtb	r1, r1
 80025c6:	408b      	lsls	r3, r1
 80025c8:	4943      	ldr	r1, [pc, #268]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
 80025ce:	e015      	b.n	80025fc <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d0:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x2a0>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe f9f3 	bl	80009c0 <HAL_GetTick>
 80025da:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025de:	f7fe f9ef 	bl	80009c0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e16c      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f0:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d030      	beq.n	800266a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d016      	beq.n	800263e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002610:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_RCC_OscConfig+0x2a4>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7fe f9d3 	bl	80009c0 <HAL_GetTick>
 800261a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe f9cf 	bl	80009c0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e14c      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002630:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x1de>
 800263c:	e015      	b.n	800266a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_RCC_OscConfig+0x2a4>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe f9bc 	bl	80009c0 <HAL_GetTick>
 8002648:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264c:	f7fe f9b8 	bl	80009c0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e135      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8087 	beq.w	8002786 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002678:	2300      	movs	r3, #0
 800267a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d110      	bne.n	80026ac <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_RCC_OscConfig+0x298>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_RCC_OscConfig+0x2a8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_RCC_OscConfig+0x2a8>)
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_OscConfig+0x2a8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d122      	bne.n	800270a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_RCC_OscConfig+0x2a8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_RCC_OscConfig+0x2a8>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d0:	f7fe f976 	bl	80009c0 <HAL_GetTick>
 80026d4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	e012      	b.n	80026fe <HAL_RCC_OscConfig+0x2be>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40023802 	.word	0x40023802
 80026e0:	42470000 	.word	0x42470000
 80026e4:	42470e80 	.word	0x42470e80
 80026e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ec:	f7fe f968 	bl	80009c0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0e5      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x494>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	4b72      	ldr	r3, [pc, #456]	; (80028d8 <HAL_RCC_OscConfig+0x498>)
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271c:	f7fe f950 	bl	80009c0 <HAL_GetTick>
 8002720:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7fe f94c 	bl	80009c0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0c7      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	4b68      	ldr	r3, [pc, #416]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <HAL_RCC_OscConfig+0x2e4>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7fe f93a 	bl	80009c0 <HAL_GetTick>
 800274c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe f936 	bl	80009c0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0b1      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ee      	bne.n	8002750 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277a:	4b58      	ldr	r3, [pc, #352]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a57      	ldr	r2, [pc, #348]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 8002780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 809c 	beq.w	80028c8 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002790:	4b52      	ldr	r3, [pc, #328]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d061      	beq.n	8002860 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d146      	bne.n	8002832 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b4e      	ldr	r3, [pc, #312]	; (80028e0 <HAL_RCC_OscConfig+0x4a0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe f909 	bl	80009c0 <HAL_GetTick>
 80027ae:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fe f905 	bl	80009c0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e082      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c4:	4b45      	ldr	r3, [pc, #276]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d0:	4b42      	ldr	r3, [pc, #264]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4b43      	ldr	r3, [pc, #268]	; (80028e4 <HAL_RCC_OscConfig+0x4a4>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	69d1      	ldr	r1, [r2, #28]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6a12      	ldr	r2, [r2, #32]
 80027e0:	4311      	orrs	r1, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027e6:	0192      	lsls	r2, r2, #6
 80027e8:	4311      	orrs	r1, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027ee:	0612      	lsls	r2, r2, #24
 80027f0:	4311      	orrs	r1, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027f6:	0852      	lsrs	r2, r2, #1
 80027f8:	3a01      	subs	r2, #1
 80027fa:	0412      	lsls	r2, r2, #16
 80027fc:	430a      	orrs	r2, r1
 80027fe:	4937      	ldr	r1, [pc, #220]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <HAL_RCC_OscConfig+0x4a0>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe f8d9 	bl	80009c0 <HAL_GetTick>
 800280e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002812:	f7fe f8d5 	bl	80009c0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b64      	cmp	r3, #100	; 0x64
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e052      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x3d2>
 8002830:	e04a      	b.n	80028c8 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x4a0>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe f8c2 	bl	80009c0 <HAL_GetTick>
 800283c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe f8be 	bl	80009c0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e03b      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x400>
 800285e:	e033      	b.n	80028c8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e02e      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x49c>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	429a      	cmp	r2, r3
 800287e:	d121      	bne.n	80028c4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d11a      	bne.n	80028c4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800289a:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289c:	4293      	cmp	r3, r2
 800289e:	d111      	bne.n	80028c4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3728      	adds	r7, #40	; 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40007000 	.word	0x40007000
 80028d8:	40023870 	.word	0x40023870
 80028dc:	40023800 	.word	0x40023800
 80028e0:	42470060 	.word	0x42470060
 80028e4:	f0bc8000 	.word	0xf0bc8000

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0d2      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d90c      	bls.n	8002924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b68      	ldr	r3, [pc, #416]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0be      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a5b      	ldr	r2, [pc, #364]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002954:	4b56      	ldr	r3, [pc, #344]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a55      	ldr	r2, [pc, #340]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800295a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4950      	ldr	r1, [pc, #320]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d040      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d115      	bne.n	80029be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e085      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299e:	4b44      	ldr	r3, [pc, #272]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e079      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ae:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e071      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4939      	ldr	r1, [pc, #228]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d0:	f7fd fff6 	bl	80009c0 <HAL_GetTick>
 80029d4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7fd fff2 	bl	80009c0 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e059      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	4b30      	ldr	r3, [pc, #192]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1eb      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a00:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d20c      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b25      	ldr	r3, [pc, #148]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e03c      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a34:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	491b      	ldr	r1, [pc, #108]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4913      	ldr	r1, [pc, #76]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002a66:	f000 f82b 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a74:	22f0      	movs	r2, #240	; 0xf0
 8002a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	40d3      	lsrs	r3, r2
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1d4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd ff4e 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023c00 	.word	0x40023c00
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	080075b4 	.word	0x080075b4
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	20000004 	.word	0x20000004

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac4:	b094      	sub	sp, #80	; 0x50
 8002ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	647b      	str	r3, [r7, #68]	; 0x44
 8002acc:	2300      	movs	r3, #0
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad8:	4b7c      	ldr	r3, [pc, #496]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x20c>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d00d      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	f200 80e7 	bhi.w	8002cb8 <HAL_RCC_GetSysClockFreq+0x1f8>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x34>
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0x3a>
 8002af2:	e0e1      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x210>)
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002af8:	e0e1      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x214>)
 8002afc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002afe:	e0de      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b00:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0a:	4b70      	ldr	r3, [pc, #448]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d065      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b16:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x20c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	099b      	lsrs	r3, r3, #6
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b32:	4622      	mov	r2, r4
 8002b34:	462b      	mov	r3, r5
 8002b36:	f04f 0000 	mov.w	r0, #0
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	0159      	lsls	r1, r3, #5
 8002b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b44:	0150      	lsls	r0, r2, #5
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	1a51      	subs	r1, r2, r1
 8002b4e:	6139      	str	r1, [r7, #16]
 8002b50:	4629      	mov	r1, r5
 8002b52:	eb63 0301 	sbc.w	r3, r3, r1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b64:	4659      	mov	r1, fp
 8002b66:	018b      	lsls	r3, r1, #6
 8002b68:	4651      	mov	r1, sl
 8002b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b6e:	4651      	mov	r1, sl
 8002b70:	018a      	lsls	r2, r1, #6
 8002b72:	46d4      	mov	ip, sl
 8002b74:	ebb2 080c 	subs.w	r8, r2, ip
 8002b78:	4659      	mov	r1, fp
 8002b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b92:	4690      	mov	r8, r2
 8002b94:	4699      	mov	r9, r3
 8002b96:	4623      	mov	r3, r4
 8002b98:	eb18 0303 	adds.w	r3, r8, r3
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	eb49 0303 	adc.w	r3, r9, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	024b      	lsls	r3, r1, #9
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	4629      	mov	r1, r5
 8002bba:	4604      	mov	r4, r0
 8002bbc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002bc0:	4601      	mov	r1, r0
 8002bc2:	024a      	lsls	r2, r1, #9
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bca:	2200      	movs	r2, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bd4:	f7fd faf6 	bl	80001c4 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be0:	e05c      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x20c>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	2200      	movs	r2, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	4611      	mov	r1, r2
 8002bee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	464b      	mov	r3, r9
 8002c00:	f04f 0000 	mov.w	r0, #0
 8002c04:	f04f 0100 	mov.w	r1, #0
 8002c08:	0159      	lsls	r1, r3, #5
 8002c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0e:	0150      	lsls	r0, r2, #5
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	46c4      	mov	ip, r8
 8002c16:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	468c      	mov	ip, r1
 8002c20:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c38:	ebb2 040a 	subs.w	r4, r2, sl
 8002c3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	00eb      	lsls	r3, r5, #3
 8002c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c4e:	00e2      	lsls	r2, r4, #3
 8002c50:	4614      	mov	r4, r2
 8002c52:	461d      	mov	r5, r3
 8002c54:	4603      	mov	r3, r0
 8002c56:	18e3      	adds	r3, r4, r3
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	eb45 0303 	adc.w	r3, r5, r3
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c6e:	4629      	mov	r1, r5
 8002c70:	028b      	lsls	r3, r1, #10
 8002c72:	4620      	mov	r0, r4
 8002c74:	4629      	mov	r1, r5
 8002c76:	4604      	mov	r4, r0
 8002c78:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	028a      	lsls	r2, r1, #10
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c86:	2200      	movs	r2, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	61fa      	str	r2, [r7, #28]
 8002c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c90:	f7fd fa98 	bl	80001c4 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x20c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x210>)
 8002cba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3750      	adds	r7, #80	; 0x50
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000000 	.word	0x20000000

08002cec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cec:	b084      	sub	sp, #16
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	f107 001c 	add.w	r0, r7, #28
 8002cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cfe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d123      	bne.n	8002d4e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f001 fac0 	bl	80042c8 <USB_CoreReset>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e010      	b.n	8002d70 <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f001 fab4 	bl	80042c8 <USB_CoreReset>
 8002d60:	4603      	mov	r3, r0
 8002d62:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002d70:	7fbb      	ldrb	r3, [r7, #30]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10b      	bne.n	8002d8e <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f043 0206 	orr.w	r2, r3, #6
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f043 0220 	orr.w	r2, r3, #32
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d9a:	b004      	add	sp, #16
 8002d9c:	4770      	bx	lr
	...

08002da0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	4613      	mov	r3, r2
 8002dac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d165      	bne.n	8002e80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4a41      	ldr	r2, [pc, #260]	; (8002ebc <USB_SetTurnaroundTime+0x11c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d906      	bls.n	8002dca <USB_SetTurnaroundTime+0x2a>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4a40      	ldr	r2, [pc, #256]	; (8002ec0 <USB_SetTurnaroundTime+0x120>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d202      	bcs.n	8002dca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e062      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4a3c      	ldr	r2, [pc, #240]	; (8002ec0 <USB_SetTurnaroundTime+0x120>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d306      	bcc.n	8002de0 <USB_SetTurnaroundTime+0x40>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <USB_SetTurnaroundTime+0x124>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d202      	bcs.n	8002de0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002dda:	230e      	movs	r3, #14
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e057      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4a38      	ldr	r2, [pc, #224]	; (8002ec4 <USB_SetTurnaroundTime+0x124>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d306      	bcc.n	8002df6 <USB_SetTurnaroundTime+0x56>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4a37      	ldr	r2, [pc, #220]	; (8002ec8 <USB_SetTurnaroundTime+0x128>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d202      	bcs.n	8002df6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002df0:	230d      	movs	r3, #13
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e04c      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4a33      	ldr	r2, [pc, #204]	; (8002ec8 <USB_SetTurnaroundTime+0x128>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d306      	bcc.n	8002e0c <USB_SetTurnaroundTime+0x6c>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4a32      	ldr	r2, [pc, #200]	; (8002ecc <USB_SetTurnaroundTime+0x12c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d802      	bhi.n	8002e0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e06:	230c      	movs	r3, #12
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e041      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ecc <USB_SetTurnaroundTime+0x12c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d906      	bls.n	8002e22 <USB_SetTurnaroundTime+0x82>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4a2e      	ldr	r2, [pc, #184]	; (8002ed0 <USB_SetTurnaroundTime+0x130>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d802      	bhi.n	8002e22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e1c:	230b      	movs	r3, #11
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e036      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <USB_SetTurnaroundTime+0x130>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d906      	bls.n	8002e38 <USB_SetTurnaroundTime+0x98>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <USB_SetTurnaroundTime+0x134>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d802      	bhi.n	8002e38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e32:	230a      	movs	r3, #10
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	e02b      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <USB_SetTurnaroundTime+0x134>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d906      	bls.n	8002e4e <USB_SetTurnaroundTime+0xae>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <USB_SetTurnaroundTime+0x138>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d202      	bcs.n	8002e4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e48:	2309      	movs	r3, #9
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e020      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <USB_SetTurnaroundTime+0x138>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d306      	bcc.n	8002e64 <USB_SetTurnaroundTime+0xc4>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4a20      	ldr	r2, [pc, #128]	; (8002edc <USB_SetTurnaroundTime+0x13c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d802      	bhi.n	8002e64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e5e:	2308      	movs	r3, #8
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e015      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <USB_SetTurnaroundTime+0x13c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d906      	bls.n	8002e7a <USB_SetTurnaroundTime+0xda>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <USB_SetTurnaroundTime+0x140>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d202      	bcs.n	8002e7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e74:	2307      	movs	r3, #7
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e00a      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e007      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e86:	2309      	movs	r3, #9
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e001      	b.n	8002e90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e8c:	2309      	movs	r3, #9
 8002e8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	00d8acbf 	.word	0x00d8acbf
 8002ec0:	00e4e1c0 	.word	0x00e4e1c0
 8002ec4:	00f42400 	.word	0x00f42400
 8002ec8:	01067380 	.word	0x01067380
 8002ecc:	011a499f 	.word	0x011a499f
 8002ed0:	01312cff 	.word	0x01312cff
 8002ed4:	014ca43f 	.word	0x014ca43f
 8002ed8:	016e3600 	.word	0x016e3600
 8002edc:	01a6ab1f 	.word	0x01a6ab1f
 8002ee0:	01e84800 	.word	0x01e84800

08002ee4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 0201 	bic.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d115      	bne.n	8002f72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f52:	200a      	movs	r0, #10
 8002f54:	f7fd fd3e 	bl	80009d4 <HAL_Delay>
      ms += 10U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	330a      	adds	r3, #10
 8002f5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f001 f926 	bl	80041b0 <USB_GetMode>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d01e      	beq.n	8002fa8 <USB_SetCurrentMode+0x84>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2bc7      	cmp	r3, #199	; 0xc7
 8002f6e:	d9f0      	bls.n	8002f52 <USB_SetCurrentMode+0x2e>
 8002f70:	e01a      	b.n	8002fa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d115      	bne.n	8002fa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f84:	200a      	movs	r0, #10
 8002f86:	f7fd fd25 	bl	80009d4 <HAL_Delay>
      ms += 10U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	330a      	adds	r3, #10
 8002f8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f001 f90d 	bl	80041b0 <USB_GetMode>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <USB_SetCurrentMode+0x84>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2bc7      	cmp	r3, #199	; 0xc7
 8002fa0:	d9f0      	bls.n	8002f84 <USB_SetCurrentMode+0x60>
 8002fa2:	e001      	b.n	8002fa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e005      	b.n	8002fb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2bc8      	cmp	r3, #200	; 0xc8
 8002fac:	d101      	bne.n	8002fb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e009      	b.n	8002ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	3340      	adds	r3, #64	; 0x40
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	3301      	adds	r3, #1
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0e      	cmp	r3, #14
 8002ff4:	d9f2      	bls.n	8002fdc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ff6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11c      	bne.n	8003038 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
 8003036:	e00b      	b.n	8003050 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003056:	461a      	mov	r2, r3
 8003058:	2300      	movs	r3, #0
 800305a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800305c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10d      	bne.n	8003080 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003068:	2b00      	cmp	r3, #0
 800306a:	d104      	bne.n	8003076 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800306c:	2100      	movs	r1, #0
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f966 	bl	8003340 <USB_SetDevSpeed>
 8003074:	e008      	b.n	8003088 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003076:	2101      	movs	r1, #1
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f961 	bl	8003340 <USB_SetDevSpeed>
 800307e:	e003      	b.n	8003088 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003080:	2103      	movs	r1, #3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f95c 	bl	8003340 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003088:	2110      	movs	r1, #16
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8fa 	bl	8003284 <USB_FlushTxFifo>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f923 	bl	80032e6 <USB_FlushRxFifo>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b0:	461a      	mov	r2, r3
 80030b2:	2300      	movs	r3, #0
 80030b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030bc:	461a      	mov	r2, r3
 80030be:	2300      	movs	r3, #0
 80030c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c8:	461a      	mov	r2, r3
 80030ca:	2300      	movs	r3, #0
 80030cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	e043      	b.n	800315c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ea:	d118      	bne.n	800311e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fe:	461a      	mov	r2, r3
 8003100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e013      	b.n	8003130 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003114:	461a      	mov	r2, r3
 8003116:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	e008      	b.n	8003130 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312a:	461a      	mov	r2, r3
 800312c:	2300      	movs	r3, #0
 800312e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800313c:	461a      	mov	r2, r3
 800313e:	2300      	movs	r3, #0
 8003140:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314e:	461a      	mov	r2, r3
 8003150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003154:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	3301      	adds	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003160:	461a      	mov	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4293      	cmp	r3, r2
 8003166:	d3b5      	bcc.n	80030d4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e043      	b.n	80031f6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003184:	d118      	bne.n	80031b8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e013      	b.n	80031ca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ae:	461a      	mov	r2, r3
 80031b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e008      	b.n	80031ca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c4:	461a      	mov	r2, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	461a      	mov	r2, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e8:	461a      	mov	r2, r3
 80031ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	3301      	adds	r3, #1
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031fa:	461a      	mov	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4293      	cmp	r3, r2
 8003200:	d3b5      	bcc.n	800316e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003214:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003222:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003224:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f043 0210 	orr.w	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <USB_DevInit+0x2c4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003244:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f043 0208 	orr.w	r2, r3, #8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003258:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800327c:	b004      	add	sp, #16
 800327e:	4770      	bx	lr
 8003280:	803c3800 	.word	0x803c3800

08003284 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3301      	adds	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800329e:	d901      	bls.n	80032a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e01b      	b.n	80032dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	daf2      	bge.n	8003292 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	019b      	lsls	r3, r3, #6
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3301      	adds	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80032c8:	d901      	bls.n	80032ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e006      	b.n	80032dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d0f0      	beq.n	80032bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80032fe:	d901      	bls.n	8003304 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e018      	b.n	8003336 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	daf2      	bge.n	80032f2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2210      	movs	r2, #16
 8003314:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3301      	adds	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003322:	d901      	bls.n	8003328 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e006      	b.n	8003336 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b10      	cmp	r3, #16
 8003332:	d0f0      	beq.n	8003316 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0306 	and.w	r3, r3, #6
 8003388:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003390:	2300      	movs	r3, #0
 8003392:	75fb      	strb	r3, [r7, #23]
 8003394:	e00a      	b.n	80033ac <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d002      	beq.n	80033a2 <USB_GetDevSpeed+0x32>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d102      	bne.n	80033a8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033a2:	2302      	movs	r3, #2
 80033a4:	75fb      	strb	r3, [r7, #23]
 80033a6:	e001      	b.n	80033ac <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033a8:	230f      	movs	r3, #15
 80033aa:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d13a      	bne.n	800344a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d155      	bne.n	80034b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	791b      	ldrb	r3, [r3, #4]
 8003426:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003428:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	059b      	lsls	r3, r3, #22
 800342e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003430:	4313      	orrs	r3, r2
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	0151      	lsls	r1, r2, #5
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	440a      	add	r2, r1
 800343a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	e036      	b.n	80034b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	2101      	movs	r1, #1
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	68f9      	ldr	r1, [r7, #12]
 8003464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003468:	4313      	orrs	r3, r2
 800346a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11a      	bne.n	80034b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	791b      	ldrb	r3, [r3, #4]
 800349c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800349e:	430b      	orrs	r3, r1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	0151      	lsls	r1, r2, #5
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	440a      	add	r2, r1
 80034aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	785b      	ldrb	r3, [r3, #1]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d161      	bne.n	80035a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f6:	d11f      	bne.n	8003538 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	0151      	lsls	r1, r2, #5
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	440a      	add	r2, r1
 800350e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003516:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	0151      	lsls	r1, r2, #5
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	440a      	add	r2, r1
 800352e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003536:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	b29b      	uxth	r3, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003558:	4013      	ands	r3, r2
 800355a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800357c:	4013      	ands	r3, r2
 800357e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0159      	lsls	r1, r3, #5
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	440b      	add	r3, r1
 8003596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359a:	4619      	mov	r1, r3
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <USB_DeactivateEndpoint+0x1b0>)
 800359e:	4013      	ands	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	e060      	b.n	8003666 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ba:	d11f      	bne.n	80035fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	0151      	lsls	r1, r2, #5
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	440a      	add	r2, r1
 80035d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	43db      	mvns	r3, r3
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800361c:	4013      	ands	r3, r2
 800361e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	2101      	movs	r1, #1
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	43db      	mvns	r3, r3
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003640:	4013      	ands	r3, r2
 8003642:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0159      	lsls	r1, r3, #5
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	440b      	add	r3, r1
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	4619      	mov	r1, r3
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <USB_DeactivateEndpoint+0x1b4>)
 8003662:	4013      	ands	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	ec337800 	.word	0xec337800
 8003678:	eff37800 	.word	0xeff37800

0800367c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	2b01      	cmp	r3, #1
 800369a:	f040 817a 	bne.w	8003992 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d132      	bne.n	800370c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003704:	0cdb      	lsrs	r3, r3, #19
 8003706:	04db      	lsls	r3, r3, #19
 8003708:	6113      	str	r3, [r2, #16]
 800370a:	e092      	b.n	8003832 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	0151      	lsls	r1, r2, #5
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	440a      	add	r2, r1
 8003722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003726:	0cdb      	lsrs	r3, r3, #19
 8003728:	04db      	lsls	r3, r3, #19
 800372a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	0151      	lsls	r1, r2, #5
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	440a      	add	r2, r1
 8003742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003746:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800374a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800374e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d11a      	bne.n	800378c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d903      	bls.n	800376a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	0151      	lsls	r1, r2, #5
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	440a      	add	r2, r1
 8003780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003788:	6113      	str	r3, [r2, #16]
 800378a:	e01b      	b.n	80037c4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003798:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6919      	ldr	r1, [r3, #16]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	440b      	add	r3, r1
 80037a4:	1e59      	subs	r1, r3, #1
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037b0:	4ba2      	ldr	r3, [pc, #648]	; (8003a3c <USB_EPStartXfer+0x3c0>)
 80037b2:	400b      	ands	r3, r1
 80037b4:	69b9      	ldr	r1, [r7, #24]
 80037b6:	0148      	lsls	r0, r1, #5
 80037b8:	69f9      	ldr	r1, [r7, #28]
 80037ba:	4401      	add	r1, r0
 80037bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037c0:	4313      	orrs	r3, r2
 80037c2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037da:	69b9      	ldr	r1, [r7, #24]
 80037dc:	0148      	lsls	r0, r1, #5
 80037de:	69f9      	ldr	r1, [r7, #28]
 80037e0:	4401      	add	r1, r0
 80037e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037e6:	4313      	orrs	r3, r2
 80037e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	791b      	ldrb	r3, [r3, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d11f      	bne.n	8003832 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	0151      	lsls	r1, r2, #5
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	440a      	add	r2, r1
 8003808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003810:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003830:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d14b      	bne.n	80038d0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	791b      	ldrb	r3, [r3, #4]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d128      	bne.n	80038ae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d110      	bne.n	800388e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	0151      	lsls	r1, r2, #5
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	440a      	add	r2, r1
 8003882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e00f      	b.n	80038ae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	0151      	lsls	r1, r2, #5
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	440a      	add	r2, r1
 80038a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e165      	b.n	8003b9c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	0151      	lsls	r1, r2, #5
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	440a      	add	r2, r1
 80038e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	791b      	ldrb	r3, [r3, #4]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d015      	beq.n	8003924 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 814d 	beq.w	8003b9c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	2101      	movs	r1, #1
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	69f9      	ldr	r1, [r7, #28]
 800391a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800391e:	4313      	orrs	r3, r2
 8003920:	634b      	str	r3, [r1, #52]	; 0x34
 8003922:	e13b      	b.n	8003b9c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d110      	bne.n	8003956 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e00f      	b.n	8003976 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	440a      	add	r2, r1
 800396c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	68d9      	ldr	r1, [r3, #12]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	b298      	uxth	r0, r3
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4603      	mov	r3, r0
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f9b7 	bl	8003cfe <USB_WritePacket>
 8003990:	e104      	b.n	8003b9c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	0151      	lsls	r1, r2, #5
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	440a      	add	r2, r1
 80039a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ac:	0cdb      	lsrs	r3, r3, #19
 80039ae:	04db      	lsls	r3, r3, #19
 80039b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	0151      	lsls	r1, r2, #5
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	440a      	add	r2, r1
 80039c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039d4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d131      	bne.n	8003a40 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	0148      	lsls	r0, r1, #5
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	4401      	add	r1, r0
 8003a12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a16:	4313      	orrs	r3, r2
 8003a18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	0151      	lsls	r1, r2, #5
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	440a      	add	r2, r1
 8003a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a38:	6113      	str	r3, [r2, #16]
 8003a3a:	e061      	b.n	8003b00 <USB_EPStartXfer+0x484>
 8003a3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d123      	bne.n	8003a90 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	0148      	lsls	r0, r1, #5
 8003a62:	69f9      	ldr	r1, [r7, #28]
 8003a64:	4401      	add	r1, r0
 8003a66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	0151      	lsls	r1, r2, #5
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	440a      	add	r2, r1
 8003a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a8c:	6113      	str	r3, [r2, #16]
 8003a8e:	e037      	b.n	8003b00 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4413      	add	r3, r2
 8003a9a:	1e5a      	subs	r2, r3, #1
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	8afa      	ldrh	r2, [r7, #22]
 8003aac:	fb03 f202 	mul.w	r2, r3, r2
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	8afb      	ldrh	r3, [r7, #22]
 8003ac4:	04d9      	lsls	r1, r3, #19
 8003ac6:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <USB_EPStartXfer+0x52c>)
 8003ac8:	400b      	ands	r3, r1
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	0148      	lsls	r0, r1, #5
 8003ace:	69f9      	ldr	r1, [r7, #28]
 8003ad0:	4401      	add	r1, r0
 8003ad2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	0148      	lsls	r0, r1, #5
 8003af4:	69f9      	ldr	r1, [r7, #28]
 8003af6:	4401      	add	r1, r0
 8003af8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003afc:	4313      	orrs	r3, r2
 8003afe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10d      	bne.n	8003b22 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	68d9      	ldr	r1, [r3, #12]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1e:	460a      	mov	r2, r1
 8003b20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	791b      	ldrb	r3, [r3, #4]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d128      	bne.n	8003b7c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d110      	bne.n	8003b5c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	0151      	lsls	r1, r2, #5
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	440a      	add	r2, r1
 8003b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00f      	b.n	8003b7c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	1ff80000 	.word	0x1ff80000

08003bac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	785b      	ldrb	r3, [r3, #1]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d14a      	bne.n	8003c60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be2:	f040 8086 	bne.w	8003cf2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	0151      	lsls	r1, r2, #5
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	440a      	add	r2, r1
 8003c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3301      	adds	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d902      	bls.n	8003c44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	75fb      	strb	r3, [r7, #23]
          break;
 8003c42:	e056      	b.n	8003cf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c5c:	d0e7      	beq.n	8003c2e <USB_EPStopXfer+0x82>
 8003c5e:	e048      	b.n	8003cf2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c78:	d13b      	bne.n	8003cf2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	7812      	ldrb	r2, [r2, #0]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d902      	bls.n	8003cd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8003cd6:	e00c      	b.n	8003cf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cf0:	d0e7      	beq.n	8003cc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b089      	sub	sp, #36	; 0x24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	71fb      	strb	r3, [r7, #7]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d123      	bne.n	8003d6c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d24:	88bb      	ldrh	r3, [r7, #4]
 8003d26:	3303      	adds	r3, #3
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e018      	b.n	8003d64 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	031a      	lsls	r2, r3, #12
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3e:	461a      	mov	r2, r3
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3301      	adds	r3, #1
 8003d56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d3e2      	bcc.n	8003d32 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b08b      	sub	sp, #44	; 0x2c
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	e014      	b.n	8003dce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	601a      	str	r2, [r3, #0]
    pDest++;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	3301      	adds	r3, #1
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	3301      	adds	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	623b      	str	r3, [r7, #32]
 8003dce:	6a3a      	ldr	r2, [r7, #32]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d3e6      	bcc.n	8003da4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003dd6:	8bfb      	ldrh	r3, [r7, #30]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01e      	beq.n	8003e1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de6:	461a      	mov	r2, r3
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	701a      	strb	r2, [r3, #0]
      i++;
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	3301      	adds	r3, #1
 8003e06:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003e0e:	8bfb      	ldrh	r3, [r7, #30]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e14:	8bfb      	ldrh	r3, [r7, #30]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ea      	bne.n	8003df0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	372c      	adds	r7, #44	; 0x2c
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d12c      	bne.n	8003e9c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db12      	blt.n	8003e7a <USB_EPSetStall+0x54>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00f      	beq.n	8003e7a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	0151      	lsls	r1, r2, #5
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	440a      	add	r2, r1
 8003e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e78:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e02b      	b.n	8003ef4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	db12      	blt.n	8003ed4 <USB_EPSetStall+0xae>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00f      	beq.n	8003ed4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	0151      	lsls	r1, r2, #5
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	440a      	add	r2, r1
 8003eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ece:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ed2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	0151      	lsls	r1, r2, #5
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	440a      	add	r2, r1
 8003eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d128      	bne.n	8003f6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	791b      	ldrb	r3, [r3, #4]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d003      	beq.n	8003f4c <USB_EPClearStall+0x4c>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	791b      	ldrb	r3, [r3, #4]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d138      	bne.n	8003fbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	0151      	lsls	r1, r2, #5
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	440a      	add	r2, r1
 8003f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	e027      	b.n	8003fbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	791b      	ldrb	r3, [r3, #4]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d003      	beq.n	8003f9e <USB_EPClearStall+0x9e>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	791b      	ldrb	r3, [r3, #4]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d10f      	bne.n	8003fbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	0151      	lsls	r1, r2, #5
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004042:	f023 0302 	bic.w	r3, r3, #2
 8004046:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004082:	f043 0302 	orr.w	r3, r3, #2
 8004086:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4013      	ands	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80040ac:	68fb      	ldr	r3, [r7, #12]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4013      	ands	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	0c1b      	lsrs	r3, r3, #16
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	b29b      	uxth	r3, r3
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800414a:	68bb      	ldr	r3, [r7, #8]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	01db      	lsls	r3, r3, #7
 8004188:	b2db      	uxtb	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4013      	ands	r3, r2
 80041a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041a4:	68bb      	ldr	r3, [r7, #8]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0301 	and.w	r3, r3, #1
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80041e8:	f023 0307 	bic.w	r3, r3, #7
 80041ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
	...

08004210 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	460b      	mov	r3, r1
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	333c      	adds	r3, #60	; 0x3c
 8004226:	3304      	adds	r3, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4a25      	ldr	r2, [pc, #148]	; (80042c4 <USB_EP0_OutStart+0xb4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d90a      	bls.n	800424a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004244:	d101      	bne.n	800424a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e037      	b.n	80042ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	2300      	movs	r3, #0
 8004254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004278:	f043 0318 	orr.w	r3, r3, #24
 800427c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800428c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004290:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004292:	7afb      	ldrb	r3, [r7, #11]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10f      	bne.n	80042b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	461a      	mov	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80042b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	4f54300a 	.word	0x4f54300a

080042c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3301      	adds	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80042e0:	d901      	bls.n	80042e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e01b      	b.n	800431e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	daf2      	bge.n	80042d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800430a:	d901      	bls.n	8004310 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e006      	b.n	800431e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d0f0      	beq.n	80042fe <USB_CoreReset+0x36>

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	7c1b      	ldrb	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d115      	bne.n	8004368 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800433c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004340:	2202      	movs	r2, #2
 8004342:	2101      	movs	r1, #1
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f002 fe40 	bl	8006fca <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004356:	2202      	movs	r2, #2
 8004358:	2181      	movs	r1, #129	; 0x81
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f002 fe35 	bl	8006fca <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
 8004366:	e012      	b.n	800438e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004368:	2340      	movs	r3, #64	; 0x40
 800436a:	2202      	movs	r2, #2
 800436c:	2101      	movs	r1, #1
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f002 fe2b 	bl	8006fca <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800437c:	2340      	movs	r3, #64	; 0x40
 800437e:	2202      	movs	r2, #2
 8004380:	2181      	movs	r1, #129	; 0x81
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f002 fe21 	bl	8006fca <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800438e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8004392:	f002 ff8b 	bl	80072ac <malloc>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <USBD_MSC_Init+0x86>
  {
    return USBD_FAIL;
 80043aa:	2302      	movs	r3, #2
 80043ac:	e003      	b.n	80043b6 <USBD_MSC_Init+0x8e>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f9da 	bl	8004768 <MSC_BOT_Init>

  return USBD_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	460b      	mov	r3, r1
 80043c8:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80043ca:	2101      	movs	r1, #1
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f002 fe22 	bl	8007016 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80043da:	2181      	movs	r1, #129	; 0x81
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f002 fe1a 	bl	8007016 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fa07 	bl	80047fc <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043fe:	4618      	mov	r0, r3
 8004400:	f002 ff5c 	bl	80072bc <free>
    pdev->pClassData  = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004428:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04d      	beq.n	80044da <USBD_MSC_Setup+0xc2>
 800443e:	2b20      	cmp	r3, #32
 8004440:	f040 8113 	bne.w	800466a <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	2bfe      	cmp	r3, #254	; 0xfe
 800444a:	d002      	beq.n	8004452 <USBD_MSC_Setup+0x3a>
 800444c:	2bff      	cmp	r3, #255	; 0xff
 800444e:	d024      	beq.n	800449a <USBD_MSC_Setup+0x82>
 8004450:	e03b      	b.n	80044ca <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	885b      	ldrh	r3, [r3, #2]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <USBD_MSC_Setup+0x74>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	88db      	ldrh	r3, [r3, #6]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d114      	bne.n	800448c <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004468:	2b00      	cmp	r3, #0
 800446a:	da0f      	bge.n	800448c <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	4798      	blx	r3
 8004476:	4603      	mov	r3, r0
 8004478:	461a      	mov	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2201      	movs	r2, #1
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f002 f9cc 	bl	8006822 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800448a:	e025      	b.n	80044d8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800448c:	6839      	ldr	r1, [r7, #0]
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f002 f95d 	bl	800674e <USBD_CtlError>
            ret = USBD_FAIL;
 8004494:	2302      	movs	r3, #2
 8004496:	75fb      	strb	r3, [r7, #23]
          break;
 8004498:	e01e      	b.n	80044d8 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	885b      	ldrh	r3, [r3, #2]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <USBD_MSC_Setup+0xa4>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	88db      	ldrh	r3, [r3, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	db03      	blt.n	80044bc <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f987 	bl	80047c8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044ba:	e00d      	b.n	80044d8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f002 f945 	bl	800674e <USBD_CtlError>
            ret = USBD_FAIL;
 80044c4:	2302      	movs	r3, #2
 80044c6:	75fb      	strb	r3, [r7, #23]
          break;
 80044c8:	e006      	b.n	80044d8 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80044ca:	6839      	ldr	r1, [r7, #0]
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f002 f93e 	bl	800674e <USBD_CtlError>
          ret = USBD_FAIL;
 80044d2:	2302      	movs	r3, #2
 80044d4:	75fb      	strb	r3, [r7, #23]
          break;
 80044d6:	bf00      	nop
      }
      break;
 80044d8:	e0ce      	b.n	8004678 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b0b      	cmp	r3, #11
 80044e0:	f200 80bb 	bhi.w	800465a <USBD_MSC_Setup+0x242>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <USBD_MSC_Setup+0xd4>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	0800451d 	.word	0x0800451d
 80044f0:	08004593 	.word	0x08004593
 80044f4:	0800465b 	.word	0x0800465b
 80044f8:	0800465b 	.word	0x0800465b
 80044fc:	0800465b 	.word	0x0800465b
 8004500:	0800465b 	.word	0x0800465b
 8004504:	0800465b 	.word	0x0800465b
 8004508:	0800465b 	.word	0x0800465b
 800450c:	0800465b 	.word	0x0800465b
 8004510:	0800465b 	.word	0x0800465b
 8004514:	08004545 	.word	0x08004545
 8004518:	0800456d 	.word	0x0800456d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004522:	2b03      	cmp	r3, #3
 8004524:	d107      	bne.n	8004536 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004526:	f107 030e 	add.w	r3, r7, #14
 800452a:	2202      	movs	r2, #2
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f002 f977 	bl	8006822 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004534:	e098      	b.n	8004668 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f002 f908 	bl	800674e <USBD_CtlError>
            ret = USBD_FAIL;
 800453e:	2302      	movs	r3, #2
 8004540:	75fb      	strb	r3, [r7, #23]
          break;
 8004542:	e091      	b.n	8004668 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800454a:	2b03      	cmp	r3, #3
 800454c:	d107      	bne.n	800455e <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3304      	adds	r3, #4
 8004552:	2201      	movs	r2, #1
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f002 f963 	bl	8006822 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800455c:	e084      	b.n	8004668 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800455e:	6839      	ldr	r1, [r7, #0]
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f002 f8f4 	bl	800674e <USBD_CtlError>
            ret = USBD_FAIL;
 8004566:	2302      	movs	r3, #2
 8004568:	75fb      	strb	r3, [r7, #23]
          break;
 800456a:	e07d      	b.n	8004668 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004572:	2b03      	cmp	r3, #3
 8004574:	d106      	bne.n	8004584 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	885b      	ldrh	r3, [r3, #2]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004582:	e071      	b.n	8004668 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f002 f8e1 	bl	800674e <USBD_CtlError>
            ret = USBD_FAIL;
 800458c:	2302      	movs	r3, #2
 800458e:	75fb      	strb	r3, [r7, #23]
          break;
 8004590:	e06a      	b.n	8004668 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	889b      	ldrh	r3, [r3, #4]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f002 fd5a 	bl	8007054 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	889b      	ldrh	r3, [r3, #4]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f002 fd34 	bl	8007016 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	889b      	ldrh	r3, [r3, #4]
 80045b2:	b25b      	sxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	da23      	bge.n	8004600 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	889b      	ldrh	r3, [r3, #4]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 020f 	and.w	r2, r3, #15
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	3318      	adds	r3, #24
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	7c1b      	ldrb	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d107      	bne.n	80045ec <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80045dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045e0:	2202      	movs	r2, #2
 80045e2:	2181      	movs	r1, #129	; 0x81
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f002 fcf0 	bl	8006fca <USBD_LL_OpenEP>
 80045ea:	e005      	b.n	80045f8 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80045ec:	2340      	movs	r3, #64	; 0x40
 80045ee:	2202      	movs	r2, #2
 80045f0:	2181      	movs	r1, #129	; 0x81
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f002 fce9 	bl	8006fca <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80045fe:	e024      	b.n	800464a <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	889b      	ldrh	r3, [r3, #4]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7c1b      	ldrb	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8004626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800462a:	2202      	movs	r2, #2
 800462c:	2101      	movs	r1, #1
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f002 fccb 	bl	8006fca <USBD_LL_OpenEP>
 8004634:	e005      	b.n	8004642 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8004636:	2340      	movs	r3, #64	; 0x40
 8004638:	2202      	movs	r2, #2
 800463a:	2101      	movs	r1, #1
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f002 fcc4 	bl	8006fca <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	889b      	ldrh	r3, [r3, #4]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa52 	bl	8004afc <MSC_BOT_CplClrFeature>
          break;
 8004658:	e006      	b.n	8004668 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 800465a:	6839      	ldr	r1, [r7, #0]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f002 f876 	bl	800674e <USBD_CtlError>
          ret = USBD_FAIL;
 8004662:	2302      	movs	r3, #2
 8004664:	75fb      	strb	r3, [r7, #23]
          break;
 8004666:	bf00      	nop
      }
      break;
 8004668:	e006      	b.n	8004678 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 800466a:	6839      	ldr	r1, [r7, #0]
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f002 f86e 	bl	800674e <USBD_CtlError>
      ret = USBD_FAIL;
 8004672:	2302      	movs	r3, #2
 8004674:	75fb      	strb	r3, [r7, #23]
      break;
 8004676:	bf00      	nop
  }

  return ret;
 8004678:	7dfb      	ldrb	r3, [r7, #23]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop

08004684 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	4619      	mov	r1, r3
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8c1 	bl	800481c <MSC_BOT_DataIn>

  return USBD_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	4619      	mov	r1, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f8e3 	bl	8004880 <MSC_BOT_DataOut>

  return USBD_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80046d2:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000044 	.word	0x20000044

080046e4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80046f2:	4b03      	ldr	r3, [pc, #12]	; (8004700 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000064 	.word	0x20000064

08004704 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8004712:	4b03      	ldr	r3, [pc, #12]	; (8004720 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000084 	.word	0x20000084

08004724 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	220a      	movs	r2, #10
 8004730:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8004732:	4b03      	ldr	r3, [pc, #12]	; (8004740 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	200000a4 	.word	0x200000a4

08004744 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004776:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2000      	movs	r0, #0
 800479e:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80047a0:	2101      	movs	r1, #1
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f002 fc56 	bl	8007054 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80047a8:	2181      	movs	r1, #129	; 0x81
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f002 fc52 	bl	8007054 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80047b6:	231f      	movs	r3, #31
 80047b8:	2101      	movs	r1, #1
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f002 fd14 	bl	80071e8 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047d6:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80047ea:	231f      	movs	r3, #31
 80047ec:	2101      	movs	r1, #1
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f002 fcfa 	bl	80071e8 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800480a:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	721a      	strb	r2, [r3, #8]
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800482e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	7a1b      	ldrb	r3, [r3, #8]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d005      	beq.n	8004844 <MSC_BOT_DataIn+0x28>
 8004838:	2b02      	cmp	r3, #2
 800483a:	db1a      	blt.n	8004872 <MSC_BOT_DataIn+0x56>
 800483c:	3b03      	subs	r3, #3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d817      	bhi.n	8004872 <MSC_BOT_DataIn+0x56>
 8004842:	e011      	b.n	8004868 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8004850:	461a      	mov	r2, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f97a 	bl	8004b4c <SCSI_ProcessCmd>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	da0b      	bge.n	8004876 <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800485e:	2101      	movs	r1, #1
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f8f1 	bl	8004a48 <MSC_BOT_SendCSW>
      }
      break;
 8004866:	e006      	b.n	8004876 <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004868:	2100      	movs	r1, #0
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8ec 	bl	8004a48 <MSC_BOT_SendCSW>
      break;
 8004870:	e002      	b.n	8004878 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <MSC_BOT_DataIn+0x5c>
      break;
 8004876:	bf00      	nop
  }
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004892:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	7a1b      	ldrb	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <MSC_BOT_DataOut+0x22>
 800489c:	2b01      	cmp	r3, #1
 800489e:	d004      	beq.n	80048aa <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80048a0:	e015      	b.n	80048ce <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f818 	bl	80048d8 <MSC_BOT_CBW_Decode>
      break;
 80048a8:	e011      	b.n	80048ce <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80048b6:	461a      	mov	r2, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f947 	bl	8004b4c <SCSI_ProcessCmd>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	da03      	bge.n	80048cc <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80048c4:	2101      	movs	r1, #1
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f8be 	bl	8004a48 <MSC_BOT_SendCSW>
      break;
 80048cc:	bf00      	nop
  }
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048e6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004900:	2101      	movs	r1, #1
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f002 fc93 	bl	800722e <USBD_LL_GetRxDataSize>
 8004908:	4603      	mov	r3, r0
 800490a:	2b1f      	cmp	r3, #31
 800490c:	d114      	bne.n	8004938 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004914:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <MSC_BOT_CBW_Decode+0x108>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10e      	bne.n	8004938 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004920:	2b01      	cmp	r3, #1
 8004922:	d809      	bhi.n	8004938 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 800492a:	2b00      	cmp	r3, #0
 800492c:	d004      	beq.n	8004938 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8004934:	2b10      	cmp	r3, #16
 8004936:	d90e      	bls.n	8004956 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800493e:	2320      	movs	r3, #32
 8004940:	2205      	movs	r2, #5
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fc48 	bl	80051d8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2202      	movs	r2, #2
 800494c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8a6 	bl	8004aa0 <MSC_BOT_Abort>
 8004954:	e041      	b.n	80049da <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8004962:	461a      	mov	r2, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8f1 	bl	8004b4c <SCSI_ProcessCmd>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	da0c      	bge.n	800498a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	7a1b      	ldrb	r3, [r3, #8]
 8004974:	2b05      	cmp	r3, #5
 8004976:	d104      	bne.n	8004982 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004978:	2101      	movs	r1, #1
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f864 	bl	8004a48 <MSC_BOT_SendCSW>
 8004980:	e02b      	b.n	80049da <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f88c 	bl	8004aa0 <MSC_BOT_Abort>
 8004988:	e027      	b.n	80049da <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	7a1b      	ldrb	r3, [r3, #8]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d022      	beq.n	80049d8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004996:	2b01      	cmp	r3, #1
 8004998:	d01e      	beq.n	80049d8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d01a      	beq.n	80049d8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	895b      	ldrh	r3, [r3, #10]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f103 010c 	add.w	r1, r3, #12
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	895b      	ldrh	r3, [r3, #10]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f814 	bl	80049e4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80049bc:	e00d      	b.n	80049da <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	895b      	ldrh	r3, [r3, #10]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80049c6:	2100      	movs	r1, #0
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f83d 	bl	8004a48 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80049ce:	e004      	b.n	80049da <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f865 	bl	8004aa0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80049d6:	e000      	b.n	80049da <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80049d8:	bf00      	nop
    }
  }
}
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	43425355 	.word	0x43425355

080049e4 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	4613      	mov	r3, r2
 80049f0:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f8:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d204      	bcs.n	8004a10 <MSC_BOT_SendData+0x2c>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	e000      	b.n	8004a12 <MSC_BOT_SendData+0x2e>
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	1ad2      	subs	r2, r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8004a32:	8a7b      	ldrh	r3, [r7, #18]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	2181      	movs	r1, #129	; 0x81
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f002 fbb2 	bl	80071a2 <USBD_LL_Transmit>
}
 8004a3e:	bf00      	nop
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a5a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <MSC_BOT_SendCSW+0x54>)
 8004a60:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	78fa      	ldrb	r2, [r7, #3]
 8004a68:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8004a78:	230d      	movs	r3, #13
 8004a7a:	2181      	movs	r1, #129	; 0x81
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f002 fb90 	bl	80071a2 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8004a88:	231f      	movs	r3, #31
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f002 fbab 	bl	80071e8 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	53425355 	.word	0x53425355

08004aa0 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aae:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10c      	bne.n	8004ad4 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d103      	bne.n	8004ad4 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8004acc:	2101      	movs	r1, #1
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f002 fadf 	bl	8007092 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004ad4:	2181      	movs	r1, #129	; 0x81
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f002 fadb 	bl	8007092 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	7a5b      	ldrb	r3, [r3, #9]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d107      	bne.n	8004af4 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8004aea:	231f      	movs	r3, #31
 8004aec:	2101      	movs	r1, #1
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f002 fb7a 	bl	80071e8 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b0e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	7a5b      	ldrb	r3, [r3, #9]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d107      	bne.n	8004b28 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004b18:	2181      	movs	r1, #129	; 0x81
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f002 fab9 	bl	8007092 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	725a      	strb	r2, [r3, #9]
 8004b26:	e00d      	b.n	8004b44 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	da08      	bge.n	8004b42 <MSC_BOT_CplClrFeature+0x46>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	7a5b      	ldrb	r3, [r3, #9]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d004      	beq.n	8004b42 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004b38:	2101      	movs	r1, #1
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ff84 	bl	8004a48 <MSC_BOT_SendCSW>
 8004b40:	e000      	b.n	8004b44 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8004b42:	bf00      	nop
  }
}
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	460b      	mov	r3, r1
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b5a      	cmp	r3, #90	; 0x5a
 8004b60:	f200 810e 	bhi.w	8004d80 <SCSI_ProcessCmd+0x234>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <SCSI_ProcessCmd+0x20>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004cd9 	.word	0x08004cd9
 8004b70:	08004d81 	.word	0x08004d81
 8004b74:	08004d81 	.word	0x08004d81
 8004b78:	08004ce7 	.word	0x08004ce7
 8004b7c:	08004d81 	.word	0x08004d81
 8004b80:	08004d81 	.word	0x08004d81
 8004b84:	08004d81 	.word	0x08004d81
 8004b88:	08004d81 	.word	0x08004d81
 8004b8c:	08004d81 	.word	0x08004d81
 8004b90:	08004d81 	.word	0x08004d81
 8004b94:	08004d81 	.word	0x08004d81
 8004b98:	08004d81 	.word	0x08004d81
 8004b9c:	08004d81 	.word	0x08004d81
 8004ba0:	08004d81 	.word	0x08004d81
 8004ba4:	08004d81 	.word	0x08004d81
 8004ba8:	08004d81 	.word	0x08004d81
 8004bac:	08004d81 	.word	0x08004d81
 8004bb0:	08004d81 	.word	0x08004d81
 8004bb4:	08004cf5 	.word	0x08004cf5
 8004bb8:	08004d81 	.word	0x08004d81
 8004bbc:	08004d81 	.word	0x08004d81
 8004bc0:	08004d81 	.word	0x08004d81
 8004bc4:	08004d81 	.word	0x08004d81
 8004bc8:	08004d81 	.word	0x08004d81
 8004bcc:	08004d81 	.word	0x08004d81
 8004bd0:	08004d81 	.word	0x08004d81
 8004bd4:	08004d1f 	.word	0x08004d1f
 8004bd8:	08004d03 	.word	0x08004d03
 8004bdc:	08004d81 	.word	0x08004d81
 8004be0:	08004d81 	.word	0x08004d81
 8004be4:	08004d11 	.word	0x08004d11
 8004be8:	08004d81 	.word	0x08004d81
 8004bec:	08004d81 	.word	0x08004d81
 8004bf0:	08004d81 	.word	0x08004d81
 8004bf4:	08004d81 	.word	0x08004d81
 8004bf8:	08004d3b 	.word	0x08004d3b
 8004bfc:	08004d81 	.word	0x08004d81
 8004c00:	08004d49 	.word	0x08004d49
 8004c04:	08004d81 	.word	0x08004d81
 8004c08:	08004d81 	.word	0x08004d81
 8004c0c:	08004d57 	.word	0x08004d57
 8004c10:	08004d81 	.word	0x08004d81
 8004c14:	08004d65 	.word	0x08004d65
 8004c18:	08004d81 	.word	0x08004d81
 8004c1c:	08004d81 	.word	0x08004d81
 8004c20:	08004d81 	.word	0x08004d81
 8004c24:	08004d81 	.word	0x08004d81
 8004c28:	08004d73 	.word	0x08004d73
 8004c2c:	08004d81 	.word	0x08004d81
 8004c30:	08004d81 	.word	0x08004d81
 8004c34:	08004d81 	.word	0x08004d81
 8004c38:	08004d81 	.word	0x08004d81
 8004c3c:	08004d81 	.word	0x08004d81
 8004c40:	08004d81 	.word	0x08004d81
 8004c44:	08004d81 	.word	0x08004d81
 8004c48:	08004d81 	.word	0x08004d81
 8004c4c:	08004d81 	.word	0x08004d81
 8004c50:	08004d81 	.word	0x08004d81
 8004c54:	08004d81 	.word	0x08004d81
 8004c58:	08004d81 	.word	0x08004d81
 8004c5c:	08004d81 	.word	0x08004d81
 8004c60:	08004d81 	.word	0x08004d81
 8004c64:	08004d81 	.word	0x08004d81
 8004c68:	08004d81 	.word	0x08004d81
 8004c6c:	08004d81 	.word	0x08004d81
 8004c70:	08004d81 	.word	0x08004d81
 8004c74:	08004d81 	.word	0x08004d81
 8004c78:	08004d81 	.word	0x08004d81
 8004c7c:	08004d81 	.word	0x08004d81
 8004c80:	08004d81 	.word	0x08004d81
 8004c84:	08004d81 	.word	0x08004d81
 8004c88:	08004d81 	.word	0x08004d81
 8004c8c:	08004d81 	.word	0x08004d81
 8004c90:	08004d81 	.word	0x08004d81
 8004c94:	08004d81 	.word	0x08004d81
 8004c98:	08004d81 	.word	0x08004d81
 8004c9c:	08004d81 	.word	0x08004d81
 8004ca0:	08004d81 	.word	0x08004d81
 8004ca4:	08004d81 	.word	0x08004d81
 8004ca8:	08004d81 	.word	0x08004d81
 8004cac:	08004d81 	.word	0x08004d81
 8004cb0:	08004d81 	.word	0x08004d81
 8004cb4:	08004d81 	.word	0x08004d81
 8004cb8:	08004d81 	.word	0x08004d81
 8004cbc:	08004d81 	.word	0x08004d81
 8004cc0:	08004d81 	.word	0x08004d81
 8004cc4:	08004d81 	.word	0x08004d81
 8004cc8:	08004d81 	.word	0x08004d81
 8004ccc:	08004d81 	.word	0x08004d81
 8004cd0:	08004d81 	.word	0x08004d81
 8004cd4:	08004d2d 	.word	0x08004d2d
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8004cd8:	7afb      	ldrb	r3, [r7, #11]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f85c 	bl	8004d9c <SCSI_TestUnitReady>
      break;
 8004ce4:	e055      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8004ce6:	7afb      	ldrb	r3, [r7, #11]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	4619      	mov	r1, r3
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fa09 	bl	8005104 <SCSI_RequestSense>
      break;
 8004cf2:	e04e      	b.n	8004d92 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8004cf4:	7afb      	ldrb	r3, [r7, #11]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f888 	bl	8004e10 <SCSI_Inquiry>
      break;
 8004d00:	e047      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8004d02:	7afb      	ldrb	r3, [r7, #11]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4619      	mov	r1, r3
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fa9e 	bl	800524a <SCSI_StartStopUnit>
      break;
 8004d0e:	e040      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8004d10:	7afb      	ldrb	r3, [r7, #11]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	4619      	mov	r1, r3
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fa97 	bl	800524a <SCSI_StartStopUnit>
      break;
 8004d1c:	e039      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8004d1e:	7afb      	ldrb	r3, [r7, #11]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4619      	mov	r1, r3
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f99d 	bl	8005064 <SCSI_ModeSense6>
      break;
 8004d2a:	e032      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8004d2c:	7afb      	ldrb	r3, [r7, #11]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4619      	mov	r1, r3
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f9be 	bl	80050b4 <SCSI_ModeSense10>
      break;
 8004d38:	e02b      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f92a 	bl	8004f9a <SCSI_ReadFormatCapacity>
      break;
 8004d46:	e024      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8004d48:	7afb      	ldrb	r3, [r7, #11]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f8bc 	bl	8004ecc <SCSI_ReadCapacity10>
      break;
 8004d54:	e01d      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8004d56:	7afb      	ldrb	r3, [r7, #11]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fa88 	bl	8005272 <SCSI_Read10>
      break;
 8004d62:	e016      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8004d64:	7afb      	ldrb	r3, [r7, #11]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fb0d 	bl	800538a <SCSI_Write10>
      break;
 8004d70:	e00f      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8004d72:	7afb      	ldrb	r3, [r7, #11]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	4619      	mov	r1, r3
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fbb6 	bl	80054ea <SCSI_Verify10>
      break;
 8004d7e:	e008      	b.n	8004d92 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8004d80:	7af9      	ldrb	r1, [r7, #11]
 8004d82:	2320      	movs	r3, #32
 8004d84:	2205      	movs	r2, #5
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fa26 	bl	80051d8 <SCSI_SenseCode>
      return -1;
 8004d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d90:	e000      	b.n	8004d94 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	460b      	mov	r3, r1
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db0:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	2205      	movs	r2, #5
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fa06 	bl	80051d8 <SCSI_SenseCode>

    return -1;
 8004dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd0:	e019      	b.n	8004e06 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	7afa      	ldrb	r2, [r7, #11]
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4798      	blx	r3
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004de6:	7af9      	ldrb	r1, [r7, #11]
 8004de8:	233a      	movs	r3, #58	; 0x3a
 8004dea:	2202      	movs	r2, #2
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f9f3 	bl	80051d8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2205      	movs	r2, #5
 8004df6:	721a      	strb	r2, [r3, #8]

    return -1;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfc:	e003      	b.n	8004e06 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	815a      	strh	r2, [r3, #10]

  return 0;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e24:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d014      	beq.n	8004e5e <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8004e34:	2307      	movs	r3, #7
 8004e36:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	8bfa      	ldrh	r2, [r7, #30]
 8004e3c:	815a      	strh	r2, [r3, #10]

    while (len)
 8004e3e:	e00a      	b.n	8004e56 <SCSI_Inquiry+0x46>
    {
      len--;
 8004e40:	8bfb      	ldrh	r3, [r7, #30]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8004e46:	8bfa      	ldrh	r2, [r7, #30]
 8004e48:	8bfb      	ldrh	r3, [r7, #30]
 8004e4a:	491f      	ldr	r1, [pc, #124]	; (8004ec8 <SCSI_Inquiry+0xb8>)
 8004e4c:	5c89      	ldrb	r1, [r1, r2]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4413      	add	r3, r2
 8004e52:	460a      	mov	r2, r1
 8004e54:	731a      	strb	r2, [r3, #12]
    while (len)
 8004e56:	8bfb      	ldrh	r3, [r7, #30]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f1      	bne.n	8004e40 <SCSI_Inquiry+0x30>
 8004e5c:	e02e      	b.n	8004ebc <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e64:	69d9      	ldr	r1, [r3, #28]
 8004e66:	7afa      	ldrb	r2, [r7, #11]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	3304      	adds	r3, #4
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3305      	adds	r3, #5
 8004e7e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	8bfa      	ldrh	r2, [r7, #30]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d303      	bcc.n	8004e96 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	8bfa      	ldrh	r2, [r7, #30]
 8004e9a:	815a      	strh	r2, [r3, #10]

    while (len)
 8004e9c:	e00b      	b.n	8004eb6 <SCSI_Inquiry+0xa6>
    {
      len--;
 8004e9e:	8bfb      	ldrh	r3, [r7, #30]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8004ea4:	8bfb      	ldrh	r3, [r7, #30]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	441a      	add	r2, r3
 8004eaa:	8bfb      	ldrh	r3, [r7, #30]
 8004eac:	7811      	ldrb	r1, [r2, #0]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	460a      	mov	r2, r1
 8004eb4:	731a      	strb	r2, [r3, #12]
    while (len)
 8004eb6:	8bfb      	ldrh	r3, [r7, #30]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3724      	adds	r7, #36	; 0x24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	080075c4 	.word	0x080075c4

08004ecc <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee0:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8004ef6:	7af8      	ldrb	r0, [r7, #11]
 8004ef8:	4798      	blx	r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004f00:	7af9      	ldrb	r1, [r7, #11]
 8004f02:	233a      	movs	r3, #58	; 0x3a
 8004f04:	2202      	movs	r2, #2
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f966 	bl	80051d8 <SCSI_SenseCode>
    return -1;
 8004f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f10:	e03f      	b.n	8004f92 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	0e1b      	lsrs	r3, r3, #24
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004f58:	161b      	asrs	r3, r3, #24
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004f66:	141b      	asrs	r3, r3, #16
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	815a      	strh	r2, [r3, #10]
    return 0;
 8004f90:	2300      	movs	r3, #0
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b088      	sub	sp, #32
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fae:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	83fb      	strh	r3, [r7, #30]
 8004fb4:	e007      	b.n	8004fc6 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8004fb6:	8bfb      	ldrh	r3, [r7, #30]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4413      	add	r3, r2
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8004fc0:	8bfb      	ldrh	r3, [r7, #30]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	83fb      	strh	r3, [r7, #30]
 8004fc6:	8bfb      	ldrh	r3, [r7, #30]
 8004fc8:	2b0b      	cmp	r3, #11
 8004fca:	d9f4      	bls.n	8004fb6 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f107 0216 	add.w	r2, r7, #22
 8004fd8:	f107 0110 	add.w	r1, r7, #16
 8004fdc:	7af8      	ldrb	r0, [r7, #11]
 8004fde:	4798      	blx	r3
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d008      	beq.n	8004ff8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004fe6:	7af9      	ldrb	r1, [r7, #11]
 8004fe8:	233a      	movs	r3, #58	; 0x3a
 8004fea:	2202      	movs	r2, #2
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f8f3 	bl	80051d8 <SCSI_SenseCode>
    return -1;
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff6:	e030      	b.n	800505a <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	3b01      	subs	r3, #1
 8005002:	0e1b      	lsrs	r3, r3, #24
 8005004:	b2da      	uxtb	r2, r3
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	3b01      	subs	r3, #1
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	b2da      	uxtb	r2, r3
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	3b01      	subs	r3, #1
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	b2da      	uxtb	r2, r3
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b2da      	uxtb	r2, r3
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2202      	movs	r2, #2
 8005032:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005034:	8afb      	ldrh	r3, [r7, #22]
 8005036:	141b      	asrs	r3, r3, #16
 8005038:	b2da      	uxtb	r2, r3
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800503e:	8afb      	ldrh	r3, [r7, #22]
 8005040:	0a1b      	lsrs	r3, r3, #8
 8005042:	b29b      	uxth	r3, r3
 8005044:	b2da      	uxtb	r2, r3
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800504a:	8afb      	ldrh	r3, [r7, #22]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	220c      	movs	r2, #12
 8005056:	815a      	strh	r2, [r3, #10]
    return 0;
 8005058:	2300      	movs	r3, #0
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	460b      	mov	r3, r1
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005078:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800507a:	2308      	movs	r3, #8
 800507c:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	8afa      	ldrh	r2, [r7, #22]
 8005082:	815a      	strh	r2, [r3, #10]

  while (len)
 8005084:	e00a      	b.n	800509c <SCSI_ModeSense6+0x38>
  {
    len--;
 8005086:	8afb      	ldrh	r3, [r7, #22]
 8005088:	3b01      	subs	r3, #1
 800508a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800508c:	8afa      	ldrh	r2, [r7, #22]
 800508e:	8afb      	ldrh	r3, [r7, #22]
 8005090:	4907      	ldr	r1, [pc, #28]	; (80050b0 <SCSI_ModeSense6+0x4c>)
 8005092:	5c89      	ldrb	r1, [r1, r2]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	460a      	mov	r2, r1
 800509a:	731a      	strb	r2, [r3, #12]
  while (len)
 800509c:	8afb      	ldrh	r3, [r7, #22]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f1      	bne.n	8005086 <SCSI_ModeSense6+0x22>
  }
  return 0;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	080075cc 	.word	0x080075cc

080050b4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	460b      	mov	r3, r1
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 80050c2:	2308      	movs	r3, #8
 80050c4:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050cc:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	8afa      	ldrh	r2, [r7, #22]
 80050d2:	815a      	strh	r2, [r3, #10]

  while (len)
 80050d4:	e00a      	b.n	80050ec <SCSI_ModeSense10+0x38>
  {
    len--;
 80050d6:	8afb      	ldrh	r3, [r7, #22]
 80050d8:	3b01      	subs	r3, #1
 80050da:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80050dc:	8afa      	ldrh	r2, [r7, #22]
 80050de:	8afb      	ldrh	r3, [r7, #22]
 80050e0:	4907      	ldr	r1, [pc, #28]	; (8005100 <SCSI_ModeSense10+0x4c>)
 80050e2:	5c89      	ldrb	r1, [r1, r2]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	460a      	mov	r2, r1
 80050ea:	731a      	strb	r2, [r3, #12]
  while (len)
 80050ec:	8afb      	ldrh	r3, [r7, #22]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f1      	bne.n	80050d6 <SCSI_ModeSense10+0x22>
  }

  return 0;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	080075d4 	.word	0x080075d4

08005104 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	460b      	mov	r3, r1
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005118:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800511a:	2300      	movs	r3, #0
 800511c:	75fb      	strb	r3, [r7, #23]
 800511e:	e007      	b.n	8005130 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4413      	add	r3, r2
 8005126:	2200      	movs	r2, #0
 8005128:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	3301      	adds	r3, #1
 800512e:	75fb      	strb	r3, [r7, #23]
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	2b11      	cmp	r3, #17
 8005134:	d9f4      	bls.n	8005120 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2270      	movs	r2, #112	; 0x70
 800513a:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	220c      	movs	r2, #12
 8005140:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800514e:	429a      	cmp	r2, r3
 8005150:	d02e      	beq.n	80051b0 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	3347      	adds	r3, #71	; 0x47
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	791a      	ldrb	r2, [r3, #4]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	3347      	adds	r3, #71	; 0x47
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4413      	add	r3, r2
 8005174:	7a5a      	ldrb	r2, [r3, #9]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	3347      	adds	r3, #71	; 0x47
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	7a1a      	ldrb	r2, [r3, #8]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005194:	3301      	adds	r3, #1
 8005196:	b2da      	uxtb	r2, r3
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d103      	bne.n	80051b0 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2212      	movs	r2, #18
 80051b4:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3304      	adds	r3, #4
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b12      	cmp	r3, #18
 80051be:	d805      	bhi.n	80051cc <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	4608      	mov	r0, r1
 80051e2:	4611      	mov	r1, r2
 80051e4:	461a      	mov	r2, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	70fb      	strb	r3, [r7, #3]
 80051ea:	460b      	mov	r3, r1
 80051ec:	70bb      	strb	r3, [r7, #2]
 80051ee:	4613      	mov	r3, r2
 80051f0:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f8:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	3347      	adds	r3, #71	; 0x47
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4413      	add	r3, r2
 8005208:	78ba      	ldrb	r2, [r7, #2]
 800520a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	3347      	adds	r3, #71	; 0x47
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	2200      	movs	r2, #0
 800521c:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005224:	3301      	adds	r3, #1
 8005226:	b2da      	uxtb	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005234:	2b04      	cmp	r3, #4
 8005236:	d103      	bne.n	8005240 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800524a:	b480      	push	{r7}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	460b      	mov	r3, r1
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525e:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2200      	movs	r2, #0
 8005264:	815a      	strh	r2, [r3, #10]
  return 0;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	460b      	mov	r3, r1
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005286:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	7a1b      	ldrb	r3, [r3, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d16e      	bne.n	800536e <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8005296:	b25b      	sxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	db0a      	blt.n	80052b2 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80052a2:	2320      	movs	r3, #32
 80052a4:	2205      	movs	r2, #5
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff ff96 	bl	80051d8 <SCSI_SenseCode>
      return -1;
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295
 80052b0:	e067      	b.n	8005382 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	7afa      	ldrb	r2, [r7, #11]
 80052bc:	4610      	mov	r0, r2
 80052be:	4798      	blx	r3
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80052c6:	7af9      	ldrb	r1, [r7, #11]
 80052c8:	233a      	movs	r3, #58	; 0x3a
 80052ca:	2202      	movs	r2, #2
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff ff83 	bl	80051d8 <SCSI_SenseCode>
      return -1;
 80052d2:	f04f 33ff 	mov.w	r3, #4294967295
 80052d6:	e054      	b.n	8005382 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3302      	adds	r3, #2
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3303      	adds	r3, #3
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80052e8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80052f2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	3205      	adds	r2, #5
 80052f8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80052fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3307      	adds	r3, #7
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	3208      	adds	r2, #8
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	431a      	orrs	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005324:	7af9      	ldrb	r1, [r7, #11]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f912 	bl	8005550 <SCSI_CheckAddressRange>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	da02      	bge.n	8005338 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005332:	f04f 33ff 	mov.w	r3, #4294967295
 8005336:	e024      	b.n	8005382 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2202      	movs	r2, #2
 800533c:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800534a:	6979      	ldr	r1, [r7, #20]
 800534c:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	429a      	cmp	r2, r3
 8005356:	d00a      	beq.n	800536e <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800535e:	2320      	movs	r3, #32
 8005360:	2205      	movs	r2, #5
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff ff38 	bl	80051d8 <SCSI_SenseCode>
      return -1;
 8005368:	f04f 33ff 	mov.w	r3, #4294967295
 800536c:	e009      	b.n	8005382 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005374:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8005376:	7afb      	ldrb	r3, [r7, #11]
 8005378:	4619      	mov	r1, r3
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f90a 	bl	8005594 <SCSI_ProcessRead>
 8005380:	4603      	mov	r3, r0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b086      	sub	sp, #24
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	460b      	mov	r3, r1
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	7a1b      	ldrb	r3, [r3, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 8096 	bne.w	80054d6 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80053b0:	b25b      	sxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da0a      	bge.n	80053cc <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80053bc:	2320      	movs	r3, #32
 80053be:	2205      	movs	r2, #5
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff ff09 	bl	80051d8 <SCSI_SenseCode>
      return -1;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	e08a      	b.n	80054e2 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	7afa      	ldrb	r2, [r7, #11]
 80053d6:	4610      	mov	r0, r2
 80053d8:	4798      	blx	r3
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80053e0:	7af9      	ldrb	r1, [r7, #11]
 80053e2:	233a      	movs	r3, #58	; 0x3a
 80053e4:	2202      	movs	r2, #2
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fef6 	bl	80051d8 <SCSI_SenseCode>
      return -1;
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295
 80053f0:	e077      	b.n	80054e2 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	7afa      	ldrb	r2, [r7, #11]
 80053fc:	4610      	mov	r0, r2
 80053fe:	4798      	blx	r3
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005406:	7af9      	ldrb	r1, [r7, #11]
 8005408:	2327      	movs	r3, #39	; 0x27
 800540a:	2202      	movs	r2, #2
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff fee3 	bl	80051d8 <SCSI_SenseCode>
      return -1;
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	e064      	b.n	80054e2 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3302      	adds	r3, #2
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3303      	adds	r3, #3
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005428:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3304      	adds	r3, #4
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005432:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	3205      	adds	r2, #5
 8005438:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800543a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3307      	adds	r3, #7
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	3208      	adds	r2, #8
 800544e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005450:	431a      	orrs	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005464:	7af9      	ldrb	r1, [r7, #11]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f872 	bl	8005550 <SCSI_CheckAddressRange>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	da02      	bge.n	8005478 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005472:	f04f 33ff 	mov.w	r3, #4294967295
 8005476:	e034      	b.n	80054e2 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8005484:	fb02 f303 	mul.w	r3, r2, r3
 8005488:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	429a      	cmp	r2, r3
 8005494:	d00a      	beq.n	80054ac <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800549c:	2320      	movs	r3, #32
 800549e:	2205      	movs	r2, #5
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff fe99 	bl	80051d8 <SCSI_SenseCode>
      return -1;
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295
 80054aa:	e01a      	b.n	80054e2 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b2:	bf28      	it	cs
 80054b4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80054b8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2201      	movs	r2, #1
 80054be:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f103 020c 	add.w	r2, r3, #12
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2101      	movs	r1, #1
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f001 fe8b 	bl	80071e8 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e005      	b.n	80054e2 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 80054d6:	7afb      	ldrb	r3, [r7, #11]
 80054d8:	4619      	mov	r1, r3
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f8ce 	bl	800567c <SCSI_ProcessWrite>
 80054e0:	4603      	mov	r3, r0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b086      	sub	sp, #24
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	460b      	mov	r3, r1
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fe:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3301      	adds	r3, #1
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d008      	beq.n	8005520 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800550e:	7af9      	ldrb	r1, [r7, #11]
 8005510:	2324      	movs	r3, #36	; 0x24
 8005512:	2205      	movs	r2, #5
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f7ff fe5f 	bl	80051d8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800551a:	f04f 33ff 	mov.w	r3, #4294967295
 800551e:	e013      	b.n	8005548 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800552c:	7af9      	ldrb	r1, [r7, #11]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f80e 	bl	8005550 <SCSI_CheckAddressRange>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	da02      	bge.n	8005540 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
 800553e:	e003      	b.n	8005548 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	815a      	strh	r2, [r3, #10]
  return 0;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	460b      	mov	r3, r1
 800555e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005566:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	441a      	add	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005574:	429a      	cmp	r2, r3
 8005576:	d908      	bls.n	800558a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8005578:	7af9      	ldrb	r1, [r7, #11]
 800557a:	2321      	movs	r3, #33	; 0x21
 800557c:	2205      	movs	r2, #5
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff fe2a 	bl	80051d8 <SCSI_SenseCode>
    return -1;
 8005584:	f04f 33ff 	mov.w	r3, #4294967295
 8005588:	e000      	b.n	800558c <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8005594:	b590      	push	{r4, r7, lr}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80055b4:	fb02 f303 	mul.w	r3, r2, r3
 80055b8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c0:	bf28      	it	cs
 80055c2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80055c6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ce:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80055e2:	4618      	mov	r0, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	78f8      	ldrb	r0, [r7, #3]
 80055ee:	47a0      	blx	r4
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	da08      	bge.n	8005608 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80055f6:	78f9      	ldrb	r1, [r7, #3]
 80055f8:	2311      	movs	r3, #17
 80055fa:	2204      	movs	r2, #4
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff fdeb 	bl	80051d8 <SCSI_SenseCode>
    return -1;
 8005602:	f04f 33ff 	mov.w	r3, #4294967295
 8005606:	e035      	b.n	8005674 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f103 020c 	add.w	r2, r3, #12
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	b29b      	uxth	r3, r3
 8005612:	2181      	movs	r1, #129	; 0x81
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f001 fdc4 	bl	80071a2 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005626:	4619      	mov	r1, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	fbb3 f3f1 	udiv	r3, r3, r1
 800562e:	441a      	add	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005642:	4619      	mov	r1, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	fbb3 f3f1 	udiv	r3, r3, r1
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2203      	movs	r2, #3
 8005670:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	bd90      	pop	{r4, r7, pc}

0800567c <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800567c:	b590      	push	{r4, r7, lr}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800568e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800569c:	fb02 f303 	mul.w	r3, r2, r3
 80056a0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a8:	bf28      	it	cs
 80056aa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80056ae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056b6:	695c      	ldr	r4, [r3, #20]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f103 010c 	add.w	r1, r3, #12
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80056ca:	4618      	mov	r0, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	78f8      	ldrb	r0, [r7, #3]
 80056d6:	47a0      	blx	r4
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	da08      	bge.n	80056f0 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80056de:	78f9      	ldrb	r1, [r7, #3]
 80056e0:	2303      	movs	r3, #3
 80056e2:	2204      	movs	r2, #4
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fd77 	bl	80051d8 <SCSI_SenseCode>

    return -1;
 80056ea:	f04f 33ff 	mov.w	r3, #4294967295
 80056ee:	e045      	b.n	800577c <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80056fc:	4619      	mov	r1, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	fbb3 f3f1 	udiv	r3, r3, r1
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005718:	4619      	mov	r1, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005720:	1ad2      	subs	r2, r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad2      	subs	r2, r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005742:	2100      	movs	r1, #0
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff f97f 	bl	8004a48 <MSC_BOT_SendCSW>
 800574a:	e016      	b.n	800577a <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005760:	bf28      	it	cs
 8005762:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005766:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f103 020c 	add.w	r2, r3, #12
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	b29b      	uxth	r3, r3
 8005772:	2101      	movs	r1, #1
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 fd37 	bl	80071e8 <USBD_LL_PrepareReceive>
  }

  return 0;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	bd90      	pop	{r4, r7, pc}

08005784 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005798:	2302      	movs	r3, #2
 800579a:	e01a      	b.n	80057d2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	79fa      	ldrb	r2, [r7, #7]
 80057c8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f001 fb98 	bl	8006f00 <USBD_LL_Init>

  return USBD_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
 80057fa:	e001      	b.n	8005800 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057fc:	2302      	movs	r3, #2
 80057fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr

0800580c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 fbbd 	bl	8006f94 <USBD_LL_Start>

  return USBD_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005844:	2302      	movs	r3, #2
 8005846:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	4611      	mov	r1, r2
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	78fa      	ldrb	r2, [r7, #3]
 800588c:	4611      	mov	r1, r2
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3

  return USBD_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 ff11 	bl	80066d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80058c2:	461a      	mov	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d016      	beq.n	8005906 <USBD_LL_SetupStage+0x6a>
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d81c      	bhi.n	8005916 <USBD_LL_SetupStage+0x7a>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <USBD_LL_SetupStage+0x4a>
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d008      	beq.n	80058f6 <USBD_LL_SetupStage+0x5a>
 80058e4:	e017      	b.n	8005916 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fa04 	bl	8005cfc <USBD_StdDevReq>
      break;
 80058f4:	e01a      	b.n	800592c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fa66 	bl	8005dd0 <USBD_StdItfReq>
      break;
 8005904:	e012      	b.n	800592c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 faa6 	bl	8005e60 <USBD_StdEPReq>
      break;
 8005914:	e00a      	b.n	800592c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800591c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005920:	b2db      	uxtb	r3, r3
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 fbb4 	bl	8007092 <USBD_LL_StallEP>
      break;
 800592a:	bf00      	nop
  }

  return USBD_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b086      	sub	sp, #24
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	460b      	mov	r3, r1
 8005940:	607a      	str	r2, [r7, #4]
 8005942:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005944:	7afb      	ldrb	r3, [r7, #11]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d14b      	bne.n	80059e2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005950:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005958:	2b03      	cmp	r3, #3
 800595a:	d134      	bne.n	80059c6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	d919      	bls.n	800599c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	1ad2      	subs	r2, r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800597e:	429a      	cmp	r2, r3
 8005980:	d203      	bcs.n	800598a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005986:	b29b      	uxth	r3, r3
 8005988:	e002      	b.n	8005990 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800598e:	b29b      	uxth	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 ff72 	bl	800687e <USBD_CtlContinueRx>
 800599a:	e038      	b.n	8005a0e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d105      	bne.n	80059be <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 ff6f 	bl	80068a2 <USBD_CtlSendStatus>
 80059c4:	e023      	b.n	8005a0e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059cc:	2b05      	cmp	r3, #5
 80059ce:	d11e      	bne.n	8005a0e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80059d8:	2100      	movs	r1, #0
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 fb59 	bl	8007092 <USBD_LL_StallEP>
 80059e0:	e015      	b.n	8005a0e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00d      	beq.n	8005a0a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d108      	bne.n	8005a0a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	7afa      	ldrb	r2, [r7, #11]
 8005a02:	4611      	mov	r1, r2
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	4798      	blx	r3
 8005a08:	e001      	b.n	8005a0e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e000      	b.n	8005a10 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	460b      	mov	r3, r1
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a26:	7afb      	ldrb	r3, [r7, #11]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d17f      	bne.n	8005b2c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d15c      	bne.n	8005af6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d915      	bls.n	8005a74 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	1ad2      	subs	r2, r2, r3
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fefa 	bl	800685a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a66:	2300      	movs	r3, #0
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f001 fbbb 	bl	80071e8 <USBD_LL_PrepareReceive>
 8005a72:	e04e      	b.n	8005b12 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	6912      	ldr	r2, [r2, #16]
 8005a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a80:	fb01 f202 	mul.w	r2, r1, r2
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11c      	bne.n	8005ac4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d316      	bcc.n	8005ac4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d20f      	bcs.n	8005ac4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fed6 	bl	800685a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2100      	movs	r1, #0
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f001 fb93 	bl	80071e8 <USBD_LL_PrepareReceive>
 8005ac2:	e026      	b.n	8005b12 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d105      	bne.n	8005ae6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f001 fad2 	bl	8007092 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 feea 	bl	80068c8 <USBD_CtlReceiveStatus>
 8005af4:	e00d      	b.n	8005b12 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d004      	beq.n	8005b0a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f001 fac0 	bl	8007092 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d11d      	bne.n	8005b58 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff fe81 	bl	8005824 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b2a:	e015      	b.n	8005b58 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00d      	beq.n	8005b54 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d108      	bne.n	8005b54 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	7afa      	ldrb	r2, [r7, #11]
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	4798      	blx	r3
 8005b52:	e001      	b.n	8005b58 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b54:	2302      	movs	r3, #2
 8005b56:	e000      	b.n	8005b5a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b6a:	2340      	movs	r3, #64	; 0x40
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2100      	movs	r1, #0
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 fa2a 	bl	8006fca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2240      	movs	r2, #64	; 0x40
 8005b82:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b86:	2340      	movs	r3, #64	; 0x40
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2180      	movs	r1, #128	; 0x80
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 fa1c 	bl	8006fca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2240      	movs	r2, #64	; 0x40
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6852      	ldr	r2, [r2, #4]
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
  }

  return USBD_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr

08005c02 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2204      	movs	r2, #4
 8005c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d105      	bne.n	8005c48 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d10b      	bne.n	8005c7e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6852      	ldr	r2, [r2, #4]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	4611      	mov	r1, r2
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4798      	blx	r3

  return USBD_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d005      	beq.n	8005d22 <USBD_StdDevReq+0x26>
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d84f      	bhi.n	8005dba <USBD_StdDevReq+0xbe>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <USBD_StdDevReq+0x36>
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d14b      	bne.n	8005dba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
      break;
 8005d30:	e048      	b.n	8005dc4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	d839      	bhi.n	8005dae <USBD_StdDevReq+0xb2>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <USBD_StdDevReq+0x44>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005da5 	.word	0x08005da5
 8005d48:	08005daf 	.word	0x08005daf
 8005d4c:	08005d9b 	.word	0x08005d9b
 8005d50:	08005daf 	.word	0x08005daf
 8005d54:	08005d73 	.word	0x08005d73
 8005d58:	08005d69 	.word	0x08005d69
 8005d5c:	08005daf 	.word	0x08005daf
 8005d60:	08005d87 	.word	0x08005d87
 8005d64:	08005d7d 	.word	0x08005d7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9dc 	bl	8006128 <USBD_GetDescriptor>
          break;
 8005d70:	e022      	b.n	8005db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fb3f 	bl	80063f8 <USBD_SetAddress>
          break;
 8005d7a:	e01d      	b.n	8005db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fb7e 	bl	8006480 <USBD_SetConfig>
          break;
 8005d84:	e018      	b.n	8005db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fc07 	bl	800659c <USBD_GetConfig>
          break;
 8005d8e:	e013      	b.n	8005db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fc37 	bl	8006606 <USBD_GetStatus>
          break;
 8005d98:	e00e      	b.n	8005db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fc65 	bl	800666c <USBD_SetFeature>
          break;
 8005da2:	e009      	b.n	8005db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fc74 	bl	8006694 <USBD_ClrFeature>
          break;
 8005dac:	e004      	b.n	8005db8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fccc 	bl	800674e <USBD_CtlError>
          break;
 8005db6:	bf00      	nop
      }
      break;
 8005db8:	e004      	b.n	8005dc4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fcc6 	bl	800674e <USBD_CtlError>
      break;
 8005dc2:	bf00      	nop
  }

  return ret;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop

08005dd0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d005      	beq.n	8005df6 <USBD_StdItfReq+0x26>
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d82e      	bhi.n	8005e4c <USBD_StdItfReq+0x7c>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <USBD_StdItfReq+0x26>
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d12a      	bne.n	8005e4c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d81d      	bhi.n	8005e3e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	889b      	ldrh	r3, [r3, #4]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d813      	bhi.n	8005e34 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	88db      	ldrh	r3, [r3, #6]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d110      	bne.n	8005e48 <USBD_StdItfReq+0x78>
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10d      	bne.n	8005e48 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fd38 	bl	80068a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e32:	e009      	b.n	8005e48 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fc89 	bl	800674e <USBD_CtlError>
          break;
 8005e3c:	e004      	b.n	8005e48 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fc84 	bl	800674e <USBD_CtlError>
          break;
 8005e46:	e000      	b.n	8005e4a <USBD_StdItfReq+0x7a>
          break;
 8005e48:	bf00      	nop
      }
      break;
 8005e4a:	e004      	b.n	8005e56 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fc7d 	bl	800674e <USBD_CtlError>
      break;
 8005e54:	bf00      	nop
  }

  return USBD_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	889b      	ldrh	r3, [r3, #4]
 8005e72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d007      	beq.n	8005e90 <USBD_StdEPReq+0x30>
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	f200 8146 	bhi.w	8006112 <USBD_StdEPReq+0x2b2>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <USBD_StdEPReq+0x40>
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	f040 8141 	bne.w	8006112 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
      break;
 8005e9e:	e13d      	b.n	800611c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d10a      	bne.n	8005ec2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	e12d      	b.n	800611e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d007      	beq.n	8005eda <USBD_StdEPReq+0x7a>
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	f300 811b 	bgt.w	8006106 <USBD_StdEPReq+0x2a6>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d072      	beq.n	8005fba <USBD_StdEPReq+0x15a>
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d03a      	beq.n	8005f4e <USBD_StdEPReq+0xee>
 8005ed8:	e115      	b.n	8006106 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d002      	beq.n	8005eea <USBD_StdEPReq+0x8a>
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d015      	beq.n	8005f14 <USBD_StdEPReq+0xb4>
 8005ee8:	e02b      	b.n	8005f42 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005eea:	7bbb      	ldrb	r3, [r7, #14]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00c      	beq.n	8005f0a <USBD_StdEPReq+0xaa>
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	2b80      	cmp	r3, #128	; 0x80
 8005ef4:	d009      	beq.n	8005f0a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 f8c9 	bl	8007092 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f00:	2180      	movs	r1, #128	; 0x80
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 f8c5 	bl	8007092 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f08:	e020      	b.n	8005f4c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fc1e 	bl	800674e <USBD_CtlError>
              break;
 8005f12:	e01b      	b.n	8005f4c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	885b      	ldrh	r3, [r3, #2]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10e      	bne.n	8005f3a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <USBD_StdEPReq+0xda>
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	2b80      	cmp	r3, #128	; 0x80
 8005f26:	d008      	beq.n	8005f3a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	88db      	ldrh	r3, [r3, #6]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 f8ac 	bl	8007092 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fcb1 	bl	80068a2 <USBD_CtlSendStatus>

              break;
 8005f40:	e004      	b.n	8005f4c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fc02 	bl	800674e <USBD_CtlError>
              break;
 8005f4a:	bf00      	nop
          }
          break;
 8005f4c:	e0e0      	b.n	8006110 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d002      	beq.n	8005f5e <USBD_StdEPReq+0xfe>
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d015      	beq.n	8005f88 <USBD_StdEPReq+0x128>
 8005f5c:	e026      	b.n	8005fac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f5e:	7bbb      	ldrb	r3, [r7, #14]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00c      	beq.n	8005f7e <USBD_StdEPReq+0x11e>
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	2b80      	cmp	r3, #128	; 0x80
 8005f68:	d009      	beq.n	8005f7e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 f88f 	bl	8007092 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f74:	2180      	movs	r1, #128	; 0x80
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 f88b 	bl	8007092 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f7c:	e01c      	b.n	8005fb8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fbe4 	bl	800674e <USBD_CtlError>
              break;
 8005f86:	e017      	b.n	8005fb8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	885b      	ldrh	r3, [r3, #2]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d112      	bne.n	8005fb6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d004      	beq.n	8005fa4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 f896 	bl	80070d0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fc7c 	bl	80068a2 <USBD_CtlSendStatus>
              }
              break;
 8005faa:	e004      	b.n	8005fb6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fbcd 	bl	800674e <USBD_CtlError>
              break;
 8005fb4:	e000      	b.n	8005fb8 <USBD_StdEPReq+0x158>
              break;
 8005fb6:	bf00      	nop
          }
          break;
 8005fb8:	e0aa      	b.n	8006110 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d002      	beq.n	8005fca <USBD_StdEPReq+0x16a>
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d032      	beq.n	800602e <USBD_StdEPReq+0x1ce>
 8005fc8:	e097      	b.n	80060fa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <USBD_StdEPReq+0x180>
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	2b80      	cmp	r3, #128	; 0x80
 8005fd4:	d004      	beq.n	8005fe0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fbb8 	bl	800674e <USBD_CtlError>
                break;
 8005fde:	e091      	b.n	8006104 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da0b      	bge.n	8006000 <USBD_StdEPReq+0x1a0>
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fee:	4613      	mov	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	3310      	adds	r3, #16
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	e00b      	b.n	8006018 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	3304      	adds	r3, #4
 8006018:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2202      	movs	r2, #2
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fbfb 	bl	8006822 <USBD_CtlSendData>
              break;
 800602c:	e06a      	b.n	8006104 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800602e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006032:	2b00      	cmp	r3, #0
 8006034:	da11      	bge.n	800605a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	f003 020f 	and.w	r2, r3, #15
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	3318      	adds	r3, #24
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d117      	bne.n	8006080 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fb7b 	bl	800674e <USBD_CtlError>
                  break;
 8006058:	e054      	b.n	8006104 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	f003 020f 	and.w	r2, r3, #15
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fb68 	bl	800674e <USBD_CtlError>
                  break;
 800607e:	e041      	b.n	8006104 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006084:	2b00      	cmp	r3, #0
 8006086:	da0b      	bge.n	80060a0 <USBD_StdEPReq+0x240>
 8006088:	7bbb      	ldrb	r3, [r7, #14]
 800608a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	3310      	adds	r3, #16
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	4413      	add	r3, r2
 800609c:	3304      	adds	r3, #4
 800609e:	e00b      	b.n	80060b8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4413      	add	r3, r2
 80060b6:	3304      	adds	r3, #4
 80060b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <USBD_StdEPReq+0x266>
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d103      	bne.n	80060ce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e00e      	b.n	80060ec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 f81b 	bl	800710e <USBD_LL_IsStallEP>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e002      	b.n	80060ec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2202      	movs	r2, #2
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fb95 	bl	8006822 <USBD_CtlSendData>
              break;
 80060f8:	e004      	b.n	8006104 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fb26 	bl	800674e <USBD_CtlError>
              break;
 8006102:	bf00      	nop
          }
          break;
 8006104:	e004      	b.n	8006110 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fb20 	bl	800674e <USBD_CtlError>
          break;
 800610e:	bf00      	nop
      }
      break;
 8006110:	e004      	b.n	800611c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fb1a 	bl	800674e <USBD_CtlError>
      break;
 800611a:	bf00      	nop
  }

  return ret;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	885b      	ldrh	r3, [r3, #2]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	2b06      	cmp	r3, #6
 800614a:	f200 8128 	bhi.w	800639e <USBD_GetDescriptor+0x276>
 800614e:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <USBD_GetDescriptor+0x2c>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	08006171 	.word	0x08006171
 8006158:	08006189 	.word	0x08006189
 800615c:	080061c9 	.word	0x080061c9
 8006160:	0800639f 	.word	0x0800639f
 8006164:	0800639f 	.word	0x0800639f
 8006168:	0800633f 	.word	0x0800633f
 800616c:	0800636b 	.word	0x0800636b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	7c12      	ldrb	r2, [r2, #16]
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	60f8      	str	r0, [r7, #12]
      break;
 8006186:	e112      	b.n	80063ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7c1b      	ldrb	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10d      	bne.n	80061ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006198:	f107 0208 	add.w	r2, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3301      	adds	r3, #1
 80061a6:	2202      	movs	r2, #2
 80061a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061aa:	e100      	b.n	80063ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	f107 0208 	add.w	r2, r7, #8
 80061b8:	4610      	mov	r0, r2
 80061ba:	4798      	blx	r3
 80061bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3301      	adds	r3, #1
 80061c2:	2202      	movs	r2, #2
 80061c4:	701a      	strb	r2, [r3, #0]
      break;
 80061c6:	e0f2      	b.n	80063ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	885b      	ldrh	r3, [r3, #2]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	f200 80ac 	bhi.w	800632c <USBD_GetDescriptor+0x204>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <USBD_GetDescriptor+0xb4>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	080061f5 	.word	0x080061f5
 80061e0:	08006229 	.word	0x08006229
 80061e4:	0800625d 	.word	0x0800625d
 80061e8:	08006291 	.word	0x08006291
 80061ec:	080062c5 	.word	0x080062c5
 80061f0:	080062f9 	.word	0x080062f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	7c12      	ldrb	r2, [r2, #16]
 800620c:	f107 0108 	add.w	r1, r7, #8
 8006210:	4610      	mov	r0, r2
 8006212:	4798      	blx	r3
 8006214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006216:	e091      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa97 	bl	800674e <USBD_CtlError>
            err++;
 8006220:	7afb      	ldrb	r3, [r7, #11]
 8006222:	3301      	adds	r3, #1
 8006224:	72fb      	strb	r3, [r7, #11]
          break;
 8006226:	e089      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7c12      	ldrb	r2, [r2, #16]
 8006240:	f107 0108 	add.w	r1, r7, #8
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
 8006248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624a:	e077      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa7d 	bl	800674e <USBD_CtlError>
            err++;
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	3301      	adds	r3, #1
 8006258:	72fb      	strb	r3, [r7, #11]
          break;
 800625a:	e06f      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	7c12      	ldrb	r2, [r2, #16]
 8006274:	f107 0108 	add.w	r1, r7, #8
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
 800627c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800627e:	e05d      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa63 	bl	800674e <USBD_CtlError>
            err++;
 8006288:	7afb      	ldrb	r3, [r7, #11]
 800628a:	3301      	adds	r3, #1
 800628c:	72fb      	strb	r3, [r7, #11]
          break;
 800628e:	e055      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	7c12      	ldrb	r2, [r2, #16]
 80062a8:	f107 0108 	add.w	r1, r7, #8
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062b2:	e043      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa49 	bl	800674e <USBD_CtlError>
            err++;
 80062bc:	7afb      	ldrb	r3, [r7, #11]
 80062be:	3301      	adds	r3, #1
 80062c0:	72fb      	strb	r3, [r7, #11]
          break;
 80062c2:	e03b      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	7c12      	ldrb	r2, [r2, #16]
 80062dc:	f107 0108 	add.w	r1, r7, #8
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062e6:	e029      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa2f 	bl	800674e <USBD_CtlError>
            err++;
 80062f0:	7afb      	ldrb	r3, [r7, #11]
 80062f2:	3301      	adds	r3, #1
 80062f4:	72fb      	strb	r3, [r7, #11]
          break;
 80062f6:	e021      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	7c12      	ldrb	r2, [r2, #16]
 8006310:	f107 0108 	add.w	r1, r7, #8
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
 8006318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631a:	e00f      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa15 	bl	800674e <USBD_CtlError>
            err++;
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	3301      	adds	r3, #1
 8006328:	72fb      	strb	r3, [r7, #11]
          break;
 800632a:	e007      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa0d 	bl	800674e <USBD_CtlError>
          err++;
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	3301      	adds	r3, #1
 8006338:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800633a:	e038      	b.n	80063ae <USBD_GetDescriptor+0x286>
 800633c:	e037      	b.n	80063ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	7c1b      	ldrb	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	f107 0208 	add.w	r2, r7, #8
 8006352:	4610      	mov	r0, r2
 8006354:	4798      	blx	r3
 8006356:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006358:	e029      	b.n	80063ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f9f6 	bl	800674e <USBD_CtlError>
        err++;
 8006362:	7afb      	ldrb	r3, [r7, #11]
 8006364:	3301      	adds	r3, #1
 8006366:	72fb      	strb	r3, [r7, #11]
      break;
 8006368:	e021      	b.n	80063ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	7c1b      	ldrb	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10d      	bne.n	800638e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	f107 0208 	add.w	r2, r7, #8
 800637e:	4610      	mov	r0, r2
 8006380:	4798      	blx	r3
 8006382:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	2207      	movs	r2, #7
 800638a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800638c:	e00f      	b.n	80063ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f9dc 	bl	800674e <USBD_CtlError>
        err++;
 8006396:	7afb      	ldrb	r3, [r7, #11]
 8006398:	3301      	adds	r3, #1
 800639a:	72fb      	strb	r3, [r7, #11]
      break;
 800639c:	e007      	b.n	80063ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f9d4 	bl	800674e <USBD_CtlError>
      err++;
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	3301      	adds	r3, #1
 80063aa:	72fb      	strb	r3, [r7, #11]
      break;
 80063ac:	bf00      	nop
  }

  if (err != 0U)
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11c      	bne.n	80063ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80063b4:	893b      	ldrh	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d011      	beq.n	80063de <USBD_GetDescriptor+0x2b6>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	88db      	ldrh	r3, [r3, #6]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00d      	beq.n	80063de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	88da      	ldrh	r2, [r3, #6]
 80063c6:	893b      	ldrh	r3, [r7, #8]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bf28      	it	cs
 80063cc:	4613      	movcs	r3, r2
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063d2:	893b      	ldrh	r3, [r7, #8]
 80063d4:	461a      	mov	r2, r3
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa22 	bl	8006822 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	88db      	ldrh	r3, [r3, #6]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa5b 	bl	80068a2 <USBD_CtlSendStatus>
 80063ec:	e000      	b.n	80063f0 <USBD_GetDescriptor+0x2c8>
    return;
 80063ee:	bf00      	nop
    }
  }
}
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop

080063f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	889b      	ldrh	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d130      	bne.n	800646c <USBD_SetAddress+0x74>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	88db      	ldrh	r3, [r3, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d12c      	bne.n	800646c <USBD_SetAddress+0x74>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	885b      	ldrh	r3, [r3, #2]
 8006416:	2b7f      	cmp	r3, #127	; 0x7f
 8006418:	d828      	bhi.n	800646c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	885b      	ldrh	r3, [r3, #2]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642c:	2b03      	cmp	r3, #3
 800642e:	d104      	bne.n	800643a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f98b 	bl	800674e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006438:	e01d      	b.n	8006476 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	7bfa      	ldrb	r2, [r7, #15]
 800643e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fe8c 	bl	8007164 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa28 	bl	80068a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006460:	e009      	b.n	8006476 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800646a:	e004      	b.n	8006476 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f96d 	bl	800674e <USBD_CtlError>
  }
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	885b      	ldrh	r3, [r3, #2]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	4b41      	ldr	r3, [pc, #260]	; (8006598 <USBD_SetConfig+0x118>)
 8006492:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006494:	4b40      	ldr	r3, [pc, #256]	; (8006598 <USBD_SetConfig+0x118>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d904      	bls.n	80064a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f955 	bl	800674e <USBD_CtlError>
 80064a4:	e075      	b.n	8006592 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d002      	beq.n	80064b6 <USBD_SetConfig+0x36>
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d023      	beq.n	80064fc <USBD_SetConfig+0x7c>
 80064b4:	e062      	b.n	800657c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80064b6:	4b38      	ldr	r3, [pc, #224]	; (8006598 <USBD_SetConfig+0x118>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d01a      	beq.n	80064f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80064be:	4b36      	ldr	r3, [pc, #216]	; (8006598 <USBD_SetConfig+0x118>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2203      	movs	r2, #3
 80064cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064d0:	4b31      	ldr	r3, [pc, #196]	; (8006598 <USBD_SetConfig+0x118>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff f9ae 	bl	8005838 <USBD_SetClassConfig>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d104      	bne.n	80064ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f932 	bl	800674e <USBD_CtlError>
            return;
 80064ea:	e052      	b.n	8006592 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9d8 	bl	80068a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80064f2:	e04e      	b.n	8006592 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f9d4 	bl	80068a2 <USBD_CtlSendStatus>
        break;
 80064fa:	e04a      	b.n	8006592 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80064fc:	4b26      	ldr	r3, [pc, #152]	; (8006598 <USBD_SetConfig+0x118>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d112      	bne.n	800652a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800650c:	4b22      	ldr	r3, [pc, #136]	; (8006598 <USBD_SetConfig+0x118>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <USBD_SetConfig+0x118>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff f9aa 	bl	8005876 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9bd 	bl	80068a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006528:	e033      	b.n	8006592 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <USBD_SetConfig+0x118>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d01d      	beq.n	8006574 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff f998 	bl	8005876 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <USBD_SetConfig+0x118>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <USBD_SetConfig+0x118>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff f96e 	bl	8005838 <USBD_SetClassConfig>
 800655c:	4603      	mov	r3, r0
 800655e:	2b02      	cmp	r3, #2
 8006560:	d104      	bne.n	800656c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8f2 	bl	800674e <USBD_CtlError>
            return;
 800656a:	e012      	b.n	8006592 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f998 	bl	80068a2 <USBD_CtlSendStatus>
        break;
 8006572:	e00e      	b.n	8006592 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f994 	bl	80068a2 <USBD_CtlSendStatus>
        break;
 800657a:	e00a      	b.n	8006592 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f8e5 	bl	800674e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <USBD_SetConfig+0x118>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff f973 	bl	8005876 <USBD_ClrClassConfig>
        break;
 8006590:	bf00      	nop
    }
  }
}
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000194 	.word	0x20000194

0800659c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	88db      	ldrh	r3, [r3, #6]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d004      	beq.n	80065b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f8cc 	bl	800674e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065b6:	e022      	b.n	80065fe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065be:	2b02      	cmp	r3, #2
 80065c0:	dc02      	bgt.n	80065c8 <USBD_GetConfig+0x2c>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dc03      	bgt.n	80065ce <USBD_GetConfig+0x32>
 80065c6:	e015      	b.n	80065f4 <USBD_GetConfig+0x58>
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d00b      	beq.n	80065e4 <USBD_GetConfig+0x48>
 80065cc:	e012      	b.n	80065f4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3308      	adds	r3, #8
 80065d8:	2201      	movs	r2, #1
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f920 	bl	8006822 <USBD_CtlSendData>
        break;
 80065e2:	e00c      	b.n	80065fe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	2201      	movs	r2, #1
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f918 	bl	8006822 <USBD_CtlSendData>
        break;
 80065f2:	e004      	b.n	80065fe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f8a9 	bl	800674e <USBD_CtlError>
        break;
 80065fc:	bf00      	nop
}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006616:	3b01      	subs	r3, #1
 8006618:	2b02      	cmp	r3, #2
 800661a:	d81e      	bhi.n	800665a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	88db      	ldrh	r3, [r3, #6]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d004      	beq.n	800662e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f891 	bl	800674e <USBD_CtlError>
        break;
 800662c:	e01a      	b.n	8006664 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f043 0202 	orr.w	r2, r3, #2
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	330c      	adds	r3, #12
 800664e:	2202      	movs	r2, #2
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8e5 	bl	8006822 <USBD_CtlSendData>
      break;
 8006658:	e004      	b.n	8006664 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f876 	bl	800674e <USBD_CtlError>
      break;
 8006662:	bf00      	nop
  }
}
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	885b      	ldrh	r3, [r3, #2]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d106      	bne.n	800668c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f90b 	bl	80068a2 <USBD_CtlSendStatus>
  }
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a4:	3b01      	subs	r3, #1
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d80b      	bhi.n	80066c2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	885b      	ldrh	r3, [r3, #2]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d10c      	bne.n	80066cc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f8f1 	bl	80068a2 <USBD_CtlSendStatus>
      }
      break;
 80066c0:	e004      	b.n	80066cc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f842 	bl	800674e <USBD_CtlError>
      break;
 80066ca:	e000      	b.n	80066ce <USBD_ClrFeature+0x3a>
      break;
 80066cc:	bf00      	nop
  }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781a      	ldrb	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	785a      	ldrb	r2, [r3, #1]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	3302      	adds	r3, #2
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	3303      	adds	r3, #3
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	b29b      	uxth	r3, r3
 8006704:	4413      	add	r3, r2
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	3304      	adds	r3, #4
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	b29a      	uxth	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	3305      	adds	r3, #5
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	b29b      	uxth	r3, r3
 8006720:	4413      	add	r3, r2
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	3306      	adds	r3, #6
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b29a      	uxth	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	3307      	adds	r3, #7
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	b29b      	uxth	r3, r3
 800673c:	4413      	add	r3, r2
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	80da      	strh	r2, [r3, #6]

}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006758:	2180      	movs	r1, #128	; 0x80
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fc99 	bl	8007092 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006760:	2100      	movs	r1, #0
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fc95 	bl	8007092 <USBD_LL_StallEP>
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d032      	beq.n	80067ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f834 	bl	80067f4 <USBD_GetLen>
 800678c:	4603      	mov	r3, r0
 800678e:	3301      	adds	r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	75fa      	strb	r2, [r7, #23]
 80067a0:	461a      	mov	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4413      	add	r3, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	7812      	ldrb	r2, [r2, #0]
 80067aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	75fa      	strb	r2, [r7, #23]
 80067b2:	461a      	mov	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4413      	add	r3, r2
 80067b8:	2203      	movs	r2, #3
 80067ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80067bc:	e012      	b.n	80067e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	60fa      	str	r2, [r7, #12]
 80067c4:	7dfa      	ldrb	r2, [r7, #23]
 80067c6:	1c51      	adds	r1, r2, #1
 80067c8:	75f9      	strb	r1, [r7, #23]
 80067ca:	4611      	mov	r1, r2
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	440a      	add	r2, r1
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	75fa      	strb	r2, [r7, #23]
 80067da:	461a      	mov	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4413      	add	r3, r2
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e8      	bne.n	80067be <USBD_GetString+0x4e>
    }
  }
}
 80067ec:	bf00      	nop
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006800:	e005      	b.n	800680e <USBD_GetLen+0x1a>
  {
    len++;
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	3301      	adds	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3301      	adds	r3, #1
 800680c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f5      	bne.n	8006802 <USBD_GetLen+0xe>
  }

  return len;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr

08006822 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	4613      	mov	r3, r2
 800682e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2202      	movs	r2, #2
 8006834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006838:	88fa      	ldrh	r2, [r7, #6]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800683e:	88fa      	ldrh	r2, [r7, #6]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	2100      	movs	r1, #0
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 fca9 	bl	80071a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	4613      	mov	r3, r2
 8006866:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	2100      	movs	r1, #0
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fc97 	bl	80071a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	4613      	mov	r3, r2
 800688a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	2100      	movs	r1, #0
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fca8 	bl	80071e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2204      	movs	r2, #4
 80068ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068b2:	2300      	movs	r3, #0
 80068b4:	2200      	movs	r2, #0
 80068b6:	2100      	movs	r1, #0
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fc72 	bl	80071a2 <USBD_LL_Transmit>

  return USBD_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2205      	movs	r2, #5
 80068d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068d8:	2300      	movs	r3, #0
 80068da:	2200      	movs	r2, #0
 80068dc:	2100      	movs	r1, #0
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fc82 	bl	80071e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80068f4:	2200      	movs	r2, #0
 80068f6:	4912      	ldr	r1, [pc, #72]	; (8006940 <MX_USB_DEVICE_Init+0x50>)
 80068f8:	4812      	ldr	r0, [pc, #72]	; (8006944 <MX_USB_DEVICE_Init+0x54>)
 80068fa:	f7fe ff43 	bl	8005784 <USBD_Init>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006904:	f7f9 ff34 	bl	8000770 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8006908:	490f      	ldr	r1, [pc, #60]	; (8006948 <MX_USB_DEVICE_Init+0x58>)
 800690a:	480e      	ldr	r0, [pc, #56]	; (8006944 <MX_USB_DEVICE_Init+0x54>)
 800690c:	f7fe ff65 	bl	80057da <USBD_RegisterClass>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006916:	f7f9 ff2b 	bl	8000770 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800691a:	490c      	ldr	r1, [pc, #48]	; (800694c <MX_USB_DEVICE_Init+0x5c>)
 800691c:	4809      	ldr	r0, [pc, #36]	; (8006944 <MX_USB_DEVICE_Init+0x54>)
 800691e:	f7fd ff11 	bl	8004744 <USBD_MSC_RegisterStorage>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006928:	f7f9 ff22 	bl	8000770 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800692c:	4805      	ldr	r0, [pc, #20]	; (8006944 <MX_USB_DEVICE_Init+0x54>)
 800692e:	f7fe ff6d 	bl	800580c <USBD_Start>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006938:	f7f9 ff1a 	bl	8000770 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800693c:	bf00      	nop
 800693e:	bd80      	pop	{r7, pc}
 8006940:	200000b0 	.word	0x200000b0
 8006944:	20000198 	.word	0x20000198
 8006948:	2000000c 	.word	0x2000000c
 800694c:	20000100 	.word	0x20000100

08006950 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	6039      	str	r1, [r7, #0]
 800695a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2212      	movs	r2, #18
 8006960:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006962:	4b03      	ldr	r3, [pc, #12]	; (8006970 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	200000cc 	.word	0x200000cc

08006974 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	6039      	str	r1, [r7, #0]
 800697e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2204      	movs	r2, #4
 8006984:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006986:	4b03      	ldr	r3, [pc, #12]	; (8006994 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	200000e0 	.word	0x200000e0

08006998 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	6039      	str	r1, [r7, #0]
 80069a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d105      	bne.n	80069b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	4907      	ldr	r1, [pc, #28]	; (80069cc <USBD_FS_ProductStrDescriptor+0x34>)
 80069ae:	4808      	ldr	r0, [pc, #32]	; (80069d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80069b0:	f7ff fede 	bl	8006770 <USBD_GetString>
 80069b4:	e004      	b.n	80069c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	4904      	ldr	r1, [pc, #16]	; (80069cc <USBD_FS_ProductStrDescriptor+0x34>)
 80069ba:	4805      	ldr	r0, [pc, #20]	; (80069d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80069bc:	f7ff fed8 	bl	8006770 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069c0:	4b02      	ldr	r3, [pc, #8]	; (80069cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	2000045c 	.word	0x2000045c
 80069d0:	08007570 	.word	0x08007570

080069d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	6039      	str	r1, [r7, #0]
 80069de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	4904      	ldr	r1, [pc, #16]	; (80069f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80069e4:	4804      	ldr	r0, [pc, #16]	; (80069f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80069e6:	f7ff fec3 	bl	8006770 <USBD_GetString>
  return USBD_StrDesc;
 80069ea:	4b02      	ldr	r3, [pc, #8]	; (80069f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	2000045c 	.word	0x2000045c
 80069f8:	08007584 	.word	0x08007584

080069fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	6039      	str	r1, [r7, #0]
 8006a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	221a      	movs	r2, #26
 8006a0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a0e:	f000 f843 	bl	8006a98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a12:	4b02      	ldr	r3, [pc, #8]	; (8006a1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200000e4 	.word	0x200000e4

08006a20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	6039      	str	r1, [r7, #0]
 8006a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	4907      	ldr	r1, [pc, #28]	; (8006a54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a36:	4808      	ldr	r0, [pc, #32]	; (8006a58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a38:	f7ff fe9a 	bl	8006770 <USBD_GetString>
 8006a3c:	e004      	b.n	8006a48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	4904      	ldr	r1, [pc, #16]	; (8006a54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a42:	4805      	ldr	r0, [pc, #20]	; (8006a58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a44:	f7ff fe94 	bl	8006770 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a48:	4b02      	ldr	r3, [pc, #8]	; (8006a54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	2000045c 	.word	0x2000045c
 8006a58:	08007598 	.word	0x08007598

08006a5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	4907      	ldr	r1, [pc, #28]	; (8006a90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a72:	4808      	ldr	r0, [pc, #32]	; (8006a94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a74:	f7ff fe7c 	bl	8006770 <USBD_GetString>
 8006a78:	e004      	b.n	8006a84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	4904      	ldr	r1, [pc, #16]	; (8006a90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a7e:	4805      	ldr	r0, [pc, #20]	; (8006a94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a80:	f7ff fe76 	bl	8006770 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a84:	4b02      	ldr	r3, [pc, #8]	; (8006a90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	2000045c 	.word	0x2000045c
 8006a94:	080075a4 	.word	0x080075a4

08006a98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <Get_SerialNum+0x44>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <Get_SerialNum+0x48>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006aaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <Get_SerialNum+0x4c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006abe:	2208      	movs	r2, #8
 8006ac0:	4909      	ldr	r1, [pc, #36]	; (8006ae8 <Get_SerialNum+0x50>)
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f814 	bl	8006af0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ac8:	2204      	movs	r2, #4
 8006aca:	4908      	ldr	r1, [pc, #32]	; (8006aec <Get_SerialNum+0x54>)
 8006acc:	68b8      	ldr	r0, [r7, #8]
 8006ace:	f000 f80f 	bl	8006af0 <IntToUnicode>
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	1fff7a10 	.word	0x1fff7a10
 8006ae0:	1fff7a14 	.word	0x1fff7a14
 8006ae4:	1fff7a18 	.word	0x1fff7a18
 8006ae8:	200000e6 	.word	0x200000e6
 8006aec:	200000f6 	.word	0x200000f6

08006af0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006b02:	2300      	movs	r3, #0
 8006b04:	75fb      	strb	r3, [r7, #23]
 8006b06:	e027      	b.n	8006b58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	0f1b      	lsrs	r3, r3, #28
 8006b0c:	2b09      	cmp	r3, #9
 8006b0e:	d80b      	bhi.n	8006b28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	0f1b      	lsrs	r3, r3, #28
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	440b      	add	r3, r1
 8006b20:	3230      	adds	r2, #48	; 0x30
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	e00a      	b.n	8006b3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	0f1b      	lsrs	r3, r3, #28
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	4619      	mov	r1, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	440b      	add	r3, r1
 8006b38:	3237      	adds	r2, #55	; 0x37
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	3301      	adds	r3, #1
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	3301      	adds	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]
 8006b58:	7dfa      	ldrb	r2, [r7, #23]
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d3d3      	bcc.n	8006b08 <IntToUnicode+0x18>
  }
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8006b76:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	4603      	mov	r3, r0
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	22c8      	movs	r2, #200	; 0xc8
 8006b94:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b9c:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8006b9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006bca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr
	...

08006bd8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	461a      	mov	r2, r3
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
 8006be8:	4613      	mov	r3, r2
 8006bea:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	025b      	lsls	r3, r3, #9
 8006bf0:	4a06      	ldr	r2, [pc, #24]	; (8006c0c <STORAGE_Read_FS+0x34>)
 8006bf2:	1899      	adds	r1, r3, r2
 8006bf4:	89bb      	ldrh	r3, [r7, #12]
 8006bf6:	025b      	lsls	r3, r3, #9
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	68b8      	ldr	r0, [r7, #8]
 8006bfc:	f000 fc56 	bl	80074ac <memcpy>
  return (USBD_OK);
 8006c00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	2000065c 	.word	0x2000065c

08006c10 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
 8006c20:	4613      	mov	r3, r2
 8006c22:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	025b      	lsls	r3, r3, #9
 8006c28:	4a06      	ldr	r2, [pc, #24]	; (8006c44 <STORAGE_Write_FS+0x34>)
 8006c2a:	1898      	adds	r0, r3, r2
 8006c2c:	89bb      	ldrh	r3, [r7, #12]
 8006c2e:	025b      	lsls	r3, r3, #9
 8006c30:	461a      	mov	r2, r3
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	f000 fc3a 	bl	80074ac <memcpy>
  return (USBD_OK);
 8006c38:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	2000065c 	.word	0x2000065c

08006c48 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8006c4c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr
	...

08006c58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08a      	sub	sp, #40	; 0x28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c60:	f107 0314 	add.w	r3, r7, #20
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	605a      	str	r2, [r3, #4]
 8006c6a:	609a      	str	r2, [r3, #8]
 8006c6c:	60da      	str	r2, [r3, #12]
 8006c6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c78:	d147      	bne.n	8006d0a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	4b25      	ldr	r3, [pc, #148]	; (8006d14 <HAL_PCD_MspInit+0xbc>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	4a24      	ldr	r2, [pc, #144]	; (8006d14 <HAL_PCD_MspInit+0xbc>)
 8006c84:	f043 0301 	orr.w	r3, r3, #1
 8006c88:	6313      	str	r3, [r2, #48]	; 0x30
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <HAL_PCD_MspInit+0xbc>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006c96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ca8:	230a      	movs	r3, #10
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cac:	f107 0314 	add.w	r3, r7, #20
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4819      	ldr	r0, [pc, #100]	; (8006d18 <HAL_PCD_MspInit+0xc0>)
 8006cb4:	f7f9 ffc0 	bl	8000c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006cc6:	f107 0314 	add.w	r3, r7, #20
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4812      	ldr	r0, [pc, #72]	; (8006d18 <HAL_PCD_MspInit+0xc0>)
 8006cce:	f7f9 ffb3 	bl	8000c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006cd2:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <HAL_PCD_MspInit+0xbc>)
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd6:	4a0f      	ldr	r2, [pc, #60]	; (8006d14 <HAL_PCD_MspInit+0xbc>)
 8006cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cdc:	6353      	str	r3, [r2, #52]	; 0x34
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <HAL_PCD_MspInit+0xbc>)
 8006ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce6:	4a0b      	ldr	r2, [pc, #44]	; (8006d14 <HAL_PCD_MspInit+0xbc>)
 8006ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cec:	6453      	str	r3, [r2, #68]	; 0x44
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <HAL_PCD_MspInit+0xbc>)
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	2043      	movs	r0, #67	; 0x43
 8006d00:	f7f9 ff63 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d04:	2043      	movs	r0, #67	; 0x43
 8006d06:	f7f9 ff7c 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d0a:	bf00      	nop
 8006d0c:	3728      	adds	r7, #40	; 0x28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40023800 	.word	0x40023800
 8006d18:	40020000 	.word	0x40020000

08006d1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f7fe fdb2 	bl	800589c <USBD_LL_SetupStage>
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8006d52:	78fa      	ldrb	r2, [r7, #3]
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	4613      	mov	r3, r2
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	78fb      	ldrb	r3, [r7, #3]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7fe fde4 	bl	8005936 <USBD_LL_DataOutStage>
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8006d88:	78fa      	ldrb	r2, [r7, #3]
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	3320      	adds	r3, #32
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	f7fe fe3b 	bl	8005a18 <USBD_LL_DataInStage>
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe ff4b 	bl	8005c54 <USBD_LL_SOF>
}
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	79db      	ldrb	r3, [r3, #7]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	e008      	b.n	8006df2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	79db      	ldrb	r3, [r3, #7]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d102      	bne.n	8006dee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006de8:	2301      	movs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
 8006dec:	e001      	b.n	8006df2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006dee:	f7f9 fcbf 	bl	8000770 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006df8:	7bfa      	ldrb	r2, [r7, #15]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe fef1 	bl	8005be4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fe feaa 	bl	8005b62 <USBD_LL_Reset>
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe feeb 	bl	8005c02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e3e:	f043 0301 	orr.w	r3, r3, #1
 8006e42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	7adb      	ldrb	r3, [r3, #11]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <HAL_PCD_SuspendCallback+0x48>)
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	4a03      	ldr	r2, [pc, #12]	; (8006e60 <HAL_PCD_SuspendCallback+0x48>)
 8006e52:	f043 0306 	orr.w	r3, r3, #6
 8006e56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fed9 	bl	8005c2a <USBD_LL_Resume>
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe ff02 	bl	8005ca0 <USBD_LL_IsoOUTIncomplete>
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fee4 	bl	8005c88 <USBD_LL_IsoINIncomplete>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe feee 	bl	8005cb8 <USBD_LL_DevConnected>
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe feea 	bl	8005ccc <USBD_LL_DevDisconnected>
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d139      	bne.n	8006f84 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006f10:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8c2 34d8 	str.w	r3, [r2, #1240]	; 0x4d8
  pdev->pData = &hpcd_USB_OTG_FS;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a1d      	ldr	r2, [pc, #116]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f20:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f28:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f2e:	4b18      	ldr	r3, [pc, #96]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f30:	2202      	movs	r2, #2
 8006f32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f3a:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006f4c:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006f52:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006f58:	480d      	ldr	r0, [pc, #52]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f5a:	f7fa f823 	bl	8000fa4 <HAL_PCD_Init>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006f64:	f7f9 fc04 	bl	8000770 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006f68:	2180      	movs	r1, #128	; 0x80
 8006f6a:	4809      	ldr	r0, [pc, #36]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f6c:	f7fb fa58 	bl	8002420 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006f70:	2240      	movs	r2, #64	; 0x40
 8006f72:	2100      	movs	r1, #0
 8006f74:	4806      	ldr	r0, [pc, #24]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f76:	f7fb fa0d 	bl	8002394 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006f7a:	2280      	movs	r2, #128	; 0x80
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	4804      	ldr	r0, [pc, #16]	; (8006f90 <USBD_LL_Init+0x90>)
 8006f80:	f7fb fa08 	bl	8002394 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	2001965c 	.word	0x2001965c

08006f94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fa f909 	bl	80011c2 <HAL_PCD_Start>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f94c 	bl	8007254 <USBD_Get_USB_Status>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	4603      	mov	r3, r0
 8006fda:	70fb      	strb	r3, [r7, #3]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70bb      	strb	r3, [r7, #2]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ff2:	78bb      	ldrb	r3, [r7, #2]
 8006ff4:	883a      	ldrh	r2, [r7, #0]
 8006ff6:	78f9      	ldrb	r1, [r7, #3]
 8006ff8:	f7fa fdbc 	bl	8001b74 <HAL_PCD_EP_Open>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f926 	bl	8007254 <USBD_Get_USB_Status>
 8007008:	4603      	mov	r3, r0
 800700a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800700c:	7bbb      	ldrb	r3, [r7, #14]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007030:	78fa      	ldrb	r2, [r7, #3]
 8007032:	4611      	mov	r1, r2
 8007034:	4618      	mov	r0, r3
 8007036:	f7fa fe05 	bl	8001c44 <HAL_PCD_EP_Close>
 800703a:	4603      	mov	r3, r0
 800703c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	4618      	mov	r0, r3
 8007042:	f000 f907 	bl	8007254 <USBD_Get_USB_Status>
 8007046:	4603      	mov	r3, r0
 8007048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800704a:	7bbb      	ldrb	r3, [r7, #14]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800706e:	78fa      	ldrb	r2, [r7, #3]
 8007070:	4611      	mov	r1, r2
 8007072:	4618      	mov	r0, r3
 8007074:	f7fa ffa6 	bl	8001fc4 <HAL_PCD_EP_Flush>
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f8e8 	bl	8007254 <USBD_Get_USB_Status>
 8007084:	4603      	mov	r3, r0
 8007086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007088:	7bbb      	ldrb	r3, [r7, #14]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	4611      	mov	r1, r2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fa fe9d 	bl	8001df0 <HAL_PCD_EP_SetStall>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 f8c9 	bl	8007254 <USBD_Get_USB_Status>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	4611      	mov	r1, r2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fa fee1 	bl	8001eb6 <HAL_PCD_EP_ClrStall>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 f8aa 	bl	8007254 <USBD_Get_USB_Status>
 8007100:	4603      	mov	r3, r0
 8007102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007104:	7bbb      	ldrb	r3, [r7, #14]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007120:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007126:	2b00      	cmp	r3, #0
 8007128:	da0b      	bge.n	8007142 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007130:	68f9      	ldr	r1, [r7, #12]
 8007132:	4613      	mov	r3, r2
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	3316      	adds	r3, #22
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	e00b      	b.n	800715a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007148:	68f9      	ldr	r1, [r7, #12]
 800714a:	4613      	mov	r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	440b      	add	r3, r1
 8007154:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007158:	781b      	ldrb	r3, [r3, #0]
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800717e:	78fa      	ldrb	r2, [r7, #3]
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7fa fcd2 	bl	8001b2c <HAL_PCD_SetAddress>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 f860 	bl	8007254 <USBD_Get_USB_Status>
 8007194:	4603      	mov	r3, r0
 8007196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007198:	7bbb      	ldrb	r3, [r7, #14]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b086      	sub	sp, #24
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	461a      	mov	r2, r3
 80071ae:	460b      	mov	r3, r1
 80071b0:	72fb      	strb	r3, [r7, #11]
 80071b2:	4613      	mov	r3, r2
 80071b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071c4:	893b      	ldrh	r3, [r7, #8]
 80071c6:	7af9      	ldrb	r1, [r7, #11]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	f7fa fdd7 	bl	8001d7c <HAL_PCD_EP_Transmit>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f83d 	bl	8007254 <USBD_Get_USB_Status>
 80071da:	4603      	mov	r3, r0
 80071dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071de:	7dbb      	ldrb	r3, [r7, #22]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	607a      	str	r2, [r7, #4]
 80071f2:	461a      	mov	r2, r3
 80071f4:	460b      	mov	r3, r1
 80071f6:	72fb      	strb	r3, [r7, #11]
 80071f8:	4613      	mov	r3, r2
 80071fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800720a:	893b      	ldrh	r3, [r7, #8]
 800720c:	7af9      	ldrb	r1, [r7, #11]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	f7fa fd62 	bl	8001cd8 <HAL_PCD_EP_Receive>
 8007214:	4603      	mov	r3, r0
 8007216:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	4618      	mov	r0, r3
 800721c:	f000 f81a 	bl	8007254 <USBD_Get_USB_Status>
 8007220:	4603      	mov	r3, r0
 8007222:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007224:	7dbb      	ldrb	r3, [r7, #22]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007240:	78fa      	ldrb	r2, [r7, #3]
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f7fa fd82 	bl	8001d4e <HAL_PCD_EP_GetRxCount>
 800724a:	4603      	mov	r3, r0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d817      	bhi.n	8007298 <USBD_Get_USB_Status+0x44>
 8007268:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <USBD_Get_USB_Status+0x1c>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	08007281 	.word	0x08007281
 8007274:	08007287 	.word	0x08007287
 8007278:	0800728d 	.word	0x0800728d
 800727c:	08007293 	.word	0x08007293
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
    break;
 8007284:	e00b      	b.n	800729e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007286:	2302      	movs	r3, #2
 8007288:	73fb      	strb	r3, [r7, #15]
    break;
 800728a:	e008      	b.n	800729e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800728c:	2301      	movs	r3, #1
 800728e:	73fb      	strb	r3, [r7, #15]
    break;
 8007290:	e005      	b.n	800729e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007292:	2302      	movs	r3, #2
 8007294:	73fb      	strb	r3, [r7, #15]
    break;
 8007296:	e002      	b.n	800729e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007298:	2302      	movs	r3, #2
 800729a:	73fb      	strb	r3, [r7, #15]
    break;
 800729c:	bf00      	nop
  }
  return usb_status;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop

080072ac <malloc>:
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <malloc+0xc>)
 80072ae:	4601      	mov	r1, r0
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	f000 b82b 	b.w	800730c <_malloc_r>
 80072b6:	bf00      	nop
 80072b8:	2000016c 	.word	0x2000016c

080072bc <free>:
 80072bc:	4b02      	ldr	r3, [pc, #8]	; (80072c8 <free+0xc>)
 80072be:	4601      	mov	r1, r0
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f000 b901 	b.w	80074c8 <_free_r>
 80072c6:	bf00      	nop
 80072c8:	2000016c 	.word	0x2000016c

080072cc <sbrk_aligned>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4e0e      	ldr	r6, [pc, #56]	; (8007308 <sbrk_aligned+0x3c>)
 80072d0:	460c      	mov	r4, r1
 80072d2:	6831      	ldr	r1, [r6, #0]
 80072d4:	4605      	mov	r5, r0
 80072d6:	b911      	cbnz	r1, 80072de <sbrk_aligned+0x12>
 80072d8:	f000 f8ac 	bl	8007434 <_sbrk_r>
 80072dc:	6030      	str	r0, [r6, #0]
 80072de:	4621      	mov	r1, r4
 80072e0:	4628      	mov	r0, r5
 80072e2:	f000 f8a7 	bl	8007434 <_sbrk_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d00a      	beq.n	8007300 <sbrk_aligned+0x34>
 80072ea:	1cc4      	adds	r4, r0, #3
 80072ec:	f024 0403 	bic.w	r4, r4, #3
 80072f0:	42a0      	cmp	r0, r4
 80072f2:	d007      	beq.n	8007304 <sbrk_aligned+0x38>
 80072f4:	1a21      	subs	r1, r4, r0
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 f89c 	bl	8007434 <_sbrk_r>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d101      	bne.n	8007304 <sbrk_aligned+0x38>
 8007300:	f04f 34ff 	mov.w	r4, #4294967295
 8007304:	4620      	mov	r0, r4
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	20019b3c 	.word	0x20019b3c

0800730c <_malloc_r>:
 800730c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007310:	1ccd      	adds	r5, r1, #3
 8007312:	f025 0503 	bic.w	r5, r5, #3
 8007316:	3508      	adds	r5, #8
 8007318:	2d0c      	cmp	r5, #12
 800731a:	bf38      	it	cc
 800731c:	250c      	movcc	r5, #12
 800731e:	2d00      	cmp	r5, #0
 8007320:	4607      	mov	r7, r0
 8007322:	db01      	blt.n	8007328 <_malloc_r+0x1c>
 8007324:	42a9      	cmp	r1, r5
 8007326:	d905      	bls.n	8007334 <_malloc_r+0x28>
 8007328:	230c      	movs	r3, #12
 800732a:	2600      	movs	r6, #0
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	4630      	mov	r0, r6
 8007330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007408 <_malloc_r+0xfc>
 8007338:	f000 f868 	bl	800740c <__malloc_lock>
 800733c:	f8d8 3000 	ldr.w	r3, [r8]
 8007340:	461c      	mov	r4, r3
 8007342:	bb5c      	cbnz	r4, 800739c <_malloc_r+0x90>
 8007344:	4629      	mov	r1, r5
 8007346:	4638      	mov	r0, r7
 8007348:	f7ff ffc0 	bl	80072cc <sbrk_aligned>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	4604      	mov	r4, r0
 8007350:	d155      	bne.n	80073fe <_malloc_r+0xf2>
 8007352:	f8d8 4000 	ldr.w	r4, [r8]
 8007356:	4626      	mov	r6, r4
 8007358:	2e00      	cmp	r6, #0
 800735a:	d145      	bne.n	80073e8 <_malloc_r+0xdc>
 800735c:	2c00      	cmp	r4, #0
 800735e:	d048      	beq.n	80073f2 <_malloc_r+0xe6>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	4631      	mov	r1, r6
 8007364:	4638      	mov	r0, r7
 8007366:	eb04 0903 	add.w	r9, r4, r3
 800736a:	f000 f863 	bl	8007434 <_sbrk_r>
 800736e:	4581      	cmp	r9, r0
 8007370:	d13f      	bne.n	80073f2 <_malloc_r+0xe6>
 8007372:	6821      	ldr	r1, [r4, #0]
 8007374:	4638      	mov	r0, r7
 8007376:	1a6d      	subs	r5, r5, r1
 8007378:	4629      	mov	r1, r5
 800737a:	f7ff ffa7 	bl	80072cc <sbrk_aligned>
 800737e:	3001      	adds	r0, #1
 8007380:	d037      	beq.n	80073f2 <_malloc_r+0xe6>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	442b      	add	r3, r5
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	f8d8 3000 	ldr.w	r3, [r8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d038      	beq.n	8007402 <_malloc_r+0xf6>
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	42a2      	cmp	r2, r4
 8007394:	d12b      	bne.n	80073ee <_malloc_r+0xe2>
 8007396:	2200      	movs	r2, #0
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	e00f      	b.n	80073bc <_malloc_r+0xb0>
 800739c:	6822      	ldr	r2, [r4, #0]
 800739e:	1b52      	subs	r2, r2, r5
 80073a0:	d41f      	bmi.n	80073e2 <_malloc_r+0xd6>
 80073a2:	2a0b      	cmp	r2, #11
 80073a4:	d917      	bls.n	80073d6 <_malloc_r+0xca>
 80073a6:	1961      	adds	r1, r4, r5
 80073a8:	42a3      	cmp	r3, r4
 80073aa:	6025      	str	r5, [r4, #0]
 80073ac:	bf18      	it	ne
 80073ae:	6059      	strne	r1, [r3, #4]
 80073b0:	6863      	ldr	r3, [r4, #4]
 80073b2:	bf08      	it	eq
 80073b4:	f8c8 1000 	streq.w	r1, [r8]
 80073b8:	5162      	str	r2, [r4, r5]
 80073ba:	604b      	str	r3, [r1, #4]
 80073bc:	4638      	mov	r0, r7
 80073be:	f104 060b 	add.w	r6, r4, #11
 80073c2:	f000 f829 	bl	8007418 <__malloc_unlock>
 80073c6:	f026 0607 	bic.w	r6, r6, #7
 80073ca:	1d23      	adds	r3, r4, #4
 80073cc:	1af2      	subs	r2, r6, r3
 80073ce:	d0ae      	beq.n	800732e <_malloc_r+0x22>
 80073d0:	1b9b      	subs	r3, r3, r6
 80073d2:	50a3      	str	r3, [r4, r2]
 80073d4:	e7ab      	b.n	800732e <_malloc_r+0x22>
 80073d6:	42a3      	cmp	r3, r4
 80073d8:	6862      	ldr	r2, [r4, #4]
 80073da:	d1dd      	bne.n	8007398 <_malloc_r+0x8c>
 80073dc:	f8c8 2000 	str.w	r2, [r8]
 80073e0:	e7ec      	b.n	80073bc <_malloc_r+0xb0>
 80073e2:	4623      	mov	r3, r4
 80073e4:	6864      	ldr	r4, [r4, #4]
 80073e6:	e7ac      	b.n	8007342 <_malloc_r+0x36>
 80073e8:	4634      	mov	r4, r6
 80073ea:	6876      	ldr	r6, [r6, #4]
 80073ec:	e7b4      	b.n	8007358 <_malloc_r+0x4c>
 80073ee:	4613      	mov	r3, r2
 80073f0:	e7cc      	b.n	800738c <_malloc_r+0x80>
 80073f2:	230c      	movs	r3, #12
 80073f4:	4638      	mov	r0, r7
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	f000 f80e 	bl	8007418 <__malloc_unlock>
 80073fc:	e797      	b.n	800732e <_malloc_r+0x22>
 80073fe:	6025      	str	r5, [r4, #0]
 8007400:	e7dc      	b.n	80073bc <_malloc_r+0xb0>
 8007402:	605b      	str	r3, [r3, #4]
 8007404:	deff      	udf	#255	; 0xff
 8007406:	bf00      	nop
 8007408:	20019b38 	.word	0x20019b38

0800740c <__malloc_lock>:
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <__malloc_lock+0x8>)
 800740e:	f000 b84b 	b.w	80074a8 <__retarget_lock_acquire_recursive>
 8007412:	bf00      	nop
 8007414:	20019c7c 	.word	0x20019c7c

08007418 <__malloc_unlock>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__malloc_unlock+0x8>)
 800741a:	f000 b846 	b.w	80074aa <__retarget_lock_release_recursive>
 800741e:	bf00      	nop
 8007420:	20019c7c 	.word	0x20019c7c

08007424 <memset>:
 8007424:	4603      	mov	r3, r0
 8007426:	4402      	add	r2, r0
 8007428:	4293      	cmp	r3, r2
 800742a:	d100      	bne.n	800742e <memset+0xa>
 800742c:	4770      	bx	lr
 800742e:	f803 1b01 	strb.w	r1, [r3], #1
 8007432:	e7f9      	b.n	8007428 <memset+0x4>

08007434 <_sbrk_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	2300      	movs	r3, #0
 8007438:	4d05      	ldr	r5, [pc, #20]	; (8007450 <_sbrk_r+0x1c>)
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	f7f9 f9f4 	bl	800082c <_sbrk>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_sbrk_r+0x1a>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_sbrk_r+0x1a>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20019c78 	.word	0x20019c78

08007454 <__errno>:
 8007454:	4b01      	ldr	r3, [pc, #4]	; (800745c <__errno+0x8>)
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	2000016c 	.word	0x2000016c

08007460 <__libc_init_array>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	2600      	movs	r6, #0
 8007464:	4d0c      	ldr	r5, [pc, #48]	; (8007498 <__libc_init_array+0x38>)
 8007466:	4c0d      	ldr	r4, [pc, #52]	; (800749c <__libc_init_array+0x3c>)
 8007468:	1b64      	subs	r4, r4, r5
 800746a:	10a4      	asrs	r4, r4, #2
 800746c:	42a6      	cmp	r6, r4
 800746e:	d109      	bne.n	8007484 <__libc_init_array+0x24>
 8007470:	f000 f872 	bl	8007558 <_init>
 8007474:	2600      	movs	r6, #0
 8007476:	4d0a      	ldr	r5, [pc, #40]	; (80074a0 <__libc_init_array+0x40>)
 8007478:	4c0a      	ldr	r4, [pc, #40]	; (80074a4 <__libc_init_array+0x44>)
 800747a:	1b64      	subs	r4, r4, r5
 800747c:	10a4      	asrs	r4, r4, #2
 800747e:	42a6      	cmp	r6, r4
 8007480:	d105      	bne.n	800748e <__libc_init_array+0x2e>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f855 3b04 	ldr.w	r3, [r5], #4
 8007488:	4798      	blx	r3
 800748a:	3601      	adds	r6, #1
 800748c:	e7ee      	b.n	800746c <__libc_init_array+0xc>
 800748e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007492:	4798      	blx	r3
 8007494:	3601      	adds	r6, #1
 8007496:	e7f2      	b.n	800747e <__libc_init_array+0x1e>
 8007498:	08007608 	.word	0x08007608
 800749c:	08007608 	.word	0x08007608
 80074a0:	08007608 	.word	0x08007608
 80074a4:	0800760c 	.word	0x0800760c

080074a8 <__retarget_lock_acquire_recursive>:
 80074a8:	4770      	bx	lr

080074aa <__retarget_lock_release_recursive>:
 80074aa:	4770      	bx	lr

080074ac <memcpy>:
 80074ac:	440a      	add	r2, r1
 80074ae:	4291      	cmp	r1, r2
 80074b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b4:	d100      	bne.n	80074b8 <memcpy+0xc>
 80074b6:	4770      	bx	lr
 80074b8:	b510      	push	{r4, lr}
 80074ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074be:	4291      	cmp	r1, r2
 80074c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074c4:	d1f9      	bne.n	80074ba <memcpy+0xe>
 80074c6:	bd10      	pop	{r4, pc}

080074c8 <_free_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4605      	mov	r5, r0
 80074cc:	2900      	cmp	r1, #0
 80074ce:	d040      	beq.n	8007552 <_free_r+0x8a>
 80074d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074d4:	1f0c      	subs	r4, r1, #4
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bfb8      	it	lt
 80074da:	18e4      	addlt	r4, r4, r3
 80074dc:	f7ff ff96 	bl	800740c <__malloc_lock>
 80074e0:	4a1c      	ldr	r2, [pc, #112]	; (8007554 <_free_r+0x8c>)
 80074e2:	6813      	ldr	r3, [r2, #0]
 80074e4:	b933      	cbnz	r3, 80074f4 <_free_r+0x2c>
 80074e6:	6063      	str	r3, [r4, #4]
 80074e8:	6014      	str	r4, [r2, #0]
 80074ea:	4628      	mov	r0, r5
 80074ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f0:	f7ff bf92 	b.w	8007418 <__malloc_unlock>
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	d908      	bls.n	800750a <_free_r+0x42>
 80074f8:	6820      	ldr	r0, [r4, #0]
 80074fa:	1821      	adds	r1, r4, r0
 80074fc:	428b      	cmp	r3, r1
 80074fe:	bf01      	itttt	eq
 8007500:	6819      	ldreq	r1, [r3, #0]
 8007502:	685b      	ldreq	r3, [r3, #4]
 8007504:	1809      	addeq	r1, r1, r0
 8007506:	6021      	streq	r1, [r4, #0]
 8007508:	e7ed      	b.n	80074e6 <_free_r+0x1e>
 800750a:	461a      	mov	r2, r3
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	b10b      	cbz	r3, 8007514 <_free_r+0x4c>
 8007510:	42a3      	cmp	r3, r4
 8007512:	d9fa      	bls.n	800750a <_free_r+0x42>
 8007514:	6811      	ldr	r1, [r2, #0]
 8007516:	1850      	adds	r0, r2, r1
 8007518:	42a0      	cmp	r0, r4
 800751a:	d10b      	bne.n	8007534 <_free_r+0x6c>
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	4401      	add	r1, r0
 8007520:	1850      	adds	r0, r2, r1
 8007522:	4283      	cmp	r3, r0
 8007524:	6011      	str	r1, [r2, #0]
 8007526:	d1e0      	bne.n	80074ea <_free_r+0x22>
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	4408      	add	r0, r1
 800752e:	6010      	str	r0, [r2, #0]
 8007530:	6053      	str	r3, [r2, #4]
 8007532:	e7da      	b.n	80074ea <_free_r+0x22>
 8007534:	d902      	bls.n	800753c <_free_r+0x74>
 8007536:	230c      	movs	r3, #12
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	e7d6      	b.n	80074ea <_free_r+0x22>
 800753c:	6820      	ldr	r0, [r4, #0]
 800753e:	1821      	adds	r1, r4, r0
 8007540:	428b      	cmp	r3, r1
 8007542:	bf01      	itttt	eq
 8007544:	6819      	ldreq	r1, [r3, #0]
 8007546:	685b      	ldreq	r3, [r3, #4]
 8007548:	1809      	addeq	r1, r1, r0
 800754a:	6021      	streq	r1, [r4, #0]
 800754c:	6063      	str	r3, [r4, #4]
 800754e:	6054      	str	r4, [r2, #4]
 8007550:	e7cb      	b.n	80074ea <_free_r+0x22>
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20019b38 	.word	0x20019b38

08007558 <_init>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr

08007564 <_fini>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	bf00      	nop
 8007568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756a:	bc08      	pop	{r3}
 800756c:	469e      	mov	lr, r3
 800756e:	4770      	bx	lr
