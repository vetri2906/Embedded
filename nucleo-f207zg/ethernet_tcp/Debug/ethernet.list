
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbbc  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e4c  0800dd40  0800dd40  0001dd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb8c  0800fb8c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb8c  0800fb8c  0001fb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb94  0800fb94  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb94  0800fb94  0001fb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb98  0800fb98  0001fb98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800fb9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b2c  2000006c  0800fc08  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008b98  0800fc08  00028b98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014868  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000457f  00000000  00000000  00034940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00038ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b8b  00000000  00000000  00039da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a57f  00000000  00000000  0003a933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f1a6  00000000  00000000  00064eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf4a9  00000000  00000000  00084058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004048  00000000  00000000  00153504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015754c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000006c 	.word	0x2000006c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800dd28 	.word	0x0800dd28

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000070 	.word	0x20000070
 80001c0:	0800dd28 	.word	0x0800dd28

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	468e      	mov	lr, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14c      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d967      	bls.n	80002ea <__udivmoddi4+0xe6>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b153      	cbz	r3, 8000236 <__udivmoddi4+0x32>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	fa01 fe03 	lsl.w	lr, r1, r3
 800022c:	fa20 f202 	lsr.w	r2, r0, r2
 8000230:	ea42 0e0e 	orr.w	lr, r2, lr
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fbbe f1f7 	udiv	r1, lr, r7
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fb07 ee11 	mls	lr, r7, r1, lr
 8000246:	fb01 f005 	mul.w	r0, r1, r5
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x66>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 3eff 	add.w	lr, r1, #4294967295
 800025c:	f080 8119 	bcs.w	8000492 <__udivmoddi4+0x28e>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8116 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000270:	fb07 2210 	mls	r2, r7, r0, r2
 8000274:	fb00 f505 	mul.w	r5, r0, r5
 8000278:	b2a4      	uxth	r4, r4
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8104 	bcs.w	8000496 <__udivmoddi4+0x292>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8101 	bls.w	8000496 <__udivmoddi4+0x292>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	2100      	movs	r1, #0
 800029e:	1b64      	subs	r4, r4, r5
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xc0>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ea 	beq.w	800048c <__udivmoddi4+0x288>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d148      	bne.n	800035e <__udivmoddi4+0x15a>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xd2>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4696      	mov	lr, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002e4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa6>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xea>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 808e 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f8:	1a88      	subs	r0, r1, r2
 80002fa:	2101      	movs	r1, #1
 80002fc:	0c17      	lsrs	r7, r2, #16
 80002fe:	fa1f fe82 	uxth.w	lr, r2
 8000302:	fbb0 f5f7 	udiv	r5, r0, r7
 8000306:	fb07 0015 	mls	r0, r7, r5, r0
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000310:	fb0e f005 	mul.w	r0, lr, r5
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x126>
 8000318:	eb1c 0202 	adds.w	r2, ip, r2
 800031c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 80cc 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000328:	4645      	mov	r5, r8
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033e:	45a6      	cmp	lr, r4
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x150>
 8000342:	eb1c 0404 	adds.w	r4, ip, r4
 8000346:	f100 32ff 	add.w	r2, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14e>
 800034c:	45a6      	cmp	lr, r4
 800034e:	f200 80b4 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 8000352:	4610      	mov	r0, r2
 8000354:	eba4 040e 	sub.w	r4, r4, lr
 8000358:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035c:	e7a0      	b.n	80002a0 <__udivmoddi4+0x9c>
 800035e:	f1c1 0720 	rsb	r7, r1, #32
 8000362:	408b      	lsls	r3, r1
 8000364:	fa22 fc07 	lsr.w	ip, r2, r7
 8000368:	ea4c 0c03 	orr.w	ip, ip, r3
 800036c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	fbba f8f9 	udiv	r8, sl, r9
 8000378:	408d      	lsls	r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	432b      	orrs	r3, r5
 8000388:	fa00 f501 	lsl.w	r5, r0, r1
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	0c1c      	lsrs	r4, r3, #16
 8000392:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000396:	42a0      	cmp	r0, r4
 8000398:	fa02 f201 	lsl.w	r2, r2, r1
 800039c:	d90b      	bls.n	80003b6 <__udivmoddi4+0x1b2>
 800039e:	eb1c 0404 	adds.w	r4, ip, r4
 80003a2:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a6:	f080 8086 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003aa:	42a0      	cmp	r0, r4
 80003ac:	f240 8083 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003b0:	f1a8 0802 	sub.w	r8, r8, #2
 80003b4:	4464      	add	r4, ip
 80003b6:	1a24      	subs	r4, r4, r0
 80003b8:	b298      	uxth	r0, r3
 80003ba:	fbb4 f3f9 	udiv	r3, r4, r9
 80003be:	fb09 4413 	mls	r4, r9, r3, r4
 80003c2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d6:	d26a      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d968      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003dc:	3b02      	subs	r3, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003e4:	fba0 9302 	umull	r9, r3, r0, r2
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	429c      	cmp	r4, r3
 80003ee:	46c8      	mov	r8, r9
 80003f0:	469e      	mov	lr, r3
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d067      	beq.n	80004ca <__udivmoddi4+0x2c6>
 80003fa:	ebb5 0308 	subs.w	r3, r5, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	40cb      	lsrs	r3, r1
 8000404:	fa04 f707 	lsl.w	r7, r4, r7
 8000408:	431f      	orrs	r7, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	2100      	movs	r1, #0
 8000412:	e74a      	b.n	80002aa <__udivmoddi4+0xa6>
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	f1c3 0020 	rsb	r0, r3, #32
 800041c:	40c1      	lsrs	r1, r0
 800041e:	409d      	lsls	r5, r3
 8000420:	fa24 f000 	lsr.w	r0, r4, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	4328      	orrs	r0, r5
 800042a:	fbb1 f5f7 	udiv	r5, r1, r7
 800042e:	fb07 1115 	mls	r1, r7, r5, r1
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	0c02      	lsrs	r2, r0, #16
 8000438:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800043c:	fb05 f10e 	mul.w	r1, r5, lr
 8000440:	4291      	cmp	r1, r2
 8000442:	fa04 f403 	lsl.w	r4, r4, r3
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x256>
 8000448:	eb1c 0202 	adds.w	r2, ip, r2
 800044c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	4291      	cmp	r1, r2
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3d02      	subs	r5, #2
 8000458:	4462      	add	r2, ip
 800045a:	1a52      	subs	r2, r2, r1
 800045c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000460:	fb07 2211 	mls	r2, r7, r1, r2
 8000464:	b280      	uxth	r0, r0
 8000466:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800046a:	fb01 f20e 	mul.w	r2, r1, lr
 800046e:	4282      	cmp	r2, r0
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x280>
 8000472:	eb1c 0000 	adds.w	r0, ip, r0
 8000476:	f101 38ff 	add.w	r8, r1, #4294967295
 800047a:	d216      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047c:	4282      	cmp	r2, r0
 800047e:	d914      	bls.n	80004aa <__udivmoddi4+0x2a6>
 8000480:	3902      	subs	r1, #2
 8000482:	4460      	add	r0, ip
 8000484:	1a80      	subs	r0, r0, r2
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4631      	mov	r1, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e70b      	b.n	80002aa <__udivmoddi4+0xa6>
 8000492:	4671      	mov	r1, lr
 8000494:	e6e9      	b.n	800026a <__udivmoddi4+0x66>
 8000496:	4610      	mov	r0, r2
 8000498:	e6fe      	b.n	8000298 <__udivmoddi4+0x94>
 800049a:	454d      	cmp	r5, r9
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb9 0802 	subs.w	r8, r9, r2
 80004a2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7a5      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004aa:	4641      	mov	r1, r8
 80004ac:	e7ea      	b.n	8000484 <__udivmoddi4+0x280>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b2:	4645      	mov	r5, r8
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	46d0      	mov	r8, sl
 80004b8:	e77d      	b.n	80003b6 <__udivmoddi4+0x1b2>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e749      	b.n	8000354 <__udivmoddi4+0x150>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e731      	b.n	800032a <__udivmoddi4+0x126>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xdc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e6ed      	b.n	80002aa <__udivmoddi4+0xa6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fcc2 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80e 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f854 	bl	800058c <MX_GPIO_Init>
  MX_LWIP_Init();
 80004e4:	f002 fd36 	bl	8002f54 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

 tcp_server_init();
 80004e8:	f000 fa2a 	bl	8000940 <tcp_server_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ethernetif_input(&gnetif);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <main+0x24>)
 80004ee:	f003 f927 	bl	8003740 <ethernetif_input>
	  sys_check_timeouts();
 80004f2:	f00a f883 	bl	800a5fc <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80004f6:	e7f9      	b.n	80004ec <main+0x18>
 80004f8:	20000090 	.word	0x20000090

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b092      	sub	sp, #72	; 0x48
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f00c fdcb 	bl	800d0a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051e:	2302      	movs	r3, #2
 8000520:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000522:	2301      	movs	r3, #1
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000526:	2310      	movs	r3, #16
 8000528:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052a:	2302      	movs	r3, #2
 800052c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052e:	2300      	movs	r3, #0
 8000530:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000532:	230d      	movs	r3, #13
 8000534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000536:	23c3      	movs	r3, #195	; 0xc3
 8000538:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800053a:	2302      	movs	r3, #2
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800053e:	2305      	movs	r3, #5
 8000540:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	4618      	mov	r0, r3
 8000548:	f002 f8ae 	bl	80026a8 <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000552:	f000 f8fb 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000556:	230f      	movs	r3, #15
 8000558:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055a:	2302      	movs	r3, #2
 800055c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000562:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800056c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2103      	movs	r1, #3
 8000572:	4618      	mov	r0, r3
 8000574:	f002 faec 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800057e:	f000 f8e5 	bl	800074c <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3748      	adds	r7, #72	; 0x48
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	4b63      	ldr	r3, [pc, #396]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a62      	ldr	r2, [pc, #392]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b60      	ldr	r3, [pc, #384]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	61bb      	str	r3, [r7, #24]
 80005bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	4b5c      	ldr	r3, [pc, #368]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a5b      	ldr	r2, [pc, #364]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b59      	ldr	r3, [pc, #356]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b55      	ldr	r3, [pc, #340]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a54      	ldr	r2, [pc, #336]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b52      	ldr	r3, [pc, #328]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b4e      	ldr	r3, [pc, #312]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a4d      	ldr	r2, [pc, #308]	; (8000734 <MX_GPIO_Init+0x1a8>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b4b      	ldr	r3, [pc, #300]	; (8000734 <MX_GPIO_Init+0x1a8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b47      	ldr	r3, [pc, #284]	; (8000734 <MX_GPIO_Init+0x1a8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a46      	ldr	r2, [pc, #280]	; (8000734 <MX_GPIO_Init+0x1a8>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b44      	ldr	r3, [pc, #272]	; (8000734 <MX_GPIO_Init+0x1a8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b40      	ldr	r3, [pc, #256]	; (8000734 <MX_GPIO_Init+0x1a8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a3f      	ldr	r2, [pc, #252]	; (8000734 <MX_GPIO_Init+0x1a8>)
 8000638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <MX_GPIO_Init+0x1a8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000650:	4839      	ldr	r0, [pc, #228]	; (8000738 <MX_GPIO_Init+0x1ac>)
 8000652:	f002 f811 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	4838      	ldr	r0, [pc, #224]	; (800073c <MX_GPIO_Init+0x1b0>)
 800065c:	f002 f80c 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000666:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4619      	mov	r1, r3
 8000676:	4832      	ldr	r0, [pc, #200]	; (8000740 <MX_GPIO_Init+0x1b4>)
 8000678:	f001 fe60 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800067c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4828      	ldr	r0, [pc, #160]	; (8000738 <MX_GPIO_Init+0x1ac>)
 8000696:	f001 fe51 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800069a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006ac:	2307      	movs	r3, #7
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4823      	ldr	r0, [pc, #140]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80006b8:	f001 fe40 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	481a      	ldr	r0, [pc, #104]	; (800073c <MX_GPIO_Init+0x1b0>)
 80006d4:	f001 fe32 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4814      	ldr	r0, [pc, #80]	; (800073c <MX_GPIO_Init+0x1b0>)
 80006ec:	f001 fe26 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006f0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000702:	230a      	movs	r3, #10
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_GPIO_Init+0x1bc>)
 800070e:	f001 fe15 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4808      	ldr	r0, [pc, #32]	; (8000748 <MX_GPIO_Init+0x1bc>)
 8000728:	f001 fe08 	bl	800233c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072c:	bf00      	nop
 800072e:	3730      	adds	r7, #48	; 0x30
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40020400 	.word	0x40020400
 800073c:	40021800 	.word	0x40021800
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40020000 	.word	0x40020000

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x48>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x48>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6453      	str	r3, [r2, #68]	; 0x44
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x48>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x48>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_MspInit+0x48>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_MspInit+0x48>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40023800 	.word	0x40023800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ea:	f000 fb8b 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e00a      	b.n	800081a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000804:	f3af 8000 	nop.w
 8000808:	4601      	mov	r1, r0
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	60ba      	str	r2, [r7, #8]
 8000810:	b2ca      	uxtb	r2, r1
 8000812:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	3301      	adds	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	429a      	cmp	r2, r3
 8000820:	dbf0      	blt.n	8000804 <_read+0x12>
  }

  return len;
 8000822:	687b      	ldr	r3, [r7, #4]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e009      	b.n	8000852 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	60ba      	str	r2, [r7, #8]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	dbf1      	blt.n	800083e <_write+0x12>
  }
  return len;
 800085a:	687b      	ldr	r3, [r7, #4]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <_close>:

int _close(int file)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800088a:	605a      	str	r2, [r3, #4]
  return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <_isatty>:

int _isatty(int file)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008a0:	2301      	movs	r3, #1
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d205      	bcs.n	8000900 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <_sbrk+0x6c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	e009      	b.n	8000914 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a06      	ldr	r2, [pc, #24]	; (8000928 <_sbrk+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	4618      	mov	r0, r3
 8000916:	371c      	adds	r7, #28
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20020000 	.word	0x20020000
 8000924:	00000400 	.word	0x00000400
 8000928:	20000088 	.word	0x20000088
 800092c:	20008b98 	.word	0x20008b98
 8000930:	20008b88 	.word	0x20008b88

08000934 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000946:	f005 fd99 	bl	800647c <tcp_new>
 800094a:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 2);
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <tcp_server_init+0x4c>)
 800094e:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 7);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2207      	movs	r2, #7
 8000954:	4619      	mov	r1, r3
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f004 fe12 	bl	8005580 <tcp_bind>
 800095c:	4603      	mov	r3, r0
 800095e:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8000960:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d109      	bne.n	800097c <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8000968:	21ff      	movs	r1, #255	; 0xff
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f004 feaa 	bl	80056c4 <tcp_listen_with_backlog>
 8000970:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8000972:	4907      	ldr	r1, [pc, #28]	; (8000990 <tcp_server_init+0x50>)
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f005 fdfd 	bl	8006574 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 800097a:	e003      	b.n	8000984 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 800097c:	68f9      	ldr	r1, [r7, #12]
 800097e:	2001      	movs	r0, #1
 8000980:	f003 fbae 	bl	80040e0 <memp_free>
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	0201a8c0 	.word	0x0201a8c0
 8000990:	08000995 	.word	0x08000995

08000994 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	4613      	mov	r3, r2
 80009a0:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80009a2:	2101      	movs	r1, #1
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f005 fbdf 	bl	8006168 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 80009aa:	200c      	movs	r0, #12
 80009ac:	f003 f9f0 	bl	8003d90 <mem_malloc>
 80009b0:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d01f      	beq.n	80009f8 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	2200      	movs	r2, #0
 80009c8:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 80009d0:	6939      	ldr	r1, [r7, #16]
 80009d2:	68b8      	ldr	r0, [r7, #8]
 80009d4:	f005 fd5a 	bl	800648c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 80009d8:	490d      	ldr	r1, [pc, #52]	; (8000a10 <tcp_server_accept+0x7c>)
 80009da:	68b8      	ldr	r0, [r7, #8]
 80009dc:	f005 fd66 	bl	80064ac <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <tcp_server_accept+0x80>)
 80009e2:	68b8      	ldr	r0, [r7, #8]
 80009e4:	f005 fda4 	bl	8006530 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	490b      	ldr	r1, [pc, #44]	; (8000a18 <tcp_server_accept+0x84>)
 80009ec:	68b8      	ldr	r0, [r7, #8]
 80009ee:	f005 fdd7 	bl	80065a0 <tcp_poll>

    ret_err = ERR_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	75fb      	strb	r3, [r7, #23]
 80009f6:	e005      	b.n	8000a04 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 80009f8:	6939      	ldr	r1, [r7, #16]
 80009fa:	68b8      	ldr	r0, [r7, #8]
 80009fc:	f000 f965 	bl	8000cca <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000a00:	23ff      	movs	r3, #255	; 0xff
 8000a02:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	08000a1d 	.word	0x08000a1d
 8000a14:	08000b51 	.word	0x08000b51
 8000a18:	08000b75 	.word	0x08000b75

08000a1c <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d105      	bne.n	8000a3c <tcp_server_recv+0x20>
 8000a30:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <tcp_server_recv+0x124>)
 8000a32:	22c3      	movs	r2, #195	; 0xc3
 8000a34:	4943      	ldr	r1, [pc, #268]	; (8000b44 <tcp_server_recv+0x128>)
 8000a36:	4844      	ldr	r0, [pc, #272]	; (8000b48 <tcp_server_recv+0x12c>)
 8000a38:	f00c fad0 	bl	800cfdc <iprintf>

  es = (struct tcp_server_struct *)arg;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d116      	bne.n	8000a74 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	2203      	movs	r2, #3
 8000a4a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d104      	bne.n	8000a5e <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8000a54:	69b9      	ldr	r1, [r7, #24]
 8000a56:	68b8      	ldr	r0, [r7, #8]
 8000a58:	f000 f937 	bl	8000cca <tcp_server_connection_close>
 8000a5c:	e007      	b.n	8000a6e <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8000a5e:	493b      	ldr	r1, [pc, #236]	; (8000b4c <tcp_server_recv+0x130>)
 8000a60:	68b8      	ldr	r0, [r7, #8]
 8000a62:	f005 fd45 	bl	80064f0 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8000a66:	69b9      	ldr	r1, [r7, #24]
 8000a68:	68b8      	ldr	r0, [r7, #8]
 8000a6a:	f000 f8db 	bl	8000c24 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	77fb      	strb	r3, [r7, #31]
 8000a72:	e05f      	b.n	8000b34 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00b      	beq.n	8000a94 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d005      	beq.n	8000a8e <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f004 f867 	bl	8004b5c <pbuf_free>
    }
    ret_err = err;
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	77fb      	strb	r3, [r7, #31]
 8000a92:	e04f      	b.n	8000b34 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d110      	bne.n	8000abe <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8000aa8:	4928      	ldr	r1, [pc, #160]	; (8000b4c <tcp_server_recv+0x130>)
 8000aaa:	68b8      	ldr	r0, [r7, #8]
 8000aac:	f005 fd20 	bl	80064f0 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8000ab0:	69b9      	ldr	r1, [r7, #24]
 8000ab2:	68b8      	ldr	r0, [r7, #8]
 8000ab4:	f000 f930 	bl	8000d18 <tcp_server_handle>

    ret_err = ERR_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	77fb      	strb	r3, [r7, #31]
 8000abc:	e03a      	b.n	8000b34 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d115      	bne.n	8000af2 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d107      	bne.n	8000ade <tcp_server_recv+0xc2>
    {
      es->p = p;
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8000ad4:	69b9      	ldr	r1, [r7, #24]
 8000ad6:	68b8      	ldr	r0, [r7, #8]
 8000ad8:	f000 f91e 	bl	8000d18 <tcp_server_handle>
 8000adc:	e006      	b.n	8000aec <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f004 f95a 	bl	8004da0 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	77fb      	strb	r3, [r7, #31]
 8000af0:	e020      	b.n	8000b34 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d10e      	bne.n	8000b18 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	891b      	ldrh	r3, [r3, #8]
 8000afe:	4619      	mov	r1, r3
 8000b00:	68b8      	ldr	r0, [r7, #8]
 8000b02:	f004 fed7 	bl	80058b4 <tcp_recved>
    es->p = NULL;
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f004 f825 	bl	8004b5c <pbuf_free>
    ret_err = ERR_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	77fb      	strb	r3, [r7, #31]
 8000b16:	e00d      	b.n	8000b34 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	891b      	ldrh	r3, [r3, #8]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	68b8      	ldr	r0, [r7, #8]
 8000b20:	f004 fec8 	bl	80058b4 <tcp_recved>
    es->p = NULL;
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f004 f816 	bl	8004b5c <pbuf_free>
    ret_err = ERR_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000b34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	0800dd40 	.word	0x0800dd40
 8000b44:	0800dd5c 	.word	0x0800dd5c
 8000b48:	0800dd68 	.word	0x0800dd68
 8000b4c:	08000bd5 	.word	0x08000bd5

08000b50 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f002 ffd4 	bl	8003b14 <mem_free>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d017      	beq.n	8000bb8 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d008      	beq.n	8000ba2 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8000b90:	490f      	ldr	r1, [pc, #60]	; (8000bd0 <tcp_server_poll+0x5c>)
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f005 fcac 	bl	80064f0 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f000 f842 	bl	8000c24 <tcp_server_send>
 8000ba0:	e007      	b.n	8000bb2 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d103      	bne.n	8000bb2 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	6838      	ldr	r0, [r7, #0]
 8000bae:	f000 f88c 	bl	8000cca <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e004      	b.n	8000bc2 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000bb8:	6838      	ldr	r0, [r7, #0]
 8000bba:	f004 fcd5 	bl	8005568 <tcp_abort>
    ret_err = ERR_ABRT;
 8000bbe:	23f3      	movs	r3, #243	; 0xf3
 8000bc0:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	08000bd5 	.word	0x08000bd5

08000bd4 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	4613      	mov	r3, r2
 8000be0:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	2200      	movs	r2, #0
 8000bea:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d008      	beq.n	8000c06 <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8000bf4:	490a      	ldr	r1, [pc, #40]	; (8000c20 <tcp_server_sent+0x4c>)
 8000bf6:	68b8      	ldr	r0, [r7, #8]
 8000bf8:	f005 fc7a 	bl	80064f0 <tcp_sent>
    tcp_server_send(tpcb, es);
 8000bfc:	6979      	ldr	r1, [r7, #20]
 8000bfe:	68b8      	ldr	r0, [r7, #8]
 8000c00:	f000 f810 	bl	8000c24 <tcp_server_send>
 8000c04:	e007      	b.n	8000c16 <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d103      	bne.n	8000c16 <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8000c0e:	6979      	ldr	r1, [r7, #20]
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f000 f85a 	bl	8000cca <tcp_server_connection_close>
  }
  return ERR_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	08000bd5 	.word	0x08000bd5

08000c24 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8000c32:	e036      	b.n	8000ca2 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6859      	ldr	r1, [r3, #4]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	895a      	ldrh	r2, [r3, #10]
 8000c42:	2301      	movs	r3, #1
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f008 fa59 	bl	80090fc <tcp_write>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d11d      	bne.n	8000c92 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	895b      	ldrh	r3, [r3, #10]
 8000c5a:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 f81d 	bl	8004cb0 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000c76:	6938      	ldr	r0, [r7, #16]
 8000c78:	f003 ff70 	bl	8004b5c <pbuf_free>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000c80:	7b7b      	ldrb	r3, [r7, #13]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f7      	beq.n	8000c76 <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000c86:	89fb      	ldrh	r3, [r7, #14]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f004 fe12 	bl	80058b4 <tcp_recved>
 8000c90:	e007      	b.n	8000ca2 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9a:	d102      	bne.n	8000ca2 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 8000ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <tcp_server_send+0x9e>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	895a      	ldrh	r2, [r3, #10]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d9b8      	bls.n	8000c34 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f005 fbd8 	bl	800648c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f005 fc06 	bl	80064f0 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f005 fbe0 	bl	80064ac <tcp_recv>
  tcp_err(tpcb, NULL);
 8000cec:	2100      	movs	r1, #0
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f005 fc1e 	bl	8006530 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f005 fc51 	bl	80065a0 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8000d04:	6838      	ldr	r0, [r7, #0]
 8000d06:	f002 ff05 	bl	8003b14 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f004 fb62 	bl	80053d4 <tcp_close>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b0a0      	sub	sp, #128	; 0x80
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx;

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	8b1b      	ldrh	r3, [r3, #24]
 8000d2c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8000d30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d34:	4618      	mov	r0, r3
 8000d36:	f00b f967 	bl	800c008 <ip4addr_ntoa>
 8000d3a:	67b8      	str	r0, [r7, #120]	; 0x78

	esTx->state = es->state;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d42:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d4a:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d52:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2264      	movs	r2, #100	; 0x64
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00c f9a2 	bl	800d0a6 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	6859      	ldr	r1, [r3, #4]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	891b      	ldrh	r3, [r3, #8]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00c f99e 	bl	800d0b6 <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa20 	bl	80001c4 <strlen>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <tcp_server_handle+0xf0>)
 8000d90:	461d      	mov	r5, r3
 8000d92:	4614      	mov	r4, r2
 8000d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d96:	6028      	str	r0, [r5, #0]
 8000d98:	6069      	str	r1, [r5, #4]
 8000d9a:	60aa      	str	r2, [r5, #8]
 8000d9c:	60eb      	str	r3, [r5, #12]
 8000d9e:	cc03      	ldmia	r4!, {r0, r1}
 8000da0:	6128      	str	r0, [r5, #16]
 8000da2:	6169      	str	r1, [r5, #20]
 8000da4:	7823      	ldrb	r3, [r4, #0]
 8000da6:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 8000da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f107 020c 	add.w	r2, r7, #12
 8000db0:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	891a      	ldrh	r2, [r3, #8]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	895b      	ldrh	r3, [r3, #10]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	b29c      	uxth	r4, r3
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff f9fc 	bl	80001c4 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4422      	add	r2, r4
 8000dd6:	b292      	uxth	r2, r2
 8000dd8:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff f9f0 	bl	80001c4 <strlen>
 8000de4:	4602      	mov	r2, r0
 8000de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	b292      	uxth	r2, r2
 8000dec:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8000dee:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff17 	bl	8000c24 <tcp_server_send>

	pbuf_free(es->p);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 feae 	bl	8004b5c <pbuf_free>

}
 8000e00:	bf00      	nop
 8000e02:	3780      	adds	r7, #128	; 0x80
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bdb0      	pop	{r4, r5, r7, pc}
 8000e08:	0800dd90 	.word	0x0800dd90

08000e0c <Reset_Handler>:
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopFillZerobss+0xe>
 8000e10:	f7ff fd90 	bl	8000934 <SystemInit>
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <LoopFillZerobss+0x12>)
 8000e16:	490d      	ldr	r1, [pc, #52]	; (8000e4c <LoopFillZerobss+0x16>)
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <LoopFillZerobss+0x1a>)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:
 8000e1e:	58d4      	ldr	r4, [r2, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:
 8000e24:	18c4      	adds	r4, r0, r3
 8000e26:	428c      	cmp	r4, r1
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <LoopFillZerobss+0x1e>)
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	; (8000e58 <LoopFillZerobss+0x22>)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:
 8000e36:	42a2      	cmp	r2, r4
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>
 8000e3a:	f00c f995 	bl	800d168 <__libc_init_array>
 8000e3e:	f7ff fb49 	bl	80004d4 <main>
 8000e42:	4770      	bx	lr
 8000e44:	20020000 	.word	0x20020000
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	2000006c 	.word	0x2000006c
 8000e50:	0800fb9c 	.word	0x0800fb9c
 8000e54:	2000006c 	.word	0x2000006c
 8000e58:	20008b98 	.word	0x20008b98

08000e5c <ADC_IRQHandler>:
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <HAL_Init>:
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f92b 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>
 8000e94:	f7ff fc60 	bl	8000758 <HAL_MspInit>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_InitTick>:
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f935 	bl	8001132 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f90b 	bl	80010fa <HAL_NVIC_SetPriority>
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x1c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_IncTick+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a03      	ldr	r2, [pc, #12]	; (8000f24 <HAL_IncTick+0x20>)
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000008 	.word	0x20000008
 8000f24:	2000008c 	.word	0x2000008c

08000f28 <HAL_GetTick>:
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <HAL_GetTick+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	2000008c 	.word	0x2000008c

08000f3c <HAL_Delay>:
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	f7ff fff0 	bl	8000f28 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	bf00      	nop
 8000f64:	f7ff ffe0 	bl	8000f28 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008

08000f84 <__NVIC_SetPriorityGrouping>:
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_SetPriority>:
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
 8001094:	4313      	orrs	r3, r2
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <SysTick_Config>:
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b0:	d301      	bcc.n	80010b6 <SysTick_Config+0x16>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00f      	b.n	80010d6 <SysTick_Config+0x36>
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <SysTick_Config+0x40>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6053      	str	r3, [r2, #4]
 80010be:	210f      	movs	r1, #15
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f7ff ff90 	bl	8000fe8 <__NVIC_SetPriority>
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <SysTick_Config+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <SysTick_Config+0x40>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	2300      	movs	r3, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_NVIC_SetPriorityGrouping>:
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff49 	bl	8000f84 <__NVIC_SetPriorityGrouping>
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	f7ff ff5e 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff90 	bl	800103c <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5f 	bl	8000fe8 <__NVIC_SetPriority>
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffb0 	bl	80010a0 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_ETH_Init>:
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	4ba3      	ldr	r3, [pc, #652]	; (80013ec <HAL_ETH_Init+0x2a0>)
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_ETH_Init+0x26>
 800116e:	2301      	movs	r3, #1
 8001170:	e173      	b.n	800145a <HAL_ETH_Init+0x30e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <HAL_ETH_Init+0x40>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f002 f816 	bl	80031b8 <HAL_ETH_MspInit>
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <HAL_ETH_Init+0x2a4>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	4a96      	ldr	r2, [pc, #600]	; (80013f0 <HAL_ETH_Init+0x2a4>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119a:	6453      	str	r3, [r2, #68]	; 0x44
 800119c:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <HAL_ETH_Init+0x2a4>)
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <HAL_ETH_Init+0x2a8>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a91      	ldr	r2, [pc, #580]	; (80013f4 <HAL_ETH_Init+0x2a8>)
 80011ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011b2:	6053      	str	r3, [r2, #4]
 80011b4:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <HAL_ETH_Init+0x2a8>)
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	498d      	ldr	r1, [pc, #564]	; (80013f4 <HAL_ETH_Init+0x2a8>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	f7ff fea5 	bl	8000f28 <HAL_GetTick>
 80011de:	6178      	str	r0, [r7, #20]
 80011e0:	e011      	b.n	8001206 <HAL_ETH_Init+0xba>
 80011e2:	f7ff fea1 	bl	8000f28 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011f0:	d909      	bls.n	8001206 <HAL_ETH_Init+0xba>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001202:	2303      	movs	r3, #3
 8001204:	e129      	b.n	800145a <HAL_ETH_Init+0x30e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e4      	bne.n	80011e2 <HAL_ETH_Init+0x96>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f023 031c 	bic.w	r3, r3, #28
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	f001 fe8a 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 800122c:	61b8      	str	r0, [r7, #24]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4a71      	ldr	r2, [pc, #452]	; (80013f8 <HAL_ETH_Init+0x2ac>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d908      	bls.n	8001248 <HAL_ETH_Init+0xfc>
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4a70      	ldr	r2, [pc, #448]	; (80013fc <HAL_ETH_Init+0x2b0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d804      	bhi.n	8001248 <HAL_ETH_Init+0xfc>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	e01a      	b.n	800127e <HAL_ETH_Init+0x132>
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4a6c      	ldr	r2, [pc, #432]	; (80013fc <HAL_ETH_Init+0x2b0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d908      	bls.n	8001262 <HAL_ETH_Init+0x116>
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_ETH_Init+0x2a0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d204      	bcs.n	8001262 <HAL_ETH_Init+0x116>
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f043 030c 	orr.w	r3, r3, #12
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	e00d      	b.n	800127e <HAL_ETH_Init+0x132>
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4a61      	ldr	r2, [pc, #388]	; (80013ec <HAL_ETH_Init+0x2a0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d303      	bcc.n	8001272 <HAL_ETH_Init+0x126>
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4a64      	ldr	r2, [pc, #400]	; (8001400 <HAL_ETH_Init+0x2b4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d904      	bls.n	800127c <HAL_ETH_Init+0x130>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	e000      	b.n	800127e <HAL_ETH_Init+0x132>
 800127c:	bf00      	nop
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800128a:	2100      	movs	r1, #0
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fb8e 	bl	80019ae <HAL_ETH_WritePHYRegister>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00b      	beq.n	80012b0 <HAL_ETH_Init+0x164>
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	6939      	ldr	r1, [r7, #16]
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fd44 	bl	8001d2c <ETH_MACDMAConfig>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0d4      	b.n	800145a <HAL_ETH_Init+0x30e>
 80012b0:	20ff      	movs	r0, #255	; 0xff
 80012b2:	f7ff fe43 	bl	8000f3c <HAL_Delay>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80a2 	beq.w	8001404 <HAL_ETH_Init+0x2b8>
 80012c0:	f7ff fe32 	bl	8000f28 <HAL_GetTick>
 80012c4:	6178      	str	r0, [r7, #20]
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	461a      	mov	r2, r3
 80012cc:	2101      	movs	r1, #1
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fb05 	bl	80018de <HAL_ETH_ReadPHYRegister>
 80012d4:	f7ff fe28 	bl	8000f28 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d90f      	bls.n	8001306 <HAL_ETH_Init+0x1ba>
 80012e6:	2301      	movs	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	6939      	ldr	r1, [r7, #16]
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fd1d 	bl	8001d2c <ETH_MACDMAConfig>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001302:	2303      	movs	r3, #3
 8001304:	e0a9      	b.n	800145a <HAL_ETH_Init+0x30e>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0da      	beq.n	80012c6 <HAL_ETH_Init+0x17a>
 8001310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001314:	2100      	movs	r1, #0
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fb49 	bl	80019ae <HAL_ETH_WritePHYRegister>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_ETH_Init+0x1ee>
 8001322:	2301      	movs	r3, #1
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	6939      	ldr	r1, [r7, #16]
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fcff 	bl	8001d2c <ETH_MACDMAConfig>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001336:	2301      	movs	r3, #1
 8001338:	e08f      	b.n	800145a <HAL_ETH_Init+0x30e>
 800133a:	f7ff fdf5 	bl	8000f28 <HAL_GetTick>
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	461a      	mov	r2, r3
 8001346:	2101      	movs	r1, #1
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fac8 	bl	80018de <HAL_ETH_ReadPHYRegister>
 800134e:	f7ff fdeb 	bl	8000f28 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f241 3288 	movw	r2, #5000	; 0x1388
 800135c:	4293      	cmp	r3, r2
 800135e:	d90f      	bls.n	8001380 <HAL_ETH_Init+0x234>
 8001360:	2301      	movs	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fce0 	bl	8001d2c <ETH_MACDMAConfig>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800137c:	2303      	movs	r3, #3
 800137e:	e06c      	b.n	800145a <HAL_ETH_Init+0x30e>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0da      	beq.n	8001340 <HAL_ETH_Init+0x1f4>
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	461a      	mov	r2, r3
 8001390:	2110      	movs	r1, #16
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 faa3 	bl	80018de <HAL_ETH_ReadPHYRegister>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <HAL_ETH_Init+0x26a>
 800139e:	2301      	movs	r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	6939      	ldr	r1, [r7, #16]
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fcc1 	bl	8001d2c <ETH_MACDMAConfig>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013b2:	2301      	movs	r3, #1
 80013b4:	e051      	b.n	800145a <HAL_ETH_Init+0x30e>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <HAL_ETH_Init+0x27e>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	e002      	b.n	80013d0 <HAL_ETH_Init+0x284>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_ETH_Init+0x296>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e032      	b.n	8001448 <HAL_ETH_Init+0x2fc>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	e02d      	b.n	8001448 <HAL_ETH_Init+0x2fc>
 80013ec:	03938700 	.word	0x03938700
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40013800 	.word	0x40013800
 80013f8:	01312cff 	.word	0x01312cff
 80013fc:	02160ebf 	.word	0x02160ebf
 8001400:	05f5e0ff 	.word	0x05f5e0ff
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	b29a      	uxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	085b      	lsrs	r3, r3, #1
 8001412:	b29b      	uxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	2100      	movs	r1, #0
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fac6 	bl	80019ae <HAL_ETH_WritePHYRegister>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_ETH_Init+0x2f4>
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fc7c 	bl	8001d2c <ETH_MACDMAConfig>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800143c:	2301      	movs	r3, #1
 800143e:	e00c      	b.n	800145a <HAL_ETH_Init+0x30e>
 8001440:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001444:	f7ff fd7a 	bl	8000f3c <HAL_Delay>
 8001448:	6939      	ldr	r1, [r7, #16]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fc6e 	bl	8001d2c <ETH_MACDMAConfig>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001458:	2300      	movs	r3, #0
 800145a:	4618      	mov	r0, r3
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop

08001464 <HAL_ETH_DMATxDescListInit>:
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_ETH_DMATxDescListInit+0x20>
 8001480:	2302      	movs	r3, #2
 8001482:	e051      	b.n	8001528 <HAL_ETH_DMATxDescListInit+0xc4>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e030      	b.n	8001502 <HAL_ETH_DMATxDescListInit+0x9e>
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <HAL_ETH_DMATxDescListInit+0x76>
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d208      	bcs.n	80014f6 <HAL_ETH_DMATxDescListInit+0x92>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	015b      	lsls	r3, r3, #5
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	e002      	b.n	80014fc <HAL_ETH_DMATxDescListInit+0x98>
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ca      	bcc.n	80014a0 <HAL_ETH_DMATxDescListInit+0x3c>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001514:	6113      	str	r3, [r2, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001526:	2300      	movs	r3, #0
 8001528:	4618      	mov	r0, r3
 800152a:	371c      	adds	r7, #28
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <HAL_ETH_DMARxDescListInit>:
 8001532:	b480      	push	{r7}
 8001534:	b087      	sub	sp, #28
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_ETH_DMARxDescListInit+0x20>
 800154e:	2302      	movs	r3, #2
 8001550:	e055      	b.n	80015fe <HAL_ETH_DMARxDescListInit+0xcc>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e034      	b.n	80015d8 <HAL_ETH_DMARxDescListInit+0xa6>
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	4413      	add	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	461a      	mov	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_ETH_DMARxDescListInit+0x7e>
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d208      	bcs.n	80015cc <HAL_ETH_DMARxDescListInit+0x9a>
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	015b      	lsls	r3, r3, #5
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	4413      	add	r3, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	e002      	b.n	80015d2 <HAL_ETH_DMARxDescListInit+0xa0>
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3c6      	bcc.n	800156e <HAL_ETH_DMARxDescListInit+0x3c>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ea:	60d3      	str	r3, [r2, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80015fc:	2300      	movs	r3, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HAL_ETH_TransmitFrame>:
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ETH_TransmitFrame+0x24>
 8001628:	2302      	movs	r3, #2
 800162a:	e0cc      	b.n	80017c6 <HAL_ETH_TransmitFrame+0x1be>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_ETH_TransmitFrame+0x4e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001652:	2301      	movs	r3, #1
 8001654:	e0b7      	b.n	80017c6 <HAL_ETH_TransmitFrame+0x1be>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	da09      	bge.n	8001674 <HAL_ETH_TransmitFrame+0x6c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2212      	movs	r2, #18
 8001664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001670:	2301      	movs	r3, #1
 8001672:	e0a8      	b.n	80017c6 <HAL_ETH_TransmitFrame+0x1be>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800167a:	4293      	cmp	r3, r2
 800167c:	d915      	bls.n	80016aa <HAL_ETH_TransmitFrame+0xa2>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	4a53      	ldr	r2, [pc, #332]	; (80017d0 <HAL_ETH_TransmitFrame+0x1c8>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0a9b      	lsrs	r3, r3, #10
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_ETH_TransmitFrame+0x1c8>)
 800168e:	fba3 1302 	umull	r1, r3, r3, r2
 8001692:	0a9b      	lsrs	r3, r3, #10
 8001694:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_ETH_TransmitFrame+0xa6>
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e001      	b.n	80016ae <HAL_ETH_TransmitFrame+0xa6>
 80016aa:	2301      	movs	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11c      	bne.n	80016ee <HAL_ETH_TransmitFrame+0xe6>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ec:	e04b      	b.n	8001786 <HAL_ETH_TransmitFrame+0x17e>
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	e044      	b.n	800177e <HAL_ETH_TransmitFrame+0x176>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <HAL_ETH_TransmitFrame+0x112>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3b01      	subs	r3, #1
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	429a      	cmp	r2, r3
 800172c:	d116      	bne.n	800175c <HAL_ETH_TransmitFrame+0x154>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001742:	fb03 f202 	mul.w	r2, r3, r2
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	3301      	adds	r3, #1
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	429a      	cmp	r2, r3
 8001784:	d3b6      	bcc.n	80016f4 <HAL_ETH_TransmitFrame+0xec>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00d      	beq.n	80017b4 <HAL_ETH_TransmitFrame+0x1ac>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a0:	461a      	mov	r2, r3
 80017a2:	2304      	movs	r3, #4
 80017a4:	6153      	str	r3, [r2, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ae:	461a      	mov	r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	6053      	str	r3, [r2, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017c4:	2300      	movs	r3, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	ac02b00b 	.word	0xac02b00b
 80017d4:	fffffa0c 	.word	0xfffffa0c

080017d8 <HAL_ETH_GetReceivedFrame>:
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_ETH_GetReceivedFrame+0x1a>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e070      	b.n	80018d4 <HAL_ETH_GetReceivedFrame+0xfc>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2202      	movs	r2, #2
 80017fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db5a      	blt.n	80018c2 <HAL_ETH_GetReceivedFrame+0xea>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d030      	beq.n	800187c <HAL_ETH_GetReceivedFrame+0xa4>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	639a      	str	r2, [r3, #56]	; 0x38
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	2b01      	cmp	r3, #1
 800182a:	d103      	bne.n	8001834 <HAL_ETH_GetReceivedFrame+0x5c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	635a      	str	r2, [r3, #52]	; 0x34
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001848:	3b04      	subs	r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	63da      	str	r2, [r3, #60]	; 0x3c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001878:	2300      	movs	r3, #0
 800187a:	e02b      	b.n	80018d4 <HAL_ETH_GetReceivedFrame+0xfc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001886:	2b00      	cmp	r3, #0
 8001888:	d010      	beq.n	80018ac <HAL_ETH_GetReceivedFrame+0xd4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	635a      	str	r2, [r3, #52]	; 0x34
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
 80018aa:	e00a      	b.n	80018c2 <HAL_ETH_GetReceivedFrame+0xea>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	639a      	str	r2, [r3, #56]	; 0x38
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	461a      	mov	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018d2:	2301      	movs	r3, #1
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <HAL_ETH_ReadPHYRegister>:
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	460b      	mov	r3, r1
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	817b      	strh	r3, [r7, #10]
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b82      	cmp	r3, #130	; 0x82
 80018fe:	d101      	bne.n	8001904 <HAL_ETH_ReadPHYRegister+0x26>
 8001900:	2302      	movs	r3, #2
 8001902:	e050      	b.n	80019a6 <HAL_ETH_ReadPHYRegister+0xc8>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2282      	movs	r2, #130	; 0x82
 8001908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 031c 	and.w	r3, r3, #28
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8a1b      	ldrh	r3, [r3, #16]
 8001920:	02db      	lsls	r3, r3, #11
 8001922:	b29b      	uxth	r3, r3
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	897b      	ldrh	r3, [r7, #10]
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f023 0302 	bic.w	r3, r3, #2
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	f7ff faea 	bl	8000f28 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]
 8001956:	e015      	b.n	8001984 <HAL_ETH_ReadPHYRegister+0xa6>
 8001958:	f7ff fae6 	bl	8000f28 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001966:	d309      	bcc.n	800197c <HAL_ETH_ReadPHYRegister+0x9e>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001978:	2303      	movs	r3, #3
 800197a:	e014      	b.n	80019a6 <HAL_ETH_ReadPHYRegister+0xc8>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1e4      	bne.n	8001958 <HAL_ETH_ReadPHYRegister+0x7a>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019a4:	2300      	movs	r3, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_ETH_WritePHYRegister>:
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	460b      	mov	r3, r1
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	817b      	strh	r3, [r7, #10]
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b42      	cmp	r3, #66	; 0x42
 80019ce:	d101      	bne.n	80019d4 <HAL_ETH_WritePHYRegister+0x26>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e04e      	b.n	8001a72 <HAL_ETH_WritePHYRegister+0xc4>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2242      	movs	r2, #66	; 0x42
 80019d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 031c 	and.w	r3, r3, #28
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8a1b      	ldrh	r3, [r3, #16]
 80019f0:	02db      	lsls	r3, r3, #11
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	897b      	ldrh	r3, [r7, #10]
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	f7ff fa7d 	bl	8000f28 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]
 8001a30:	e015      	b.n	8001a5e <HAL_ETH_WritePHYRegister+0xb0>
 8001a32:	f7ff fa79 	bl	8000f28 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a40:	d309      	bcc.n	8001a56 <HAL_ETH_WritePHYRegister+0xa8>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a52:	2303      	movs	r3, #3
 8001a54:	e00d      	b.n	8001a72 <HAL_ETH_WritePHYRegister+0xc4>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e4      	bne.n	8001a32 <HAL_ETH_WritePHYRegister+0x84>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a70:	2300      	movs	r3, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_ETH_Start>:
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_ETH_Start+0x16>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e01f      	b.n	8001ad0 <HAL_ETH_Start+0x56>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fb3f 	bl	8002124 <ETH_MACTransmissionEnable>
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fb76 	bl	8002198 <ETH_MACReceptionEnable>
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fc01 	bl	80022b4 <ETH_FlushTransmitFIFO>
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fbaa 	bl	800220c <ETH_DMATransmissionEnable>
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fbd1 	bl	8002260 <ETH_DMAReceptionEnable>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_ETH_Stop>:
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_ETH_Stop+0x16>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e01f      	b.n	8001b2e <HAL_ETH_Stop+0x56>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fb99 	bl	8002236 <ETH_DMATransmissionDisable>
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fbc0 	bl	800228a <ETH_DMAReceptionDisable>
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fb61 	bl	80021d2 <ETH_MACReceptionDisable>
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fbcf 	bl	80022b4 <ETH_FlushTransmitFIFO>
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fb21 	bl	800215e <ETH_MACTransmissionDisable>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_ETH_ConfigMAC>:
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_ETH_ConfigMAC+0x1c>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e0e4      	b.n	8001d1e <HAL_ETH_ConfigMAC+0x1e6>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80b1 	beq.w	8001cce <HAL_ETH_ConfigMAC+0x196>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <HAL_ETH_ConfigMAC+0x1f0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff f9ac 	bl	8000f3c <HAL_Delay>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	431a      	orrs	r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	431a      	orrs	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	ea42 0103 	orr.w	r1, r2, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff f986 	bl	8000f3c <HAL_Delay>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	041a      	lsls	r2, r3, #16
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c74:	431a      	orrs	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c80:	4313      	orrs	r3, r2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	619a      	str	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7ff f94f 	bl	8000f3c <HAL_Delay>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	619a      	str	r2, [r3, #24]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	61da      	str	r2, [r3, #28]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff f93c 	bl	8000f3c <HAL_Delay>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	61da      	str	r2, [r3, #28]
 8001ccc:	e01e      	b.n	8001d0c <HAL_ETH_ConfigMAC+0x1d4>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff f91c 	bl	8000f3c <HAL_Delay>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	ff20810f 	.word	0xff20810f

08001d2c <ETH_MACDMAConfig>:
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0b0      	sub	sp, #192	; 0xc0
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <ETH_MACDMAConfig+0x26>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	2300      	movs	r3, #0
 8001d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d56:	2300      	movs	r3, #0
 8001d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	653b      	str	r3, [r7, #80]	; 0x50
 8001d5e:	2300      	movs	r3, #0
 8001d60:	657b      	str	r3, [r7, #84]	; 0x54
 8001d62:	2300      	movs	r3, #0
 8001d64:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d66:	2300      	movs	r3, #0
 8001d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d103      	bne.n	8001d7a <ETH_MACDMAConfig+0x4e>
 8001d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d76:	663b      	str	r3, [r7, #96]	; 0x60
 8001d78:	e001      	b.n	8001d7e <ETH_MACDMAConfig+0x52>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8001d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d82:	667b      	str	r3, [r7, #100]	; 0x64
 8001d84:	2300      	movs	r3, #0
 8001d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d88:	2300      	movs	r3, #0
 8001d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	673b      	str	r3, [r7, #112]	; 0x70
 8001d90:	2300      	movs	r3, #0
 8001d92:	677b      	str	r3, [r7, #116]	; 0x74
 8001d94:	2300      	movs	r3, #0
 8001d96:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d98:	2340      	movs	r3, #64	; 0x40
 8001d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e04:	4baa      	ldr	r3, [pc, #680]	; (80020b0 <ETH_MACDMAConfig+0x384>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e10:	431a      	orrs	r2, r3
 8001e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e14:	431a      	orrs	r2, r3
 8001e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e22:	431a      	orrs	r2, r3
 8001e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e30:	431a      	orrs	r2, r3
 8001e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e34:	431a      	orrs	r2, r3
 8001e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff f86b 	bl	8000f3c <HAL_Delay>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e74:	431a      	orrs	r2, r3
 8001e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e84:	431a      	orrs	r2, r3
 8001e86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e90:	ea42 0103 	orr.w	r1, r2, r3
 8001e94:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff f846 	bl	8000f3c <HAL_Delay>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001edc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eea:	041a      	lsls	r2, r3, #16
 8001eec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001efc:	431a      	orrs	r2, r3
 8001efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f02:	431a      	orrs	r2, r3
 8001f04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f1c:	619a      	str	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff f807 	bl	8000f3c <HAL_Delay>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f36:	619a      	str	r2, [r3, #24]
 8001f38:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001f3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	61da      	str	r2, [r3, #28]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7fe fff2 	bl	8000f3c <HAL_Delay>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f60:	61da      	str	r2, [r3, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	2304      	movs	r3, #4
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
 8001f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8001faa:	2300      	movs	r3, #0
 8001fac:	647b      	str	r3, [r7, #68]	; 0x44
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001fbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <ETH_MACDMAConfig+0x388>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002012:	2001      	movs	r0, #1
 8002014:	f7fe ff92 	bl	8000f3c <HAL_Delay>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002020:	461a      	mov	r2, r3
 8002022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	431a      	orrs	r2, r3
 800202e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002030:	431a      	orrs	r2, r3
 8002032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002034:	431a      	orrs	r2, r3
 8002036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002038:	431a      	orrs	r2, r3
 800203a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	431a      	orrs	r2, r3
 8002040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002042:	4313      	orrs	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800204c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002060:	2001      	movs	r0, #1
 8002062:	f7fe ff6b 	bl	8000f3c <HAL_Delay>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206e:	461a      	mov	r2, r3
 8002070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10d      	bne.n	800209a <ETH_MACDMAConfig+0x36e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002094:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	461a      	mov	r2, r3
 80020a0:	2100      	movs	r1, #0
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f808 	bl	80020b8 <ETH_MACAddressConfig>
 80020a8:	bf00      	nop
 80020aa:	37c0      	adds	r7, #192	; 0xc0
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	ff20810f 	.word	0xff20810f
 80020b4:	f8de3f23 	.word	0xf8de3f23

080020b8 <ETH_MACAddressConfig>:
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3305      	adds	r3, #5
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	3204      	adds	r2, #4
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <ETH_MACAddressConfig+0x64>)
 80020da:	4413      	add	r3, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3303      	adds	r3, #3
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	061a      	lsls	r2, r3, #24
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3302      	adds	r3, #2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3301      	adds	r3, #1
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	4313      	orrs	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <ETH_MACAddressConfig+0x68>)
 800210a:	4413      	add	r3, r2
 800210c:	461a      	mov	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	40028040 	.word	0x40028040
 8002120:	40028044 	.word	0x40028044

08002124 <ETH_MACTransmissionEnable>:
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0208 	orr.w	r2, r2, #8
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	2001      	movs	r0, #1
 800214a:	f000 f8d9 	bl	8002300 <ETH_Delay>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <ETH_MACTransmissionDisable>:
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0208 	bic.w	r2, r2, #8
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	2001      	movs	r0, #1
 8002184:	f000 f8bc 	bl	8002300 <ETH_Delay>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <ETH_MACReceptionEnable>:
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0204 	orr.w	r2, r2, #4
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	2001      	movs	r0, #1
 80021be:	f000 f89f 	bl	8002300 <ETH_Delay>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <ETH_MACReceptionDisable>:
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0204 	bic.w	r2, r2, #4
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	2001      	movs	r0, #1
 80021f8:	f000 f882 	bl	8002300 <ETH_Delay>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <ETH_DMATransmissionEnable>:
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <ETH_DMATransmissionDisable>:
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002250:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002254:	6193      	str	r3, [r2, #24]
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <ETH_DMAReceptionEnable>:
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <ETH_DMAReceptionDisable>:
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	f023 0302 	bic.w	r3, r3, #2
 80022a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022a8:	6193      	str	r3, [r2, #24]
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <ETH_FlushTransmitFIFO>:
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	2001      	movs	r0, #1
 80022e6:	f000 f80b 	bl	8002300 <ETH_Delay>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022f4:	6193      	str	r3, [r2, #24]
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <ETH_Delay>:
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <ETH_Delay+0x34>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <ETH_Delay+0x38>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0a5b      	lsrs	r3, r3, #9
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	bf00      	nop
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e5a      	subs	r2, r3, #1
 8002322:	60fa      	str	r2, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f9      	bne.n	800231c <ETH_Delay+0x1c>
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	20000000 	.word	0x20000000
 8002338:	10624dd3 	.word	0x10624dd3

0800233c <HAL_GPIO_Init>:
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e16f      	b.n	800262c <HAL_GPIO_Init+0x2f0>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8161 	beq.w	8002626 <HAL_GPIO_Init+0x2ea>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d005      	beq.n	800237c <HAL_GPIO_Init+0x40>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d130      	bne.n	80023de <HAL_GPIO_Init+0xa2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	2201      	movs	r2, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0201 	and.w	r2, r3, #1
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d017      	beq.n	800241a <HAL_GPIO_Init+0xde>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d123      	bne.n	800246e <HAL_GPIO_Init+0x132>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	6939      	ldr	r1, [r7, #16]
 800246a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0203 	and.w	r2, r3, #3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80bb 	beq.w	8002626 <HAL_GPIO_Init+0x2ea>
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_GPIO_Init+0x30c>)
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_GPIO_Init+0x30c>)
 80024ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024be:	6453      	str	r3, [r2, #68]	; 0x44
 80024c0:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_GPIO_Init+0x30c>)
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4a5f      	ldr	r2, [pc, #380]	; (800264c <HAL_GPIO_Init+0x310>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	220f      	movs	r2, #15
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a57      	ldr	r2, [pc, #348]	; (8002650 <HAL_GPIO_Init+0x314>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d031      	beq.n	800255c <HAL_GPIO_Init+0x220>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a56      	ldr	r2, [pc, #344]	; (8002654 <HAL_GPIO_Init+0x318>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d02b      	beq.n	8002558 <HAL_GPIO_Init+0x21c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a55      	ldr	r2, [pc, #340]	; (8002658 <HAL_GPIO_Init+0x31c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d025      	beq.n	8002554 <HAL_GPIO_Init+0x218>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a54      	ldr	r2, [pc, #336]	; (800265c <HAL_GPIO_Init+0x320>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d01f      	beq.n	8002550 <HAL_GPIO_Init+0x214>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a53      	ldr	r2, [pc, #332]	; (8002660 <HAL_GPIO_Init+0x324>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d019      	beq.n	800254c <HAL_GPIO_Init+0x210>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a52      	ldr	r2, [pc, #328]	; (8002664 <HAL_GPIO_Init+0x328>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_GPIO_Init+0x20c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a51      	ldr	r2, [pc, #324]	; (8002668 <HAL_GPIO_Init+0x32c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00d      	beq.n	8002544 <HAL_GPIO_Init+0x208>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a50      	ldr	r2, [pc, #320]	; (800266c <HAL_GPIO_Init+0x330>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <HAL_GPIO_Init+0x204>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4f      	ldr	r2, [pc, #316]	; (8002670 <HAL_GPIO_Init+0x334>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d101      	bne.n	800253c <HAL_GPIO_Init+0x200>
 8002538:	2308      	movs	r3, #8
 800253a:	e010      	b.n	800255e <HAL_GPIO_Init+0x222>
 800253c:	2309      	movs	r3, #9
 800253e:	e00e      	b.n	800255e <HAL_GPIO_Init+0x222>
 8002540:	2307      	movs	r3, #7
 8002542:	e00c      	b.n	800255e <HAL_GPIO_Init+0x222>
 8002544:	2306      	movs	r3, #6
 8002546:	e00a      	b.n	800255e <HAL_GPIO_Init+0x222>
 8002548:	2305      	movs	r3, #5
 800254a:	e008      	b.n	800255e <HAL_GPIO_Init+0x222>
 800254c:	2304      	movs	r3, #4
 800254e:	e006      	b.n	800255e <HAL_GPIO_Init+0x222>
 8002550:	2303      	movs	r3, #3
 8002552:	e004      	b.n	800255e <HAL_GPIO_Init+0x222>
 8002554:	2302      	movs	r3, #2
 8002556:	e002      	b.n	800255e <HAL_GPIO_Init+0x222>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_GPIO_Init+0x222>
 800255c:	2300      	movs	r3, #0
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	f002 0203 	and.w	r2, r2, #3
 8002564:	0092      	lsls	r2, r2, #2
 8002566:	4093      	lsls	r3, r2
 8002568:	461a      	mov	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	4936      	ldr	r1, [pc, #216]	; (800264c <HAL_GPIO_Init+0x310>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800257e:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <HAL_GPIO_Init+0x338>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x266>
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4a34      	ldr	r2, [pc, #208]	; (8002674 <HAL_GPIO_Init+0x338>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	6093      	str	r3, [r2, #8]
 80025a8:	4b32      	ldr	r3, [pc, #200]	; (8002674 <HAL_GPIO_Init+0x338>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x290>
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	4a29      	ldr	r2, [pc, #164]	; (8002674 <HAL_GPIO_Init+0x338>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	60d3      	str	r3, [r2, #12]
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <HAL_GPIO_Init+0x338>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2ba>
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <HAL_GPIO_Init+0x338>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	6053      	str	r3, [r2, #4]
 80025fc:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_GPIO_Init+0x338>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x2e4>
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <HAL_GPIO_Init+0x338>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	f47f ae88 	bne.w	800234c <HAL_GPIO_Init+0x10>
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40023800 	.word	0x40023800
 800264c:	40013800 	.word	0x40013800
 8002650:	40020000 	.word	0x40020000
 8002654:	40020400 	.word	0x40020400
 8002658:	40020800 	.word	0x40020800
 800265c:	40020c00 	.word	0x40020c00
 8002660:	40021000 	.word	0x40021000
 8002664:	40021400 	.word	0x40021400
 8002668:	40021800 	.word	0x40021800
 800266c:	40021c00 	.word	0x40021c00
 8002670:	40022000 	.word	0x40022000
 8002674:	40013c00 	.word	0x40013c00

08002678 <HAL_GPIO_WritePin>:
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
 8002684:	4613      	mov	r3, r2
 8002686:	707b      	strb	r3, [r7, #1]
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_WritePin+0x1e>
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	619a      	str	r2, [r3, #24]
 8002694:	e003      	b.n	800269e <HAL_GPIO_WritePin+0x26>
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	041a      	lsls	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	619a      	str	r2, [r3, #24]
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_RCC_OscConfig>:
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x12>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e23b      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d050      	beq.n	8002768 <HAL_RCC_OscConfig+0xc0>
 80026c6:	4b9e      	ldr	r3, [pc, #632]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d00c      	beq.n	80026ec <HAL_RCC_OscConfig+0x44>
 80026d2:	4b9b      	ldr	r3, [pc, #620]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
 80026de:	4b98      	ldr	r3, [pc, #608]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
 80026ec:	4b94      	ldr	r3, [pc, #592]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d036      	beq.n	8002766 <HAL_RCC_OscConfig+0xbe>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d132      	bne.n	8002766 <HAL_RCC_OscConfig+0xbe>
 8002700:	2301      	movs	r3, #1
 8002702:	e216      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4b8e      	ldr	r3, [pc, #568]	; (8002944 <HAL_RCC_OscConfig+0x29c>)
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d013      	beq.n	800273e <HAL_RCC_OscConfig+0x96>
 8002716:	f7fe fc07 	bl	8000f28 <HAL_GetTick>
 800271a:	6238      	str	r0, [r7, #32]
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x88>
 800271e:	f7fe fc03 	bl	8000f28 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	; 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x88>
 800272c:	2303      	movs	r3, #3
 800272e:	e200      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002730:	4b83      	ldr	r3, [pc, #524]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x76>
 800273c:	e014      	b.n	8002768 <HAL_RCC_OscConfig+0xc0>
 800273e:	f7fe fbf3 	bl	8000f28 <HAL_GetTick>
 8002742:	6238      	str	r0, [r7, #32]
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0xb0>
 8002746:	f7fe fbef 	bl	8000f28 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b64      	cmp	r3, #100	; 0x64
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0xb0>
 8002754:	2303      	movs	r3, #3
 8002756:	e1ec      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002758:	4b79      	ldr	r3, [pc, #484]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x9e>
 8002764:	e000      	b.n	8002768 <HAL_RCC_OscConfig+0xc0>
 8002766:	bf00      	nop
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d077      	beq.n	8002864 <HAL_RCC_OscConfig+0x1bc>
 8002774:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_RCC_OscConfig+0xf0>
 8002780:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d126      	bne.n	80027da <HAL_RCC_OscConfig+0x132>
 800278c:	4b6c      	ldr	r3, [pc, #432]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d120      	bne.n	80027da <HAL_RCC_OscConfig+0x132>
 8002798:	4b69      	ldr	r3, [pc, #420]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_OscConfig+0x108>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0x108>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e1c0      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 80027b0:	4b63      	ldr	r3, [pc, #396]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	21f8      	movs	r1, #248	; 0xf8
 80027be:	61b9      	str	r1, [r7, #24]
 80027c0:	69b9      	ldr	r1, [r7, #24]
 80027c2:	fa91 f1a1 	rbit	r1, r1
 80027c6:	6179      	str	r1, [r7, #20]
 80027c8:	6979      	ldr	r1, [r7, #20]
 80027ca:	fab1 f181 	clz	r1, r1
 80027ce:	b2c9      	uxtb	r1, r1
 80027d0:	408b      	lsls	r3, r1
 80027d2:	495b      	ldr	r1, [pc, #364]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e044      	b.n	8002864 <HAL_RCC_OscConfig+0x1bc>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02a      	beq.n	8002838 <HAL_RCC_OscConfig+0x190>
 80027e2:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_OscConfig+0x2a0>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f7fe fb9e 	bl	8000f28 <HAL_GetTick>
 80027ec:	6238      	str	r0, [r7, #32]
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x15a>
 80027f0:	f7fe fb9a 	bl	8000f28 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x15a>
 80027fe:	2303      	movs	r3, #3
 8002800:	e197      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002802:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x148>
 800280e:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	21f8      	movs	r1, #248	; 0xf8
 800281c:	6139      	str	r1, [r7, #16]
 800281e:	6939      	ldr	r1, [r7, #16]
 8002820:	fa91 f1a1 	rbit	r1, r1
 8002824:	60f9      	str	r1, [r7, #12]
 8002826:	68f9      	ldr	r1, [r7, #12]
 8002828:	fab1 f181 	clz	r1, r1
 800282c:	b2c9      	uxtb	r1, r1
 800282e:	408b      	lsls	r3, r1
 8002830:	4943      	ldr	r1, [pc, #268]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
 8002836:	e015      	b.n	8002864 <HAL_RCC_OscConfig+0x1bc>
 8002838:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_RCC_OscConfig+0x2a0>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f7fe fb73 	bl	8000f28 <HAL_GetTick>
 8002842:	6238      	str	r0, [r7, #32]
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x1b0>
 8002846:	f7fe fb6f 	bl	8000f28 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x1b0>
 8002854:	2303      	movs	r3, #3
 8002856:	e16c      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x19e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d030      	beq.n	80028d2 <HAL_RCC_OscConfig+0x22a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d016      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1fe>
 8002878:	4b34      	ldr	r3, [pc, #208]	; (800294c <HAL_RCC_OscConfig+0x2a4>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f7fe fb53 	bl	8000f28 <HAL_GetTick>
 8002882:	6238      	str	r0, [r7, #32]
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x1f0>
 8002886:	f7fe fb4f 	bl	8000f28 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x1f0>
 8002894:	2303      	movs	r3, #3
 8002896:	e14c      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 800289a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x1de>
 80028a4:	e015      	b.n	80028d2 <HAL_RCC_OscConfig+0x22a>
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <HAL_RCC_OscConfig+0x2a4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f7fe fb3c 	bl	8000f28 <HAL_GetTick>
 80028b0:	6238      	str	r0, [r7, #32]
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x21e>
 80028b4:	f7fe fb38 	bl	8000f28 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x21e>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e135      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x20c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8087 	beq.w	80029ee <HAL_RCC_OscConfig+0x346>
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d110      	bne.n	8002914 <HAL_RCC_OscConfig+0x26c>
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_RCC_OscConfig+0x298>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_RCC_OscConfig+0x2a8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <HAL_RCC_OscConfig+0x2a8>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_OscConfig+0x2a8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d122      	bne.n	8002972 <HAL_RCC_OscConfig+0x2ca>
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_RCC_OscConfig+0x2a8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_RCC_OscConfig+0x2a8>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	f7fe faf6 	bl	8000f28 <HAL_GetTick>
 800293c:	6238      	str	r0, [r7, #32]
 800293e:	e012      	b.n	8002966 <HAL_RCC_OscConfig+0x2be>
 8002940:	40023800 	.word	0x40023800
 8002944:	40023802 	.word	0x40023802
 8002948:	42470000 	.word	0x42470000
 800294c:	42470e80 	.word	0x42470e80
 8002950:	40007000 	.word	0x40007000
 8002954:	f7fe fae8 	bl	8000f28 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x2be>
 8002962:	2303      	movs	r3, #3
 8002964:	e0e5      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002966:	4b75      	ldr	r3, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x494>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x2ac>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	4b72      	ldr	r3, [pc, #456]	; (8002b40 <HAL_RCC_OscConfig+0x498>)
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <HAL_RCC_OscConfig+0x308>
 8002984:	f7fe fad0 	bl	8000f28 <HAL_GetTick>
 8002988:	6238      	str	r0, [r7, #32]
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x2fa>
 800298c:	f7fe facc 	bl	8000f28 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x2fa>
 800299e:	2303      	movs	r3, #3
 80029a0:	e0c7      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 80029a2:	4b68      	ldr	r3, [pc, #416]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0ee      	beq.n	800298c <HAL_RCC_OscConfig+0x2e4>
 80029ae:	e014      	b.n	80029da <HAL_RCC_OscConfig+0x332>
 80029b0:	f7fe faba 	bl	8000f28 <HAL_GetTick>
 80029b4:	6238      	str	r0, [r7, #32]
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x326>
 80029b8:	f7fe fab6 	bl	8000f28 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x326>
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0b1      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 80029ce:	4b5d      	ldr	r3, [pc, #372]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ee      	bne.n	80029b8 <HAL_RCC_OscConfig+0x310>
 80029da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCC_OscConfig+0x346>
 80029e2:	4b58      	ldr	r3, [pc, #352]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a57      	ldr	r2, [pc, #348]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 809c 	beq.w	8002b30 <HAL_RCC_OscConfig+0x488>
 80029f8:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d061      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x420>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d146      	bne.n	8002a9a <HAL_RCC_OscConfig+0x3f2>
 8002a0c:	4b4e      	ldr	r3, [pc, #312]	; (8002b48 <HAL_RCC_OscConfig+0x4a0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f7fe fa89 	bl	8000f28 <HAL_GetTick>
 8002a16:	6238      	str	r0, [r7, #32]
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x384>
 8002a1a:	f7fe fa85 	bl	8000f28 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	; 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x384>
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e082      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002a2c:	4b45      	ldr	r3, [pc, #276]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x372>
 8002a38:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <HAL_RCC_OscConfig+0x4a4>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	69d1      	ldr	r1, [r2, #28]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6a12      	ldr	r2, [r2, #32]
 8002a48:	4311      	orrs	r1, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4e:	0192      	lsls	r2, r2, #6
 8002a50:	4311      	orrs	r1, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a56:	0612      	lsls	r2, r2, #24
 8002a58:	4311      	orrs	r1, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a5e:	0852      	lsrs	r2, r2, #1
 8002a60:	3a01      	subs	r2, #1
 8002a62:	0412      	lsls	r2, r2, #16
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4937      	ldr	r1, [pc, #220]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
 8002a6c:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_RCC_OscConfig+0x4a0>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	f7fe fa59 	bl	8000f28 <HAL_GetTick>
 8002a76:	6238      	str	r0, [r7, #32]
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x3e4>
 8002a7a:	f7fe fa55 	bl	8000f28 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x3e4>
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e052      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x3d2>
 8002a98:	e04a      	b.n	8002b30 <HAL_RCC_OscConfig+0x488>
 8002a9a:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x4a0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f7fe fa42 	bl	8000f28 <HAL_GetTick>
 8002aa4:	6238      	str	r0, [r7, #32]
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x412>
 8002aa8:	f7fe fa3e 	bl	8000f28 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x412>
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e03b      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x400>
 8002ac6:	e033      	b.n	8002b30 <HAL_RCC_OscConfig+0x488>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x42c>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e02e      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_RCC_OscConfig+0x49c>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d121      	bne.n	8002b2c <HAL_RCC_OscConfig+0x484>
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d11a      	bne.n	8002b2c <HAL_RCC_OscConfig+0x484>
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b02:	0192      	lsls	r2, r2, #6
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d111      	bne.n	8002b2c <HAL_RCC_OscConfig+0x484>
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x484>
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_OscConfig+0x488>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x48a>
 8002b30:	2300      	movs	r3, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	3728      	adds	r7, #40	; 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	40023870 	.word	0x40023870
 8002b44:	40023800 	.word	0x40023800
 8002b48:	42470060 	.word	0x42470060
 8002b4c:	f0bc8000 	.word	0xf0bc8000

08002b50 <HAL_RCC_ClockConfig>:
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d2      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
 8002b64:	4b6b      	ldr	r3, [pc, #428]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d90c      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
 8002b72:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	4b66      	ldr	r3, [pc, #408]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0be      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x8a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x60>
 8002ba4:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a5b      	ldr	r2, [pc, #364]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bae:	6093      	str	r3, [r2, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x78>
 8002bbc:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a55      	ldr	r2, [pc, #340]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc6:	6093      	str	r3, [r2, #8]
 8002bc8:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4950      	ldr	r1, [pc, #320]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d040      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x118>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xae>
 8002bee:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e085      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xc6>
 8002c06:	4b44      	ldr	r3, [pc, #272]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e079      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
 8002c16:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e071      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
 8002c26:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4939      	ldr	r1, [pc, #228]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
 8002c38:	f7fe f976 	bl	8000f28 <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x106>
 8002c40:	f7fe f972 	bl	8000f28 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x106>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e059      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
 8002c56:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf0>
 8002c68:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d20c      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x140>
 8002c76:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x140>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e03c      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x15e>
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	491b      	ldr	r1, [pc, #108]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_RCC_ClockConfig+0x17e>
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4913      	ldr	r1, [pc, #76]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
 8002cce:	f000 f82b 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cdc:	22f0      	movs	r2, #240	; 0xf0
 8002cde:	613a      	str	r2, [r7, #16]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	60fa      	str	r2, [r7, #12]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	40d3      	lsrs	r3, r2
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x1cc>)
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cfa:	4a09      	ldr	r2, [pc, #36]	; (8002d20 <HAL_RCC_ClockConfig+0x1d0>)
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_ClockConfig+0x1d4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f8ce 	bl	8000ea4 <HAL_InitTick>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023c00 	.word	0x40023c00
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	0800fa64 	.word	0x0800fa64
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000004 	.word	0x20000004

08002d28 <HAL_RCC_GetSysClockFreq>:
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	b094      	sub	sp, #80	; 0x50
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	2300      	movs	r3, #0
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
 8002d34:	2300      	movs	r3, #0
 8002d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d38:	2300      	movs	r3, #0
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d40:	4b7c      	ldr	r3, [pc, #496]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d00d      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x40>
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	f200 80e7 	bhi.w	8002f20 <HAL_RCC_GetSysClockFreq+0x1f8>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x34>
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5a:	e0e1      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x1f8>
 8002d5c:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x210>)
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d60:	e0e1      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1fe>
 8002d62:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x214>)
 8002d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d66:	e0de      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1fe>
 8002d68:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d70:	647b      	str	r3, [r7, #68]	; 0x44
 8002d72:	4b70      	ldr	r3, [pc, #448]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d065      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0x122>
 8002d7e:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	2200      	movs	r2, #0
 8002d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
 8002d92:	2300      	movs	r3, #0
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
 8002d96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	462b      	mov	r3, r5
 8002d9e:	f04f 0000 	mov.w	r0, #0
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	0159      	lsls	r1, r3, #5
 8002da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dac:	0150      	lsls	r0, r2, #5
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4621      	mov	r1, r4
 8002db4:	1a51      	subs	r1, r2, r1
 8002db6:	6139      	str	r1, [r7, #16]
 8002db8:	4629      	mov	r1, r5
 8002dba:	eb63 0301 	sbc.w	r3, r3, r1
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dcc:	4659      	mov	r1, fp
 8002dce:	018b      	lsls	r3, r1, #6
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	018a      	lsls	r2, r1, #6
 8002dda:	46d4      	mov	ip, sl
 8002ddc:	ebb2 080c 	subs.w	r8, r2, ip
 8002de0:	4659      	mov	r1, fp
 8002de2:	eb63 0901 	sbc.w	r9, r3, r1
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dfa:	4690      	mov	r8, r2
 8002dfc:	4699      	mov	r9, r3
 8002dfe:	4623      	mov	r3, r4
 8002e00:	eb18 0303 	adds.w	r3, r8, r3
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	462b      	mov	r3, r5
 8002e08:	eb49 0303 	adc.w	r3, r9, r3
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	024b      	lsls	r3, r1, #9
 8002e1e:	4620      	mov	r0, r4
 8002e20:	4629      	mov	r1, r5
 8002e22:	4604      	mov	r4, r0
 8002e24:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002e28:	4601      	mov	r1, r0
 8002e2a:	024a      	lsls	r2, r1, #9
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e32:	2200      	movs	r2, #0
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e3c:	f7fd f9ca 	bl	80001d4 <__aeabi_uldivmod>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4613      	mov	r3, r2
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e48:	e05c      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1dc>
 8002e4a:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	2200      	movs	r2, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	4611      	mov	r1, r2
 8002e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e64:	4642      	mov	r2, r8
 8002e66:	464b      	mov	r3, r9
 8002e68:	f04f 0000 	mov.w	r0, #0
 8002e6c:	f04f 0100 	mov.w	r1, #0
 8002e70:	0159      	lsls	r1, r3, #5
 8002e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e76:	0150      	lsls	r0, r2, #5
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	46c4      	mov	ip, r8
 8002e7e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002e82:	4640      	mov	r0, r8
 8002e84:	4649      	mov	r1, r9
 8002e86:	468c      	mov	ip, r1
 8002e88:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ea0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ea4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	00eb      	lsls	r3, r5, #3
 8002eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eb6:	00e2      	lsls	r2, r4, #3
 8002eb8:	4614      	mov	r4, r2
 8002eba:	461d      	mov	r5, r3
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	18e3      	adds	r3, r4, r3
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	eb45 0303 	adc.w	r3, r5, r3
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	028b      	lsls	r3, r1, #10
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	4604      	mov	r4, r0
 8002ee0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	028a      	lsls	r2, r1, #10
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	61fa      	str	r2, [r7, #28]
 8002ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef8:	f7fd f96c 	bl	80001d4 <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4613      	mov	r3, r2
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	643b      	str	r3, [r7, #64]	; 0x40
 8002f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f1e:	e002      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1fe>
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x210>)
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f24:	bf00      	nop
 8002f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3750      	adds	r7, #80	; 0x50
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	007a1200 	.word	0x007a1200

08002f40 <HAL_RCC_GetHCLKFreq>:
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	20000000 	.word	0x20000000

08002f54 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002f5a:	4b8d      	ldr	r3, [pc, #564]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002f5c:	22c0      	movs	r2, #192	; 0xc0
 8002f5e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002f60:	4b8b      	ldr	r3, [pc, #556]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002f62:	22a8      	movs	r2, #168	; 0xa8
 8002f64:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002f66:	4b8a      	ldr	r3, [pc, #552]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8002f6c:	4b88      	ldr	r3, [pc, #544]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002f6e:	2202      	movs	r2, #2
 8002f70:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002f72:	4b88      	ldr	r3, [pc, #544]	; (8003194 <MX_LWIP_Init+0x240>)
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002f78:	4b86      	ldr	r3, [pc, #536]	; (8003194 <MX_LWIP_Init+0x240>)
 8002f7a:	22ff      	movs	r2, #255	; 0xff
 8002f7c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002f7e:	4b85      	ldr	r3, [pc, #532]	; (8003194 <MX_LWIP_Init+0x240>)
 8002f80:	22ff      	movs	r2, #255	; 0xff
 8002f82:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002f84:	4b83      	ldr	r3, [pc, #524]	; (8003194 <MX_LWIP_Init+0x240>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002f8a:	4b83      	ldr	r3, [pc, #524]	; (8003198 <MX_LWIP_Init+0x244>)
 8002f8c:	22c0      	movs	r2, #192	; 0xc0
 8002f8e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002f90:	4b81      	ldr	r3, [pc, #516]	; (8003198 <MX_LWIP_Init+0x244>)
 8002f92:	22a8      	movs	r2, #168	; 0xa8
 8002f94:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002f96:	4b80      	ldr	r3, [pc, #512]	; (8003198 <MX_LWIP_Init+0x244>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002f9c:	4b7e      	ldr	r3, [pc, #504]	; (8003198 <MX_LWIP_Init+0x244>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002fa2:	f000 fccd 	bl	8003940 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	061a      	lsls	r2, r3, #24
 8002fac:	4b78      	ldr	r3, [pc, #480]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	4b76      	ldr	r3, [pc, #472]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002fb6:	789b      	ldrb	r3, [r3, #2]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	4a74      	ldr	r2, [pc, #464]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002fbe:	78d2      	ldrb	r2, [r2, #3]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	061a      	lsls	r2, r3, #24
 8002fc4:	4b72      	ldr	r3, [pc, #456]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	0619      	lsls	r1, r3, #24
 8002fca:	4b71      	ldr	r3, [pc, #452]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	4319      	orrs	r1, r3
 8002fd2:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002fd4:	789b      	ldrb	r3, [r3, #2]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	496d      	ldr	r1, [pc, #436]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002fdc:	78c9      	ldrb	r1, [r1, #3]
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	4b69      	ldr	r3, [pc, #420]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	0619      	lsls	r1, r3, #24
 8002fee:	4b68      	ldr	r3, [pc, #416]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	4319      	orrs	r1, r3
 8002ff6:	4b66      	ldr	r3, [pc, #408]	; (8003190 <MX_LWIP_Init+0x23c>)
 8002ff8:	789b      	ldrb	r3, [r3, #2]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	4964      	ldr	r1, [pc, #400]	; (8003190 <MX_LWIP_Init+0x23c>)
 8003000:	78c9      	ldrb	r1, [r1, #3]
 8003002:	430b      	orrs	r3, r1
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800300a:	431a      	orrs	r2, r3
 800300c:	4b60      	ldr	r3, [pc, #384]	; (8003190 <MX_LWIP_Init+0x23c>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	0619      	lsls	r1, r3, #24
 8003012:	4b5f      	ldr	r3, [pc, #380]	; (8003190 <MX_LWIP_Init+0x23c>)
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	4319      	orrs	r1, r3
 800301a:	4b5d      	ldr	r3, [pc, #372]	; (8003190 <MX_LWIP_Init+0x23c>)
 800301c:	789b      	ldrb	r3, [r3, #2]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	430b      	orrs	r3, r1
 8003022:	495b      	ldr	r1, [pc, #364]	; (8003190 <MX_LWIP_Init+0x23c>)
 8003024:	78c9      	ldrb	r1, [r1, #3]
 8003026:	430b      	orrs	r3, r1
 8003028:	0e1b      	lsrs	r3, r3, #24
 800302a:	4313      	orrs	r3, r2
 800302c:	4a5b      	ldr	r2, [pc, #364]	; (800319c <MX_LWIP_Init+0x248>)
 800302e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003030:	4b58      	ldr	r3, [pc, #352]	; (8003194 <MX_LWIP_Init+0x240>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	061a      	lsls	r2, r3, #24
 8003036:	4b57      	ldr	r3, [pc, #348]	; (8003194 <MX_LWIP_Init+0x240>)
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	431a      	orrs	r2, r3
 800303e:	4b55      	ldr	r3, [pc, #340]	; (8003194 <MX_LWIP_Init+0x240>)
 8003040:	789b      	ldrb	r3, [r3, #2]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	4313      	orrs	r3, r2
 8003046:	4a53      	ldr	r2, [pc, #332]	; (8003194 <MX_LWIP_Init+0x240>)
 8003048:	78d2      	ldrb	r2, [r2, #3]
 800304a:	4313      	orrs	r3, r2
 800304c:	061a      	lsls	r2, r3, #24
 800304e:	4b51      	ldr	r3, [pc, #324]	; (8003194 <MX_LWIP_Init+0x240>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	0619      	lsls	r1, r3, #24
 8003054:	4b4f      	ldr	r3, [pc, #316]	; (8003194 <MX_LWIP_Init+0x240>)
 8003056:	785b      	ldrb	r3, [r3, #1]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	4319      	orrs	r1, r3
 800305c:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <MX_LWIP_Init+0x240>)
 800305e:	789b      	ldrb	r3, [r3, #2]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	430b      	orrs	r3, r1
 8003064:	494b      	ldr	r1, [pc, #300]	; (8003194 <MX_LWIP_Init+0x240>)
 8003066:	78c9      	ldrb	r1, [r1, #3]
 8003068:	430b      	orrs	r3, r1
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003070:	431a      	orrs	r2, r3
 8003072:	4b48      	ldr	r3, [pc, #288]	; (8003194 <MX_LWIP_Init+0x240>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	0619      	lsls	r1, r3, #24
 8003078:	4b46      	ldr	r3, [pc, #280]	; (8003194 <MX_LWIP_Init+0x240>)
 800307a:	785b      	ldrb	r3, [r3, #1]
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	4319      	orrs	r1, r3
 8003080:	4b44      	ldr	r3, [pc, #272]	; (8003194 <MX_LWIP_Init+0x240>)
 8003082:	789b      	ldrb	r3, [r3, #2]
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	430b      	orrs	r3, r1
 8003088:	4942      	ldr	r1, [pc, #264]	; (8003194 <MX_LWIP_Init+0x240>)
 800308a:	78c9      	ldrb	r1, [r1, #3]
 800308c:	430b      	orrs	r3, r1
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003094:	431a      	orrs	r2, r3
 8003096:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <MX_LWIP_Init+0x240>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	0619      	lsls	r1, r3, #24
 800309c:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <MX_LWIP_Init+0x240>)
 800309e:	785b      	ldrb	r3, [r3, #1]
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	4319      	orrs	r1, r3
 80030a4:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <MX_LWIP_Init+0x240>)
 80030a6:	789b      	ldrb	r3, [r3, #2]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	430b      	orrs	r3, r1
 80030ac:	4939      	ldr	r1, [pc, #228]	; (8003194 <MX_LWIP_Init+0x240>)
 80030ae:	78c9      	ldrb	r1, [r1, #3]
 80030b0:	430b      	orrs	r3, r1
 80030b2:	0e1b      	lsrs	r3, r3, #24
 80030b4:	4313      	orrs	r3, r2
 80030b6:	4a3a      	ldr	r2, [pc, #232]	; (80031a0 <MX_LWIP_Init+0x24c>)
 80030b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80030ba:	4b37      	ldr	r3, [pc, #220]	; (8003198 <MX_LWIP_Init+0x244>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	061a      	lsls	r2, r3, #24
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <MX_LWIP_Init+0x244>)
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	431a      	orrs	r2, r3
 80030c8:	4b33      	ldr	r3, [pc, #204]	; (8003198 <MX_LWIP_Init+0x244>)
 80030ca:	789b      	ldrb	r3, [r3, #2]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	4313      	orrs	r3, r2
 80030d0:	4a31      	ldr	r2, [pc, #196]	; (8003198 <MX_LWIP_Init+0x244>)
 80030d2:	78d2      	ldrb	r2, [r2, #3]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	061a      	lsls	r2, r3, #24
 80030d8:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <MX_LWIP_Init+0x244>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	0619      	lsls	r1, r3, #24
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <MX_LWIP_Init+0x244>)
 80030e0:	785b      	ldrb	r3, [r3, #1]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	4319      	orrs	r1, r3
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <MX_LWIP_Init+0x244>)
 80030e8:	789b      	ldrb	r3, [r3, #2]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	430b      	orrs	r3, r1
 80030ee:	492a      	ldr	r1, [pc, #168]	; (8003198 <MX_LWIP_Init+0x244>)
 80030f0:	78c9      	ldrb	r1, [r1, #3]
 80030f2:	430b      	orrs	r3, r1
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030fa:	431a      	orrs	r2, r3
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <MX_LWIP_Init+0x244>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	0619      	lsls	r1, r3, #24
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <MX_LWIP_Init+0x244>)
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	4319      	orrs	r1, r3
 800310a:	4b23      	ldr	r3, [pc, #140]	; (8003198 <MX_LWIP_Init+0x244>)
 800310c:	789b      	ldrb	r3, [r3, #2]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	430b      	orrs	r3, r1
 8003112:	4921      	ldr	r1, [pc, #132]	; (8003198 <MX_LWIP_Init+0x244>)
 8003114:	78c9      	ldrb	r1, [r1, #3]
 8003116:	430b      	orrs	r3, r1
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800311e:	431a      	orrs	r2, r3
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <MX_LWIP_Init+0x244>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	0619      	lsls	r1, r3, #24
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <MX_LWIP_Init+0x244>)
 8003128:	785b      	ldrb	r3, [r3, #1]
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	4319      	orrs	r1, r3
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <MX_LWIP_Init+0x244>)
 8003130:	789b      	ldrb	r3, [r3, #2]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	430b      	orrs	r3, r1
 8003136:	4918      	ldr	r1, [pc, #96]	; (8003198 <MX_LWIP_Init+0x244>)
 8003138:	78c9      	ldrb	r1, [r1, #3]
 800313a:	430b      	orrs	r3, r1
 800313c:	0e1b      	lsrs	r3, r3, #24
 800313e:	4313      	orrs	r3, r2
 8003140:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <MX_LWIP_Init+0x250>)
 8003142:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003144:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <MX_LWIP_Init+0x254>)
 8003146:	9302      	str	r3, [sp, #8]
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <MX_LWIP_Init+0x258>)
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	2300      	movs	r3, #0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <MX_LWIP_Init+0x250>)
 8003152:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <MX_LWIP_Init+0x24c>)
 8003154:	4911      	ldr	r1, [pc, #68]	; (800319c <MX_LWIP_Init+0x248>)
 8003156:	4816      	ldr	r0, [pc, #88]	; (80031b0 <MX_LWIP_Init+0x25c>)
 8003158:	f000 fff2 	bl	8004140 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800315c:	4814      	ldr	r0, [pc, #80]	; (80031b0 <MX_LWIP_Init+0x25c>)
 800315e:	f001 f8d1 	bl	8004304 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <MX_LWIP_Init+0x25c>)
 8003164:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003174:	480e      	ldr	r0, [pc, #56]	; (80031b0 <MX_LWIP_Init+0x25c>)
 8003176:	f001 f8d3 	bl	8004320 <netif_set_up>
 800317a:	e002      	b.n	8003182 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800317c:	480c      	ldr	r0, [pc, #48]	; (80031b0 <MX_LWIP_Init+0x25c>)
 800317e:	f001 f913 	bl	80043a8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003182:	490c      	ldr	r1, [pc, #48]	; (80031b4 <MX_LWIP_Init+0x260>)
 8003184:	480a      	ldr	r0, [pc, #40]	; (80031b0 <MX_LWIP_Init+0x25c>)
 8003186:	f001 f931 	bl	80043ec <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800318a:	bf00      	nop
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	200000d0 	.word	0x200000d0
 8003194:	200000d4 	.word	0x200000d4
 8003198:	200000d8 	.word	0x200000d8
 800319c:	200000c4 	.word	0x200000c4
 80031a0:	200000c8 	.word	0x200000c8
 80031a4:	200000cc 	.word	0x200000cc
 80031a8:	0800ccc1 	.word	0x0800ccc1
 80031ac:	08003781 	.word	0x08003781
 80031b0:	20000090 	.word	0x20000090
 80031b4:	080037ed 	.word	0x080037ed

080031b8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08e      	sub	sp, #56	; 0x38
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a55      	ldr	r2, [pc, #340]	; (800332c <HAL_ETH_MspInit+0x174>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f040 80a4 	bne.w	8003324 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80031dc:	2300      	movs	r3, #0
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	4b53      	ldr	r3, [pc, #332]	; (8003330 <HAL_ETH_MspInit+0x178>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	4a52      	ldr	r2, [pc, #328]	; (8003330 <HAL_ETH_MspInit+0x178>)
 80031e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ea:	6313      	str	r3, [r2, #48]	; 0x30
 80031ec:	4b50      	ldr	r3, [pc, #320]	; (8003330 <HAL_ETH_MspInit+0x178>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HAL_ETH_MspInit+0x178>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	4a4b      	ldr	r2, [pc, #300]	; (8003330 <HAL_ETH_MspInit+0x178>)
 8003202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003206:	6313      	str	r3, [r2, #48]	; 0x30
 8003208:	4b49      	ldr	r3, [pc, #292]	; (8003330 <HAL_ETH_MspInit+0x178>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	4b45      	ldr	r3, [pc, #276]	; (8003330 <HAL_ETH_MspInit+0x178>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4a44      	ldr	r2, [pc, #272]	; (8003330 <HAL_ETH_MspInit+0x178>)
 800321e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003222:	6313      	str	r3, [r2, #48]	; 0x30
 8003224:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_ETH_MspInit+0x178>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <HAL_ETH_MspInit+0x178>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	4a3d      	ldr	r2, [pc, #244]	; (8003330 <HAL_ETH_MspInit+0x178>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	6313      	str	r3, [r2, #48]	; 0x30
 8003240:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_ETH_MspInit+0x178>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	4b37      	ldr	r3, [pc, #220]	; (8003330 <HAL_ETH_MspInit+0x178>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	4a36      	ldr	r2, [pc, #216]	; (8003330 <HAL_ETH_MspInit+0x178>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6313      	str	r3, [r2, #48]	; 0x30
 800325c:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_ETH_MspInit+0x178>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <HAL_ETH_MspInit+0x178>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <HAL_ETH_MspInit+0x178>)
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	6313      	str	r3, [r2, #48]	; 0x30
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <HAL_ETH_MspInit+0x178>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	4b29      	ldr	r3, [pc, #164]	; (8003330 <HAL_ETH_MspInit+0x178>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a28      	ldr	r2, [pc, #160]	; (8003330 <HAL_ETH_MspInit+0x178>)
 800328e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003292:	6313      	str	r3, [r2, #48]	; 0x30
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_ETH_MspInit+0x178>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80032a0:	2332      	movs	r3, #50	; 0x32
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032b0:	230b      	movs	r3, #11
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b8:	4619      	mov	r1, r3
 80032ba:	481e      	ldr	r0, [pc, #120]	; (8003334 <HAL_ETH_MspInit+0x17c>)
 80032bc:	f7ff f83e 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032c0:	2386      	movs	r3, #134	; 0x86
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032cc:	2303      	movs	r3, #3
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032d0:	230b      	movs	r3, #11
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d8:	4619      	mov	r1, r3
 80032da:	4817      	ldr	r0, [pc, #92]	; (8003338 <HAL_ETH_MspInit+0x180>)
 80032dc:	f7ff f82e 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80032e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ee:	2303      	movs	r3, #3
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032f2:	230b      	movs	r3, #11
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80032f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032fa:	4619      	mov	r1, r3
 80032fc:	480f      	ldr	r0, [pc, #60]	; (800333c <HAL_ETH_MspInit+0x184>)
 80032fe:	f7ff f81d 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003302:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003310:	2303      	movs	r3, #3
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003314:	230b      	movs	r3, #11
 8003316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331c:	4619      	mov	r1, r3
 800331e:	4808      	ldr	r0, [pc, #32]	; (8003340 <HAL_ETH_MspInit+0x188>)
 8003320:	f7ff f80c 	bl	800233c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003324:	bf00      	nop
 8003326:	3738      	adds	r7, #56	; 0x38
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40028000 	.word	0x40028000
 8003330:	40023800 	.word	0x40023800
 8003334:	40020800 	.word	0x40020800
 8003338:	40020000 	.word	0x40020000
 800333c:	40020400 	.word	0x40020400
 8003340:	40021800 	.word	0x40021800

08003344 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003350:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <low_level_init+0x144>)
 8003352:	4a4e      	ldr	r2, [pc, #312]	; (800348c <low_level_init+0x148>)
 8003354:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003356:	4b4c      	ldr	r3, [pc, #304]	; (8003488 <low_level_init+0x144>)
 8003358:	2201      	movs	r2, #1
 800335a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800335c:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <low_level_init+0x144>)
 800335e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003362:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003364:	4b48      	ldr	r3, [pc, #288]	; (8003488 <low_level_init+0x144>)
 8003366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800336a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800336c:	4b46      	ldr	r3, [pc, #280]	; (8003488 <low_level_init+0x144>)
 800336e:	2200      	movs	r2, #0
 8003370:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003372:	2300      	movs	r3, #0
 8003374:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800337a:	23e1      	movs	r3, #225	; 0xe1
 800337c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800337e:	2300      	movs	r3, #0
 8003380:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003382:	2300      	movs	r3, #0
 8003384:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003386:	2300      	movs	r3, #0
 8003388:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800338a:	4a3f      	ldr	r2, [pc, #252]	; (8003488 <low_level_init+0x144>)
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <low_level_init+0x144>)
 8003394:	2200      	movs	r2, #0
 8003396:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003398:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <low_level_init+0x144>)
 800339a:	2200      	movs	r2, #0
 800339c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800339e:	4b3a      	ldr	r3, [pc, #232]	; (8003488 <low_level_init+0x144>)
 80033a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033a4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80033a6:	4838      	ldr	r0, [pc, #224]	; (8003488 <low_level_init+0x144>)
 80033a8:	f7fd fed0 	bl	800114c <HAL_ETH_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80033c8:	2304      	movs	r3, #4
 80033ca:	4a31      	ldr	r2, [pc, #196]	; (8003490 <low_level_init+0x14c>)
 80033cc:	4931      	ldr	r1, [pc, #196]	; (8003494 <low_level_init+0x150>)
 80033ce:	482e      	ldr	r0, [pc, #184]	; (8003488 <low_level_init+0x144>)
 80033d0:	f7fe f848 	bl	8001464 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80033d4:	2304      	movs	r3, #4
 80033d6:	4a30      	ldr	r2, [pc, #192]	; (8003498 <low_level_init+0x154>)
 80033d8:	4930      	ldr	r1, [pc, #192]	; (800349c <low_level_init+0x158>)
 80033da:	482b      	ldr	r0, [pc, #172]	; (8003488 <low_level_init+0x144>)
 80033dc:	f7fe f8a9 	bl	8001532 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2206      	movs	r2, #6
 80033e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <low_level_init+0x144>)
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <low_level_init+0x144>)
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	785a      	ldrb	r2, [r3, #1]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003400:	4b21      	ldr	r3, [pc, #132]	; (8003488 <low_level_init+0x144>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	789a      	ldrb	r2, [r3, #2]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800340c:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <low_level_init+0x144>)
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	78da      	ldrb	r2, [r3, #3]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <low_level_init+0x144>)
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	791a      	ldrb	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003424:	4b18      	ldr	r3, [pc, #96]	; (8003488 <low_level_init+0x144>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	795a      	ldrb	r2, [r3, #5]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003436:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800343e:	f043 030a 	orr.w	r3, r3, #10
 8003442:	b2da      	uxtb	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800344a:	480f      	ldr	r0, [pc, #60]	; (8003488 <low_level_init+0x144>)
 800344c:	f7fe fb15 	bl	8001a7a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003450:	f107 0310 	add.w	r3, r7, #16
 8003454:	461a      	mov	r2, r3
 8003456:	211d      	movs	r1, #29
 8003458:	480b      	ldr	r0, [pc, #44]	; (8003488 <low_level_init+0x144>)
 800345a:	f7fe fa40 	bl	80018de <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f043 030b 	orr.w	r3, r3, #11
 8003464:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	461a      	mov	r2, r3
 800346a:	211d      	movs	r1, #29
 800346c:	4806      	ldr	r0, [pc, #24]	; (8003488 <low_level_init+0x144>)
 800346e:	f7fe fa9e 	bl	80019ae <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003472:	f107 0310 	add.w	r3, r7, #16
 8003476:	461a      	mov	r2, r3
 8003478:	211d      	movs	r1, #29
 800347a:	4803      	ldr	r0, [pc, #12]	; (8003488 <low_level_init+0x144>)
 800347c:	f7fe fa2f 	bl	80018de <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003480:	bf00      	nop
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000317c 	.word	0x2000317c
 800348c:	40028000 	.word	0x40028000
 8003490:	200019ac 	.word	0x200019ac
 8003494:	2000015c 	.word	0x2000015c
 8003498:	200001dc 	.word	0x200001dc
 800349c:	200000dc 	.word	0x200000dc

080034a0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80034aa:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <low_level_output+0x138>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80034c2:	4b45      	ldr	r3, [pc, #276]	; (80035d8 <low_level_output+0x138>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	e05a      	b.n	8003588 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	da03      	bge.n	80034e2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80034da:	23f8      	movs	r3, #248	; 0xf8
 80034dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80034e0:	e05c      	b.n	800359c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	895b      	ldrh	r3, [r3, #10]
 80034e6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80034ec:	e02f      	b.n	800354e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	18d0      	adds	r0, r2, r3
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	18d1      	adds	r1, r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003502:	3304      	adds	r3, #4
 8003504:	461a      	mov	r2, r3
 8003506:	f009 fe55 	bl	800d1b4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	da03      	bge.n	8003520 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003518:	23f8      	movs	r3, #248	; 0xf8
 800351a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800351e:	e03d      	b.n	800359c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003530:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800353c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003548:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003558:	4293      	cmp	r3, r2
 800355a:	d8c8      	bhi.n	80034ee <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	18d0      	adds	r0, r2, r3
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4619      	mov	r1, r3
 800356e:	f009 fe21 	bl	800d1b4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1a1      	bne.n	80034d2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800358e:	6979      	ldr	r1, [r7, #20]
 8003590:	4811      	ldr	r0, [pc, #68]	; (80035d8 <low_level_output+0x138>)
 8003592:	f7fe f839 	bl	8001608 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <low_level_output+0x138>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <low_level_output+0x138>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b6:	461a      	mov	r2, r3
 80035b8:	2320      	movs	r3, #32
 80035ba:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <low_level_output+0x138>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c4:	461a      	mov	r2, r3
 80035c6:	2300      	movs	r3, #0
 80035c8:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80035ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3728      	adds	r7, #40	; 0x28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000317c 	.word	0x2000317c

080035dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	; 0x30
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003600:	484e      	ldr	r0, [pc, #312]	; (800373c <low_level_input+0x160>)
 8003602:	f7fe f8e9 	bl	80017d8 <HAL_ETH_GetReceivedFrame>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <low_level_input+0x34>

    return NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	e090      	b.n	8003732 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003610:	4b4a      	ldr	r3, [pc, #296]	; (800373c <low_level_input+0x160>)
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003616:	4b49      	ldr	r3, [pc, #292]	; (800373c <low_level_input+0x160>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800361c:	89fb      	ldrh	r3, [r7, #14]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003622:	89fb      	ldrh	r3, [r7, #14]
 8003624:	2203      	movs	r2, #3
 8003626:	4619      	mov	r1, r3
 8003628:	2004      	movs	r0, #4
 800362a:	f000 ff1f 	bl	800446c <pbuf_alloc>
 800362e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d04b      	beq.n	80036ce <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <low_level_input+0x160>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
 8003644:	e040      	b.n	80036c8 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	895b      	ldrh	r3, [r3, #10]
 800364a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003650:	e021      	b.n	8003696 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	18d0      	adds	r0, r2, r3
 800365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	18d1      	adds	r1, r2, r3
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003666:	3304      	adds	r3, #4
 8003668:	461a      	mov	r2, r3
 800366a:	f009 fda3 	bl	800d1b4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	4413      	add	r3, r2
 8003680:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003684:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003690:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d8d6      	bhi.n	8003652 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	18d0      	adds	r0, r2, r3
 80036ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4619      	mov	r1, r3
 80036b6:	f009 fd7d 	bl	800d1b4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4413      	add	r3, r2
 80036c0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1bb      	bne.n	8003646 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <low_level_input+0x160>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e00b      	b.n	80036f2 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3301      	adds	r3, #1
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <low_level_input+0x160>)
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d3ee      	bcc.n	80036da <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <low_level_input+0x160>)
 80036fe:	2200      	movs	r2, #0
 8003700:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <low_level_input+0x160>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <low_level_input+0x160>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371c:	461a      	mov	r2, r3
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <low_level_input+0x160>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372a:	461a      	mov	r2, r3
 800372c:	2300      	movs	r3, #0
 800372e:	6093      	str	r3, [r2, #8]
  }
  return p;
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003732:	4618      	mov	r0, r3
 8003734:	3730      	adds	r7, #48	; 0x30
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2000317c 	.word	0x2000317c

08003740 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff47 	bl	80035dc <low_level_input>
 800374e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	4798      	blx	r3
 8003760:	4603      	mov	r3, r0
 8003762:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003764:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f001 f9f5 	bl	8004b5c <pbuf_free>
    p = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e000      	b.n	800377a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003778:	bf00      	nop
  }
}
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <ethernetif_init+0x1c>
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <ethernetif_init+0x48>)
 8003790:	f44f 7205 	mov.w	r2, #532	; 0x214
 8003794:	490d      	ldr	r1, [pc, #52]	; (80037cc <ethernetif_init+0x4c>)
 8003796:	480e      	ldr	r0, [pc, #56]	; (80037d0 <ethernetif_init+0x50>)
 8003798:	f009 fc20 	bl	800cfdc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2273      	movs	r2, #115	; 0x73
 80037a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2274      	movs	r2, #116	; 0x74
 80037a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <ethernetif_init+0x54>)
 80037b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <ethernetif_init+0x58>)
 80037b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fdc3 	bl	8003344 <low_level_init>

  return ERR_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	0800ddac 	.word	0x0800ddac
 80037cc:	0800ddc8 	.word	0x0800ddc8
 80037d0:	0800ddd8 	.word	0x0800ddd8
 80037d4:	0800b189 	.word	0x0800b189
 80037d8:	080034a1 	.word	0x080034a1

080037dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80037e0:	f7fd fba2 	bl	8000f28 <HAL_GetTick>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d05d      	beq.n	80038ca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800380e:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <ethernetif_update_config+0xf4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d03f      	beq.n	8003896 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800381a:	2100      	movs	r1, #0
 800381c:	4830      	ldr	r0, [pc, #192]	; (80038e0 <ethernetif_update_config+0xf4>)
 800381e:	f7fe f8c6 	bl	80019ae <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003822:	f7fd fb81 	bl	8000f28 <HAL_GetTick>
 8003826:	4603      	mov	r3, r0
 8003828:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800382a:	f107 0308 	add.w	r3, r7, #8
 800382e:	461a      	mov	r2, r3
 8003830:	2101      	movs	r1, #1
 8003832:	482b      	ldr	r0, [pc, #172]	; (80038e0 <ethernetif_update_config+0xf4>)
 8003834:	f7fe f853 	bl	80018de <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003838:	f7fd fb76 	bl	8000f28 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003846:	d828      	bhi.n	800389a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0eb      	beq.n	800382a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003852:	f107 0308 	add.w	r3, r7, #8
 8003856:	461a      	mov	r2, r3
 8003858:	2110      	movs	r1, #16
 800385a:	4821      	ldr	r0, [pc, #132]	; (80038e0 <ethernetif_update_config+0xf4>)
 800385c:	f7fe f83f 	bl	80018de <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <ethernetif_update_config+0xf4>)
 800386c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e002      	b.n	800387a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003874:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <ethernetif_update_config+0xf4>)
 8003876:	2200      	movs	r2, #0
 8003878:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <ethernetif_update_config+0xf4>)
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	e016      	b.n	80038ba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <ethernetif_update_config+0xf4>)
 800388e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	e011      	b.n	80038ba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <ethernetif_update_config+0xb0>
          goto error;
 800389a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <ethernetif_update_config+0xf4>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80038ac:	4313      	orrs	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	2100      	movs	r1, #0
 80038b4:	480a      	ldr	r0, [pc, #40]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038b6:	f7fe f87a 	bl	80019ae <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80038ba:	2100      	movs	r1, #0
 80038bc:	4808      	ldr	r0, [pc, #32]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038be:	f7fe f93b 	bl	8001b38 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80038c2:	4807      	ldr	r0, [pc, #28]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038c4:	f7fe f8d9 	bl	8001a7a <HAL_ETH_Start>
 80038c8:	e002      	b.n	80038d0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80038ca:	4805      	ldr	r0, [pc, #20]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038cc:	f7fe f904 	bl	8001ad8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f807 	bl	80038e4 <ethernetif_notify_conn_changed>
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000317c 	.word	0x2000317c

080038e4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	ba5b      	rev16	r3, r3
 8003904:	b29b      	uxth	r3, r3
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	061a      	lsls	r2, r3, #24
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	0a1b      	lsrs	r3, r3, #8
 800392a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0e1b      	lsrs	r3, r3, #24
 8003934:	4313      	orrs	r3, r2
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800394a:	f000 f8a7 	bl	8003a9c <mem_init>
  memp_init();
 800394e:	f000 fb37 	bl	8003fc0 <memp_init>
  pbuf_init();
  netif_init();
 8003952:	f000 fbef 	bl	8004134 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003956:	f006 fea3 	bl	800a6a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800395a:	f001 fb77 	bl	800504c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800395e:	f006 fd81 	bl	800a464 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003974:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <plug_holes+0x10c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d206      	bcs.n	800398c <plug_holes+0x20>
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <plug_holes+0x110>)
 8003980:	f240 125d 	movw	r2, #349	; 0x15d
 8003984:	493e      	ldr	r1, [pc, #248]	; (8003a80 <plug_holes+0x114>)
 8003986:	483f      	ldr	r0, [pc, #252]	; (8003a84 <plug_holes+0x118>)
 8003988:	f009 fb28 	bl	800cfdc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800398c:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <plug_holes+0x11c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	d306      	bcc.n	80039a4 <plug_holes+0x38>
 8003996:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <plug_holes+0x110>)
 8003998:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800399c:	493b      	ldr	r1, [pc, #236]	; (8003a8c <plug_holes+0x120>)
 800399e:	4839      	ldr	r0, [pc, #228]	; (8003a84 <plug_holes+0x118>)
 80039a0:	f009 fb1c 	bl	800cfdc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	791b      	ldrb	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d006      	beq.n	80039ba <plug_holes+0x4e>
 80039ac:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <plug_holes+0x110>)
 80039ae:	f240 125f 	movw	r2, #351	; 0x15f
 80039b2:	4937      	ldr	r1, [pc, #220]	; (8003a90 <plug_holes+0x124>)
 80039b4:	4833      	ldr	r0, [pc, #204]	; (8003a84 <plug_holes+0x118>)
 80039b6:	f009 fb11 	bl	800cfdc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80039c2:	d906      	bls.n	80039d2 <plug_holes+0x66>
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <plug_holes+0x110>)
 80039c6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80039ca:	4932      	ldr	r1, [pc, #200]	; (8003a94 <plug_holes+0x128>)
 80039cc:	482d      	ldr	r0, [pc, #180]	; (8003a84 <plug_holes+0x118>)
 80039ce:	f009 fb05 	bl	800cfdc <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <plug_holes+0x10c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	8812      	ldrh	r2, [r2, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d01f      	beq.n	8003a26 <plug_holes+0xba>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	791b      	ldrb	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11b      	bne.n	8003a26 <plug_holes+0xba>
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <plug_holes+0x11c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d016      	beq.n	8003a26 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <plug_holes+0x12c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d102      	bne.n	8003a08 <plug_holes+0x9c>
      lfree = mem;
 8003a02:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <plug_holes+0x12c>)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	881a      	ldrh	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <plug_holes+0x10c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	1ad1      	subs	r1, r2, r3
 8003a18:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <plug_holes+0x10c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	8812      	ldrh	r2, [r2, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	b28a      	uxth	r2, r1
 8003a24:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <plug_holes+0x10c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	8852      	ldrh	r2, [r2, #2]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d01a      	beq.n	8003a70 <plug_holes+0x104>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	791b      	ldrb	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <plug_holes+0x12c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d102      	bne.n	8003a52 <plug_holes+0xe6>
      lfree = pmem;
 8003a4c:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <plug_holes+0x12c>)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	881a      	ldrh	r2, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <plug_holes+0x10c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	1ad1      	subs	r1, r2, r3
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <plug_holes+0x10c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	8812      	ldrh	r2, [r2, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b28a      	uxth	r2, r1
 8003a6e:	805a      	strh	r2, [r3, #2]
  }
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	200059f0 	.word	0x200059f0
 8003a7c:	0800de00 	.word	0x0800de00
 8003a80:	0800de30 	.word	0x0800de30
 8003a84:	0800de48 	.word	0x0800de48
 8003a88:	200059f4 	.word	0x200059f4
 8003a8c:	0800de70 	.word	0x0800de70
 8003a90:	0800de8c 	.word	0x0800de8c
 8003a94:	0800dea8 	.word	0x0800dea8
 8003a98:	200059f8 	.word	0x200059f8

08003a9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003aa2:	4b18      	ldr	r3, [pc, #96]	; (8003b04 <mem_init+0x68>)
 8003aa4:	3303      	adds	r3, #3
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <mem_init+0x6c>)
 8003aae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <mem_init+0x6c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003abc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <mem_init+0x6c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <mem_init+0x70>)
 8003ad4:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <mem_init+0x70>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <mem_init+0x70>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003ae6:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <mem_init+0x70>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003af0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <mem_init+0x6c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a06      	ldr	r2, [pc, #24]	; (8003b10 <mem_init+0x74>)
 8003af8:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	200031dc 	.word	0x200031dc
 8003b08:	200059f0 	.word	0x200059f0
 8003b0c:	200059f4 	.word	0x200059f4
 8003b10:	200059f8 	.word	0x200059f8

08003b14 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d043      	beq.n	8003baa <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <mem_free+0x26>
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <mem_free+0xa4>)
 8003b2e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8003b32:	4922      	ldr	r1, [pc, #136]	; (8003bbc <mem_free+0xa8>)
 8003b34:	4822      	ldr	r0, [pc, #136]	; (8003bc0 <mem_free+0xac>)
 8003b36:	f009 fa51 	bl	800cfdc <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <mem_free+0xb0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d304      	bcc.n	8003b4e <mem_free+0x3a>
 8003b44:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <mem_free+0xb4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d306      	bcc.n	8003b5c <mem_free+0x48>
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <mem_free+0xa4>)
 8003b50:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8003b54:	491d      	ldr	r1, [pc, #116]	; (8003bcc <mem_free+0xb8>)
 8003b56:	481a      	ldr	r0, [pc, #104]	; (8003bc0 <mem_free+0xac>)
 8003b58:	f009 fa40 	bl	800cfdc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <mem_free+0xb0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d323      	bcc.n	8003bae <mem_free+0x9a>
 8003b66:	4b18      	ldr	r3, [pc, #96]	; (8003bc8 <mem_free+0xb4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d21e      	bcs.n	8003bae <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3b08      	subs	r3, #8
 8003b74:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	791b      	ldrb	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <mem_free+0x78>
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <mem_free+0xa4>)
 8003b80:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003b84:	4912      	ldr	r1, [pc, #72]	; (8003bd0 <mem_free+0xbc>)
 8003b86:	480e      	ldr	r0, [pc, #56]	; (8003bc0 <mem_free+0xac>)
 8003b88:	f009 fa28 	bl	800cfdc <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <mem_free+0xc0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d202      	bcs.n	8003ba2 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <mem_free+0xc0>)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff fee2 	bl	800396c <plug_holes>
 8003ba8:	e002      	b.n	8003bb0 <mem_free+0x9c>
    return;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <mem_free+0x9c>
    return;
 8003bae:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	0800de00 	.word	0x0800de00
 8003bbc:	0800ded4 	.word	0x0800ded4
 8003bc0:	0800de48 	.word	0x0800de48
 8003bc4:	200059f0 	.word	0x200059f0
 8003bc8:	200059f4 	.word	0x200059f4
 8003bcc:	0800def8 	.word	0x0800def8
 8003bd0:	0800df10 	.word	0x0800df10
 8003bd4:	200059f8 	.word	0x200059f8

08003bd8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	3303      	adds	r3, #3
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f023 0303 	bic.w	r3, r3, #3
 8003bee:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	2b0b      	cmp	r3, #11
 8003bf4:	d801      	bhi.n	8003bfa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003c00:	d901      	bls.n	8003c06 <mem_trim+0x2e>
    return NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e0b1      	b.n	8003d6a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003c06:	4b5b      	ldr	r3, [pc, #364]	; (8003d74 <mem_trim+0x19c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d304      	bcc.n	8003c1a <mem_trim+0x42>
 8003c10:	4b59      	ldr	r3, [pc, #356]	; (8003d78 <mem_trim+0x1a0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d306      	bcc.n	8003c28 <mem_trim+0x50>
 8003c1a:	4b58      	ldr	r3, [pc, #352]	; (8003d7c <mem_trim+0x1a4>)
 8003c1c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003c20:	4957      	ldr	r1, [pc, #348]	; (8003d80 <mem_trim+0x1a8>)
 8003c22:	4858      	ldr	r0, [pc, #352]	; (8003d84 <mem_trim+0x1ac>)
 8003c24:	f009 f9da 	bl	800cfdc <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003c28:	4b52      	ldr	r3, [pc, #328]	; (8003d74 <mem_trim+0x19c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d304      	bcc.n	8003c3c <mem_trim+0x64>
 8003c32:	4b51      	ldr	r3, [pc, #324]	; (8003d78 <mem_trim+0x1a0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d301      	bcc.n	8003c40 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	e094      	b.n	8003d6a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3b08      	subs	r3, #8
 8003c44:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8003c46:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <mem_trim+0x19c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	881a      	ldrh	r2, [r3, #0]
 8003c54:	8a7b      	ldrh	r3, [r7, #18]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b08      	subs	r3, #8
 8003c5c:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	8a3b      	ldrh	r3, [r7, #16]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d906      	bls.n	8003c74 <mem_trim+0x9c>
 8003c66:	4b45      	ldr	r3, [pc, #276]	; (8003d7c <mem_trim+0x1a4>)
 8003c68:	f240 2206 	movw	r2, #518	; 0x206
 8003c6c:	4946      	ldr	r1, [pc, #280]	; (8003d88 <mem_trim+0x1b0>)
 8003c6e:	4845      	ldr	r0, [pc, #276]	; (8003d84 <mem_trim+0x1ac>)
 8003c70:	f009 f9b4 	bl	800cfdc <iprintf>
  if (newsize > size) {
 8003c74:	887a      	ldrh	r2, [r7, #2]
 8003c76:	8a3b      	ldrh	r3, [r7, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d901      	bls.n	8003c80 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e074      	b.n	8003d6a <mem_trim+0x192>
  }
  if (newsize == size) {
 8003c80:	887a      	ldrh	r2, [r7, #2]
 8003c82:	8a3b      	ldrh	r3, [r7, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d101      	bne.n	8003c8c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	e06e      	b.n	8003d6a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003c8c:	4b39      	ldr	r3, [pc, #228]	; (8003d74 <mem_trim+0x19c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	8812      	ldrh	r2, [r2, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	791b      	ldrb	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d131      	bne.n	8003d04 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003ca6:	8a7a      	ldrh	r2, [r7, #18]
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	4413      	add	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3308      	adds	r3, #8
 8003cb0:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8003cb2:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <mem_trim+0x1b4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d105      	bne.n	8003cc8 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8003cbc:	4b2d      	ldr	r3, [pc, #180]	; (8003d74 <mem_trim+0x19c>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	897b      	ldrh	r3, [r7, #10]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	4a31      	ldr	r2, [pc, #196]	; (8003d8c <mem_trim+0x1b4>)
 8003cc6:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <mem_trim+0x19c>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	897b      	ldrh	r3, [r7, #10]
 8003cce:	4413      	add	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	893a      	ldrh	r2, [r7, #8]
 8003cdc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8a7a      	ldrh	r2, [r7, #18]
 8003ce2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	897a      	ldrh	r2, [r7, #10]
 8003ce8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003cf2:	d039      	beq.n	8003d68 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003cf4:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <mem_trim+0x19c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	8812      	ldrh	r2, [r2, #0]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	897a      	ldrh	r2, [r7, #10]
 8003d00:	805a      	strh	r2, [r3, #2]
 8003d02:	e031      	b.n	8003d68 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003d04:	887b      	ldrh	r3, [r7, #2]
 8003d06:	f103 0214 	add.w	r2, r3, #20
 8003d0a:	8a3b      	ldrh	r3, [r7, #16]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d82b      	bhi.n	8003d68 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003d10:	8a7a      	ldrh	r2, [r7, #18]
 8003d12:	887b      	ldrh	r3, [r7, #2]
 8003d14:	4413      	add	r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3308      	adds	r3, #8
 8003d1a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <mem_trim+0x19c>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	897b      	ldrh	r3, [r7, #10]
 8003d22:	4413      	add	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8003d26:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <mem_trim+0x1b4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d202      	bcs.n	8003d36 <mem_trim+0x15e>
      lfree = mem2;
 8003d30:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <mem_trim+0x1b4>)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8a7a      	ldrh	r2, [r7, #18]
 8003d48:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	897a      	ldrh	r2, [r7, #10]
 8003d4e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003d58:	d006      	beq.n	8003d68 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <mem_trim+0x19c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	8812      	ldrh	r2, [r2, #0]
 8003d62:	4413      	add	r3, r2
 8003d64:	897a      	ldrh	r2, [r7, #10]
 8003d66:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003d68:	687b      	ldr	r3, [r7, #4]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200059f0 	.word	0x200059f0
 8003d78:	200059f4 	.word	0x200059f4
 8003d7c:	0800de00 	.word	0x0800de00
 8003d80:	0800df24 	.word	0x0800df24
 8003d84:	0800de48 	.word	0x0800de48
 8003d88:	0800df3c 	.word	0x0800df3c
 8003d8c:	200059f8 	.word	0x200059f8

08003d90 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <mem_malloc+0x14>
    return NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e0c7      	b.n	8003f34 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	3303      	adds	r3, #3
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8003db0:	88fb      	ldrh	r3, [r7, #6]
 8003db2:	2b0b      	cmp	r3, #11
 8003db4:	d801      	bhi.n	8003dba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003db6:	230c      	movs	r3, #12
 8003db8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003dc0:	d901      	bls.n	8003dc6 <mem_malloc+0x36>
    return NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e0b6      	b.n	8003f34 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003dc6:	4b5d      	ldr	r3, [pc, #372]	; (8003f3c <mem_malloc+0x1ac>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b5d      	ldr	r3, [pc, #372]	; (8003f40 <mem_malloc+0x1b0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	83fb      	strh	r3, [r7, #30]
 8003dd2:	e0a7      	b.n	8003f24 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8003dd4:	4b5a      	ldr	r3, [pc, #360]	; (8003f40 <mem_malloc+0x1b0>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	8bfb      	ldrh	r3, [r7, #30]
 8003dda:	4413      	add	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	791b      	ldrb	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 8098 	bne.w	8003f18 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	8bfb      	ldrh	r3, [r7, #30]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f1a3 0208 	sub.w	r2, r3, #8
 8003df6:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	f0c0 808d 	bcc.w	8003f18 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	8bfb      	ldrh	r3, [r7, #30]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f1a3 0208 	sub.w	r2, r3, #8
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d327      	bcc.n	8003e64 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8003e14:	8bfa      	ldrh	r2, [r7, #30]
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	4413      	add	r3, r2
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8003e20:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <mem_malloc+0x1b0>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	8a7b      	ldrh	r3, [r7, #18]
 8003e26:	4413      	add	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	881a      	ldrh	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8bfa      	ldrh	r2, [r7, #30]
 8003e3c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	8a7a      	ldrh	r2, [r7, #18]
 8003e42:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2201      	movs	r2, #1
 8003e48:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e52:	d00a      	beq.n	8003e6a <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003e54:	4b3a      	ldr	r3, [pc, #232]	; (8003f40 <mem_malloc+0x1b0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	8812      	ldrh	r2, [r2, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	8a7a      	ldrh	r2, [r7, #18]
 8003e60:	805a      	strh	r2, [r3, #2]
 8003e62:	e002      	b.n	8003e6a <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2201      	movs	r2, #1
 8003e68:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003e6a:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <mem_malloc+0x1ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d127      	bne.n	8003ec4 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <mem_malloc+0x1ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003e7a:	e005      	b.n	8003e88 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8003e7c:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <mem_malloc+0x1b0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	4413      	add	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	791b      	ldrb	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <mem_malloc+0x10a>
 8003e90:	4b2c      	ldr	r3, [pc, #176]	; (8003f44 <mem_malloc+0x1b4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d1f0      	bne.n	8003e7c <mem_malloc+0xec>
          }
          lfree = cur;
 8003e9a:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <mem_malloc+0x1ac>)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <mem_malloc+0x1ac>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <mem_malloc+0x1b4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d00b      	beq.n	8003ec4 <mem_malloc+0x134>
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <mem_malloc+0x1ac>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	791b      	ldrb	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <mem_malloc+0x134>
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <mem_malloc+0x1b8>)
 8003eb8:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003ebc:	4923      	ldr	r1, [pc, #140]	; (8003f4c <mem_malloc+0x1bc>)
 8003ebe:	4824      	ldr	r0, [pc, #144]	; (8003f50 <mem_malloc+0x1c0>)
 8003ec0:	f009 f88c 	bl	800cfdc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003ec4:	88fa      	ldrh	r2, [r7, #6]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	4413      	add	r3, r2
 8003eca:	3308      	adds	r3, #8
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <mem_malloc+0x1b4>)
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d906      	bls.n	8003ee2 <mem_malloc+0x152>
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <mem_malloc+0x1b8>)
 8003ed6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8003eda:	491e      	ldr	r1, [pc, #120]	; (8003f54 <mem_malloc+0x1c4>)
 8003edc:	481c      	ldr	r0, [pc, #112]	; (8003f50 <mem_malloc+0x1c0>)
 8003ede:	f009 f87d 	bl	800cfdc <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d006      	beq.n	8003efa <mem_malloc+0x16a>
 8003eec:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <mem_malloc+0x1b8>)
 8003eee:	f240 22d5 	movw	r2, #725	; 0x2d5
 8003ef2:	4919      	ldr	r1, [pc, #100]	; (8003f58 <mem_malloc+0x1c8>)
 8003ef4:	4816      	ldr	r0, [pc, #88]	; (8003f50 <mem_malloc+0x1c0>)
 8003ef6:	f009 f871 	bl	800cfdc <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d006      	beq.n	8003f12 <mem_malloc+0x182>
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <mem_malloc+0x1b8>)
 8003f06:	f240 22d7 	movw	r2, #727	; 0x2d7
 8003f0a:	4914      	ldr	r1, [pc, #80]	; (8003f5c <mem_malloc+0x1cc>)
 8003f0c:	4810      	ldr	r0, [pc, #64]	; (8003f50 <mem_malloc+0x1c0>)
 8003f0e:	f009 f865 	bl	800cfdc <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	3308      	adds	r3, #8
 8003f16:	e00d      	b.n	8003f34 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <mem_malloc+0x1b0>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	8bfb      	ldrh	r3, [r7, #30]
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003f24:	8bfa      	ldrh	r2, [r7, #30]
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	f4ff af51 	bcc.w	8003dd4 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	200059f8 	.word	0x200059f8
 8003f40:	200059f0 	.word	0x200059f0
 8003f44:	200059f4 	.word	0x200059f4
 8003f48:	0800de00 	.word	0x0800de00
 8003f4c:	0800df5c 	.word	0x0800df5c
 8003f50:	0800de48 	.word	0x0800de48
 8003f54:	0800df78 	.word	0x0800df78
 8003f58:	0800dfa8 	.word	0x0800dfa8
 8003f5c:	0800dfd8 	.word	0x0800dfd8

08003f60 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	3303      	adds	r3, #3
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e011      	b.n	8003fa6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	885b      	ldrh	r3, [r3, #2]
 8003faa:	461a      	mov	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	dbe7      	blt.n	8003f82 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003fb2:	bf00      	nop
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr
	...

08003fc0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	80fb      	strh	r3, [r7, #6]
 8003fca:	e009      	b.n	8003fe0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <memp_init+0x30>)
 8003fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ffc3 	bl	8003f60 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	80fb      	strh	r3, [r7, #6]
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d9f2      	bls.n	8003fcc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	0800fae0 	.word	0x0800fae0

08003ff4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d012      	beq.n	8004030 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <do_memp_malloc_pool+0x38>
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <do_memp_malloc_pool+0x48>)
 8004020:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8004024:	4906      	ldr	r1, [pc, #24]	; (8004040 <do_memp_malloc_pool+0x4c>)
 8004026:	4807      	ldr	r0, [pc, #28]	; (8004044 <do_memp_malloc_pool+0x50>)
 8004028:	f008 ffd8 	bl	800cfdc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	e000      	b.n	8004032 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	0800dffc 	.word	0x0800dffc
 8004040:	0800e02c 	.word	0x0800e02c
 8004044:	0800e050 	.word	0x0800e050

08004048 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d908      	bls.n	800406a <memp_malloc+0x22>
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <memp_malloc+0x3c>)
 800405a:	f240 1287 	movw	r2, #391	; 0x187
 800405e:	490a      	ldr	r1, [pc, #40]	; (8004088 <memp_malloc+0x40>)
 8004060:	480a      	ldr	r0, [pc, #40]	; (800408c <memp_malloc+0x44>)
 8004062:	f008 ffbb 	bl	800cfdc <iprintf>
 8004066:	2300      	movs	r3, #0
 8004068:	e008      	b.n	800407c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	4a08      	ldr	r2, [pc, #32]	; (8004090 <memp_malloc+0x48>)
 800406e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ffbe 	bl	8003ff4 <do_memp_malloc_pool>
 8004078:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800407a:	68fb      	ldr	r3, [r7, #12]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	0800dffc 	.word	0x0800dffc
 8004088:	0800e08c 	.word	0x0800e08c
 800408c:	0800e050 	.word	0x0800e050
 8004090:	0800fae0 	.word	0x0800fae0

08004094 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d006      	beq.n	80040b6 <do_memp_free_pool+0x22>
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <do_memp_free_pool+0x40>)
 80040aa:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80040ae:	490a      	ldr	r1, [pc, #40]	; (80040d8 <do_memp_free_pool+0x44>)
 80040b0:	480a      	ldr	r0, [pc, #40]	; (80040dc <do_memp_free_pool+0x48>)
 80040b2:	f008 ff93 	bl	800cfdc <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	0800dffc 	.word	0x0800dffc
 80040d8:	0800e0ac 	.word	0x0800e0ac
 80040dc:	0800e050 	.word	0x0800e050

080040e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d907      	bls.n	8004102 <memp_free+0x22>
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <memp_free+0x44>)
 80040f4:	f240 12db 	movw	r2, #475	; 0x1db
 80040f8:	490b      	ldr	r1, [pc, #44]	; (8004128 <memp_free+0x48>)
 80040fa:	480c      	ldr	r0, [pc, #48]	; (800412c <memp_free+0x4c>)
 80040fc:	f008 ff6e 	bl	800cfdc <iprintf>
 8004100:	e00c      	b.n	800411c <memp_free+0x3c>

  if (mem == NULL) {
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	4a09      	ldr	r2, [pc, #36]	; (8004130 <memp_free+0x50>)
 800410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004110:	6839      	ldr	r1, [r7, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ffbe 	bl	8004094 <do_memp_free_pool>
 8004118:	e000      	b.n	800411c <memp_free+0x3c>
    return;
 800411a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	0800dffc 	.word	0x0800dffc
 8004128:	0800e0cc 	.word	0x0800e0cc
 800412c:	0800e050 	.word	0x0800e050
 8004130:	0800fae0 	.word	0x0800fae0

08004134 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <netif_add+0x20>
 8004154:	4b21      	ldr	r3, [pc, #132]	; (80041dc <netif_add+0x9c>)
 8004156:	22fb      	movs	r2, #251	; 0xfb
 8004158:	4921      	ldr	r1, [pc, #132]	; (80041e0 <netif_add+0xa0>)
 800415a:	4822      	ldr	r0, [pc, #136]	; (80041e4 <netif_add+0xa4>)
 800415c:	f008 ff3e 	bl	800cfdc <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <netif_add+0xa8>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	b2d1      	uxtb	r1, r2
 8004196:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <netif_add+0xa8>)
 8004198:	7011      	strb	r1, [r2, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a3a      	ldr	r2, [r7, #32]
 80041a4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f81f 	bl	80041f0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	4798      	blx	r3
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <netif_add+0x82>
    return NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	e007      	b.n	80041d2 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <netif_add+0xac>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80041ca:	4a08      	ldr	r2, [pc, #32]	; (80041ec <netif_add+0xac>)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80041d0:	68fb      	ldr	r3, [r7, #12]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	0800e0e8 	.word	0x0800e0e8
 80041e0:	0800e11c 	.word	0x0800e11c
 80041e4:	0800e134 	.word	0x0800e134
 80041e8:	200088dc 	.word	0x200088dc
 80041ec:	200088d4 	.word	0x200088d4

080041f0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <netif_set_addr+0x1c>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10c      	bne.n	8004226 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f81a 	bl	8004248 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f861 	bl	80042de <netif_set_netmask>
    netif_set_gw(netif, gw);
 800421c:	6839      	ldr	r1, [r7, #0]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f84a 	bl	80042b8 <netif_set_gw>
 8004224:	e00c      	b.n	8004240 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f858 	bl	80042de <netif_set_netmask>
    netif_set_gw(netif, gw);
 800422e:	6839      	ldr	r1, [r7, #0]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f841 	bl	80042b8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f805 	bl	8004248 <netif_set_ipaddr>
  }
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <netif_set_ipaddr+0x18>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	e002      	b.n	8004266 <netif_set_ipaddr+0x1e>
 8004260:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <netif_set_ipaddr+0x6c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d01c      	beq.n	80042ac <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	f107 020c 	add.w	r2, r7, #12
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f002 facd 	bl	800681c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	f107 020c 	add.w	r2, r7, #12
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f006 fb2d 	bl	800a8ec <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <netif_set_ipaddr+0x56>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	e000      	b.n	80042a0 <netif_set_ipaddr+0x58>
 800429e:	2300      	movs	r3, #0
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80042a4:	2101      	movs	r1, #1
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f85d 	bl	8004366 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	0800fb44 	.word	0x0800fb44

080042b8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <netif_set_gw+0x16>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	e000      	b.n	80042d0 <netif_set_gw+0x18>
 80042ce:	2300      	movs	r3, #0
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <netif_set_netmask+0x16>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	e000      	b.n	80042f6 <netif_set_netmask+0x18>
 80042f4:	2300      	movs	r3, #0
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800430c:	4a03      	ldr	r2, [pc, #12]	; (800431c <netif_set_default+0x18>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	200088d8 	.word	0x200088d8

08004320 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d113      	bne.n	800435e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	b2da      	uxtb	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8004356:	2103      	movs	r1, #3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f804 	bl	8004366 <netif_issue_reports>
    }
  }
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d011      	beq.n	80043a0 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00c      	beq.n	80043a0 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f007 f9d8 	bl	800b750 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d012      	beq.n	80043e4 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f006 fd7c 	bl	800aedc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  if (netif) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	61da      	str	r2, [r3, #28]
  }
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <pbuf_free_ooseq+0x40>)
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004418:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <pbuf_free_ooseq+0x44>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	e00f      	b.n	8004440 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fe6e 	bl	800610e <tcp_segs_free>
      pcb->ooseq = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8004438:	e005      	b.n	8004446 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1ec      	bne.n	8004420 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	200088dd 	.word	0x200088dd
 8004450:	200088ec 	.word	0x200088ec

08004454 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <pbuf_pool_is_empty+0x14>)
 800445a:	2201      	movs	r2, #1
 800445c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800445e:	bf00      	nop
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	200088dd 	.word	0x200088dd

0800446c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
 8004476:	460b      	mov	r3, r1
 8004478:	80bb      	strh	r3, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d81c      	bhi.n	80044be <pbuf_alloc+0x52>
 8004484:	a201      	add	r2, pc, #4	; (adr r2, 800448c <pbuf_alloc+0x20>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	080044a1 	.word	0x080044a1
 8004490:	080044a7 	.word	0x080044a7
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044b3 	.word	0x080044b3
 800449c:	080044b9 	.word	0x080044b9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80044a0:	2336      	movs	r3, #54	; 0x36
 80044a2:	82fb      	strh	r3, [r7, #22]
    break;
 80044a4:	e014      	b.n	80044d0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80044a6:	2322      	movs	r3, #34	; 0x22
 80044a8:	82fb      	strh	r3, [r7, #22]
    break;
 80044aa:	e011      	b.n	80044d0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80044ac:	230e      	movs	r3, #14
 80044ae:	82fb      	strh	r3, [r7, #22]
    break;
 80044b0:	e00e      	b.n	80044d0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80044b2:	2300      	movs	r3, #0
 80044b4:	82fb      	strh	r3, [r7, #22]
    break;
 80044b6:	e00b      	b.n	80044d0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	82fb      	strh	r3, [r7, #22]
    break;
 80044bc:	e008      	b.n	80044d0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80044be:	4ba1      	ldr	r3, [pc, #644]	; (8004744 <pbuf_alloc+0x2d8>)
 80044c0:	f44f 728b 	mov.w	r2, #278	; 0x116
 80044c4:	49a0      	ldr	r1, [pc, #640]	; (8004748 <pbuf_alloc+0x2dc>)
 80044c6:	48a1      	ldr	r0, [pc, #644]	; (800474c <pbuf_alloc+0x2e0>)
 80044c8:	f008 fd88 	bl	800cfdc <iprintf>
    return NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e15c      	b.n	800478a <pbuf_alloc+0x31e>
  }

  switch (type) {
 80044d0:	79bb      	ldrb	r3, [r7, #6]
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d00d      	beq.n	80044f2 <pbuf_alloc+0x86>
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	f300 8146 	bgt.w	8004768 <pbuf_alloc+0x2fc>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80d0 	beq.w	8004682 <pbuf_alloc+0x216>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f2c0 8140 	blt.w	8004768 <pbuf_alloc+0x2fc>
 80044e8:	3b01      	subs	r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	f200 813c 	bhi.w	8004768 <pbuf_alloc+0x2fc>
 80044f0:	e10d      	b.n	800470e <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80044f2:	2008      	movs	r0, #8
 80044f4:	f7ff fda8 	bl	8004048 <memp_malloc>
 80044f8:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8004500:	f7ff ffa8 	bl	8004454 <pbuf_pool_is_empty>
      return NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	e140      	b.n	800478a <pbuf_alloc+0x31e>
    }
    p->type = type;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	79ba      	ldrb	r2, [r7, #6]
 800450c:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004514:	8afb      	ldrh	r3, [r7, #22]
 8004516:	3310      	adds	r3, #16
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	4413      	add	r3, r2
 800451c:	3303      	adds	r3, #3
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	461a      	mov	r2, r3
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <pbuf_alloc+0xd6>
 8004534:	4b83      	ldr	r3, [pc, #524]	; (8004744 <pbuf_alloc+0x2d8>)
 8004536:	f44f 7294 	mov.w	r2, #296	; 0x128
 800453a:	4985      	ldr	r1, [pc, #532]	; (8004750 <pbuf_alloc+0x2e4>)
 800453c:	4883      	ldr	r0, [pc, #524]	; (800474c <pbuf_alloc+0x2e0>)
 800453e:	f008 fd4d 	bl	800cfdc <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	88ba      	ldrh	r2, [r7, #4]
 8004546:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004548:	8afb      	ldrh	r3, [r7, #22]
 800454a:	3303      	adds	r3, #3
 800454c:	f023 0303 	bic.w	r3, r3, #3
 8004550:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8004554:	88bb      	ldrh	r3, [r7, #4]
 8004556:	4293      	cmp	r3, r2
 8004558:	bf28      	it	cs
 800455a:	4613      	movcs	r3, r2
 800455c:	b29a      	uxth	r2, r3
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	8952      	ldrh	r2, [r2, #10]
 800456a:	441a      	add	r2, r3
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004572:	429a      	cmp	r2, r3
 8004574:	d906      	bls.n	8004584 <pbuf_alloc+0x118>
 8004576:	4b73      	ldr	r3, [pc, #460]	; (8004744 <pbuf_alloc+0x2d8>)
 8004578:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800457c:	4975      	ldr	r1, [pc, #468]	; (8004754 <pbuf_alloc+0x2e8>)
 800457e:	4873      	ldr	r0, [pc, #460]	; (800474c <pbuf_alloc+0x2e0>)
 8004580:	f008 fd2c 	bl	800cfdc <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004584:	8afb      	ldrh	r3, [r7, #22]
 8004586:	3303      	adds	r3, #3
 8004588:	f023 0303 	bic.w	r3, r3, #3
 800458c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004590:	d106      	bne.n	80045a0 <pbuf_alloc+0x134>
 8004592:	4b6c      	ldr	r3, [pc, #432]	; (8004744 <pbuf_alloc+0x2d8>)
 8004594:	f240 1231 	movw	r2, #305	; 0x131
 8004598:	496f      	ldr	r1, [pc, #444]	; (8004758 <pbuf_alloc+0x2ec>)
 800459a:	486c      	ldr	r0, [pc, #432]	; (800474c <pbuf_alloc+0x2e0>)
 800459c:	f008 fd1e 	bl	800cfdc <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2201      	movs	r2, #1
 80045a4:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80045aa:	88bb      	ldrh	r3, [r7, #4]
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	8952      	ldrh	r2, [r2, #10]
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80045b4:	e061      	b.n	800467a <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80045b6:	2008      	movs	r0, #8
 80045b8:	f7ff fd46 	bl	8004048 <memp_malloc>
 80045bc:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80045c4:	f7ff ff46 	bl	8004454 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80045c8:	69f8      	ldr	r0, [r7, #28]
 80045ca:	f000 fac7 	bl	8004b5c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e0db      	b.n	800478a <pbuf_alloc+0x31e>
      }
      q->type = type;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	79ba      	ldrb	r2, [r7, #6]
 80045d6:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80045f0:	4293      	cmp	r3, r2
 80045f2:	dd06      	ble.n	8004602 <pbuf_alloc+0x196>
 80045f4:	4b53      	ldr	r3, [pc, #332]	; (8004744 <pbuf_alloc+0x2d8>)
 80045f6:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80045fa:	4958      	ldr	r1, [pc, #352]	; (800475c <pbuf_alloc+0x2f0>)
 80045fc:	4853      	ldr	r0, [pc, #332]	; (800474c <pbuf_alloc+0x2e0>)
 80045fe:	f008 fced 	bl	800cfdc <iprintf>
      q->tot_len = (u16_t)rem_len;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004612:	bf28      	it	cs
 8004614:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f103 0210 	add.w	r2, r3, #16
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d006      	beq.n	8004642 <pbuf_alloc+0x1d6>
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <pbuf_alloc+0x2d8>)
 8004636:	f240 1251 	movw	r2, #337	; 0x151
 800463a:	4949      	ldr	r1, [pc, #292]	; (8004760 <pbuf_alloc+0x2f4>)
 800463c:	4843      	ldr	r0, [pc, #268]	; (800474c <pbuf_alloc+0x2e0>)
 800463e:	f008 fccd 	bl	800cfdc <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	8952      	ldrh	r2, [r2, #10]
 800464a:	441a      	add	r2, r3
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004652:	429a      	cmp	r2, r3
 8004654:	d906      	bls.n	8004664 <pbuf_alloc+0x1f8>
 8004656:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <pbuf_alloc+0x2d8>)
 8004658:	f240 1253 	movw	r2, #339	; 0x153
 800465c:	493d      	ldr	r1, [pc, #244]	; (8004754 <pbuf_alloc+0x2e8>)
 800465e:	483b      	ldr	r0, [pc, #236]	; (800474c <pbuf_alloc+0x2e0>)
 8004660:	f008 fcbc 	bl	800cfdc <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	895b      	ldrh	r3, [r3, #10]
 800466e:	461a      	mov	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dc9a      	bgt.n	80045b6 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8004680:	e07c      	b.n	800477c <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8004682:	8afb      	ldrh	r3, [r7, #22]
 8004684:	3313      	adds	r3, #19
 8004686:	b29b      	uxth	r3, r3
 8004688:	f023 0303 	bic.w	r3, r3, #3
 800468c:	b29a      	uxth	r2, r3
 800468e:	88bb      	ldrh	r3, [r7, #4]
 8004690:	3303      	adds	r3, #3
 8004692:	b29b      	uxth	r3, r3
 8004694:	f023 0303 	bic.w	r3, r3, #3
 8004698:	b29b      	uxth	r3, r3
 800469a:	4413      	add	r3, r2
 800469c:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800469e:	897a      	ldrh	r2, [r7, #10]
 80046a0:	88bb      	ldrh	r3, [r7, #4]
 80046a2:	3303      	adds	r3, #3
 80046a4:	f023 0303 	bic.w	r3, r3, #3
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d201      	bcs.n	80046b0 <pbuf_alloc+0x244>
        return NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e06c      	b.n	800478a <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80046b0:	897b      	ldrh	r3, [r7, #10]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fb6c 	bl	8003d90 <mem_malloc>
 80046b8:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <pbuf_alloc+0x258>
      return NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e062      	b.n	800478a <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80046c4:	8afb      	ldrh	r3, [r7, #22]
 80046c6:	3310      	adds	r3, #16
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	3303      	adds	r3, #3
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	461a      	mov	r2, r3
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	88ba      	ldrh	r2, [r7, #4]
 80046dc:	811a      	strh	r2, [r3, #8]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	891a      	ldrh	r2, [r3, #8]
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
    p->type = type;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	79ba      	ldrb	r2, [r7, #6]
 80046f0:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03d      	beq.n	800477a <pbuf_alloc+0x30e>
 80046fe:	4b11      	ldr	r3, [pc, #68]	; (8004744 <pbuf_alloc+0x2d8>)
 8004700:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8004704:	4917      	ldr	r1, [pc, #92]	; (8004764 <pbuf_alloc+0x2f8>)
 8004706:	4811      	ldr	r0, [pc, #68]	; (800474c <pbuf_alloc+0x2e0>)
 8004708:	f008 fc68 	bl	800cfdc <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800470c:	e035      	b.n	800477a <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800470e:	2007      	movs	r0, #7
 8004710:	f7ff fc9a 	bl	8004048 <memp_malloc>
 8004714:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	e034      	b.n	800478a <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2200      	movs	r2, #0
 8004724:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	88ba      	ldrh	r2, [r7, #4]
 800472a:	811a      	strh	r2, [r3, #8]
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	891a      	ldrh	r2, [r3, #8]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
    p->type = type;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	79ba      	ldrb	r2, [r7, #6]
 800473e:	731a      	strb	r2, [r3, #12]
    break;
 8004740:	e01c      	b.n	800477c <pbuf_alloc+0x310>
 8004742:	bf00      	nop
 8004744:	0800e15c 	.word	0x0800e15c
 8004748:	0800e18c 	.word	0x0800e18c
 800474c:	0800e1a8 	.word	0x0800e1a8
 8004750:	0800e1d0 	.word	0x0800e1d0
 8004754:	0800e200 	.word	0x0800e200
 8004758:	0800e234 	.word	0x0800e234
 800475c:	0800e268 	.word	0x0800e268
 8004760:	0800e27c 	.word	0x0800e27c
 8004764:	0800e2ac 	.word	0x0800e2ac
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <pbuf_alloc+0x328>)
 800476a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800476e:	490a      	ldr	r1, [pc, #40]	; (8004798 <pbuf_alloc+0x32c>)
 8004770:	480a      	ldr	r0, [pc, #40]	; (800479c <pbuf_alloc+0x330>)
 8004772:	f008 fc33 	bl	800cfdc <iprintf>
    return NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	e007      	b.n	800478a <pbuf_alloc+0x31e>
    break;
 800477a:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2201      	movs	r2, #1
 8004780:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	2200      	movs	r2, #0
 8004786:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004788:	69fb      	ldr	r3, [r7, #28]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	0800e15c 	.word	0x0800e15c
 8004798:	0800e2d8 	.word	0x0800e2d8
 800479c:	0800e1a8 	.word	0x0800e1a8

080047a0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4603      	mov	r3, r0
 80047aa:	71fb      	strb	r3, [r7, #7]
 80047ac:	460b      	mov	r3, r1
 80047ae:	80bb      	strh	r3, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d81b      	bhi.n	80047f2 <pbuf_alloced_custom+0x52>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <pbuf_alloced_custom+0x20>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047d5 	.word	0x080047d5
 80047c4:	080047db 	.word	0x080047db
 80047c8:	080047e1 	.word	0x080047e1
 80047cc:	080047e7 	.word	0x080047e7
 80047d0:	080047ed 	.word	0x080047ed
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80047d4:	2336      	movs	r3, #54	; 0x36
 80047d6:	81fb      	strh	r3, [r7, #14]
    break;
 80047d8:	e014      	b.n	8004804 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80047da:	2322      	movs	r3, #34	; 0x22
 80047dc:	81fb      	strh	r3, [r7, #14]
    break;
 80047de:	e011      	b.n	8004804 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80047e0:	230e      	movs	r3, #14
 80047e2:	81fb      	strh	r3, [r7, #14]
    break;
 80047e4:	e00e      	b.n	8004804 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80047e6:	2300      	movs	r3, #0
 80047e8:	81fb      	strh	r3, [r7, #14]
    break;
 80047ea:	e00b      	b.n	8004804 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	81fb      	strh	r3, [r7, #14]
    break;
 80047f0:	e008      	b.n	8004804 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <pbuf_alloced_custom+0xc8>)
 80047f4:	f240 12c5 	movw	r2, #453	; 0x1c5
 80047f8:	491c      	ldr	r1, [pc, #112]	; (800486c <pbuf_alloced_custom+0xcc>)
 80047fa:	481d      	ldr	r0, [pc, #116]	; (8004870 <pbuf_alloced_custom+0xd0>)
 80047fc:	f008 fbee 	bl	800cfdc <iprintf>
    return NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	e02d      	b.n	8004860 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004804:	89fb      	ldrh	r3, [r7, #14]
 8004806:	3303      	adds	r3, #3
 8004808:	f023 0203 	bic.w	r2, r3, #3
 800480c:	88bb      	ldrh	r3, [r7, #4]
 800480e:	441a      	add	r2, r3
 8004810:	8bbb      	ldrh	r3, [r7, #28]
 8004812:	429a      	cmp	r2, r3
 8004814:	d901      	bls.n	800481a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	e022      	b.n	8004860 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004826:	89fb      	ldrh	r3, [r7, #14]
 8004828:	3303      	adds	r3, #3
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	441a      	add	r2, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	e002      	b.n	800483e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2202      	movs	r2, #2
 8004842:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	88ba      	ldrh	r2, [r7, #4]
 8004848:	811a      	strh	r2, [r3, #8]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	891a      	ldrh	r2, [r3, #8]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	79ba      	ldrb	r2, [r7, #6]
 8004856:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2201      	movs	r2, #1
 800485c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800485e:	683b      	ldr	r3, [r7, #0]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	0800e15c 	.word	0x0800e15c
 800486c:	0800e2f4 	.word	0x0800e2f4
 8004870:	0800e1a8 	.word	0x0800e1a8

08004874 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <pbuf_realloc+0x20>
 8004886:	4b4b      	ldr	r3, [pc, #300]	; (80049b4 <pbuf_realloc+0x140>)
 8004888:	f240 12f3 	movw	r2, #499	; 0x1f3
 800488c:	494a      	ldr	r1, [pc, #296]	; (80049b8 <pbuf_realloc+0x144>)
 800488e:	484b      	ldr	r0, [pc, #300]	; (80049bc <pbuf_realloc+0x148>)
 8004890:	f008 fba4 	bl	800cfdc <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7b1b      	ldrb	r3, [r3, #12]
 8004898:	2b03      	cmp	r3, #3
 800489a:	d012      	beq.n	80048c2 <pbuf_realloc+0x4e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	7b1b      	ldrb	r3, [r3, #12]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d00e      	beq.n	80048c2 <pbuf_realloc+0x4e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	7b1b      	ldrb	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <pbuf_realloc+0x4e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	7b1b      	ldrb	r3, [r3, #12]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d006      	beq.n	80048c2 <pbuf_realloc+0x4e>
 80048b4:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <pbuf_realloc+0x140>)
 80048b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048ba:	4941      	ldr	r1, [pc, #260]	; (80049c0 <pbuf_realloc+0x14c>)
 80048bc:	483f      	ldr	r0, [pc, #252]	; (80049bc <pbuf_realloc+0x148>)
 80048be:	f008 fb8d 	bl	800cfdc <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	891b      	ldrh	r3, [r3, #8]
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d26e      	bcs.n	80049aa <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80048cc:	887b      	ldrh	r3, [r7, #2]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	8912      	ldrh	r2, [r2, #8]
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80048d6:	887b      	ldrh	r3, [r7, #2]
 80048d8:	827b      	strh	r3, [r7, #18]
  q = p;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80048de:	e025      	b.n	800492c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	895b      	ldrh	r3, [r3, #10]
 80048e4:	8a7a      	ldrh	r2, [r7, #18]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048f0:	4293      	cmp	r3, r2
 80048f2:	dd06      	ble.n	8004902 <pbuf_realloc+0x8e>
 80048f4:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <pbuf_realloc+0x140>)
 80048f6:	f240 220b 	movw	r2, #523	; 0x20b
 80048fa:	4932      	ldr	r1, [pc, #200]	; (80049c4 <pbuf_realloc+0x150>)
 80048fc:	482f      	ldr	r0, [pc, #188]	; (80049bc <pbuf_realloc+0x148>)
 80048fe:	f008 fb6d 	bl	800cfdc <iprintf>
    q->tot_len += (u16_t)grow;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	891a      	ldrh	r2, [r3, #8]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	b29b      	uxth	r3, r3
 800490a:	4413      	add	r3, r2
 800490c:	b29a      	uxth	r2, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <pbuf_realloc+0xb8>
 800491e:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <pbuf_realloc+0x140>)
 8004920:	f240 220f 	movw	r2, #527	; 0x20f
 8004924:	4928      	ldr	r1, [pc, #160]	; (80049c8 <pbuf_realloc+0x154>)
 8004926:	4825      	ldr	r0, [pc, #148]	; (80049bc <pbuf_realloc+0x148>)
 8004928:	f008 fb58 	bl	800cfdc <iprintf>
  while (rem_len > q->len) {
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	895b      	ldrh	r3, [r3, #10]
 8004930:	8a7a      	ldrh	r2, [r7, #18]
 8004932:	429a      	cmp	r2, r3
 8004934:	d8d4      	bhi.n	80048e0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	7b1b      	ldrb	r3, [r3, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d121      	bne.n	8004982 <pbuf_realloc+0x10e>
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	895b      	ldrh	r3, [r3, #10]
 8004942:	8a7a      	ldrh	r2, [r7, #18]
 8004944:	429a      	cmp	r2, r3
 8004946:	d01c      	beq.n	8004982 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	7b5b      	ldrb	r3, [r3, #13]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d116      	bne.n	8004982 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	b29a      	uxth	r2, r3
 800495e:	8a7b      	ldrh	r3, [r7, #18]
 8004960:	4413      	add	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	6978      	ldr	r0, [r7, #20]
 8004968:	f7ff f936 	bl	8003bd8 <mem_trim>
 800496c:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <pbuf_realloc+0x10e>
 8004974:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <pbuf_realloc+0x140>)
 8004976:	f240 221d 	movw	r2, #541	; 0x21d
 800497a:	4914      	ldr	r1, [pc, #80]	; (80049cc <pbuf_realloc+0x158>)
 800497c:	480f      	ldr	r0, [pc, #60]	; (80049bc <pbuf_realloc+0x148>)
 800497e:	f008 fb2d 	bl	800cfdc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	8a7a      	ldrh	r2, [r7, #18]
 8004986:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	895a      	ldrh	r2, [r3, #10]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f000 f8dd 	bl	8004b5c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e000      	b.n	80049ac <pbuf_realloc+0x138>
    return;
 80049aa:	bf00      	nop

}
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	0800e15c 	.word	0x0800e15c
 80049b8:	0800e318 	.word	0x0800e318
 80049bc:	0800e1a8 	.word	0x0800e1a8
 80049c0:	0800e330 	.word	0x0800e330
 80049c4:	0800e34c 	.word	0x0800e34c
 80049c8:	0800e360 	.word	0x0800e360
 80049cc:	0800e378 	.word	0x0800e378

080049d0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
 80049dc:	4613      	mov	r3, r2
 80049de:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <pbuf_header_impl+0x24>
 80049e6:	4b46      	ldr	r3, [pc, #280]	; (8004b00 <pbuf_header_impl+0x130>)
 80049e8:	f240 223f 	movw	r2, #575	; 0x23f
 80049ec:	4945      	ldr	r1, [pc, #276]	; (8004b04 <pbuf_header_impl+0x134>)
 80049ee:	4846      	ldr	r0, [pc, #280]	; (8004b08 <pbuf_header_impl+0x138>)
 80049f0:	f008 faf4 	bl	800cfdc <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80049f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <pbuf_header_impl+0x32>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <pbuf_header_impl+0x36>
    return 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e078      	b.n	8004af8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8004a06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	da10      	bge.n	8004a30 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8004a0e:	887b      	ldrh	r3, [r7, #2]
 8004a10:	425b      	negs	r3, r3
 8004a12:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	895b      	ldrh	r3, [r3, #10]
 8004a18:	89fa      	ldrh	r2, [r7, #14]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d90a      	bls.n	8004a34 <pbuf_header_impl+0x64>
 8004a1e:	4b38      	ldr	r3, [pc, #224]	; (8004b00 <pbuf_header_impl+0x130>)
 8004a20:	f240 2247 	movw	r2, #583	; 0x247
 8004a24:	4939      	ldr	r1, [pc, #228]	; (8004b0c <pbuf_header_impl+0x13c>)
 8004a26:	4838      	ldr	r0, [pc, #224]	; (8004b08 <pbuf_header_impl+0x138>)
 8004a28:	f008 fad8 	bl	800cfdc <iprintf>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e063      	b.n	8004af8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004a30:	887b      	ldrh	r3, [r7, #2]
 8004a32:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	7b1b      	ldrb	r3, [r3, #12]
 8004a38:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004a40:	89bb      	ldrh	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <pbuf_header_impl+0x7c>
 8004a46:	89bb      	ldrh	r3, [r7, #12]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d112      	bne.n	8004a72 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a54:	425b      	negs	r3, r3
 8004a56:	441a      	add	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3310      	adds	r3, #16
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d238      	bcs.n	8004ada <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e042      	b.n	8004af8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004a72:	89bb      	ldrh	r3, [r7, #12]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d002      	beq.n	8004a7e <pbuf_header_impl+0xae>
 8004a78:	89bb      	ldrh	r3, [r7, #12]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d124      	bne.n	8004ac8 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004a7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da0d      	bge.n	8004aa2 <pbuf_header_impl+0xd2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	895b      	ldrh	r3, [r3, #10]
 8004a8a:	89fa      	ldrh	r2, [r7, #14]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d808      	bhi.n	8004aa2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a98:	425b      	negs	r3, r3
 8004a9a:	441a      	add	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	e011      	b.n	8004ac6 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004aa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	dd0b      	ble.n	8004ac2 <pbuf_header_impl+0xf2>
 8004aaa:	787b      	ldrb	r3, [r7, #1]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ab8:	425b      	negs	r3, r3
 8004aba:	441a      	add	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	e001      	b.n	8004ac6 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e018      	b.n	8004af8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004ac6:	e008      	b.n	8004ada <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <pbuf_header_impl+0x130>)
 8004aca:	f240 2277 	movw	r2, #631	; 0x277
 8004ace:	4910      	ldr	r1, [pc, #64]	; (8004b10 <pbuf_header_impl+0x140>)
 8004ad0:	480d      	ldr	r0, [pc, #52]	; (8004b08 <pbuf_header_impl+0x138>)
 8004ad2:	f008 fa83 	bl	800cfdc <iprintf>
    return 1;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e00e      	b.n	8004af8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	895a      	ldrh	r2, [r3, #10]
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	891a      	ldrh	r2, [r3, #8]
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	4413      	add	r3, r2
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	0800e15c 	.word	0x0800e15c
 8004b04:	0800e394 	.word	0x0800e394
 8004b08:	0800e1a8 	.word	0x0800e1a8
 8004b0c:	0800e3a0 	.word	0x0800e3a0
 8004b10:	0800e3c0 	.word	0x0800e3c0

08004b14 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8004b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b24:	2200      	movs	r2, #0
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ff51 	bl	80049d0 <pbuf_header_impl>
 8004b2e:	4603      	mov	r3, r0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8004b44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ff3f 	bl	80049d0 <pbuf_header_impl>
 8004b52:	4603      	mov	r3, r0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <pbuf_free+0x22>
 8004b70:	4b3e      	ldr	r3, [pc, #248]	; (8004c6c <pbuf_free+0x110>)
 8004b72:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004b76:	493e      	ldr	r1, [pc, #248]	; (8004c70 <pbuf_free+0x114>)
 8004b78:	483e      	ldr	r0, [pc, #248]	; (8004c74 <pbuf_free+0x118>)
 8004b7a:	f008 fa2f 	bl	800cfdc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e070      	b.n	8004c64 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	7b1b      	ldrb	r3, [r3, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d012      	beq.n	8004bb0 <pbuf_free+0x54>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	7b1b      	ldrb	r3, [r3, #12]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d00e      	beq.n	8004bb0 <pbuf_free+0x54>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7b1b      	ldrb	r3, [r3, #12]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d00a      	beq.n	8004bb0 <pbuf_free+0x54>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	7b1b      	ldrb	r3, [r3, #12]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d006      	beq.n	8004bb0 <pbuf_free+0x54>
 8004ba2:	4b32      	ldr	r3, [pc, #200]	; (8004c6c <pbuf_free+0x110>)
 8004ba4:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004ba8:	4933      	ldr	r1, [pc, #204]	; (8004c78 <pbuf_free+0x11c>)
 8004baa:	4832      	ldr	r0, [pc, #200]	; (8004c74 <pbuf_free+0x118>)
 8004bac:	f008 fa16 	bl	800cfdc <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004bb4:	e052      	b.n	8004c5c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	89db      	ldrh	r3, [r3, #14]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <pbuf_free+0x70>
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <pbuf_free+0x110>)
 8004bc0:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004bc4:	492d      	ldr	r1, [pc, #180]	; (8004c7c <pbuf_free+0x120>)
 8004bc6:	482b      	ldr	r0, [pc, #172]	; (8004c74 <pbuf_free+0x118>)
 8004bc8:	f008 fa08 	bl	800cfdc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	89db      	ldrh	r3, [r3, #14]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	81da      	strh	r2, [r3, #14]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	89db      	ldrh	r3, [r3, #14]
 8004bdc:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004bde:	8abb      	ldrh	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d139      	bne.n	8004c58 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	7b1b      	ldrb	r3, [r3, #12]
 8004bee:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	7b5b      	ldrb	r3, [r3, #13]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d011      	beq.n	8004c20 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <pbuf_free+0xba>
 8004c08:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <pbuf_free+0x110>)
 8004c0a:	f240 22f9 	movw	r2, #761	; 0x2f9
 8004c0e:	491c      	ldr	r1, [pc, #112]	; (8004c80 <pbuf_free+0x124>)
 8004c10:	4818      	ldr	r0, [pc, #96]	; (8004c74 <pbuf_free+0x118>)
 8004c12:	f008 f9e3 	bl	800cfdc <iprintf>
        pc->custom_free_function(p);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
 8004c1e:	e015      	b.n	8004c4c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8004c20:	89fb      	ldrh	r3, [r7, #14]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d104      	bne.n	8004c30 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	2008      	movs	r0, #8
 8004c2a:	f7ff fa59 	bl	80040e0 <memp_free>
 8004c2e:	e00d      	b.n	8004c4c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d002      	beq.n	8004c3c <pbuf_free+0xe0>
 8004c36:	89fb      	ldrh	r3, [r7, #14]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d104      	bne.n	8004c46 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	2007      	movs	r0, #7
 8004c40:	f7ff fa4e 	bl	80040e0 <memp_free>
 8004c44:	e002      	b.n	8004c4c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fe ff64 	bl	8003b14 <mem_free>
        }
      }
      count++;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	e001      	b.n	8004c5c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1a9      	bne.n	8004bb6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	0800e15c 	.word	0x0800e15c
 8004c70:	0800e394 	.word	0x0800e394
 8004c74:	0800e1a8 	.word	0x0800e1a8
 8004c78:	0800e3d0 	.word	0x0800e3d0
 8004c7c:	0800e3e8 	.word	0x0800e3e8
 8004c80:	0800e400 	.word	0x0800e400

08004c84 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004c90:	e005      	b.n	8004c9e <pbuf_clen+0x1a>
    ++len;
 8004c92:	89fb      	ldrh	r3, [r7, #14]
 8004c94:	3301      	adds	r3, #1
 8004c96:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f6      	bne.n	8004c92 <pbuf_clen+0xe>
  }
  return len;
 8004ca4:	89fb      	ldrh	r3, [r7, #14]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d010      	beq.n	8004ce0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	89db      	ldrh	r3, [r3, #14]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	89db      	ldrh	r3, [r3, #14]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <pbuf_ref+0x30>
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <pbuf_ref+0x38>)
 8004cd4:	f240 3239 	movw	r2, #825	; 0x339
 8004cd8:	4904      	ldr	r1, [pc, #16]	; (8004cec <pbuf_ref+0x3c>)
 8004cda:	4805      	ldr	r0, [pc, #20]	; (8004cf0 <pbuf_ref+0x40>)
 8004cdc:	f008 f97e 	bl	800cfdc <iprintf>
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	0800e15c 	.word	0x0800e15c
 8004cec:	0800e424 	.word	0x0800e424
 8004cf0:	0800e1a8 	.word	0x0800e1a8

08004cf4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <pbuf_cat+0x16>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d107      	bne.n	8004d1a <pbuf_cat+0x26>
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <pbuf_cat+0x98>)
 8004d0c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8004d10:	491f      	ldr	r1, [pc, #124]	; (8004d90 <pbuf_cat+0x9c>)
 8004d12:	4820      	ldr	r0, [pc, #128]	; (8004d94 <pbuf_cat+0xa0>)
 8004d14:	f008 f962 	bl	800cfdc <iprintf>
 8004d18:	e034      	b.n	8004d84 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e00a      	b.n	8004d36 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	891a      	ldrh	r2, [r3, #8]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	891b      	ldrh	r3, [r3, #8]
 8004d28:	4413      	add	r3, r2
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	891a      	ldrh	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	895b      	ldrh	r3, [r3, #10]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d006      	beq.n	8004d58 <pbuf_cat+0x64>
 8004d4a:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <pbuf_cat+0x98>)
 8004d4c:	f240 3255 	movw	r2, #853	; 0x355
 8004d50:	4911      	ldr	r1, [pc, #68]	; (8004d98 <pbuf_cat+0xa4>)
 8004d52:	4810      	ldr	r0, [pc, #64]	; (8004d94 <pbuf_cat+0xa0>)
 8004d54:	f008 f942 	bl	800cfdc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <pbuf_cat+0x7a>
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <pbuf_cat+0x98>)
 8004d62:	f240 3256 	movw	r2, #854	; 0x356
 8004d66:	490d      	ldr	r1, [pc, #52]	; (8004d9c <pbuf_cat+0xa8>)
 8004d68:	480a      	ldr	r0, [pc, #40]	; (8004d94 <pbuf_cat+0xa0>)
 8004d6a:	f008 f937 	bl	800cfdc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	891a      	ldrh	r2, [r3, #8]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	891b      	ldrh	r3, [r3, #8]
 8004d76:	4413      	add	r3, r2
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	0800e15c 	.word	0x0800e15c
 8004d90:	0800e438 	.word	0x0800e438
 8004d94:	0800e1a8 	.word	0x0800e1a8
 8004d98:	0800e470 	.word	0x0800e470
 8004d9c:	0800e4a0 	.word	0x0800e4a0

08004da0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8004daa:	6839      	ldr	r1, [r7, #0]
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ffa1 	bl	8004cf4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8004db2:	6838      	ldr	r0, [r7, #0]
 8004db4:	f7ff ff7c 	bl	8004cb0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	81fb      	strh	r3, [r7, #14]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <pbuf_copy+0x2a>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <pbuf_copy+0x2a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	891a      	ldrh	r2, [r3, #8]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	891b      	ldrh	r3, [r3, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d209      	bcs.n	8004dfe <pbuf_copy+0x3e>
 8004dea:	4b54      	ldr	r3, [pc, #336]	; (8004f3c <pbuf_copy+0x17c>)
 8004dec:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8004df0:	4953      	ldr	r1, [pc, #332]	; (8004f40 <pbuf_copy+0x180>)
 8004df2:	4854      	ldr	r0, [pc, #336]	; (8004f44 <pbuf_copy+0x184>)
 8004df4:	f008 f8f2 	bl	800cfdc <iprintf>
 8004df8:	f06f 030f 	mvn.w	r3, #15
 8004dfc:	e099      	b.n	8004f32 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	895b      	ldrh	r3, [r3, #10]
 8004e02:	461a      	mov	r2, r3
 8004e04:	89fb      	ldrh	r3, [r7, #14]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	895b      	ldrh	r3, [r3, #10]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	89bb      	ldrh	r3, [r7, #12]
 8004e10:	1acb      	subs	r3, r1, r3
 8004e12:	429a      	cmp	r2, r3
 8004e14:	db05      	blt.n	8004e22 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	895a      	ldrh	r2, [r3, #10]
 8004e1a:	89bb      	ldrh	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	817b      	strh	r3, [r7, #10]
 8004e20:	e004      	b.n	8004e2c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	895a      	ldrh	r2, [r3, #10]
 8004e26:	89fb      	ldrh	r3, [r7, #14]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	89fb      	ldrh	r3, [r7, #14]
 8004e32:	18d0      	adds	r0, r2, r3
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	89bb      	ldrh	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	897a      	ldrh	r2, [r7, #10]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	f008 f9b8 	bl	800d1b4 <memcpy>
    offset_to += len;
 8004e44:	89fa      	ldrh	r2, [r7, #14]
 8004e46:	897b      	ldrh	r3, [r7, #10]
 8004e48:	4413      	add	r3, r2
 8004e4a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8004e4c:	89ba      	ldrh	r2, [r7, #12]
 8004e4e:	897b      	ldrh	r3, [r7, #10]
 8004e50:	4413      	add	r3, r2
 8004e52:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	895b      	ldrh	r3, [r3, #10]
 8004e58:	89fa      	ldrh	r2, [r7, #14]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d906      	bls.n	8004e6c <pbuf_copy+0xac>
 8004e5e:	4b37      	ldr	r3, [pc, #220]	; (8004f3c <pbuf_copy+0x17c>)
 8004e60:	f240 32cd 	movw	r2, #973	; 0x3cd
 8004e64:	4938      	ldr	r1, [pc, #224]	; (8004f48 <pbuf_copy+0x188>)
 8004e66:	4837      	ldr	r0, [pc, #220]	; (8004f44 <pbuf_copy+0x184>)
 8004e68:	f008 f8b8 	bl	800cfdc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	895b      	ldrh	r3, [r3, #10]
 8004e70:	89ba      	ldrh	r2, [r7, #12]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d906      	bls.n	8004e84 <pbuf_copy+0xc4>
 8004e76:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <pbuf_copy+0x17c>)
 8004e78:	f240 32ce 	movw	r2, #974	; 0x3ce
 8004e7c:	4933      	ldr	r1, [pc, #204]	; (8004f4c <pbuf_copy+0x18c>)
 8004e7e:	4831      	ldr	r0, [pc, #196]	; (8004f44 <pbuf_copy+0x184>)
 8004e80:	f008 f8ac 	bl	800cfdc <iprintf>
    if (offset_from >= p_from->len) {
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	895b      	ldrh	r3, [r3, #10]
 8004e88:	89ba      	ldrh	r2, [r7, #12]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d304      	bcc.n	8004e98 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	895b      	ldrh	r3, [r3, #10]
 8004e9c:	89fa      	ldrh	r2, [r7, #14]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d114      	bne.n	8004ecc <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <pbuf_copy+0x10c>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <pbuf_copy+0x10c>
 8004eb8:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <pbuf_copy+0x17c>)
 8004eba:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8004ebe:	4924      	ldr	r1, [pc, #144]	; (8004f50 <pbuf_copy+0x190>)
 8004ec0:	4820      	ldr	r0, [pc, #128]	; (8004f44 <pbuf_copy+0x184>)
 8004ec2:	f008 f88b 	bl	800cfdc <iprintf>
 8004ec6:	f06f 030f 	mvn.w	r3, #15
 8004eca:	e032      	b.n	8004f32 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <pbuf_copy+0x13a>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	895a      	ldrh	r2, [r3, #10]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	891b      	ldrh	r3, [r3, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d10d      	bne.n	8004efa <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <pbuf_copy+0x13a>
 8004ee6:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <pbuf_copy+0x17c>)
 8004ee8:	f240 32dd 	movw	r2, #989	; 0x3dd
 8004eec:	4919      	ldr	r1, [pc, #100]	; (8004f54 <pbuf_copy+0x194>)
 8004eee:	4815      	ldr	r0, [pc, #84]	; (8004f44 <pbuf_copy+0x184>)
 8004ef0:	f008 f874 	bl	800cfdc <iprintf>
 8004ef4:	f06f 0305 	mvn.w	r3, #5
 8004ef8:	e01b      	b.n	8004f32 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <pbuf_copy+0x168>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	895a      	ldrh	r2, [r3, #10]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	891b      	ldrh	r3, [r3, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d10d      	bne.n	8004f28 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <pbuf_copy+0x168>
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <pbuf_copy+0x17c>)
 8004f16:	f240 32e2 	movw	r2, #994	; 0x3e2
 8004f1a:	490e      	ldr	r1, [pc, #56]	; (8004f54 <pbuf_copy+0x194>)
 8004f1c:	4809      	ldr	r0, [pc, #36]	; (8004f44 <pbuf_copy+0x184>)
 8004f1e:	f008 f85d 	bl	800cfdc <iprintf>
 8004f22:	f06f 0305 	mvn.w	r3, #5
 8004f26:	e004      	b.n	8004f32 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f47f af67 	bne.w	8004dfe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	0800e15c 	.word	0x0800e15c
 8004f40:	0800e4ec 	.word	0x0800e4ec
 8004f44:	0800e1a8 	.word	0x0800e1a8
 8004f48:	0800e51c 	.word	0x0800e51c
 8004f4c:	0800e534 	.word	0x0800e534
 8004f50:	0800e550 	.word	0x0800e550
 8004f54:	0800e560 	.word	0x0800e560

08004f58 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4611      	mov	r1, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	460b      	mov	r3, r1
 8004f68:	80fb      	strh	r3, [r7, #6]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d108      	bne.n	8004f8a <pbuf_copy_partial+0x32>
 8004f78:	4b30      	ldr	r3, [pc, #192]	; (800503c <pbuf_copy_partial+0xe4>)
 8004f7a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004f7e:	4930      	ldr	r1, [pc, #192]	; (8005040 <pbuf_copy_partial+0xe8>)
 8004f80:	4830      	ldr	r0, [pc, #192]	; (8005044 <pbuf_copy_partial+0xec>)
 8004f82:	f008 f82b 	bl	800cfdc <iprintf>
 8004f86:	2300      	movs	r3, #0
 8004f88:	e054      	b.n	8005034 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d108      	bne.n	8004fa2 <pbuf_copy_partial+0x4a>
 8004f90:	4b2a      	ldr	r3, [pc, #168]	; (800503c <pbuf_copy_partial+0xe4>)
 8004f92:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004f96:	492c      	ldr	r1, [pc, #176]	; (8005048 <pbuf_copy_partial+0xf0>)
 8004f98:	482a      	ldr	r0, [pc, #168]	; (8005044 <pbuf_copy_partial+0xec>)
 8004f9a:	f008 f81f 	bl	800cfdc <iprintf>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e048      	b.n	8005034 <pbuf_copy_partial+0xdc>

  left = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <pbuf_copy_partial+0x5a>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <pbuf_copy_partial+0x5e>
    return 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e03e      	b.n	8005034 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	e034      	b.n	8005026 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8004fbc:	88bb      	ldrh	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <pbuf_copy_partial+0x80>
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	895b      	ldrh	r3, [r3, #10]
 8004fc6:	88ba      	ldrh	r2, [r7, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d305      	bcc.n	8004fd8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	895b      	ldrh	r3, [r3, #10]
 8004fd0:	88ba      	ldrh	r2, [r7, #4]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	80bb      	strh	r3, [r7, #4]
 8004fd6:	e023      	b.n	8005020 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	895a      	ldrh	r2, [r3, #10]
 8004fdc:	88bb      	ldrh	r3, [r7, #4]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8004fe2:	8b3a      	ldrh	r2, [r7, #24]
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d901      	bls.n	8004fee <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004fee:	8b7b      	ldrh	r3, [r7, #26]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	18d0      	adds	r0, r2, r3
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	88bb      	ldrh	r3, [r7, #4]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	8b3a      	ldrh	r2, [r7, #24]
 8004ffe:	4619      	mov	r1, r3
 8005000:	f008 f8d8 	bl	800d1b4 <memcpy>
      copied_total += buf_copy_len;
 8005004:	8afa      	ldrh	r2, [r7, #22]
 8005006:	8b3b      	ldrh	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800500c:	8b7a      	ldrh	r2, [r7, #26]
 800500e:	8b3b      	ldrh	r3, [r7, #24]
 8005010:	4413      	add	r3, r2
 8005012:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	8b3b      	ldrh	r3, [r7, #24]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <pbuf_copy_partial+0xda>
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1c4      	bne.n	8004fbc <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005032:	8afb      	ldrh	r3, [r7, #22]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	0800e15c 	.word	0x0800e15c
 8005040:	0800e58c 	.word	0x0800e58c
 8005044:	0800e1a8 	.word	0x0800e1a8
 8005048:	0800e5ac 	.word	0x0800e5ac

0800504c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800505c:	f000 ff8a 	bl	8005f74 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <tcp_tmr+0x28>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	b2da      	uxtb	r2, r3
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <tcp_tmr+0x28>)
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <tcp_tmr+0x28>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005078:	f000 fcba 	bl	80059f0 <tcp_slowtmr>
  }
}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}
 8005080:	200088f5 	.word	0x200088f5

08005084 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e00a      	b.n	80050aa <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d102      	bne.n	80050a4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f1      	bne.n	8005094 <tcp_remove_listener+0x10>
      }
   }
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d105      	bne.n	80050d6 <tcp_listen_closed+0x1a>
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <tcp_listen_closed+0x5c>)
 80050cc:	22c0      	movs	r2, #192	; 0xc0
 80050ce:	4913      	ldr	r1, [pc, #76]	; (800511c <tcp_listen_closed+0x60>)
 80050d0:	4813      	ldr	r0, [pc, #76]	; (8005120 <tcp_listen_closed+0x64>)
 80050d2:	f007 ff83 	bl	800cfdc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	7d1b      	ldrb	r3, [r3, #20]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d005      	beq.n	80050ea <tcp_listen_closed+0x2e>
 80050de:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <tcp_listen_closed+0x5c>)
 80050e0:	22c1      	movs	r2, #193	; 0xc1
 80050e2:	4910      	ldr	r1, [pc, #64]	; (8005124 <tcp_listen_closed+0x68>)
 80050e4:	480e      	ldr	r0, [pc, #56]	; (8005120 <tcp_listen_closed+0x64>)
 80050e6:	f007 ff79 	bl	800cfdc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80050ea:	2301      	movs	r3, #1
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e00b      	b.n	8005108 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80050f0:	4a0d      	ldr	r2, [pc, #52]	; (8005128 <tcp_listen_closed+0x6c>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff ffc1 	bl	8005084 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b03      	cmp	r3, #3
 800510c:	d9f0      	bls.n	80050f0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	0800e6e0 	.word	0x0800e6e0
 800511c:	0800e710 	.word	0x0800e710
 8005120:	0800e71c 	.word	0x0800e71c
 8005124:	0800e744 	.word	0x0800e744
 8005128:	0800fb1c 	.word	0x0800fb1c

0800512c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800512c:	b5b0      	push	{r4, r5, r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af02      	add	r7, sp, #8
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d075      	beq.n	800522a <tcp_close_shutdown+0xfe>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7d1b      	ldrb	r3, [r3, #20]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d003      	beq.n	800514e <tcp_close_shutdown+0x22>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	7d1b      	ldrb	r3, [r3, #20]
 800514a:	2b07      	cmp	r3, #7
 800514c:	d16d      	bne.n	800522a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005152:	2b00      	cmp	r3, #0
 8005154:	d104      	bne.n	8005160 <tcp_close_shutdown+0x34>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800515e:	d064      	beq.n	800522a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	7e9b      	ldrb	r3, [r3, #26]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <tcp_close_shutdown+0x4e>
 800516c:	4b5b      	ldr	r3, [pc, #364]	; (80052dc <tcp_close_shutdown+0x1b0>)
 800516e:	f240 120f 	movw	r2, #271	; 0x10f
 8005172:	495b      	ldr	r1, [pc, #364]	; (80052e0 <tcp_close_shutdown+0x1b4>)
 8005174:	485b      	ldr	r0, [pc, #364]	; (80052e4 <tcp_close_shutdown+0x1b8>)
 8005176:	f007 ff31 	bl	800cfdc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005182:	687c      	ldr	r4, [r7, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1d1d      	adds	r5, r3, #4
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8adb      	ldrh	r3, [r3, #22]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	8b12      	ldrh	r2, [r2, #24]
 8005190:	9201      	str	r2, [sp, #4]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	462b      	mov	r3, r5
 8005196:	4622      	mov	r2, r4
 8005198:	f004 fee6 	bl	8009f68 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f001 fa23 	bl	80065e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80051a2:	4b51      	ldr	r3, [pc, #324]	; (80052e8 <tcp_close_shutdown+0x1bc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d105      	bne.n	80051b8 <tcp_close_shutdown+0x8c>
 80051ac:	4b4e      	ldr	r3, [pc, #312]	; (80052e8 <tcp_close_shutdown+0x1bc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4a4d      	ldr	r2, [pc, #308]	; (80052e8 <tcp_close_shutdown+0x1bc>)
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e013      	b.n	80051e0 <tcp_close_shutdown+0xb4>
 80051b8:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <tcp_close_shutdown+0x1bc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e00c      	b.n	80051da <tcp_close_shutdown+0xae>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d104      	bne.n	80051d4 <tcp_close_shutdown+0xa8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	e005      	b.n	80051e0 <tcp_close_shutdown+0xb4>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ef      	bne.n	80051c0 <tcp_close_shutdown+0x94>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	60da      	str	r2, [r3, #12]
 80051e6:	4b41      	ldr	r3, [pc, #260]	; (80052ec <tcp_close_shutdown+0x1c0>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	7d1b      	ldrb	r3, [r3, #20]
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d10c      	bne.n	800520e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	220a      	movs	r2, #10
 80051f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80051fa:	4b3d      	ldr	r3, [pc, #244]	; (80052f0 <tcp_close_shutdown+0x1c4>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	4a3b      	ldr	r2, [pc, #236]	; (80052f0 <tcp_close_shutdown+0x1c4>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	f005 f8f6 	bl	800a3f8 <tcp_timer_needed>
 800520c:	e00b      	b.n	8005226 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800520e:	4b39      	ldr	r3, [pc, #228]	; (80052f4 <tcp_close_shutdown+0x1c8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	d102      	bne.n	800521e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005218:	f003 fd46 	bl	8008ca8 <tcp_trigger_input_pcb_close>
 800521c:	e003      	b.n	8005226 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	2001      	movs	r0, #1
 8005222:	f7fe ff5d 	bl	80040e0 <memp_free>
        }
      }
      return ERR_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e053      	b.n	80052d2 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	7d1b      	ldrb	r3, [r3, #20]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d03d      	beq.n	80052ae <tcp_close_shutdown+0x182>
 8005232:	2b02      	cmp	r3, #2
 8005234:	dc47      	bgt.n	80052c6 <tcp_close_shutdown+0x19a>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <tcp_close_shutdown+0x114>
 800523a:	2b01      	cmp	r3, #1
 800523c:	d02b      	beq.n	8005296 <tcp_close_shutdown+0x16a>
 800523e:	e042      	b.n	80052c6 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8adb      	ldrh	r3, [r3, #22]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d021      	beq.n	800528c <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <tcp_close_shutdown+0x1cc>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	429a      	cmp	r2, r3
 8005250:	d105      	bne.n	800525e <tcp_close_shutdown+0x132>
 8005252:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <tcp_close_shutdown+0x1cc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4a27      	ldr	r2, [pc, #156]	; (80052f8 <tcp_close_shutdown+0x1cc>)
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	e013      	b.n	8005286 <tcp_close_shutdown+0x15a>
 800525e:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <tcp_close_shutdown+0x1cc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	e00c      	b.n	8005280 <tcp_close_shutdown+0x154>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d104      	bne.n	800527a <tcp_close_shutdown+0x14e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	60da      	str	r2, [r3, #12]
 8005278:	e005      	b.n	8005286 <tcp_close_shutdown+0x15a>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1ef      	bne.n	8005266 <tcp_close_shutdown+0x13a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	2001      	movs	r0, #1
 8005290:	f7fe ff26 	bl	80040e0 <memp_free>
    break;
 8005294:	e01c      	b.n	80052d0 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff ff10 	bl	80050bc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4817      	ldr	r0, [pc, #92]	; (80052fc <tcp_close_shutdown+0x1d0>)
 80052a0:	f001 f9e4 	bl	800666c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	2002      	movs	r0, #2
 80052a8:	f7fe ff1a 	bl	80040e0 <memp_free>
    break;
 80052ac:	e010      	b.n	80052d0 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	480d      	ldr	r0, [pc, #52]	; (80052e8 <tcp_close_shutdown+0x1bc>)
 80052b2:	f001 f9db 	bl	800666c <tcp_pcb_remove>
 80052b6:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <tcp_close_shutdown+0x1c0>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	2001      	movs	r0, #1
 80052c0:	f7fe ff0e 	bl	80040e0 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80052c4:	e004      	b.n	80052d0 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f81a 	bl	8005300 <tcp_close_shutdown_fin>
 80052cc:	4603      	mov	r3, r0
 80052ce:	e000      	b.n	80052d2 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bdb0      	pop	{r4, r5, r7, pc}
 80052da:	bf00      	nop
 80052dc:	0800e6e0 	.word	0x0800e6e0
 80052e0:	0800e75c 	.word	0x0800e75c
 80052e4:	0800e71c 	.word	0x0800e71c
 80052e8:	200088ec 	.word	0x200088ec
 80052ec:	200088f4 	.word	0x200088f4
 80052f0:	200088f0 	.word	0x200088f0
 80052f4:	2000892c 	.word	0x2000892c
 80052f8:	200088e4 	.word	0x200088e4
 80052fc:	200088e8 	.word	0x200088e8

08005300 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <tcp_close_shutdown_fin+0x1c>
 800530e:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <tcp_close_shutdown_fin+0xc8>)
 8005310:	f240 124d 	movw	r2, #333	; 0x14d
 8005314:	492d      	ldr	r1, [pc, #180]	; (80053cc <tcp_close_shutdown_fin+0xcc>)
 8005316:	482e      	ldr	r0, [pc, #184]	; (80053d0 <tcp_close_shutdown_fin+0xd0>)
 8005318:	f007 fe60 	bl	800cfdc <iprintf>

  switch (pcb->state) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	7d1b      	ldrb	r3, [r3, #20]
 8005320:	2b07      	cmp	r3, #7
 8005322:	d020      	beq.n	8005366 <tcp_close_shutdown_fin+0x66>
 8005324:	2b07      	cmp	r3, #7
 8005326:	dc2b      	bgt.n	8005380 <tcp_close_shutdown_fin+0x80>
 8005328:	2b03      	cmp	r3, #3
 800532a:	d002      	beq.n	8005332 <tcp_close_shutdown_fin+0x32>
 800532c:	2b04      	cmp	r3, #4
 800532e:	d00d      	beq.n	800534c <tcp_close_shutdown_fin+0x4c>
 8005330:	e026      	b.n	8005380 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f003 fd42 	bl	8008dbc <tcp_send_fin>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800533c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11f      	bne.n	8005384 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2205      	movs	r2, #5
 8005348:	751a      	strb	r2, [r3, #20]
    }
    break;
 800534a:	e01b      	b.n	8005384 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f003 fd35 	bl	8008dbc <tcp_send_fin>
 8005352:	4603      	mov	r3, r0
 8005354:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d114      	bne.n	8005388 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2205      	movs	r2, #5
 8005362:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005364:	e010      	b.n	8005388 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f003 fd28 	bl	8008dbc <tcp_send_fin>
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2209      	movs	r2, #9
 800537c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800537e:	e005      	b.n	800538c <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e01c      	b.n	80053be <tcp_close_shutdown_fin+0xbe>
    break;
 8005384:	bf00      	nop
 8005386:	e002      	b.n	800538e <tcp_close_shutdown_fin+0x8e>
    break;
 8005388:	bf00      	nop
 800538a:	e000      	b.n	800538e <tcp_close_shutdown_fin+0x8e>
    break;
 800538c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800538e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f004 fb62 	bl	8009a60 <tcp_output>
 800539c:	e00d      	b.n	80053ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800539e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d108      	bne.n	80053ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	7e9b      	ldrb	r3, [r3, #26]
 80053ac:	f043 0308 	orr.w	r3, r3, #8
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e001      	b.n	80053be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80053ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	0800e6e0 	.word	0x0800e6e0
 80053cc:	0800e710 	.word	0x0800e710
 80053d0:	0800e71c 	.word	0x0800e71c

080053d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7d1b      	ldrb	r3, [r3, #20]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d006      	beq.n	80053f2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	7e9b      	ldrb	r3, [r3, #26]
 80053e8:	f043 0310 	orr.w	r3, r3, #16
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80053f2:	2101      	movs	r1, #1
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff fe99 	bl	800512c <tcp_close_shutdown>
 80053fa:	4603      	mov	r3, r0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08c      	sub	sp, #48	; 0x30
 8005408:	af02      	add	r7, sp, #8
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	7d1b      	ldrb	r3, [r3, #20]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d106      	bne.n	8005424 <tcp_abandon+0x20>
 8005416:	4b4d      	ldr	r3, [pc, #308]	; (800554c <tcp_abandon+0x148>)
 8005418:	f240 12df 	movw	r2, #479	; 0x1df
 800541c:	494c      	ldr	r1, [pc, #304]	; (8005550 <tcp_abandon+0x14c>)
 800541e:	484d      	ldr	r0, [pc, #308]	; (8005554 <tcp_abandon+0x150>)
 8005420:	f007 fddc 	bl	800cfdc <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	7d1b      	ldrb	r3, [r3, #20]
 8005428:	2b0a      	cmp	r3, #10
 800542a:	d108      	bne.n	800543e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	484a      	ldr	r0, [pc, #296]	; (8005558 <tcp_abandon+0x154>)
 8005430:	f001 f91c 	bl	800666c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	2001      	movs	r0, #1
 8005438:	f7fe fe52 	bl	80040e0 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800543c:	e081      	b.n	8005542 <tcp_abandon+0x13e>
    int send_rst = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005458:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	7d1b      	ldrb	r3, [r3, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d126      	bne.n	80054b6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	8adb      	ldrh	r3, [r3, #22]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02e      	beq.n	80054ce <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005470:	4b3a      	ldr	r3, [pc, #232]	; (800555c <tcp_abandon+0x158>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d105      	bne.n	8005486 <tcp_abandon+0x82>
 800547a:	4b38      	ldr	r3, [pc, #224]	; (800555c <tcp_abandon+0x158>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4a36      	ldr	r2, [pc, #216]	; (800555c <tcp_abandon+0x158>)
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e013      	b.n	80054ae <tcp_abandon+0xaa>
 8005486:	4b35      	ldr	r3, [pc, #212]	; (800555c <tcp_abandon+0x158>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	e00c      	b.n	80054a8 <tcp_abandon+0xa4>
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d104      	bne.n	80054a2 <tcp_abandon+0x9e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	60da      	str	r2, [r3, #12]
 80054a0:	e005      	b.n	80054ae <tcp_abandon+0xaa>
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1ef      	bne.n	800548e <tcp_abandon+0x8a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	60da      	str	r2, [r3, #12]
 80054b4:	e00b      	b.n	80054ce <tcp_abandon+0xca>
      send_rst = reset;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8adb      	ldrh	r3, [r3, #22]
 80054be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4827      	ldr	r0, [pc, #156]	; (8005560 <tcp_abandon+0x15c>)
 80054c4:	f001 f8d2 	bl	800666c <tcp_pcb_remove>
 80054c8:	4b26      	ldr	r3, [pc, #152]	; (8005564 <tcp_abandon+0x160>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fe17 	bl	800610e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fe0e 	bl	800610e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d004      	beq.n	8005504 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fe05 	bl	800610e <tcp_segs_free>
    if (send_rst) {
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00c      	beq.n	8005524 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	1d19      	adds	r1, r3, #4
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8b1b      	ldrh	r3, [r3, #24]
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	460b      	mov	r3, r1
 800551c:	6979      	ldr	r1, [r7, #20]
 800551e:	69b8      	ldr	r0, [r7, #24]
 8005520:	f004 fd22 	bl	8009f68 <tcp_rst>
    last_state = pcb->state;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	7d1b      	ldrb	r3, [r3, #20]
 8005528:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	2001      	movs	r0, #1
 800552e:	f7fe fdd7 	bl	80040e0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <tcp_abandon+0x13e>
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f06f 010c 	mvn.w	r1, #12
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	4798      	blx	r3
}
 8005542:	bf00      	nop
 8005544:	3728      	adds	r7, #40	; 0x28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	0800e6e0 	.word	0x0800e6e0
 8005550:	0800e778 	.word	0x0800e778
 8005554:	0800e71c 	.word	0x0800e71c
 8005558:	200088f0 	.word	0x200088f0
 800555c:	200088e4 	.word	0x200088e4
 8005560:	200088ec 	.word	0x200088ec
 8005564:	200088f4 	.word	0x200088f4

08005568 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005570:	2101      	movs	r1, #1
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff ff46 	bl	8005404 <tcp_abandon>
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800558e:	2304      	movs	r3, #4
 8005590:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8005598:	4b3c      	ldr	r3, [pc, #240]	; (800568c <tcp_bind+0x10c>)
 800559a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <tcp_bind+0x28>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <tcp_bind+0x2e>
    return ERR_VAL;
 80055a8:	f06f 0305 	mvn.w	r3, #5
 80055ac:	e06a      	b.n	8005684 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	7d1b      	ldrb	r3, [r3, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <tcp_bind+0x4a>
 80055b6:	4b36      	ldr	r3, [pc, #216]	; (8005690 <tcp_bind+0x110>)
 80055b8:	f44f 7211 	mov.w	r2, #580	; 0x244
 80055bc:	4935      	ldr	r1, [pc, #212]	; (8005694 <tcp_bind+0x114>)
 80055be:	4836      	ldr	r0, [pc, #216]	; (8005698 <tcp_bind+0x118>)
 80055c0:	f007 fd0c 	bl	800cfdc <iprintf>
 80055c4:	f06f 0305 	mvn.w	r3, #5
 80055c8:	e05c      	b.n	8005684 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80055ca:	88fb      	ldrh	r3, [r7, #6]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <tcp_bind+0x64>
    port = tcp_new_port();
 80055d0:	f000 f9ca 	bl	8005968 <tcp_new_port>
 80055d4:	4603      	mov	r3, r0
 80055d6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d135      	bne.n	800564a <tcp_bind+0xca>
      return ERR_BUF;
 80055de:	f06f 0301 	mvn.w	r3, #1
 80055e2:	e04f      	b.n	8005684 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80055e4:	2300      	movs	r3, #0
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e02b      	b.n	8005642 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <tcp_bind+0x11c>)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	e01e      	b.n	8005636 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	8adb      	ldrh	r3, [r3, #22]
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d116      	bne.n	8005630 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8005602:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005604:	2b00      	cmp	r3, #0
 8005606:	d010      	beq.n	800562a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00c      	beq.n	800562a <tcp_bind+0xaa>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005626:	429a      	cmp	r2, r3
 8005628:	d102      	bne.n	8005630 <tcp_bind+0xb0>
              return ERR_USE;
 800562a:	f06f 0307 	mvn.w	r3, #7
 800562e:	e029      	b.n	8005684 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1dd      	bne.n	80055f8 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	3301      	adds	r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	429a      	cmp	r2, r3
 8005648:	dbcf      	blt.n	80055ea <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <tcp_bind+0xea>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <tcp_bind+0xe4>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	e000      	b.n	8005666 <tcp_bind+0xe6>
 8005664:	2300      	movs	r3, #0
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	88fa      	ldrh	r2, [r7, #6]
 800566e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <tcp_bind+0x120>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <tcp_bind+0x120>)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	f004 febb 	bl	800a3f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	0800fb44 	.word	0x0800fb44
 8005690:	0800e6e0 	.word	0x0800e6e0
 8005694:	0800e7ac 	.word	0x0800e7ac
 8005698:	0800e71c 	.word	0x0800e71c
 800569c:	0800fb1c 	.word	0x0800fb1c
 80056a0:	200088e4 	.word	0x200088e4

080056a4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 80056b2:	68b8      	ldr	r0, [r7, #8]
 80056b4:	f7ff ff58 	bl	8005568 <tcp_abort>

  return ERR_ABRT;
 80056b8:	f06f 030c 	mvn.w	r3, #12
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	2200      	movs	r2, #0
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f806 	bl	80056e8 <tcp_listen_with_backlog_and_err>
 80056dc:	4603      	mov	r3, r0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	460b      	mov	r3, r1
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	7d1b      	ldrb	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <tcp_listen_with_backlog_and_err+0x2e>
 8005702:	4b3f      	ldr	r3, [pc, #252]	; (8005800 <tcp_listen_with_backlog_and_err+0x118>)
 8005704:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8005708:	493e      	ldr	r1, [pc, #248]	; (8005804 <tcp_listen_with_backlog_and_err+0x11c>)
 800570a:	483f      	ldr	r0, [pc, #252]	; (8005808 <tcp_listen_with_backlog_and_err+0x120>)
 800570c:	f007 fc66 	bl	800cfdc <iprintf>
 8005710:	23f1      	movs	r3, #241	; 0xf1
 8005712:	76fb      	strb	r3, [r7, #27]
 8005714:	e069      	b.n	80057ea <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	7d1b      	ldrb	r3, [r3, #20]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d104      	bne.n	8005728 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8005722:	23f7      	movs	r3, #247	; 0xf7
 8005724:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005726:	e060      	b.n	80057ea <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005728:	2002      	movs	r0, #2
 800572a:	f7fe fc8d 	bl	8004048 <memp_malloc>
 800572e:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d102      	bne.n	800573c <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8005736:	23ff      	movs	r3, #255	; 0xff
 8005738:	76fb      	strb	r3, [r7, #27]
    goto done;
 800573a:	e056      	b.n	80057ea <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8ada      	ldrh	r2, [r3, #22]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2201      	movs	r2, #1
 8005750:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	7d5a      	ldrb	r2, [r3, #21]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	7a1a      	ldrb	r2, [r3, #8]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	7a9a      	ldrb	r2, [r3, #10]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	7a5a      	ldrb	r2, [r3, #9]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8adb      	ldrh	r3, [r3, #22]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d021      	beq.n	80057c6 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8005782:	4b22      	ldr	r3, [pc, #136]	; (800580c <tcp_listen_with_backlog_and_err+0x124>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	429a      	cmp	r2, r3
 800578a:	d105      	bne.n	8005798 <tcp_listen_with_backlog_and_err+0xb0>
 800578c:	4b1f      	ldr	r3, [pc, #124]	; (800580c <tcp_listen_with_backlog_and_err+0x124>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	4a1e      	ldr	r2, [pc, #120]	; (800580c <tcp_listen_with_backlog_and_err+0x124>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e013      	b.n	80057c0 <tcp_listen_with_backlog_and_err+0xd8>
 8005798:	4b1c      	ldr	r3, [pc, #112]	; (800580c <tcp_listen_with_backlog_and_err+0x124>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e00c      	b.n	80057ba <tcp_listen_with_backlog_and_err+0xd2>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d104      	bne.n	80057b4 <tcp_listen_with_backlog_and_err+0xcc>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	60da      	str	r2, [r3, #12]
 80057b2:	e005      	b.n	80057c0 <tcp_listen_with_backlog_and_err+0xd8>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1ef      	bne.n	80057a0 <tcp_listen_with_backlog_and_err+0xb8>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 80057c6:	68f9      	ldr	r1, [r7, #12]
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fe fc89 	bl	80040e0 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4a0f      	ldr	r2, [pc, #60]	; (8005810 <tcp_listen_with_backlog_and_err+0x128>)
 80057d2:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <tcp_listen_with_backlog_and_err+0x12c>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	60da      	str	r2, [r3, #12]
 80057dc:	4a0d      	ldr	r2, [pc, #52]	; (8005814 <tcp_listen_with_backlog_and_err+0x12c>)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	f004 fe09 	bl	800a3f8 <tcp_timer_needed>
  res = ERR_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	7efa      	ldrb	r2, [r7, #27]
 80057f4:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80057f6:	69fb      	ldr	r3, [r7, #28]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	0800e6e0 	.word	0x0800e6e0
 8005804:	0800e7d4 	.word	0x0800e7d4
 8005808:	0800e71c 	.word	0x0800e71c
 800580c:	200088e4 	.word	0x200088e4
 8005810:	080056a5 	.word	0x080056a5
 8005814:	200088e8 	.word	0x200088e8

08005818 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005828:	4413      	add	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005834:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005838:	bf28      	it	cs
 800583a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800583e:	b292      	uxth	r2, r2
 8005840:	4413      	add	r3, r2
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	db08      	blt.n	800585c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	e020      	b.n	800589e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	dd03      	ble.n	8005872 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005870:	e014      	b.n	800589c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d306      	bcc.n	8005894 <tcp_update_rcv_ann_wnd+0x7c>
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <tcp_update_rcv_ann_wnd+0x90>)
 8005888:	f44f 7242 	mov.w	r2, #776	; 0x308
 800588c:	4907      	ldr	r1, [pc, #28]	; (80058ac <tcp_update_rcv_ann_wnd+0x94>)
 800588e:	4808      	ldr	r0, [pc, #32]	; (80058b0 <tcp_update_rcv_ann_wnd+0x98>)
 8005890:	f007 fba4 	bl	800cfdc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800589c:	2300      	movs	r3, #0
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	0800e6e0 	.word	0x0800e6e0
 80058ac:	0800e7f8 	.word	0x0800e7f8
 80058b0:	0800e71c 	.word	0x0800e71c

080058b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7d1b      	ldrb	r3, [r3, #20]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d106      	bne.n	80058d6 <tcp_recved+0x22>
 80058c8:	4b23      	ldr	r3, [pc, #140]	; (8005958 <tcp_recved+0xa4>)
 80058ca:	f240 321f 	movw	r2, #799	; 0x31f
 80058ce:	4923      	ldr	r1, [pc, #140]	; (800595c <tcp_recved+0xa8>)
 80058d0:	4823      	ldr	r0, [pc, #140]	; (8005960 <tcp_recved+0xac>)
 80058d2:	f007 fb83 	bl	800cfdc <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80058da:	887b      	ldrh	r3, [r7, #2]
 80058dc:	4413      	add	r3, r2
 80058de:	b29a      	uxth	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80058ec:	d904      	bls.n	80058f8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80058f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80058f6:	e017      	b.n	8005928 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d113      	bne.n	8005928 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	7d1b      	ldrb	r3, [r3, #20]
 8005904:	2b07      	cmp	r3, #7
 8005906:	d003      	beq.n	8005910 <tcp_recved+0x5c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	7d1b      	ldrb	r3, [r3, #20]
 800590c:	2b09      	cmp	r3, #9
 800590e:	d104      	bne.n	800591a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005916:	851a      	strh	r2, [r3, #40]	; 0x28
 8005918:	e006      	b.n	8005928 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <tcp_recved+0xa4>)
 800591c:	f240 322d 	movw	r2, #813	; 0x32d
 8005920:	4910      	ldr	r1, [pc, #64]	; (8005964 <tcp_recved+0xb0>)
 8005922:	480f      	ldr	r0, [pc, #60]	; (8005960 <tcp_recved+0xac>)
 8005924:	f007 fb5a 	bl	800cfdc <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff ff75 	bl	8005818 <tcp_update_rcv_ann_wnd>
 800592e:	4603      	mov	r3, r0
 8005930:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005938:	db09      	blt.n	800594e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	7e9b      	ldrb	r3, [r3, #26]
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	b2da      	uxtb	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f004 f889 	bl	8009a60 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800594e:	bf00      	nop
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	0800e6e0 	.word	0x0800e6e0
 800595c:	0800e814 	.word	0x0800e814
 8005960:	0800e71c 	.word	0x0800e71c
 8005964:	0800e83c 	.word	0x0800e83c

08005968 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <tcp_new_port+0x80>)
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	b291      	uxth	r1, r2
 800597a:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <tcp_new_port+0x80>)
 800597c:	8011      	strh	r1, [r2, #0]
 800597e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005982:	4293      	cmp	r3, r2
 8005984:	d103      	bne.n	800598e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <tcp_new_port+0x80>)
 8005988:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800598c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800598e:	2300      	movs	r3, #0
 8005990:	71fb      	strb	r3, [r7, #7]
 8005992:	e01e      	b.n	80059d2 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	4a15      	ldr	r2, [pc, #84]	; (80059ec <tcp_new_port+0x84>)
 8005998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	e011      	b.n	80059c6 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	8ada      	ldrh	r2, [r3, #22]
 80059a6:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <tcp_new_port+0x80>)
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d108      	bne.n	80059c0 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80059ae:	88bb      	ldrh	r3, [r7, #4]
 80059b0:	3301      	adds	r3, #1
 80059b2:	80bb      	strh	r3, [r7, #4]
 80059b4:	88bb      	ldrh	r3, [r7, #4]
 80059b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ba:	d3da      	bcc.n	8005972 <tcp_new_port+0xa>
          return 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	e00d      	b.n	80059dc <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ea      	bne.n	80059a2 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	3301      	adds	r3, #1
 80059d0:	71fb      	strb	r3, [r7, #7]
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d9dd      	bls.n	8005994 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <tcp_new_port+0x80>)
 80059da:	881b      	ldrh	r3, [r3, #0]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	2000000a 	.word	0x2000000a
 80059ec:	0800fb1c 	.word	0x0800fb1c

080059f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b08c      	sub	sp, #48	; 0x30
 80059f4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80059fa:	4b97      	ldr	r3, [pc, #604]	; (8005c58 <tcp_slowtmr+0x268>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3301      	adds	r3, #1
 8005a00:	4a95      	ldr	r2, [pc, #596]	; (8005c58 <tcp_slowtmr+0x268>)
 8005a02:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005a04:	4b95      	ldr	r3, [pc, #596]	; (8005c5c <tcp_slowtmr+0x26c>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	4b93      	ldr	r3, [pc, #588]	; (8005c5c <tcp_slowtmr+0x26c>)
 8005a0e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005a10:	2300      	movs	r3, #0
 8005a12:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8005a14:	4b92      	ldr	r3, [pc, #584]	; (8005c60 <tcp_slowtmr+0x270>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005a1a:	e227      	b.n	8005e6c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	7d1b      	ldrb	r3, [r3, #20]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <tcp_slowtmr+0x42>
 8005a24:	4b8f      	ldr	r3, [pc, #572]	; (8005c64 <tcp_slowtmr+0x274>)
 8005a26:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8005a2a:	498f      	ldr	r1, [pc, #572]	; (8005c68 <tcp_slowtmr+0x278>)
 8005a2c:	488f      	ldr	r0, [pc, #572]	; (8005c6c <tcp_slowtmr+0x27c>)
 8005a2e:	f007 fad5 	bl	800cfdc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	7d1b      	ldrb	r3, [r3, #20]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d106      	bne.n	8005a48 <tcp_slowtmr+0x58>
 8005a3a:	4b8a      	ldr	r3, [pc, #552]	; (8005c64 <tcp_slowtmr+0x274>)
 8005a3c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005a40:	498b      	ldr	r1, [pc, #556]	; (8005c70 <tcp_slowtmr+0x280>)
 8005a42:	488a      	ldr	r0, [pc, #552]	; (8005c6c <tcp_slowtmr+0x27c>)
 8005a44:	f007 faca 	bl	800cfdc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	7d1b      	ldrb	r3, [r3, #20]
 8005a4c:	2b0a      	cmp	r3, #10
 8005a4e:	d106      	bne.n	8005a5e <tcp_slowtmr+0x6e>
 8005a50:	4b84      	ldr	r3, [pc, #528]	; (8005c64 <tcp_slowtmr+0x274>)
 8005a52:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8005a56:	4987      	ldr	r1, [pc, #540]	; (8005c74 <tcp_slowtmr+0x284>)
 8005a58:	4884      	ldr	r0, [pc, #528]	; (8005c6c <tcp_slowtmr+0x27c>)
 8005a5a:	f007 fabf 	bl	800cfdc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	7f5a      	ldrb	r2, [r3, #29]
 8005a62:	4b7e      	ldr	r3, [pc, #504]	; (8005c5c <tcp_slowtmr+0x26c>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d103      	bne.n	8005a72 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8005a70:	e1fc      	b.n	8005e6c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005a72:	4b7a      	ldr	r3, [pc, #488]	; (8005c5c <tcp_slowtmr+0x26c>)
 8005a74:	781a      	ldrb	r2, [r3, #0]
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	7d1b      	ldrb	r3, [r3, #20]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d108      	bne.n	8005a9c <tcp_slowtmr+0xac>
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a90:	2b05      	cmp	r3, #5
 8005a92:	d903      	bls.n	8005a9c <tcp_slowtmr+0xac>
      ++pcb_remove;
 8005a94:	7ffb      	ldrb	r3, [r7, #31]
 8005a96:	3301      	adds	r3, #1
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e0a2      	b.n	8005be2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aa2:	2b0b      	cmp	r3, #11
 8005aa4:	d903      	bls.n	8005aae <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005aa6:	7ffb      	ldrb	r3, [r7, #31]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e099      	b.n	8005be2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d032      	beq.n	8005b1e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	4a6d      	ldr	r2, [pc, #436]	; (8005c78 <tcp_slowtmr+0x288>)
 8005ac2:	5cd3      	ldrb	r3, [r2, r3]
 8005ac4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005acc:	7cfa      	ldrb	r2, [r7, #19]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d907      	bls.n	8005ae2 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005ad8:	3301      	adds	r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005ae8:	7cfa      	ldrb	r2, [r7, #19]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d879      	bhi.n	8005be2 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005af0:	f004 fbc1 	bl	800a276 <tcp_zero_window_probe>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d173      	bne.n	8005be2 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005b08:	2b06      	cmp	r3, #6
 8005b0a:	d86a      	bhi.n	8005be2 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005b12:	3301      	adds	r3, #1
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8005b1c:	e061      	b.n	8005be2 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	db08      	blt.n	8005b3a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3301      	adds	r3, #1
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	b21a      	sxth	r2, r3
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d04f      	beq.n	8005be2 <tcp_slowtmr+0x1f2>
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	db47      	blt.n	8005be2 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	7d1b      	ldrb	r3, [r3, #20]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d018      	beq.n	8005b8c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b60:	2b0c      	cmp	r3, #12
 8005b62:	bf28      	it	cs
 8005b64:	230c      	movcs	r3, #12
 8005b66:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005b6e:	10db      	asrs	r3, r3, #3
 8005b70:	b21b      	sxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005b7a:	4413      	add	r3, r2
 8005b7c:	7dfa      	ldrb	r2, [r7, #23]
 8005b7e:	493f      	ldr	r1, [pc, #252]	; (8005c7c <tcp_slowtmr+0x28c>)
 8005b80:	5c8a      	ldrb	r2, [r1, r2]
 8005b82:	4093      	lsls	r3, r2
 8005b84:	b21a      	sxth	r2, r3
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	2200      	movs	r2, #0
 8005b90:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	bf28      	it	cs
 8005ba2:	4613      	movcs	r3, r2
 8005ba4:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8005ba6:	8abb      	ldrh	r3, [r7, #20]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d206      	bcs.n	8005bd2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8005bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bde:	f004 fa39 	bl	800a054 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	7d1b      	ldrb	r3, [r3, #20]
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d10f      	bne.n	8005c0a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	7e9b      	ldrb	r3, [r3, #26]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005bf6:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <tcp_slowtmr+0x268>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b28      	cmp	r3, #40	; 0x28
 8005c02:	d902      	bls.n	8005c0a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005c04:	7ffb      	ldrb	r3, [r7, #31]
 8005c06:	3301      	adds	r3, #1
 8005c08:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	7a1b      	ldrb	r3, [r3, #8]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d05d      	beq.n	8005cd2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d003      	beq.n	8005c26 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8005c22:	2b07      	cmp	r3, #7
 8005c24:	d155      	bne.n	8005cd2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <tcp_slowtmr+0x268>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005c3a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005c3e:	4910      	ldr	r1, [pc, #64]	; (8005c80 <tcp_slowtmr+0x290>)
 8005c40:	fba1 1303 	umull	r1, r3, r1, r3
 8005c44:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d91c      	bls.n	8005c84 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005c4a:	7ffb      	ldrb	r3, [r7, #31]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8005c50:	7fbb      	ldrb	r3, [r7, #30]
 8005c52:	3301      	adds	r3, #1
 8005c54:	77bb      	strb	r3, [r7, #30]
 8005c56:	e03c      	b.n	8005cd2 <tcp_slowtmr+0x2e2>
 8005c58:	200088e0 	.word	0x200088e0
 8005c5c:	200088f6 	.word	0x200088f6
 8005c60:	200088ec 	.word	0x200088ec
 8005c64:	0800e6e0 	.word	0x0800e6e0
 8005c68:	0800e890 	.word	0x0800e890
 8005c6c:	0800e71c 	.word	0x0800e71c
 8005c70:	0800e8bc 	.word	0x0800e8bc
 8005c74:	0800e8e8 	.word	0x0800e8e8
 8005c78:	0800fb14 	.word	0x0800fb14
 8005c7c:	0800fb04 	.word	0x0800fb04
 8005c80:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005c84:	4b97      	ldr	r3, [pc, #604]	; (8005ee4 <tcp_slowtmr+0x4f4>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	4b92      	ldr	r3, [pc, #584]	; (8005ee8 <tcp_slowtmr+0x4f8>)
 8005c9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ca2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8005ca4:	4991      	ldr	r1, [pc, #580]	; (8005eec <tcp_slowtmr+0x4fc>)
 8005ca6:	fba1 1303 	umull	r1, r3, r1, r3
 8005caa:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d910      	bls.n	8005cd2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8005cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cb2:	f004 faa3 	bl	800a1fc <tcp_keepalive>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8005cba:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005cc8:	3301      	adds	r3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d016      	beq.n	8005d08 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005cda:	4b82      	ldr	r3, [pc, #520]	; (8005ee4 <tcp_slowtmr+0x4f4>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cea:	4619      	mov	r1, r3
 8005cec:	460b      	mov	r3, r1
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	440b      	add	r3, r1
 8005cf2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d307      	bcc.n	8005d08 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fa06 	bl	800610e <tcp_segs_free>
      pcb->ooseq = NULL;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	2200      	movs	r2, #0
 8005d06:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	7d1b      	ldrb	r3, [r3, #20]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d109      	bne.n	8005d24 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d10:	4b74      	ldr	r3, [pc, #464]	; (8005ee4 <tcp_slowtmr+0x4f4>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b28      	cmp	r3, #40	; 0x28
 8005d1c:	d902      	bls.n	8005d24 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005d1e:	7ffb      	ldrb	r3, [r7, #31]
 8005d20:	3301      	adds	r3, #1
 8005d22:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	7d1b      	ldrb	r3, [r3, #20]
 8005d28:	2b09      	cmp	r3, #9
 8005d2a:	d109      	bne.n	8005d40 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005d2c:	4b6d      	ldr	r3, [pc, #436]	; (8005ee4 <tcp_slowtmr+0x4f4>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2bf0      	cmp	r3, #240	; 0xf0
 8005d38:	d902      	bls.n	8005d40 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8005d3a:	7ffb      	ldrb	r3, [r7, #31]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005d40:	7ffb      	ldrb	r3, [r7, #31]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d05d      	beq.n	8005e02 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d4c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d50:	f000 fc4a 	bl	80065e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005d5a:	4b65      	ldr	r3, [pc, #404]	; (8005ef0 <tcp_slowtmr+0x500>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d106      	bne.n	8005d72 <tcp_slowtmr+0x382>
 8005d64:	4b63      	ldr	r3, [pc, #396]	; (8005ef4 <tcp_slowtmr+0x504>)
 8005d66:	f240 4289 	movw	r2, #1161	; 0x489
 8005d6a:	4963      	ldr	r1, [pc, #396]	; (8005ef8 <tcp_slowtmr+0x508>)
 8005d6c:	4863      	ldr	r0, [pc, #396]	; (8005efc <tcp_slowtmr+0x50c>)
 8005d6e:	f007 f935 	bl	800cfdc <iprintf>
        prev->next = pcb->next;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	60da      	str	r2, [r3, #12]
 8005d7a:	e00f      	b.n	8005d9c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005d7c:	4b5c      	ldr	r3, [pc, #368]	; (8005ef0 <tcp_slowtmr+0x500>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d006      	beq.n	8005d94 <tcp_slowtmr+0x3a4>
 8005d86:	4b5b      	ldr	r3, [pc, #364]	; (8005ef4 <tcp_slowtmr+0x504>)
 8005d88:	f240 428d 	movw	r2, #1165	; 0x48d
 8005d8c:	495c      	ldr	r1, [pc, #368]	; (8005f00 <tcp_slowtmr+0x510>)
 8005d8e:	485b      	ldr	r0, [pc, #364]	; (8005efc <tcp_slowtmr+0x50c>)
 8005d90:	f007 f924 	bl	800cfdc <iprintf>
        tcp_active_pcbs = pcb->next;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a55      	ldr	r2, [pc, #340]	; (8005ef0 <tcp_slowtmr+0x500>)
 8005d9a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005d9c:	7fbb      	ldrb	r3, [r7, #30]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d010      	beq.n	8005dc4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005daa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	1d1d      	adds	r5, r3, #4
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	8adb      	ldrh	r3, [r3, #22]
 8005db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db6:	8b12      	ldrh	r2, [r2, #24]
 8005db8:	9201      	str	r2, [sp, #4]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	462b      	mov	r3, r5
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	f004 f8d2 	bl	8009f68 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	7d1b      	ldrb	r3, [r3, #20]
 8005dce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	2001      	movs	r0, #1
 8005dde:	f7fe f97f 	bl	80040e0 <memp_free>

      tcp_active_pcbs_changed = 0;
 8005de2:	4b48      	ldr	r3, [pc, #288]	; (8005f04 <tcp_slowtmr+0x514>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <tcp_slowtmr+0x408>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f06f 010c 	mvn.w	r1, #12
 8005df4:	68b8      	ldr	r0, [r7, #8]
 8005df6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005df8:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <tcp_slowtmr+0x514>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d035      	beq.n	8005e6c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8005e00:	e606      	b.n	8005a10 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	7edb      	ldrb	r3, [r3, #27]
 8005e10:	3301      	adds	r3, #1
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	7eda      	ldrb	r2, [r3, #27]
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	7f1b      	ldrb	r3, [r3, #28]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d323      	bcc.n	8005e6c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	2200      	movs	r2, #0
 8005e28:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005e2a:	4b36      	ldr	r3, [pc, #216]	; (8005f04 <tcp_slowtmr+0x514>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <tcp_slowtmr+0x460>
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e40:	6a3a      	ldr	r2, [r7, #32]
 8005e42:	6912      	ldr	r2, [r2, #16]
 8005e44:	6a39      	ldr	r1, [r7, #32]
 8005e46:	4610      	mov	r0, r2
 8005e48:	4798      	blx	r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	777b      	strb	r3, [r7, #29]
 8005e4e:	e001      	b.n	8005e54 <tcp_slowtmr+0x464>
 8005e50:	2300      	movs	r3, #0
 8005e52:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8005e54:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <tcp_slowtmr+0x514>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d000      	beq.n	8005e5e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8005e5c:	e5d8      	b.n	8005a10 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005e5e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8005e66:	6a38      	ldr	r0, [r7, #32]
 8005e68:	f003 fdfa 	bl	8009a60 <tcp_output>
  while (pcb != NULL) {
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f47f add4 	bne.w	8005a1c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8005e78:	4b23      	ldr	r3, [pc, #140]	; (8005f08 <tcp_slowtmr+0x518>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005e7e:	e068      	b.n	8005f52 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	7d1b      	ldrb	r3, [r3, #20]
 8005e84:	2b0a      	cmp	r3, #10
 8005e86:	d006      	beq.n	8005e96 <tcp_slowtmr+0x4a6>
 8005e88:	4b1a      	ldr	r3, [pc, #104]	; (8005ef4 <tcp_slowtmr+0x504>)
 8005e8a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005e8e:	491f      	ldr	r1, [pc, #124]	; (8005f0c <tcp_slowtmr+0x51c>)
 8005e90:	481a      	ldr	r0, [pc, #104]	; (8005efc <tcp_slowtmr+0x50c>)
 8005e92:	f007 f8a3 	bl	800cfdc <iprintf>
    pcb_remove = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <tcp_slowtmr+0x4f4>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2bf0      	cmp	r3, #240	; 0xf0
 8005ea6:	d902      	bls.n	8005eae <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8005ea8:	7ffb      	ldrb	r3, [r7, #31]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005eae:	7ffb      	ldrb	r3, [r7, #31]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d049      	beq.n	8005f48 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005eb6:	f000 fb97 	bl	80065e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d029      	beq.n	8005f14 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005ec0:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <tcp_slowtmr+0x518>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d106      	bne.n	8005ed8 <tcp_slowtmr+0x4e8>
 8005eca:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <tcp_slowtmr+0x504>)
 8005ecc:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005ed0:	490f      	ldr	r1, [pc, #60]	; (8005f10 <tcp_slowtmr+0x520>)
 8005ed2:	480a      	ldr	r0, [pc, #40]	; (8005efc <tcp_slowtmr+0x50c>)
 8005ed4:	f007 f882 	bl	800cfdc <iprintf>
        prev->next = pcb->next;
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	e028      	b.n	8005f34 <tcp_slowtmr+0x544>
 8005ee2:	bf00      	nop
 8005ee4:	200088e0 	.word	0x200088e0
 8005ee8:	000124f8 	.word	0x000124f8
 8005eec:	10624dd3 	.word	0x10624dd3
 8005ef0:	200088ec 	.word	0x200088ec
 8005ef4:	0800e6e0 	.word	0x0800e6e0
 8005ef8:	0800e918 	.word	0x0800e918
 8005efc:	0800e71c 	.word	0x0800e71c
 8005f00:	0800e944 	.word	0x0800e944
 8005f04:	200088f4 	.word	0x200088f4
 8005f08:	200088f0 	.word	0x200088f0
 8005f0c:	0800e970 	.word	0x0800e970
 8005f10:	0800e9a0 	.word	0x0800e9a0
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <tcp_slowtmr+0x574>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d006      	beq.n	8005f2c <tcp_slowtmr+0x53c>
 8005f1e:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <tcp_slowtmr+0x578>)
 8005f20:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8005f24:	4911      	ldr	r1, [pc, #68]	; (8005f6c <tcp_slowtmr+0x57c>)
 8005f26:	4812      	ldr	r0, [pc, #72]	; (8005f70 <tcp_slowtmr+0x580>)
 8005f28:	f007 f858 	bl	800cfdc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <tcp_slowtmr+0x574>)
 8005f32:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005f3e:	69b9      	ldr	r1, [r7, #24]
 8005f40:	2001      	movs	r0, #1
 8005f42:	f7fe f8cd 	bl	80040e0 <memp_free>
 8005f46:	e004      	b.n	8005f52 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d193      	bne.n	8005e80 <tcp_slowtmr+0x490>
    }
  }
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	3728      	adds	r7, #40	; 0x28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bdb0      	pop	{r4, r5, r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200088f0 	.word	0x200088f0
 8005f68:	0800e6e0 	.word	0x0800e6e0
 8005f6c:	0800e9c8 	.word	0x0800e9c8
 8005f70:	0800e71c 	.word	0x0800e71c

08005f74 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8005f7a:	4b2d      	ldr	r3, [pc, #180]	; (8006030 <tcp_fasttmr+0xbc>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	4b2b      	ldr	r3, [pc, #172]	; (8006030 <tcp_fasttmr+0xbc>)
 8005f84:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8005f86:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <tcp_fasttmr+0xc0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005f8c:	e048      	b.n	8006020 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7f5a      	ldrb	r2, [r3, #29]
 8005f92:	4b27      	ldr	r3, [pc, #156]	; (8006030 <tcp_fasttmr+0xbc>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d03f      	beq.n	800601a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8005f9a:	4b25      	ldr	r3, [pc, #148]	; (8006030 <tcp_fasttmr+0xbc>)
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	7e9b      	ldrb	r3, [r3, #26]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d010      	beq.n	8005fd0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	7e9b      	ldrb	r3, [r3, #26]
 8005fb2:	f043 0302 	orr.w	r3, r3, #2
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f003 fd4f 	bl	8009a60 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7e9b      	ldrb	r3, [r3, #26]
 8005fc6:	f023 0303 	bic.w	r3, r3, #3
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7e9b      	ldrb	r3, [r3, #26]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7e9b      	ldrb	r3, [r3, #26]
 8005fe0:	f023 0308 	bic.w	r3, r3, #8
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff f988 	bl	8005300 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <tcp_fasttmr+0xc4>)
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f819 	bl	800603c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800600a:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <tcp_fasttmr+0xc4>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d000      	beq.n	8006014 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006012:	e7b8      	b.n	8005f86 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	607b      	str	r3, [r7, #4]
 8006018:	e002      	b.n	8006020 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1b3      	bne.n	8005f8e <tcp_fasttmr+0x1a>
    }
  }
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200088f6 	.word	0x200088f6
 8006034:	200088ec 	.word	0x200088ec
 8006038:	200088f4 	.word	0x200088f4

0800603c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800603c:	b590      	push	{r4, r7, lr}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006048:	7b5b      	ldrb	r3, [r3, #13]
 800604a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006050:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <tcp_process_refused_data+0x3e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6918      	ldr	r0, [r3, #16]
 800606c:	2300      	movs	r3, #0
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	47a0      	blx	r4
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]
 8006078:	e007      	b.n	800608a <tcp_process_refused_data+0x4e>
 800607a:	2300      	movs	r3, #0
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	2000      	movs	r0, #0
 8006082:	f000 f89b 	bl	80061bc <tcp_recv_null>
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800608a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d12a      	bne.n	80060e8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006092:	7bbb      	ldrb	r3, [r7, #14]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d033      	beq.n	8006104 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80060a4:	d005      	beq.n	80060b2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060aa:	3301      	adds	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <tcp_process_refused_data+0x98>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6918      	ldr	r0, [r3, #16]
 80060c6:	2300      	movs	r3, #0
 80060c8:	2200      	movs	r2, #0
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	47a0      	blx	r4
 80060ce:	4603      	mov	r3, r0
 80060d0:	73fb      	strb	r3, [r7, #15]
 80060d2:	e001      	b.n	80060d8 <tcp_process_refused_data+0x9c>
 80060d4:	2300      	movs	r3, #0
 80060d6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80060d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060dc:	f113 0f0d 	cmn.w	r3, #13
 80060e0:	d110      	bne.n	8006104 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80060e2:	f06f 030c 	mvn.w	r3, #12
 80060e6:	e00e      	b.n	8006106 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80060e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ec:	f113 0f0d 	cmn.w	r3, #13
 80060f0:	d102      	bne.n	80060f8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80060f2:	f06f 030c 	mvn.w	r3, #12
 80060f6:	e006      	b.n	8006106 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80060fe:	f06f 0304 	mvn.w	r3, #4
 8006102:	e000      	b.n	8006106 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	bd90      	pop	{r4, r7, pc}

0800610e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006116:	e007      	b.n	8006128 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f80a 	bl	8006138 <tcp_seg_free>
    seg = next;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f4      	bne.n	8006118 <tcp_segs_free+0xa>
  }
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00c      	beq.n	8006160 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fd02 	bl	8004b5c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	2003      	movs	r0, #3
 800615c:	f7fd ffc0 	bl	80040e0 <memp_free>
  }
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	755a      	strb	r2, [r3, #21]
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr

08006184 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800618c:	2003      	movs	r0, #3
 800618e:	f7fd ff5b 	bl	8004048 <memp_malloc>
 8006192:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <tcp_seg_copy+0x1a>
    return NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	e00a      	b.n	80061b4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800619e:	2210      	movs	r2, #16
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f007 f806 	bl	800d1b4 <memcpy>
  pbuf_ref(cseg->p);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fd7f 	bl	8004cb0 <pbuf_ref>
  return cseg;
 80061b2:	68fb      	ldr	r3, [r7, #12]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	891b      	ldrh	r3, [r3, #8]
 80061d4:	4619      	mov	r1, r3
 80061d6:	68b8      	ldr	r0, [r7, #8]
 80061d8:	f7ff fb6c 	bl	80058b4 <tcp_recved>
    pbuf_free(p);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7fe fcbd 	bl	8004b5c <pbuf_free>
 80061e2:	e008      	b.n	80061f6 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80061e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80061ec:	68b8      	ldr	r0, [r7, #8]
 80061ee:	f7ff f8f1 	bl	80053d4 <tcp_close>
 80061f2:	4603      	mov	r3, r0
 80061f4:	e000      	b.n	80061f8 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800620a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620e:	2b00      	cmp	r3, #0
 8006210:	db01      	blt.n	8006216 <tcp_kill_prio+0x16>
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	e000      	b.n	8006218 <tcp_kill_prio+0x18>
 8006216:	237f      	movs	r3, #127	; 0x7f
 8006218:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006222:	4b16      	ldr	r3, [pc, #88]	; (800627c <tcp_kill_prio+0x7c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	e01a      	b.n	8006260 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	7d5b      	ldrb	r3, [r3, #21]
 800622e:	7afa      	ldrb	r2, [r7, #11]
 8006230:	429a      	cmp	r2, r3
 8006232:	d312      	bcc.n	800625a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <tcp_kill_prio+0x80>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	429a      	cmp	r2, r3
 8006242:	d80a      	bhi.n	800625a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <tcp_kill_prio+0x80>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	7d5b      	ldrb	r3, [r3, #21]
 8006258:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e1      	bne.n	800622a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800626c:	6938      	ldr	r0, [r7, #16]
 800626e:	f7ff f97b 	bl	8005568 <tcp_abort>
  }
}
 8006272:	bf00      	nop
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	200088ec 	.word	0x200088ec
 8006280:	200088e0 	.word	0x200088e0

08006284 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d009      	beq.n	80062a8 <tcp_kill_state+0x24>
 8006294:	79fb      	ldrb	r3, [r7, #7]
 8006296:	2b09      	cmp	r3, #9
 8006298:	d006      	beq.n	80062a8 <tcp_kill_state+0x24>
 800629a:	4b1a      	ldr	r3, [pc, #104]	; (8006304 <tcp_kill_state+0x80>)
 800629c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80062a0:	4919      	ldr	r1, [pc, #100]	; (8006308 <tcp_kill_state+0x84>)
 80062a2:	481a      	ldr	r0, [pc, #104]	; (800630c <tcp_kill_state+0x88>)
 80062a4:	f006 fe9a 	bl	800cfdc <iprintf>

  inactivity = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80062b0:	4b17      	ldr	r3, [pc, #92]	; (8006310 <tcp_kill_state+0x8c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	e017      	b.n	80062e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	7d1b      	ldrb	r3, [r3, #20]
 80062bc:	79fa      	ldrb	r2, [r7, #7]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d10f      	bne.n	80062e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80062c2:	4b14      	ldr	r3, [pc, #80]	; (8006314 <tcp_kill_state+0x90>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d807      	bhi.n	80062e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80062d2:	4b10      	ldr	r3, [pc, #64]	; (8006314 <tcp_kill_state+0x90>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e4      	bne.n	80062b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80062f4:	2100      	movs	r1, #0
 80062f6:	6938      	ldr	r0, [r7, #16]
 80062f8:	f7ff f884 	bl	8005404 <tcp_abandon>
  }
}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	0800e6e0 	.word	0x0800e6e0
 8006308:	0800e9f0 	.word	0x0800e9f0
 800630c:	0800e71c 	.word	0x0800e71c
 8006310:	200088ec 	.word	0x200088ec
 8006314:	200088e0 	.word	0x200088e0

08006318 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006326:	4b12      	ldr	r3, [pc, #72]	; (8006370 <tcp_kill_timewait+0x58>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	e012      	b.n	8006354 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800632e:	4b11      	ldr	r3, [pc, #68]	; (8006374 <tcp_kill_timewait+0x5c>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	429a      	cmp	r2, r3
 800633c:	d807      	bhi.n	800634e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <tcp_kill_timewait+0x5c>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e9      	bne.n	800632e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	f7ff f901 	bl	8005568 <tcp_abort>
  }
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	200088f0 	.word	0x200088f0
 8006374:	200088e0 	.word	0x200088e0

08006378 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006382:	2001      	movs	r0, #1
 8006384:	f7fd fe60 	bl	8004048 <memp_malloc>
 8006388:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d124      	bne.n	80063da <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006390:	f7ff ffc2 	bl	8006318 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006394:	2001      	movs	r0, #1
 8006396:	f7fd fe57 	bl	8004048 <memp_malloc>
 800639a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d11b      	bne.n	80063da <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80063a2:	2009      	movs	r0, #9
 80063a4:	f7ff ff6e 	bl	8006284 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80063a8:	2001      	movs	r0, #1
 80063aa:	f7fd fe4d 	bl	8004048 <memp_malloc>
 80063ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d111      	bne.n	80063da <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80063b6:	2008      	movs	r0, #8
 80063b8:	f7ff ff64 	bl	8006284 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80063bc:	2001      	movs	r0, #1
 80063be:	f7fd fe43 	bl	8004048 <memp_malloc>
 80063c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d107      	bne.n	80063da <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff ff17 	bl	8006200 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80063d2:	2001      	movs	r0, #1
 80063d4:	f7fd fe38 	bl	8004048 <memp_malloc>
 80063d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d03f      	beq.n	8006460 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80063e0:	2298      	movs	r2, #152	; 0x98
 80063e2:	2100      	movs	r1, #0
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f006 fe5e 	bl	800d0a6 <memset>
    pcb->prio = prio;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	79fa      	ldrb	r2, [r7, #7]
 80063ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80063f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	22ff      	movs	r2, #255	; 0xff
 800640e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006416:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2206      	movs	r2, #6
 800641c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2206      	movs	r2, #6
 8006424:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800642c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006436:	4b0d      	ldr	r3, [pc, #52]	; (800646c <tcp_alloc+0xf4>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800643e:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <tcp_alloc+0xf8>)
 8006440:	781a      	ldrb	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800644c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a08      	ldr	r2, [pc, #32]	; (8006474 <tcp_alloc+0xfc>)
 8006454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a07      	ldr	r2, [pc, #28]	; (8006478 <tcp_alloc+0x100>)
 800645c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006460:	68fb      	ldr	r3, [r7, #12]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	200088e0 	.word	0x200088e0
 8006470:	200088f6 	.word	0x200088f6
 8006474:	080061bd 	.word	0x080061bd
 8006478:	006ddd00 	.word	0x006ddd00

0800647c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006480:	2040      	movs	r0, #64	; 0x40
 8006482:	f7ff ff79 	bl	8006378 <tcp_alloc>
 8006486:	4603      	mov	r3, r0
}
 8006488:	4618      	mov	r0, r3
 800648a:	bd80      	pop	{r7, pc}

0800648c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	611a      	str	r2, [r3, #16]
  }
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00e      	beq.n	80064da <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	7d1b      	ldrb	r3, [r3, #20]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d106      	bne.n	80064d2 <tcp_recv+0x26>
 80064c4:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <tcp_recv+0x38>)
 80064c6:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80064ca:	4907      	ldr	r1, [pc, #28]	; (80064e8 <tcp_recv+0x3c>)
 80064cc:	4807      	ldr	r0, [pc, #28]	; (80064ec <tcp_recv+0x40>)
 80064ce:	f006 fd85 	bl	800cfdc <iprintf>
    pcb->recv = recv;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	0800e6e0 	.word	0x0800e6e0
 80064e8:	0800ea00 	.word	0x0800ea00
 80064ec:	0800e71c 	.word	0x0800e71c

080064f0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00d      	beq.n	800651c <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	7d1b      	ldrb	r3, [r3, #20]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d106      	bne.n	8006516 <tcp_sent+0x26>
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <tcp_sent+0x34>)
 800650a:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800650e:	4906      	ldr	r1, [pc, #24]	; (8006528 <tcp_sent+0x38>)
 8006510:	4806      	ldr	r0, [pc, #24]	; (800652c <tcp_sent+0x3c>)
 8006512:	f006 fd63 	bl	800cfdc <iprintf>
    pcb->sent = sent;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	0800e6e0 	.word	0x0800e6e0
 8006528:	0800ea28 	.word	0x0800ea28
 800652c:	0800e71c 	.word	0x0800e71c

08006530 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	7d1b      	ldrb	r3, [r3, #20]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d106      	bne.n	8006556 <tcp_err+0x26>
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <tcp_err+0x38>)
 800654a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800654e:	4907      	ldr	r1, [pc, #28]	; (800656c <tcp_err+0x3c>)
 8006550:	4807      	ldr	r0, [pc, #28]	; (8006570 <tcp_err+0x40>)
 8006552:	f006 fd43 	bl	800cfdc <iprintf>
    pcb->errf = err;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	0800e6e0 	.word	0x0800e6e0
 800656c:	0800ea50 	.word	0x0800ea50
 8006570:	0800e71c 	.word	0x0800e71c

08006574 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <tcp_accept+0x22>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	7d1b      	ldrb	r3, [r3, #20]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d104      	bne.n	8006596 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	619a      	str	r2, [r3, #24]
  }
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr

080065a0 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	7d1b      	ldrb	r3, [r3, #20]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d106      	bne.n	80065c4 <tcp_poll+0x24>
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <tcp_poll+0x3c>)
 80065b8:	f240 7203 	movw	r2, #1795	; 0x703
 80065bc:	4908      	ldr	r1, [pc, #32]	; (80065e0 <tcp_poll+0x40>)
 80065be:	4809      	ldr	r0, [pc, #36]	; (80065e4 <tcp_poll+0x44>)
 80065c0:	f006 fd0c 	bl	800cfdc <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	79fa      	ldrb	r2, [r7, #7]
 80065d0:	771a      	strb	r2, [r3, #28]
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	0800e6e0 	.word	0x0800e6e0
 80065e0:	0800ea78 	.word	0x0800ea78
 80065e4:	0800e71c 	.word	0x0800e71c

080065e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	7d1b      	ldrb	r3, [r3, #20]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d034      	beq.n	8006662 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80065fc:	2b0a      	cmp	r3, #10
 80065fe:	d030      	beq.n	8006662 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8006604:	2b01      	cmp	r3, #1
 8006606:	d02c      	beq.n	8006662 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe faa1 	bl	8004b5c <pbuf_free>
      pcb->refused_data = NULL;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fd72 	bl	800610e <tcp_segs_free>
    pcb->ooseq = NULL;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006636:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fd66 	bl	800610e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff fd61 	bl	800610e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	669a      	str	r2, [r3, #104]	; 0x68
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d105      	bne.n	800668c <tcp_pcb_remove+0x20>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e013      	b.n	80066b4 <tcp_pcb_remove+0x48>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e00c      	b.n	80066ae <tcp_pcb_remove+0x42>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d104      	bne.n	80066a8 <tcp_pcb_remove+0x3c>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	60da      	str	r2, [r3, #12]
 80066a6:	e005      	b.n	80066b4 <tcp_pcb_remove+0x48>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1ef      	bne.n	8006694 <tcp_pcb_remove+0x28>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2200      	movs	r2, #0
 80066b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80066ba:	6838      	ldr	r0, [r7, #0]
 80066bc:	f7ff ff94 	bl	80065e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	7d1b      	ldrb	r3, [r3, #20]
 80066c4:	2b0a      	cmp	r3, #10
 80066c6:	d013      	beq.n	80066f0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d00f      	beq.n	80066f0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	7e9b      	ldrb	r3, [r3, #26]
 80066d4:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	7e9b      	ldrb	r3, [r3, #26]
 80066e0:	f043 0302 	orr.w	r3, r3, #2
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80066ea:	6838      	ldr	r0, [r7, #0]
 80066ec:	f003 f9b8 	bl	8009a60 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	7d1b      	ldrb	r3, [r3, #20]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d020      	beq.n	800673a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <tcp_pcb_remove+0xa2>
 8006700:	4b13      	ldr	r3, [pc, #76]	; (8006750 <tcp_pcb_remove+0xe4>)
 8006702:	f240 7253 	movw	r2, #1875	; 0x753
 8006706:	4913      	ldr	r1, [pc, #76]	; (8006754 <tcp_pcb_remove+0xe8>)
 8006708:	4813      	ldr	r0, [pc, #76]	; (8006758 <tcp_pcb_remove+0xec>)
 800670a:	f006 fc67 	bl	800cfdc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d006      	beq.n	8006724 <tcp_pcb_remove+0xb8>
 8006716:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <tcp_pcb_remove+0xe4>)
 8006718:	f240 7254 	movw	r2, #1876	; 0x754
 800671c:	490f      	ldr	r1, [pc, #60]	; (800675c <tcp_pcb_remove+0xf0>)
 800671e:	480e      	ldr	r0, [pc, #56]	; (8006758 <tcp_pcb_remove+0xec>)
 8006720:	f006 fc5c 	bl	800cfdc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006728:	2b00      	cmp	r3, #0
 800672a:	d006      	beq.n	800673a <tcp_pcb_remove+0xce>
 800672c:	4b08      	ldr	r3, [pc, #32]	; (8006750 <tcp_pcb_remove+0xe4>)
 800672e:	f240 7256 	movw	r2, #1878	; 0x756
 8006732:	490b      	ldr	r1, [pc, #44]	; (8006760 <tcp_pcb_remove+0xf4>)
 8006734:	4808      	ldr	r0, [pc, #32]	; (8006758 <tcp_pcb_remove+0xec>)
 8006736:	f006 fc51 	bl	800cfdc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2200      	movs	r2, #0
 800673e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	0800e6e0 	.word	0x0800e6e0
 8006754:	0800ea98 	.word	0x0800ea98
 8006758:	0800e71c 	.word	0x0800e71c
 800675c:	0800eab0 	.word	0x0800eab0
 8006760:	0800eacc 	.word	0x0800eacc

08006764 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <tcp_next_iss+0x24>)
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <tcp_next_iss+0x28>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4413      	add	r3, r2
 8006776:	4a04      	ldr	r2, [pc, #16]	; (8006788 <tcp_next_iss+0x24>)
 8006778:	6013      	str	r3, [r2, #0]
  return iss;
 800677a:	4b03      	ldr	r3, [pc, #12]	; (8006788 <tcp_next_iss+0x24>)
 800677c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	2000000c 	.word	0x2000000c
 800678c:	200088e0 	.word	0x200088e0

08006790 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	6039      	str	r1, [r7, #0]
 800679a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800679c:	6838      	ldr	r0, [r7, #0]
 800679e:	f005 f977 	bl	800ba90 <ip4_route>
 80067a2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	e010      	b.n	80067d0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80067b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80067bc:	897b      	ldrh	r3, [r7, #10]
 80067be:	3b28      	subs	r3, #40	; 0x28
 80067c0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80067c2:	893a      	ldrh	r2, [r7, #8]
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	4293      	cmp	r3, r2
 80067c8:	bf28      	it	cs
 80067ca:	4613      	movcs	r3, r2
 80067cc:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80067ce:	88fb      	ldrh	r3, [r7, #6]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80067e6:	e011      	b.n	800680c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d108      	bne.n	8006806 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7fe feb4 	bl	8005568 <tcp_abort>
      pcb = next;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e002      	b.n	800680c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1ea      	bne.n	80067e8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d02c      	beq.n	8006886 <tcp_netif_ip_addr_changed+0x6a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d028      	beq.n	8006886 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006834:	4b16      	ldr	r3, [pc, #88]	; (8006890 <tcp_netif_ip_addr_changed+0x74>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff ffcc 	bl	80067d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006840:	4b14      	ldr	r3, [pc, #80]	; (8006894 <tcp_netif_ip_addr_changed+0x78>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff ffc6 	bl	80067d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d019      	beq.n	8006886 <tcp_netif_ip_addr_changed+0x6a>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d015      	beq.n	8006886 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800685a:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <tcp_netif_ip_addr_changed+0x7c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e00e      	b.n	8006880 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d103      	bne.n	800687c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1ed      	bne.n	8006862 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006886:	bf00      	nop
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	200088ec 	.word	0x200088ec
 8006894:	200088e4 	.word	0x200088e4
 8006898:	200088e8 	.word	0x200088e8

0800689c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800689c:	b590      	push	{r4, r7, lr}
 800689e:	b08b      	sub	sp, #44	; 0x2c
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	4a82      	ldr	r2, [pc, #520]	; (8006ab4 <tcp_input+0x218>)
 80068ac:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	895b      	ldrh	r3, [r3, #10]
 80068b2:	2b13      	cmp	r3, #19
 80068b4:	f240 8398 	bls.w	8006fe8 <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80068b8:	4b7f      	ldr	r3, [pc, #508]	; (8006ab8 <tcp_input+0x21c>)
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	4a7e      	ldr	r2, [pc, #504]	; (8006ab8 <tcp_input+0x21c>)
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	4611      	mov	r1, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f005 fb60 	bl	800bf88 <ip4_addr_isbroadcast_u32>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 838e 	bne.w	8006fec <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80068d0:	4b79      	ldr	r3, [pc, #484]	; (8006ab8 <tcp_input+0x21c>)
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80068d8:	2be0      	cmp	r3, #224	; 0xe0
 80068da:	f000 8387 	beq.w	8006fec <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80068de:	4b75      	ldr	r3, [pc, #468]	; (8006ab4 <tcp_input+0x218>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	899b      	ldrh	r3, [r3, #12]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fd f805 	bl	80038f6 <lwip_htons>
 80068ec:	4603      	mov	r3, r0
 80068ee:	0b1b      	lsrs	r3, r3, #12
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80068f8:	7cbb      	ldrb	r3, [r7, #18]
 80068fa:	2b13      	cmp	r3, #19
 80068fc:	f240 8378 	bls.w	8006ff0 <tcp_input+0x754>
 8006900:	7cbb      	ldrb	r3, [r7, #18]
 8006902:	b29a      	uxth	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	891b      	ldrh	r3, [r3, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	f200 8371 	bhi.w	8006ff0 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800690e:	7cbb      	ldrb	r3, [r7, #18]
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b14      	subs	r3, #20
 8006914:	b29a      	uxth	r2, r3
 8006916:	4b69      	ldr	r3, [pc, #420]	; (8006abc <tcp_input+0x220>)
 8006918:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800691a:	4b69      	ldr	r3, [pc, #420]	; (8006ac0 <tcp_input+0x224>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	895a      	ldrh	r2, [r3, #10]
 8006924:	7cbb      	ldrb	r3, [r7, #18]
 8006926:	b29b      	uxth	r3, r3
 8006928:	429a      	cmp	r2, r3
 800692a:	d30d      	bcc.n	8006948 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800692c:	4b63      	ldr	r3, [pc, #396]	; (8006abc <tcp_input+0x220>)
 800692e:	881a      	ldrh	r2, [r3, #0]
 8006930:	4b64      	ldr	r3, [pc, #400]	; (8006ac4 <tcp_input+0x228>)
 8006932:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006934:	7cbb      	ldrb	r3, [r7, #18]
 8006936:	b29b      	uxth	r3, r3
 8006938:	425b      	negs	r3, r3
 800693a:	b29b      	uxth	r3, r3
 800693c:	b21b      	sxth	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fe f8e7 	bl	8004b14 <pbuf_header>
 8006946:	e055      	b.n	80069f4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <tcp_input+0xc0>
 8006950:	4b5d      	ldr	r3, [pc, #372]	; (8006ac8 <tcp_input+0x22c>)
 8006952:	22b2      	movs	r2, #178	; 0xb2
 8006954:	495d      	ldr	r1, [pc, #372]	; (8006acc <tcp_input+0x230>)
 8006956:	485e      	ldr	r0, [pc, #376]	; (8006ad0 <tcp_input+0x234>)
 8006958:	f006 fb40 	bl	800cfdc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800695c:	f06f 0113 	mvn.w	r1, #19
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fe f8d7 	bl	8004b14 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	895a      	ldrh	r2, [r3, #10]
 800696a:	4b56      	ldr	r3, [pc, #344]	; (8006ac4 <tcp_input+0x228>)
 800696c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800696e:	4b53      	ldr	r3, [pc, #332]	; (8006abc <tcp_input+0x220>)
 8006970:	881a      	ldrh	r2, [r3, #0]
 8006972:	4b54      	ldr	r3, [pc, #336]	; (8006ac4 <tcp_input+0x228>)
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800697a:	4b52      	ldr	r3, [pc, #328]	; (8006ac4 <tcp_input+0x228>)
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	425b      	negs	r3, r3
 8006980:	b29b      	uxth	r3, r3
 8006982:	b21b      	sxth	r3, r3
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fe f8c4 	bl	8004b14 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	895b      	ldrh	r3, [r3, #10]
 8006992:	8a3a      	ldrh	r2, [r7, #16]
 8006994:	429a      	cmp	r2, r3
 8006996:	f200 832d 	bhi.w	8006ff4 <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4a47      	ldr	r2, [pc, #284]	; (8006ac0 <tcp_input+0x224>)
 80069a2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	8a3b      	ldrh	r3, [r7, #16]
 80069aa:	425b      	negs	r3, r3
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	b21b      	sxth	r3, r3
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f7fe f8ae 	bl	8004b14 <pbuf_header>
    p->tot_len -= opt2len;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	891a      	ldrh	r2, [r3, #8]
 80069bc:	8a3b      	ldrh	r3, [r7, #16]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	895b      	ldrh	r3, [r3, #10]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <tcp_input+0x13e>
 80069ce:	4b3e      	ldr	r3, [pc, #248]	; (8006ac8 <tcp_input+0x22c>)
 80069d0:	22cf      	movs	r2, #207	; 0xcf
 80069d2:	4940      	ldr	r1, [pc, #256]	; (8006ad4 <tcp_input+0x238>)
 80069d4:	483e      	ldr	r0, [pc, #248]	; (8006ad0 <tcp_input+0x234>)
 80069d6:	f006 fb01 	bl	800cfdc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	891a      	ldrh	r2, [r3, #8]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	891b      	ldrh	r3, [r3, #8]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d005      	beq.n	80069f4 <tcp_input+0x158>
 80069e8:	4b37      	ldr	r3, [pc, #220]	; (8006ac8 <tcp_input+0x22c>)
 80069ea:	22d0      	movs	r2, #208	; 0xd0
 80069ec:	493a      	ldr	r1, [pc, #232]	; (8006ad8 <tcp_input+0x23c>)
 80069ee:	4838      	ldr	r0, [pc, #224]	; (8006ad0 <tcp_input+0x234>)
 80069f0:	f006 faf4 	bl	800cfdc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80069f4:	4b2f      	ldr	r3, [pc, #188]	; (8006ab4 <tcp_input+0x218>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4a2d      	ldr	r2, [pc, #180]	; (8006ab4 <tcp_input+0x218>)
 80069fe:	6814      	ldr	r4, [r2, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fc ff78 	bl	80038f6 <lwip_htons>
 8006a06:	4603      	mov	r3, r0
 8006a08:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006a0a:	4b2a      	ldr	r3, [pc, #168]	; (8006ab4 <tcp_input+0x218>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4a28      	ldr	r2, [pc, #160]	; (8006ab4 <tcp_input+0x218>)
 8006a14:	6814      	ldr	r4, [r2, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fc ff6d 	bl	80038f6 <lwip_htons>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006a20:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <tcp_input+0x218>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	4a23      	ldr	r2, [pc, #140]	; (8006ab4 <tcp_input+0x218>)
 8006a28:	6814      	ldr	r4, [r2, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fc ff70 	bl	8003910 <lwip_htonl>
 8006a30:	4603      	mov	r3, r0
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	6863      	ldr	r3, [r4, #4]
 8006a36:	4a29      	ldr	r2, [pc, #164]	; (8006adc <tcp_input+0x240>)
 8006a38:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006a3a:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <tcp_input+0x218>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	4a1c      	ldr	r2, [pc, #112]	; (8006ab4 <tcp_input+0x218>)
 8006a42:	6814      	ldr	r4, [r2, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fc ff63 	bl	8003910 <lwip_htonl>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	60a3      	str	r3, [r4, #8]
 8006a4e:	68a3      	ldr	r3, [r4, #8]
 8006a50:	4a23      	ldr	r2, [pc, #140]	; (8006ae0 <tcp_input+0x244>)
 8006a52:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006a54:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <tcp_input+0x218>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	89db      	ldrh	r3, [r3, #14]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <tcp_input+0x218>)
 8006a5e:	6814      	ldr	r4, [r2, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fc ff48 	bl	80038f6 <lwip_htons>
 8006a66:	4603      	mov	r3, r0
 8006a68:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <tcp_input+0x218>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	899b      	ldrh	r3, [r3, #12]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fc ff3f 	bl	80038f6 <lwip_htons>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	4b18      	ldr	r3, [pc, #96]	; (8006ae4 <tcp_input+0x248>)
 8006a84:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	891a      	ldrh	r2, [r3, #8]
 8006a8a:	4b16      	ldr	r3, [pc, #88]	; (8006ae4 <tcp_input+0x248>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bf14      	ite	ne
 8006a96:	2301      	movne	r3, #1
 8006a98:	2300      	moveq	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <tcp_input+0x24c>)
 8006aa4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006aaa:	4b10      	ldr	r3, [pc, #64]	; (8006aec <tcp_input+0x250>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	e082      	b.n	8006bb8 <tcp_input+0x31c>
 8006ab2:	bf00      	nop
 8006ab4:	20008908 	.word	0x20008908
 8006ab8:	200031c4 	.word	0x200031c4
 8006abc:	2000890c 	.word	0x2000890c
 8006ac0:	20008910 	.word	0x20008910
 8006ac4:	2000890e 	.word	0x2000890e
 8006ac8:	0800eae4 	.word	0x0800eae4
 8006acc:	0800eb18 	.word	0x0800eb18
 8006ad0:	0800eb28 	.word	0x0800eb28
 8006ad4:	0800eb50 	.word	0x0800eb50
 8006ad8:	0800eb5c 	.word	0x0800eb5c
 8006adc:	20008918 	.word	0x20008918
 8006ae0:	2000891c 	.word	0x2000891c
 8006ae4:	20008924 	.word	0x20008924
 8006ae8:	20008922 	.word	0x20008922
 8006aec:	200088ec 	.word	0x200088ec
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	7d1b      	ldrb	r3, [r3, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d105      	bne.n	8006b04 <tcp_input+0x268>
 8006af8:	4b6e      	ldr	r3, [pc, #440]	; (8006cb4 <tcp_input+0x418>)
 8006afa:	22e2      	movs	r2, #226	; 0xe2
 8006afc:	496e      	ldr	r1, [pc, #440]	; (8006cb8 <tcp_input+0x41c>)
 8006afe:	486f      	ldr	r0, [pc, #444]	; (8006cbc <tcp_input+0x420>)
 8006b00:	f006 fa6c 	bl	800cfdc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	7d1b      	ldrb	r3, [r3, #20]
 8006b08:	2b0a      	cmp	r3, #10
 8006b0a:	d105      	bne.n	8006b18 <tcp_input+0x27c>
 8006b0c:	4b69      	ldr	r3, [pc, #420]	; (8006cb4 <tcp_input+0x418>)
 8006b0e:	22e3      	movs	r2, #227	; 0xe3
 8006b10:	496b      	ldr	r1, [pc, #428]	; (8006cc0 <tcp_input+0x424>)
 8006b12:	486a      	ldr	r0, [pc, #424]	; (8006cbc <tcp_input+0x420>)
 8006b14:	f006 fa62 	bl	800cfdc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	7d1b      	ldrb	r3, [r3, #20]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d105      	bne.n	8006b2c <tcp_input+0x290>
 8006b20:	4b64      	ldr	r3, [pc, #400]	; (8006cb4 <tcp_input+0x418>)
 8006b22:	22e4      	movs	r2, #228	; 0xe4
 8006b24:	4967      	ldr	r1, [pc, #412]	; (8006cc4 <tcp_input+0x428>)
 8006b26:	4865      	ldr	r0, [pc, #404]	; (8006cbc <tcp_input+0x420>)
 8006b28:	f006 fa58 	bl	800cfdc <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	8b1a      	ldrh	r2, [r3, #24]
 8006b30:	4b65      	ldr	r3, [pc, #404]	; (8006cc8 <tcp_input+0x42c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d138      	bne.n	8006bae <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	8ada      	ldrh	r2, [r3, #22]
 8006b40:	4b61      	ldr	r3, [pc, #388]	; (8006cc8 <tcp_input+0x42c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	885b      	ldrh	r3, [r3, #2]
 8006b46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d130      	bne.n	8006bae <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	4b5e      	ldr	r3, [pc, #376]	; (8006ccc <tcp_input+0x430>)
 8006b52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d12a      	bne.n	8006bae <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b5b      	ldr	r3, [pc, #364]	; (8006ccc <tcp_input+0x430>)
 8006b5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d124      	bne.n	8006bae <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d105      	bne.n	8006b7a <tcp_input+0x2de>
 8006b6e:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <tcp_input+0x418>)
 8006b70:	22ec      	movs	r2, #236	; 0xec
 8006b72:	4957      	ldr	r1, [pc, #348]	; (8006cd0 <tcp_input+0x434>)
 8006b74:	4851      	ldr	r0, [pc, #324]	; (8006cbc <tcp_input+0x420>)
 8006b76:	f006 fa31 	bl	800cfdc <iprintf>
      if (prev != NULL) {
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00a      	beq.n	8006b96 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006b88:	4b52      	ldr	r3, [pc, #328]	; (8006cd4 <tcp_input+0x438>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006b90:	4a50      	ldr	r2, [pc, #320]	; (8006cd4 <tcp_input+0x438>)
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d10f      	bne.n	8006bc0 <tcp_input+0x324>
 8006ba0:	4b44      	ldr	r3, [pc, #272]	; (8006cb4 <tcp_input+0x418>)
 8006ba2:	22f4      	movs	r2, #244	; 0xf4
 8006ba4:	494c      	ldr	r1, [pc, #304]	; (8006cd8 <tcp_input+0x43c>)
 8006ba6:	4845      	ldr	r0, [pc, #276]	; (8006cbc <tcp_input+0x420>)
 8006ba8:	f006 fa18 	bl	800cfdc <iprintf>
      break;
 8006bac:	e008      	b.n	8006bc0 <tcp_input+0x324>
    }
    prev = pcb;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d198      	bne.n	8006af0 <tcp_input+0x254>
 8006bbe:	e000      	b.n	8006bc2 <tcp_input+0x326>
      break;
 8006bc0:	bf00      	nop
  }

  if (pcb == NULL) {
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f040 808f 	bne.w	8006ce8 <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bca:	4b44      	ldr	r3, [pc, #272]	; (8006cdc <tcp_input+0x440>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e02f      	b.n	8006c32 <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	7d1b      	ldrb	r3, [r3, #20]
 8006bd6:	2b0a      	cmp	r3, #10
 8006bd8:	d005      	beq.n	8006be6 <tcp_input+0x34a>
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <tcp_input+0x418>)
 8006bdc:	22fe      	movs	r2, #254	; 0xfe
 8006bde:	4940      	ldr	r1, [pc, #256]	; (8006ce0 <tcp_input+0x444>)
 8006be0:	4836      	ldr	r0, [pc, #216]	; (8006cbc <tcp_input+0x420>)
 8006be2:	f006 f9fb 	bl	800cfdc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	8b1a      	ldrh	r2, [r3, #24]
 8006bea:	4b37      	ldr	r3, [pc, #220]	; (8006cc8 <tcp_input+0x42c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d11a      	bne.n	8006c2c <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	8ada      	ldrh	r2, [r3, #22]
 8006bfa:	4b33      	ldr	r3, [pc, #204]	; (8006cc8 <tcp_input+0x42c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	885b      	ldrh	r3, [r3, #2]
 8006c00:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d112      	bne.n	8006c2c <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	4b30      	ldr	r3, [pc, #192]	; (8006ccc <tcp_input+0x430>)
 8006c0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d10c      	bne.n	8006c2c <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4b2d      	ldr	r3, [pc, #180]	; (8006ccc <tcp_input+0x430>)
 8006c18:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d106      	bne.n	8006c2c <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8006c1e:	69f8      	ldr	r0, [r7, #28]
 8006c20:	f000 fb16 	bl	8007250 <tcp_timewait_input>
        pbuf_free(p);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7fd ff99 	bl	8004b5c <pbuf_free>
        return;
 8006c2a:	e1e9      	b.n	8007000 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1cc      	bne.n	8006bd2 <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006c3c:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <tcp_input+0x448>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	e019      	b.n	8006c78 <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	8ada      	ldrh	r2, [r3, #22]
 8006c48:	4b1f      	ldr	r3, [pc, #124]	; (8006cc8 <tcp_input+0x42c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	885b      	ldrh	r3, [r3, #2]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d10c      	bne.n	8006c6e <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <tcp_input+0x430>)
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d00f      	beq.n	8006c80 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00d      	beq.n	8006c82 <tcp_input+0x3e6>
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d009      	beq.n	8006c82 <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e2      	bne.n	8006c44 <tcp_input+0x3a8>
 8006c7e:	e000      	b.n	8006c82 <tcp_input+0x3e6>
            break;
 8006c80:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d02f      	beq.n	8006ce8 <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006c96:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <tcp_input+0x448>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006c9e:	4a11      	ldr	r2, [pc, #68]	; (8006ce4 <tcp_input+0x448>)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8006ca4:	6978      	ldr	r0, [r7, #20]
 8006ca6:	f000 f9f3 	bl	8007090 <tcp_listen_input>
      pbuf_free(p);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fd ff56 	bl	8004b5c <pbuf_free>
      return;
 8006cb0:	e1a6      	b.n	8007000 <tcp_input+0x764>
 8006cb2:	bf00      	nop
 8006cb4:	0800eae4 	.word	0x0800eae4
 8006cb8:	0800eb7c 	.word	0x0800eb7c
 8006cbc:	0800eb28 	.word	0x0800eb28
 8006cc0:	0800eba4 	.word	0x0800eba4
 8006cc4:	0800ebd0 	.word	0x0800ebd0
 8006cc8:	20008908 	.word	0x20008908
 8006ccc:	200031c4 	.word	0x200031c4
 8006cd0:	0800ebf8 	.word	0x0800ebf8
 8006cd4:	200088ec 	.word	0x200088ec
 8006cd8:	0800ec24 	.word	0x0800ec24
 8006cdc:	200088f0 	.word	0x200088f0
 8006ce0:	0800ec50 	.word	0x0800ec50
 8006ce4:	200088e8 	.word	0x200088e8
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8156 	beq.w	8006f9c <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006cf0:	4b94      	ldr	r3, [pc, #592]	; (8006f44 <tcp_input+0x6a8>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	891a      	ldrh	r2, [r3, #8]
 8006cfa:	4b92      	ldr	r3, [pc, #584]	; (8006f44 <tcp_input+0x6a8>)
 8006cfc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006cfe:	4a91      	ldr	r2, [pc, #580]	; (8006f44 <tcp_input+0x6a8>)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006d04:	4b90      	ldr	r3, [pc, #576]	; (8006f48 <tcp_input+0x6ac>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a8e      	ldr	r2, [pc, #568]	; (8006f44 <tcp_input+0x6a8>)
 8006d0a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006d0c:	4b8f      	ldr	r3, [pc, #572]	; (8006f4c <tcp_input+0x6b0>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006d12:	4b8f      	ldr	r3, [pc, #572]	; (8006f50 <tcp_input+0x6b4>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006d18:	4b8e      	ldr	r3, [pc, #568]	; (8006f54 <tcp_input+0x6b8>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006d1e:	4b8e      	ldr	r3, [pc, #568]	; (8006f58 <tcp_input+0x6bc>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d006      	beq.n	8006d38 <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	7b5b      	ldrb	r3, [r3, #13]
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d017      	beq.n	8006d70 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006d40:	69f8      	ldr	r0, [r7, #28]
 8006d42:	f7ff f97b 	bl	800603c <tcp_process_refused_data>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f113 0f0d 	cmn.w	r3, #13
 8006d4c:	d007      	beq.n	8006d5e <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00c      	beq.n	8006d70 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006d56:	4b81      	ldr	r3, [pc, #516]	; (8006f5c <tcp_input+0x6c0>)
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d008      	beq.n	8006d70 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f040 80e2 	bne.w	8006f2c <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006d68:	69f8      	ldr	r0, [r7, #28]
 8006d6a:	f002 fe1d 	bl	80099a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006d6e:	e0dd      	b.n	8006f2c <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 8006d70:	4a7b      	ldr	r2, [pc, #492]	; (8006f60 <tcp_input+0x6c4>)
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006d76:	69f8      	ldr	r0, [r7, #28]
 8006d78:	f000 fad2 	bl	8007320 <tcp_process>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006d84:	f113 0f0d 	cmn.w	r3, #13
 8006d88:	f000 80d2 	beq.w	8006f30 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 8006d8c:	4b70      	ldr	r3, [pc, #448]	; (8006f50 <tcp_input+0x6b4>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d016      	beq.n	8006dc6 <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <tcp_input+0x518>
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	6912      	ldr	r2, [r2, #16]
 8006dac:	f06f 010d 	mvn.w	r1, #13
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006db4:	69f9      	ldr	r1, [r7, #28]
 8006db6:	486b      	ldr	r0, [pc, #428]	; (8006f64 <tcp_input+0x6c8>)
 8006db8:	f7ff fc58 	bl	800666c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8006dbc:	69f9      	ldr	r1, [r7, #28]
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	f7fd f98e 	bl	80040e0 <memp_free>
 8006dc4:	e0d7      	b.n	8006f76 <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006dca:	4b62      	ldr	r3, [pc, #392]	; (8006f54 <tcp_input+0x6b8>)
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01b      	beq.n	8006e0a <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006dd2:	4b60      	ldr	r3, [pc, #384]	; (8006f54 <tcp_input+0x6b8>)
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <tcp_input+0x558>
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de4:	69fa      	ldr	r2, [r7, #28]
 8006de6:	6910      	ldr	r0, [r2, #16]
 8006de8:	89fa      	ldrh	r2, [r7, #14]
 8006dea:	69f9      	ldr	r1, [r7, #28]
 8006dec:	4798      	blx	r3
 8006dee:	4603      	mov	r3, r0
 8006df0:	74fb      	strb	r3, [r7, #19]
 8006df2:	e001      	b.n	8006df8 <tcp_input+0x55c>
 8006df4:	2300      	movs	r3, #0
 8006df6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006df8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006dfc:	f113 0f0d 	cmn.w	r3, #13
 8006e00:	f000 8098 	beq.w	8006f34 <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 8006e04:	4b53      	ldr	r3, [pc, #332]	; (8006f54 <tcp_input+0x6b8>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006e0a:	69f8      	ldr	r0, [r7, #28]
 8006e0c:	f000 f90e 	bl	800702c <tcp_input_delayed_close>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f040 8090 	bne.w	8006f38 <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8006e18:	4b4c      	ldr	r3, [pc, #304]	; (8006f4c <tcp_input+0x6b0>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d041      	beq.n	8006ea4 <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <tcp_input+0x59a>
 8006e28:	4b4f      	ldr	r3, [pc, #316]	; (8006f68 <tcp_input+0x6cc>)
 8006e2a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006e2e:	494f      	ldr	r1, [pc, #316]	; (8006f6c <tcp_input+0x6d0>)
 8006e30:	484f      	ldr	r0, [pc, #316]	; (8006f70 <tcp_input+0x6d4>)
 8006e32:	f006 f8d3 	bl	800cfdc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	7e9b      	ldrb	r3, [r3, #26]
 8006e3a:	f003 0310 	and.w	r3, r3, #16
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006e42:	4b42      	ldr	r3, [pc, #264]	; (8006f4c <tcp_input+0x6b0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fd fe88 	bl	8004b5c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006e4c:	69f8      	ldr	r0, [r7, #28]
 8006e4e:	f7fe fb8b 	bl	8005568 <tcp_abort>
            goto aborted;
 8006e52:	e090      	b.n	8006f76 <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00c      	beq.n	8006e78 <tcp_input+0x5dc>
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	6918      	ldr	r0, [r3, #16]
 8006e68:	4b38      	ldr	r3, [pc, #224]	; (8006f4c <tcp_input+0x6b0>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	69f9      	ldr	r1, [r7, #28]
 8006e70:	47a0      	blx	r4
 8006e72:	4603      	mov	r3, r0
 8006e74:	74fb      	strb	r3, [r7, #19]
 8006e76:	e008      	b.n	8006e8a <tcp_input+0x5ee>
 8006e78:	4b34      	ldr	r3, [pc, #208]	; (8006f4c <tcp_input+0x6b0>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	69f9      	ldr	r1, [r7, #28]
 8006e80:	2000      	movs	r0, #0
 8006e82:	f7ff f99b 	bl	80061bc <tcp_recv_null>
 8006e86:	4603      	mov	r3, r0
 8006e88:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006e8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e8e:	f113 0f0d 	cmn.w	r3, #13
 8006e92:	d053      	beq.n	8006f3c <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006e94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006e9c:	4b2b      	ldr	r3, [pc, #172]	; (8006f4c <tcp_input+0x6b0>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006ea4:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <tcp_input+0x6b4>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d030      	beq.n	8006f12 <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ebc:	7b5a      	ldrb	r2, [r3, #13]
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec2:	f042 0220 	orr.w	r2, r2, #32
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	735a      	strb	r2, [r3, #13]
 8006eca:	e022      	b.n	8006f12 <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006ed4:	d005      	beq.n	8006ee2 <tcp_input+0x646>
              pcb->rcv_wnd++;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eda:	3301      	adds	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <tcp_input+0x668>
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	6918      	ldr	r0, [r3, #16]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2200      	movs	r2, #0
 8006efa:	69f9      	ldr	r1, [r7, #28]
 8006efc:	47a0      	blx	r4
 8006efe:	4603      	mov	r3, r0
 8006f00:	74fb      	strb	r3, [r7, #19]
 8006f02:	e001      	b.n	8006f08 <tcp_input+0x66c>
 8006f04:	2300      	movs	r3, #0
 8006f06:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006f08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006f0c:	f113 0f0d 	cmn.w	r3, #13
 8006f10:	d016      	beq.n	8006f40 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <tcp_input+0x6c4>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006f18:	69f8      	ldr	r0, [r7, #28]
 8006f1a:	f000 f887 	bl	800702c <tcp_input_delayed_close>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d127      	bne.n	8006f74 <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8006f24:	69f8      	ldr	r0, [r7, #28]
 8006f26:	f002 fd9b 	bl	8009a60 <tcp_output>
 8006f2a:	e024      	b.n	8006f76 <tcp_input+0x6da>
        goto aborted;
 8006f2c:	bf00      	nop
 8006f2e:	e022      	b.n	8006f76 <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006f30:	bf00      	nop
 8006f32:	e020      	b.n	8006f76 <tcp_input+0x6da>
              goto aborted;
 8006f34:	bf00      	nop
 8006f36:	e01e      	b.n	8006f76 <tcp_input+0x6da>
          goto aborted;
 8006f38:	bf00      	nop
 8006f3a:	e01c      	b.n	8006f76 <tcp_input+0x6da>
            goto aborted;
 8006f3c:	bf00      	nop
 8006f3e:	e01a      	b.n	8006f76 <tcp_input+0x6da>
              goto aborted;
 8006f40:	bf00      	nop
 8006f42:	e018      	b.n	8006f76 <tcp_input+0x6da>
 8006f44:	200088f8 	.word	0x200088f8
 8006f48:	20008908 	.word	0x20008908
 8006f4c:	20008928 	.word	0x20008928
 8006f50:	20008925 	.word	0x20008925
 8006f54:	20008920 	.word	0x20008920
 8006f58:	20008924 	.word	0x20008924
 8006f5c:	20008922 	.word	0x20008922
 8006f60:	2000892c 	.word	0x2000892c
 8006f64:	200088ec 	.word	0x200088ec
 8006f68:	0800eae4 	.word	0x0800eae4
 8006f6c:	0800ec80 	.word	0x0800ec80
 8006f70:	0800eb28 	.word	0x0800eb28
          goto aborted;
 8006f74:	bf00      	nop
    tcp_input_pcb = NULL;
 8006f76:	4b24      	ldr	r3, [pc, #144]	; (8007008 <tcp_input+0x76c>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006f7c:	4b23      	ldr	r3, [pc, #140]	; (800700c <tcp_input+0x770>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8006f82:	4b23      	ldr	r3, [pc, #140]	; (8007010 <tcp_input+0x774>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d039      	beq.n	8006ffe <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 8006f8a:	4b21      	ldr	r3, [pc, #132]	; (8007010 <tcp_input+0x774>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fd fde4 	bl	8004b5c <pbuf_free>
      inseg.p = NULL;
 8006f94:	4b1e      	ldr	r3, [pc, #120]	; (8007010 <tcp_input+0x774>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006f9a:	e030      	b.n	8006ffe <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006f9c:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <tcp_input+0x778>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	899b      	ldrh	r3, [r3, #12]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fc fca6 	bl	80038f6 <lwip_htons>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d115      	bne.n	8006fe0 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006fb4:	4b18      	ldr	r3, [pc, #96]	; (8007018 <tcp_input+0x77c>)
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	4b18      	ldr	r3, [pc, #96]	; (800701c <tcp_input+0x780>)
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4b18      	ldr	r3, [pc, #96]	; (8007020 <tcp_input+0x784>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006fc4:	4b13      	ldr	r3, [pc, #76]	; (8007014 <tcp_input+0x778>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006fc8:	885b      	ldrh	r3, [r3, #2]
 8006fca:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006fcc:	4a11      	ldr	r2, [pc, #68]	; (8007014 <tcp_input+0x778>)
 8006fce:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006fd0:	8812      	ldrh	r2, [r2, #0]
 8006fd2:	b292      	uxth	r2, r2
 8006fd4:	9201      	str	r2, [sp, #4]
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	4b12      	ldr	r3, [pc, #72]	; (8007024 <tcp_input+0x788>)
 8006fda:	4a13      	ldr	r2, [pc, #76]	; (8007028 <tcp_input+0x78c>)
 8006fdc:	f002 ffc4 	bl	8009f68 <tcp_rst>
    pbuf_free(p);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fd fdbb 	bl	8004b5c <pbuf_free>
  return;
 8006fe6:	e00a      	b.n	8006ffe <tcp_input+0x762>
    goto dropped;
 8006fe8:	bf00      	nop
 8006fea:	e004      	b.n	8006ff6 <tcp_input+0x75a>
    goto dropped;
 8006fec:	bf00      	nop
 8006fee:	e002      	b.n	8006ff6 <tcp_input+0x75a>
    goto dropped;
 8006ff0:	bf00      	nop
 8006ff2:	e000      	b.n	8006ff6 <tcp_input+0x75a>
      goto dropped;
 8006ff4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fd fdb0 	bl	8004b5c <pbuf_free>
 8006ffc:	e000      	b.n	8007000 <tcp_input+0x764>
  return;
 8006ffe:	bf00      	nop
}
 8007000:	3724      	adds	r7, #36	; 0x24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd90      	pop	{r4, r7, pc}
 8007006:	bf00      	nop
 8007008:	2000892c 	.word	0x2000892c
 800700c:	20008928 	.word	0x20008928
 8007010:	200088f8 	.word	0x200088f8
 8007014:	20008908 	.word	0x20008908
 8007018:	2000891c 	.word	0x2000891c
 800701c:	20008922 	.word	0x20008922
 8007020:	20008918 	.word	0x20008918
 8007024:	200031d4 	.word	0x200031d4
 8007028:	200031d8 	.word	0x200031d8

0800702c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8007034:	4b14      	ldr	r3, [pc, #80]	; (8007088 <tcp_input_delayed_close+0x5c>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01d      	beq.n	800707c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	7e9b      	ldrb	r3, [r3, #26]
 8007044:	f003 0310 	and.w	r3, r3, #16
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10d      	bne.n	8007068 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d008      	beq.n	8007068 <tcp_input_delayed_close+0x3c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6912      	ldr	r2, [r2, #16]
 8007060:	f06f 010e 	mvn.w	r1, #14
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4808      	ldr	r0, [pc, #32]	; (800708c <tcp_input_delayed_close+0x60>)
 800706c:	f7ff fafe 	bl	800666c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	2001      	movs	r0, #1
 8007074:	f7fd f834 	bl	80040e0 <memp_free>
    return 1;
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20008925 	.word	0x20008925
 800708c:	200088ec 	.word	0x200088ec

08007090 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af02      	add	r7, sp, #8
 8007096:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007098:	4b63      	ldr	r3, [pc, #396]	; (8007228 <tcp_listen_input+0x198>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 80bb 	bne.w	800721c <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80070a6:	4b60      	ldr	r3, [pc, #384]	; (8007228 <tcp_listen_input+0x198>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d016      	beq.n	80070e0 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80070b2:	4b5e      	ldr	r3, [pc, #376]	; (800722c <tcp_listen_input+0x19c>)
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	4b5e      	ldr	r3, [pc, #376]	; (8007230 <tcp_listen_input+0x1a0>)
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	4b5d      	ldr	r3, [pc, #372]	; (8007234 <tcp_listen_input+0x1a4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80070c2:	4b5d      	ldr	r3, [pc, #372]	; (8007238 <tcp_listen_input+0x1a8>)
 80070c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80070c6:	885b      	ldrh	r3, [r3, #2]
 80070c8:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80070ca:	4a5b      	ldr	r2, [pc, #364]	; (8007238 <tcp_listen_input+0x1a8>)
 80070cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80070ce:	8812      	ldrh	r2, [r2, #0]
 80070d0:	b292      	uxth	r2, r2
 80070d2:	9201      	str	r2, [sp, #4]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	4b59      	ldr	r3, [pc, #356]	; (800723c <tcp_listen_input+0x1ac>)
 80070d8:	4a59      	ldr	r2, [pc, #356]	; (8007240 <tcp_listen_input+0x1b0>)
 80070da:	f002 ff45 	bl	8009f68 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80070de:	e09f      	b.n	8007220 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 80070e0:	4b51      	ldr	r3, [pc, #324]	; (8007228 <tcp_listen_input+0x198>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8099 	beq.w	8007220 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	7d5b      	ldrb	r3, [r3, #21]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff f940 	bl	8006378 <tcp_alloc>
 80070f8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d111      	bne.n	8007124 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <tcp_listen_input+0x8e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6910      	ldr	r0, [r2, #16]
 8007110:	f04f 32ff 	mov.w	r2, #4294967295
 8007114:	2100      	movs	r1, #0
 8007116:	4798      	blx	r3
 8007118:	4603      	mov	r3, r0
 800711a:	73bb      	strb	r3, [r7, #14]
      return;
 800711c:	e081      	b.n	8007222 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800711e:	23f0      	movs	r3, #240	; 0xf0
 8007120:	73bb      	strb	r3, [r7, #14]
      return;
 8007122:	e07e      	b.n	8007222 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007124:	4b47      	ldr	r3, [pc, #284]	; (8007244 <tcp_listen_input+0x1b4>)
 8007126:	695a      	ldr	r2, [r3, #20]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800712c:	4b45      	ldr	r3, [pc, #276]	; (8007244 <tcp_listen_input+0x1b4>)
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8ada      	ldrh	r2, [r3, #22]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800713c:	4b3e      	ldr	r3, [pc, #248]	; (8007238 <tcp_listen_input+0x1a8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	b29a      	uxth	r2, r3
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2203      	movs	r2, #3
 800714c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800714e:	4b39      	ldr	r3, [pc, #228]	; (8007234 <tcp_listen_input+0x1a4>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007160:	6978      	ldr	r0, [r7, #20]
 8007162:	f7ff faff 	bl	8006764 <tcp_next_iss>
 8007166:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007180:	4b2c      	ldr	r3, [pc, #176]	; (8007234 <tcp_listen_input+0x1a4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	1e5a      	subs	r2, r3, #1
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	7a1b      	ldrb	r3, [r3, #8]
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80071a6:	4b28      	ldr	r3, [pc, #160]	; (8007248 <tcp_listen_input+0x1b8>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	60da      	str	r2, [r3, #12]
 80071ae:	4a26      	ldr	r2, [pc, #152]	; (8007248 <tcp_listen_input+0x1b8>)
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	f003 f920 	bl	800a3f8 <tcp_timer_needed>
 80071b8:	4b24      	ldr	r3, [pc, #144]	; (800724c <tcp_listen_input+0x1bc>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80071be:	6978      	ldr	r0, [r7, #20]
 80071c0:	f001 fd0c 	bl	8008bdc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80071c4:	4b1c      	ldr	r3, [pc, #112]	; (8007238 <tcp_listen_input+0x1a8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	89db      	ldrh	r3, [r3, #14]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7ff fad1 	bl	8006790 <tcp_eff_send_mss_impl>
 80071ee:	4603      	mov	r3, r0
 80071f0:	461a      	mov	r2, r3
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80071f6:	2112      	movs	r1, #18
 80071f8:	6978      	ldr	r0, [r7, #20]
 80071fa:	f002 fad9 	bl	80097b0 <tcp_enqueue_flags>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800720a:	2100      	movs	r1, #0
 800720c:	6978      	ldr	r0, [r7, #20]
 800720e:	f7fe f8f9 	bl	8005404 <tcp_abandon>
      return;
 8007212:	e006      	b.n	8007222 <tcp_listen_input+0x192>
    tcp_output(npcb);
 8007214:	6978      	ldr	r0, [r7, #20]
 8007216:	f002 fc23 	bl	8009a60 <tcp_output>
  return;
 800721a:	e001      	b.n	8007220 <tcp_listen_input+0x190>
    return;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <tcp_listen_input+0x192>
  return;
 8007220:	bf00      	nop
}
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20008924 	.word	0x20008924
 800722c:	2000891c 	.word	0x2000891c
 8007230:	20008922 	.word	0x20008922
 8007234:	20008918 	.word	0x20008918
 8007238:	20008908 	.word	0x20008908
 800723c:	200031d4 	.word	0x200031d4
 8007240:	200031d8 	.word	0x200031d8
 8007244:	200031c4 	.word	0x200031c4
 8007248:	200088ec 	.word	0x200088ec
 800724c:	200088f4 	.word	0x200088f4

08007250 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af02      	add	r7, sp, #8
 8007256:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007258:	4b29      	ldr	r3, [pc, #164]	; (8007300 <tcp_timewait_input+0xb0>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	d146      	bne.n	80072f2 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007264:	4b26      	ldr	r3, [pc, #152]	; (8007300 <tcp_timewait_input+0xb0>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d027      	beq.n	80072c0 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007270:	4b24      	ldr	r3, [pc, #144]	; (8007304 <tcp_timewait_input+0xb4>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	db2a      	blt.n	80072d4 <tcp_timewait_input+0x84>
 800727e:	4b21      	ldr	r3, [pc, #132]	; (8007304 <tcp_timewait_input+0xb4>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800728a:	440b      	add	r3, r1
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	dc20      	bgt.n	80072d4 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007292:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <tcp_timewait_input+0xb8>)
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	4b1d      	ldr	r3, [pc, #116]	; (800730c <tcp_timewait_input+0xbc>)
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	4b19      	ldr	r3, [pc, #100]	; (8007304 <tcp_timewait_input+0xb4>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80072a2:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <tcp_timewait_input+0xc0>)
 80072a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80072a6:	885b      	ldrh	r3, [r3, #2]
 80072a8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80072aa:	4a19      	ldr	r2, [pc, #100]	; (8007310 <tcp_timewait_input+0xc0>)
 80072ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80072ae:	8812      	ldrh	r2, [r2, #0]
 80072b0:	b292      	uxth	r2, r2
 80072b2:	9201      	str	r2, [sp, #4]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	4b17      	ldr	r3, [pc, #92]	; (8007314 <tcp_timewait_input+0xc4>)
 80072b8:	4a17      	ldr	r2, [pc, #92]	; (8007318 <tcp_timewait_input+0xc8>)
 80072ba:	f002 fe55 	bl	8009f68 <tcp_rst>
      return;
 80072be:	e01b      	b.n	80072f8 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 80072c0:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <tcp_timewait_input+0xb0>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80072cc:	4b13      	ldr	r3, [pc, #76]	; (800731c <tcp_timewait_input+0xcc>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80072d4:	4b0d      	ldr	r3, [pc, #52]	; (800730c <tcp_timewait_input+0xbc>)
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00c      	beq.n	80072f6 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7e9b      	ldrb	r3, [r3, #26]
 80072e0:	f043 0302 	orr.w	r3, r3, #2
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f002 fbb8 	bl	8009a60 <tcp_output>
  }
  return;
 80072f0:	e001      	b.n	80072f6 <tcp_timewait_input+0xa6>
    return;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <tcp_timewait_input+0xa8>
  return;
 80072f6:	bf00      	nop
}
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20008924 	.word	0x20008924
 8007304:	20008918 	.word	0x20008918
 8007308:	2000891c 	.word	0x2000891c
 800730c:	20008922 	.word	0x20008922
 8007310:	20008908 	.word	0x20008908
 8007314:	200031d4 	.word	0x200031d4
 8007318:	200031d8 	.word	0x200031d8
 800731c:	200088e0 	.word	0x200088e0

08007320 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af02      	add	r7, sp, #8
 8007326:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007330:	4b93      	ldr	r3, [pc, #588]	; (8007580 <tcp_process+0x260>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d04e      	beq.n	80073da <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	7d1b      	ldrb	r3, [r3, #20]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d108      	bne.n	8007356 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007348:	4b8e      	ldr	r3, [pc, #568]	; (8007584 <tcp_process+0x264>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d123      	bne.n	8007398 <tcp_process+0x78>
        acceptable = 1;
 8007350:	2301      	movs	r3, #1
 8007352:	76fb      	strb	r3, [r7, #27]
 8007354:	e020      	b.n	8007398 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800735a:	4b8b      	ldr	r3, [pc, #556]	; (8007588 <tcp_process+0x268>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d102      	bne.n	8007368 <tcp_process+0x48>
        acceptable = 1;
 8007362:	2301      	movs	r3, #1
 8007364:	76fb      	strb	r3, [r7, #27]
 8007366:	e017      	b.n	8007398 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007368:	4b87      	ldr	r3, [pc, #540]	; (8007588 <tcp_process+0x268>)
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	db10      	blt.n	8007398 <tcp_process+0x78>
 8007376:	4b84      	ldr	r3, [pc, #528]	; (8007588 <tcp_process+0x268>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007382:	440b      	add	r3, r1
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	dc06      	bgt.n	8007398 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	7e9b      	ldrb	r3, [r3, #26]
 800738e:	f043 0302 	orr.w	r3, r3, #2
 8007392:	b2da      	uxtb	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007398:	7efb      	ldrb	r3, [r7, #27]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01b      	beq.n	80073d6 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	7d1b      	ldrb	r3, [r3, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <tcp_process+0x94>
 80073a6:	4b79      	ldr	r3, [pc, #484]	; (800758c <tcp_process+0x26c>)
 80073a8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80073ac:	4978      	ldr	r1, [pc, #480]	; (8007590 <tcp_process+0x270>)
 80073ae:	4879      	ldr	r0, [pc, #484]	; (8007594 <tcp_process+0x274>)
 80073b0:	f005 fe14 	bl	800cfdc <iprintf>
      recv_flags |= TF_RESET;
 80073b4:	4b78      	ldr	r3, [pc, #480]	; (8007598 <tcp_process+0x278>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f043 0308 	orr.w	r3, r3, #8
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	4b76      	ldr	r3, [pc, #472]	; (8007598 <tcp_process+0x278>)
 80073c0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	7e9b      	ldrb	r3, [r3, #26]
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80073d0:	f06f 030d 	mvn.w	r3, #13
 80073d4:	e348      	b.n	8007a68 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e346      	b.n	8007a68 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80073da:	4b69      	ldr	r3, [pc, #420]	; (8007580 <tcp_process+0x260>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d010      	beq.n	8007408 <tcp_process+0xe8>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	7d1b      	ldrb	r3, [r3, #20]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d00c      	beq.n	8007408 <tcp_process+0xe8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	7d1b      	ldrb	r3, [r3, #20]
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d008      	beq.n	8007408 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7e9b      	ldrb	r3, [r3, #26]
 80073fa:	f043 0302 	orr.w	r3, r3, #2
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	e32f      	b.n	8007a68 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	7e9b      	ldrb	r3, [r3, #26]
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b00      	cmp	r3, #0
 8007412:	d103      	bne.n	800741c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007414:	4b61      	ldr	r3, [pc, #388]	; (800759c <tcp_process+0x27c>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 fbd9 	bl	8008bdc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	7d1b      	ldrb	r3, [r3, #20]
 800742e:	3b02      	subs	r3, #2
 8007430:	2b07      	cmp	r3, #7
 8007432:	f200 8309 	bhi.w	8007a48 <tcp_process+0x728>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <tcp_process+0x11c>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	0800745d 	.word	0x0800745d
 8007440:	08007653 	.word	0x08007653
 8007444:	080077ab 	.word	0x080077ab
 8007448:	080077d5 	.word	0x080077d5
 800744c:	080078f7 	.word	0x080078f7
 8007450:	080077ab 	.word	0x080077ab
 8007454:	08007983 	.word	0x08007983
 8007458:	08007a13 	.word	0x08007a13
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800745c:	4b48      	ldr	r3, [pc, #288]	; (8007580 <tcp_process+0x260>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80ca 	beq.w	80075fe <tcp_process+0x2de>
 800746a:	4b45      	ldr	r3, [pc, #276]	; (8007580 <tcp_process+0x260>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80c3 	beq.w	80075fe <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	4b41      	ldr	r3, [pc, #260]	; (8007584 <tcp_process+0x264>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	f040 80bb 	bne.w	80075fe <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8007488:	4b3f      	ldr	r3, [pc, #252]	; (8007588 <tcp_process+0x268>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800749a:	4b3a      	ldr	r3, [pc, #232]	; (8007584 <tcp_process+0x264>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80074a2:	4b3f      	ldr	r3, [pc, #252]	; (80075a0 <tcp_process+0x280>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	89db      	ldrh	r3, [r3, #14]
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80074bc:	4b32      	ldr	r3, [pc, #200]	; (8007588 <tcp_process+0x268>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	1e5a      	subs	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2204      	movs	r2, #4
 80074ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f7ff f95a 	bl	8006790 <tcp_eff_send_mss_impl>
 80074dc:	4603      	mov	r3, r0
 80074de:	461a      	mov	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	f241 121c 	movw	r2, #4380	; 0x111c
 80074ee:	429a      	cmp	r2, r3
 80074f0:	bf38      	it	cc
 80074f2:	461a      	movcc	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4293      	cmp	r3, r2
 80074fc:	bf28      	it	cs
 80074fe:	4613      	movcs	r3, r2
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <tcp_process+0x200>
 8007512:	4b1e      	ldr	r3, [pc, #120]	; (800758c <tcp_process+0x26c>)
 8007514:	f240 321a 	movw	r2, #794	; 0x31a
 8007518:	4922      	ldr	r1, [pc, #136]	; (80075a4 <tcp_process+0x284>)
 800751a:	481e      	ldr	r0, [pc, #120]	; (8007594 <tcp_process+0x274>)
 800751c:	f005 fd5e 	bl	800cfdc <iprintf>
      --pcb->snd_queuelen;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007534:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d111      	bne.n	8007560 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007540:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <tcp_process+0x236>
 8007548:	4b10      	ldr	r3, [pc, #64]	; (800758c <tcp_process+0x26c>)
 800754a:	f240 3222 	movw	r2, #802	; 0x322
 800754e:	4916      	ldr	r1, [pc, #88]	; (80075a8 <tcp_process+0x288>)
 8007550:	4810      	ldr	r0, [pc, #64]	; (8007594 <tcp_process+0x274>)
 8007552:	f005 fd43 	bl	800cfdc <iprintf>
        pcb->unsent = rseg->next;
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	669a      	str	r2, [r3, #104]	; 0x68
 800755e:	e003      	b.n	8007568 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8007568:	69f8      	ldr	r0, [r7, #28]
 800756a:	f7fe fde5 	bl	8006138 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007572:	2b00      	cmp	r3, #0
 8007574:	d11a      	bne.n	80075ac <tcp_process+0x28c>
        pcb->rtime = -1;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800757c:	861a      	strh	r2, [r3, #48]	; 0x30
 800757e:	e01c      	b.n	80075ba <tcp_process+0x29a>
 8007580:	20008924 	.word	0x20008924
 8007584:	2000891c 	.word	0x2000891c
 8007588:	20008918 	.word	0x20008918
 800758c:	0800eae4 	.word	0x0800eae4
 8007590:	0800ec9c 	.word	0x0800ec9c
 8007594:	0800eb28 	.word	0x0800eb28
 8007598:	20008925 	.word	0x20008925
 800759c:	200088e0 	.word	0x200088e0
 80075a0:	20008908 	.word	0x20008908
 80075a4:	0800ecbc 	.word	0x0800ecbc
 80075a8:	0800ecd4 	.word	0x0800ecd4
      } else {
        pcb->rtime = 0;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <tcp_process+0x2ba>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6910      	ldr	r0, [r2, #16]
 80075ce:	2200      	movs	r2, #0
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	4798      	blx	r3
 80075d4:	4603      	mov	r3, r0
 80075d6:	76bb      	strb	r3, [r7, #26]
 80075d8:	e001      	b.n	80075de <tcp_process+0x2be>
 80075da:	2300      	movs	r3, #0
 80075dc:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80075de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80075e2:	f113 0f0d 	cmn.w	r3, #13
 80075e6:	d102      	bne.n	80075ee <tcp_process+0x2ce>
        return ERR_ABRT;
 80075e8:	f06f 030c 	mvn.w	r3, #12
 80075ec:	e23c      	b.n	8007a68 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7e9b      	ldrb	r3, [r3, #26]
 80075f2:	f043 0302 	orr.w	r3, r3, #2
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80075fc:	e226      	b.n	8007a4c <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 80075fe:	4b93      	ldr	r3, [pc, #588]	; (800784c <tcp_process+0x52c>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	f003 0310 	and.w	r3, r3, #16
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 8220 	beq.w	8007a4c <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800760c:	4b90      	ldr	r3, [pc, #576]	; (8007850 <tcp_process+0x530>)
 800760e:	6818      	ldr	r0, [r3, #0]
 8007610:	4b90      	ldr	r3, [pc, #576]	; (8007854 <tcp_process+0x534>)
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	4b90      	ldr	r3, [pc, #576]	; (8007858 <tcp_process+0x538>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800761c:	4b8f      	ldr	r3, [pc, #572]	; (800785c <tcp_process+0x53c>)
 800761e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007620:	885b      	ldrh	r3, [r3, #2]
 8007622:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007624:	4a8d      	ldr	r2, [pc, #564]	; (800785c <tcp_process+0x53c>)
 8007626:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007628:	8812      	ldrh	r2, [r2, #0]
 800762a:	b292      	uxth	r2, r2
 800762c:	9201      	str	r2, [sp, #4]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	4b8b      	ldr	r3, [pc, #556]	; (8007860 <tcp_process+0x540>)
 8007632:	4a8c      	ldr	r2, [pc, #560]	; (8007864 <tcp_process+0x544>)
 8007634:	f002 fc98 	bl	8009f68 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800763e:	2b05      	cmp	r3, #5
 8007640:	f200 8204 	bhi.w	8007a4c <tcp_process+0x72c>
        pcb->rtime = 0;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f002 fd02 	bl	800a054 <tcp_rexmit_rto>
    break;
 8007650:	e1fc      	b.n	8007a4c <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007652:	4b7e      	ldr	r3, [pc, #504]	; (800784c <tcp_process+0x52c>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	f003 0310 	and.w	r3, r3, #16
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8091 	beq.w	8007782 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007660:	4b7b      	ldr	r3, [pc, #492]	; (8007850 <tcp_process+0x530>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	db71      	blt.n	8007754 <tcp_process+0x434>
 8007670:	4b77      	ldr	r3, [pc, #476]	; (8007850 <tcp_process+0x530>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	dc6a      	bgt.n	8007754 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2204      	movs	r2, #4
 8007682:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <tcp_process+0x384>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <tcp_process+0x384>
 8007696:	4b74      	ldr	r3, [pc, #464]	; (8007868 <tcp_process+0x548>)
 8007698:	f44f 7254 	mov.w	r2, #848	; 0x350
 800769c:	4973      	ldr	r1, [pc, #460]	; (800786c <tcp_process+0x54c>)
 800769e:	4874      	ldr	r0, [pc, #464]	; (8007870 <tcp_process+0x550>)
 80076a0:	f005 fc9c 	bl	800cfdc <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80076ac:	23fa      	movs	r3, #250	; 0xfa
 80076ae:	76bb      	strb	r3, [r7, #26]
 80076b0:	e011      	b.n	80076d6 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <tcp_process+0x3b2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6910      	ldr	r0, [r2, #16]
 80076c6:	2200      	movs	r2, #0
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	4798      	blx	r3
 80076cc:	4603      	mov	r3, r0
 80076ce:	76bb      	strb	r3, [r7, #26]
 80076d0:	e001      	b.n	80076d6 <tcp_process+0x3b6>
 80076d2:	23f0      	movs	r3, #240	; 0xf0
 80076d4:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80076d6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80076de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80076e2:	f113 0f0d 	cmn.w	r3, #13
 80076e6:	d002      	beq.n	80076ee <tcp_process+0x3ce>
            tcp_abort(pcb);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7fd ff3d 	bl	8005568 <tcp_abort>
          }
          return ERR_ABRT;
 80076ee:	f06f 030c 	mvn.w	r3, #12
 80076f2:	e1b9      	b.n	8007a68 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fa3d 	bl	8007b74 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80076fa:	4b5e      	ldr	r3, [pc, #376]	; (8007874 <tcp_process+0x554>)
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d005      	beq.n	800770e <tcp_process+0x3ee>
          recv_acked--;
 8007702:	4b5c      	ldr	r3, [pc, #368]	; (8007874 <tcp_process+0x554>)
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	4b5a      	ldr	r3, [pc, #360]	; (8007874 <tcp_process+0x554>)
 800770c:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	f241 121c 	movw	r2, #4380	; 0x111c
 8007718:	429a      	cmp	r2, r3
 800771a:	bf38      	it	cc
 800771c:	461a      	movcc	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4293      	cmp	r3, r2
 8007726:	bf28      	it	cs
 8007728:	4613      	movcs	r3, r2
 800772a:	b29a      	uxth	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8007732:	4b51      	ldr	r3, [pc, #324]	; (8007878 <tcp_process+0x558>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d034      	beq.n	80077a8 <tcp_process+0x488>
          tcp_ack_now(pcb);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7e9b      	ldrb	r3, [r3, #26]
 8007742:	f043 0302 	orr.w	r3, r3, #2
 8007746:	b2da      	uxtb	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2207      	movs	r2, #7
 8007750:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8007752:	e029      	b.n	80077a8 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007754:	4b3e      	ldr	r3, [pc, #248]	; (8007850 <tcp_process+0x530>)
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	4b3e      	ldr	r3, [pc, #248]	; (8007854 <tcp_process+0x534>)
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	4b3e      	ldr	r3, [pc, #248]	; (8007858 <tcp_process+0x538>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007764:	4b3d      	ldr	r3, [pc, #244]	; (800785c <tcp_process+0x53c>)
 8007766:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007768:	885b      	ldrh	r3, [r3, #2]
 800776a:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800776c:	4a3b      	ldr	r2, [pc, #236]	; (800785c <tcp_process+0x53c>)
 800776e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007770:	8812      	ldrh	r2, [r2, #0]
 8007772:	b292      	uxth	r2, r2
 8007774:	9201      	str	r2, [sp, #4]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	4b39      	ldr	r3, [pc, #228]	; (8007860 <tcp_process+0x540>)
 800777a:	4a3a      	ldr	r2, [pc, #232]	; (8007864 <tcp_process+0x544>)
 800777c:	f002 fbf4 	bl	8009f68 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8007780:	e166      	b.n	8007a50 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007782:	4b32      	ldr	r3, [pc, #200]	; (800784c <tcp_process+0x52c>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8160 	beq.w	8007a50 <tcp_process+0x730>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	1e5a      	subs	r2, r3, #1
 8007796:	4b30      	ldr	r3, [pc, #192]	; (8007858 <tcp_process+0x538>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	f040 8158 	bne.w	8007a50 <tcp_process+0x730>
      tcp_rexmit(pcb);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f002 fc8d 	bl	800a0c0 <tcp_rexmit>
    break;
 80077a6:	e153      	b.n	8007a50 <tcp_process+0x730>
 80077a8:	e152      	b.n	8007a50 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f9e2 	bl	8007b74 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80077b0:	4b31      	ldr	r3, [pc, #196]	; (8007878 <tcp_process+0x558>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 814b 	beq.w	8007a54 <tcp_process+0x734>
      tcp_ack_now(pcb);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7e9b      	ldrb	r3, [r3, #26]
 80077c2:	f043 0302 	orr.w	r3, r3, #2
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2207      	movs	r2, #7
 80077d0:	751a      	strb	r2, [r3, #20]
    }
    break;
 80077d2:	e13f      	b.n	8007a54 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f9cd 	bl	8007b74 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80077da:	4b27      	ldr	r3, [pc, #156]	; (8007878 <tcp_process+0x558>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d070      	beq.n	80078c8 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80077e6:	4b19      	ldr	r3, [pc, #100]	; (800784c <tcp_process+0x52c>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	f003 0310 	and.w	r3, r3, #16
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d05f      	beq.n	80078b2 <tcp_process+0x592>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077f6:	4b16      	ldr	r3, [pc, #88]	; (8007850 <tcp_process+0x530>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d159      	bne.n	80078b2 <tcp_process+0x592>
          pcb->unsent == NULL) {
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007802:	2b00      	cmp	r3, #0
 8007804:	d155      	bne.n	80078b2 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7e9b      	ldrb	r3, [r3, #26]
 800780a:	f043 0302 	orr.w	r3, r3, #2
 800780e:	b2da      	uxtb	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7fe fee7 	bl	80065e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800781a:	4b18      	ldr	r3, [pc, #96]	; (800787c <tcp_process+0x55c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d105      	bne.n	8007830 <tcp_process+0x510>
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <tcp_process+0x55c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	4a14      	ldr	r2, [pc, #80]	; (800787c <tcp_process+0x55c>)
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	e02d      	b.n	800788c <tcp_process+0x56c>
 8007830:	4b12      	ldr	r3, [pc, #72]	; (800787c <tcp_process+0x55c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e026      	b.n	8007886 <tcp_process+0x566>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	429a      	cmp	r2, r3
 8007840:	d11e      	bne.n	8007880 <tcp_process+0x560>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	60da      	str	r2, [r3, #12]
 800784a:	e01f      	b.n	800788c <tcp_process+0x56c>
 800784c:	20008924 	.word	0x20008924
 8007850:	2000891c 	.word	0x2000891c
 8007854:	20008922 	.word	0x20008922
 8007858:	20008918 	.word	0x20008918
 800785c:	20008908 	.word	0x20008908
 8007860:	200031d4 	.word	0x200031d4
 8007864:	200031d8 	.word	0x200031d8
 8007868:	0800eae4 	.word	0x0800eae4
 800786c:	0800ece8 	.word	0x0800ece8
 8007870:	0800eb28 	.word	0x0800eb28
 8007874:	20008920 	.word	0x20008920
 8007878:	20008925 	.word	0x20008925
 800787c:	200088ec 	.word	0x200088ec
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1d5      	bne.n	8007838 <tcp_process+0x518>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	60da      	str	r2, [r3, #12]
 8007892:	4b77      	ldr	r3, [pc, #476]	; (8007a70 <tcp_process+0x750>)
 8007894:	2201      	movs	r2, #1
 8007896:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	220a      	movs	r2, #10
 800789c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800789e:	4b75      	ldr	r3, [pc, #468]	; (8007a74 <tcp_process+0x754>)
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60da      	str	r2, [r3, #12]
 80078a6:	4a73      	ldr	r2, [pc, #460]	; (8007a74 <tcp_process+0x754>)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	f002 fda4 	bl	800a3f8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80078b0:	e0d2      	b.n	8007a58 <tcp_process+0x738>
        tcp_ack_now(pcb);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	7e9b      	ldrb	r3, [r3, #26]
 80078b6:	f043 0302 	orr.w	r3, r3, #2
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2208      	movs	r2, #8
 80078c4:	751a      	strb	r2, [r3, #20]
    break;
 80078c6:	e0c7      	b.n	8007a58 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80078c8:	4b6b      	ldr	r3, [pc, #428]	; (8007a78 <tcp_process+0x758>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80c1 	beq.w	8007a58 <tcp_process+0x738>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078da:	4b68      	ldr	r3, [pc, #416]	; (8007a7c <tcp_process+0x75c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	429a      	cmp	r2, r3
 80078e0:	f040 80ba 	bne.w	8007a58 <tcp_process+0x738>
               pcb->unsent == NULL) {
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f040 80b5 	bne.w	8007a58 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2206      	movs	r2, #6
 80078f2:	751a      	strb	r2, [r3, #20]
    break;
 80078f4:	e0b0      	b.n	8007a58 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f93c 	bl	8007b74 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80078fc:	4b60      	ldr	r3, [pc, #384]	; (8007a80 <tcp_process+0x760>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80a9 	beq.w	8007a5c <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7e9b      	ldrb	r3, [r3, #26]
 800790e:	f043 0302 	orr.w	r3, r3, #2
 8007912:	b2da      	uxtb	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fe fe65 	bl	80065e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800791e:	4b59      	ldr	r3, [pc, #356]	; (8007a84 <tcp_process+0x764>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	429a      	cmp	r2, r3
 8007926:	d105      	bne.n	8007934 <tcp_process+0x614>
 8007928:	4b56      	ldr	r3, [pc, #344]	; (8007a84 <tcp_process+0x764>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	4a55      	ldr	r2, [pc, #340]	; (8007a84 <tcp_process+0x764>)
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	e013      	b.n	800795c <tcp_process+0x63c>
 8007934:	4b53      	ldr	r3, [pc, #332]	; (8007a84 <tcp_process+0x764>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	613b      	str	r3, [r7, #16]
 800793a:	e00c      	b.n	8007956 <tcp_process+0x636>
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	429a      	cmp	r2, r3
 8007944:	d104      	bne.n	8007950 <tcp_process+0x630>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	60da      	str	r2, [r3, #12]
 800794e:	e005      	b.n	800795c <tcp_process+0x63c>
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1ef      	bne.n	800793c <tcp_process+0x61c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	4b43      	ldr	r3, [pc, #268]	; (8007a70 <tcp_process+0x750>)
 8007964:	2201      	movs	r2, #1
 8007966:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	220a      	movs	r2, #10
 800796c:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800796e:	4b41      	ldr	r3, [pc, #260]	; (8007a74 <tcp_process+0x754>)
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60da      	str	r2, [r3, #12]
 8007976:	4a3f      	ldr	r2, [pc, #252]	; (8007a74 <tcp_process+0x754>)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	f002 fd3c 	bl	800a3f8 <tcp_timer_needed>
    }
    break;
 8007980:	e06c      	b.n	8007a5c <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8f6 	bl	8007b74 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007988:	4b3b      	ldr	r3, [pc, #236]	; (8007a78 <tcp_process+0x758>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d065      	beq.n	8007a60 <tcp_process+0x740>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007998:	4b38      	ldr	r3, [pc, #224]	; (8007a7c <tcp_process+0x75c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d15f      	bne.n	8007a60 <tcp_process+0x740>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d15b      	bne.n	8007a60 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fe fe1d 	bl	80065e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80079ae:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <tcp_process+0x764>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d105      	bne.n	80079c4 <tcp_process+0x6a4>
 80079b8:	4b32      	ldr	r3, [pc, #200]	; (8007a84 <tcp_process+0x764>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	4a31      	ldr	r2, [pc, #196]	; (8007a84 <tcp_process+0x764>)
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	e013      	b.n	80079ec <tcp_process+0x6cc>
 80079c4:	4b2f      	ldr	r3, [pc, #188]	; (8007a84 <tcp_process+0x764>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e00c      	b.n	80079e6 <tcp_process+0x6c6>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d104      	bne.n	80079e0 <tcp_process+0x6c0>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	60da      	str	r2, [r3, #12]
 80079de:	e005      	b.n	80079ec <tcp_process+0x6cc>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1ef      	bne.n	80079cc <tcp_process+0x6ac>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	60da      	str	r2, [r3, #12]
 80079f2:	4b1f      	ldr	r3, [pc, #124]	; (8007a70 <tcp_process+0x750>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	220a      	movs	r2, #10
 80079fc:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80079fe:	4b1d      	ldr	r3, [pc, #116]	; (8007a74 <tcp_process+0x754>)
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	60da      	str	r2, [r3, #12]
 8007a06:	4a1b      	ldr	r2, [pc, #108]	; (8007a74 <tcp_process+0x754>)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	f002 fcf4 	bl	800a3f8 <tcp_timer_needed>
    }
    break;
 8007a10:	e026      	b.n	8007a60 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f8ae 	bl	8007b74 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007a18:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <tcp_process+0x758>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01f      	beq.n	8007a64 <tcp_process+0x744>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a28:	4b14      	ldr	r3, [pc, #80]	; (8007a7c <tcp_process+0x75c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d119      	bne.n	8007a64 <tcp_process+0x744>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d115      	bne.n	8007a64 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8007a38:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <tcp_process+0x760>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f043 0310 	orr.w	r3, r3, #16
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <tcp_process+0x760>)
 8007a44:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007a46:	e00d      	b.n	8007a64 <tcp_process+0x744>
  default:
    break;
 8007a48:	bf00      	nop
 8007a4a:	e00c      	b.n	8007a66 <tcp_process+0x746>
    break;
 8007a4c:	bf00      	nop
 8007a4e:	e00a      	b.n	8007a66 <tcp_process+0x746>
    break;
 8007a50:	bf00      	nop
 8007a52:	e008      	b.n	8007a66 <tcp_process+0x746>
    break;
 8007a54:	bf00      	nop
 8007a56:	e006      	b.n	8007a66 <tcp_process+0x746>
    break;
 8007a58:	bf00      	nop
 8007a5a:	e004      	b.n	8007a66 <tcp_process+0x746>
    break;
 8007a5c:	bf00      	nop
 8007a5e:	e002      	b.n	8007a66 <tcp_process+0x746>
    break;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <tcp_process+0x746>
    break;
 8007a64:	bf00      	nop
  }
  return ERR_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	200088f4 	.word	0x200088f4
 8007a74:	200088f0 	.word	0x200088f0
 8007a78:	20008924 	.word	0x20008924
 8007a7c:	2000891c 	.word	0x2000891c
 8007a80:	20008925 	.word	0x20008925
 8007a84:	200088ec 	.word	0x200088ec

08007a88 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007a88:	b590      	push	{r4, r7, lr}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	899b      	ldrh	r3, [r3, #12]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fb ff2b 	bl	80038f6 <lwip_htons>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d027      	beq.n	8007afa <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007aaa:	6838      	ldr	r0, [r7, #0]
 8007aac:	f7fe fb2f 	bl	800610e <tcp_segs_free>
    next = NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	e055      	b.n	8007b62 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	899b      	ldrh	r3, [r3, #12]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fb ff19 	bl	80038f6 <lwip_htons>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00d      	beq.n	8007aea <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	899b      	ldrh	r3, [r3, #12]
 8007ad4:	b29c      	uxth	r4, r3
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	f7fb ff0d 	bl	80038f6 <lwip_htons>
 8007adc:	4603      	mov	r3, r0
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	4322      	orrs	r2, r4
 8007ae6:	b292      	uxth	r2, r2
 8007ae8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f7fe fb1f 	bl	8006138 <tcp_seg_free>
    while (next &&
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00e      	beq.n	8007b1e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	891b      	ldrh	r3, [r3, #8]
 8007b04:	461a      	mov	r2, r3
 8007b06:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <tcp_oos_insert_segment+0xe8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	441a      	add	r2, r3
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	8909      	ldrh	r1, [r1, #8]
 8007b16:	440b      	add	r3, r1
 8007b18:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dacb      	bge.n	8007ab6 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01e      	beq.n	8007b62 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	891b      	ldrh	r3, [r3, #8]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <tcp_oos_insert_segment+0xe8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	441a      	add	r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	dd12      	ble.n	8007b62 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <tcp_oos_insert_segment+0xe8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	891b      	ldrh	r3, [r3, #8]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7fc fe89 	bl	8004874 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	601a      	str	r2, [r3, #0]
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd90      	pop	{r4, r7, pc}
 8007b70:	20008918 	.word	0x20008918

08007b74 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b76:	b08d      	sub	sp, #52	; 0x34
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	7d1b      	ldrb	r3, [r3, #20]
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d806      	bhi.n	8007b96 <tcp_receive+0x22>
 8007b88:	4b98      	ldr	r3, [pc, #608]	; (8007dec <tcp_receive+0x278>)
 8007b8a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007b8e:	4998      	ldr	r1, [pc, #608]	; (8007df0 <tcp_receive+0x27c>)
 8007b90:	4898      	ldr	r0, [pc, #608]	; (8007df4 <tcp_receive+0x280>)
 8007b92:	f005 fa23 	bl	800cfdc <iprintf>

  if (flags & TCP_ACK) {
 8007b96:	4b98      	ldr	r3, [pc, #608]	; (8007df8 <tcp_receive+0x284>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 82c1 	beq.w	8008126 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	4413      	add	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bb8:	4b90      	ldr	r3, [pc, #576]	; (8007dfc <tcp_receive+0x288>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	db1b      	blt.n	8007bfa <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bc6:	4b8d      	ldr	r3, [pc, #564]	; (8007dfc <tcp_receive+0x288>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d106      	bne.n	8007bdc <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bd2:	4b8b      	ldr	r3, [pc, #556]	; (8007e00 <tcp_receive+0x28c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	db0e      	blt.n	8007bfa <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007be0:	4b87      	ldr	r3, [pc, #540]	; (8007e00 <tcp_receive+0x28c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d141      	bne.n	8007c6c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007be8:	4b86      	ldr	r3, [pc, #536]	; (8007e04 <tcp_receive+0x290>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	89db      	ldrh	r3, [r3, #14]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d938      	bls.n	8007c6c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007bfa:	4b82      	ldr	r3, [pc, #520]	; (8007e04 <tcp_receive+0x290>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	89db      	ldrh	r3, [r3, #14]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d205      	bcs.n	8007c24 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8007c24:	4b75      	ldr	r3, [pc, #468]	; (8007dfc <tcp_receive+0x288>)
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8007c2c:	4b74      	ldr	r3, [pc, #464]	; (8007e00 <tcp_receive+0x28c>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10d      	bne.n	8007c5a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d111      	bne.n	8007c6c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007c58:	e008      	b.n	8007c6c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d003      	beq.n	8007c6c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007c6c:	4b64      	ldr	r3, [pc, #400]	; (8007e00 <tcp_receive+0x28c>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dc53      	bgt.n	8007d22 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8007c7a:	4b63      	ldr	r3, [pc, #396]	; (8007e08 <tcp_receive+0x294>)
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d146      	bne.n	8007d10 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8007c8c:	4413      	add	r3, r2
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d13d      	bne.n	8007d10 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	db38      	blt.n	8007d10 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ca2:	4b57      	ldr	r3, [pc, #348]	; (8007e00 <tcp_receive+0x28c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d132      	bne.n	8007d10 <tcp_receive+0x19c>
              found_dupack = 1;
 8007caa:	2301      	movs	r3, #1
 8007cac:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cb4:	2bff      	cmp	r3, #255	; 0xff
 8007cb6:	d007      	beq.n	8007cc8 <tcp_receive+0x154>
                ++pcb->dupacks;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d916      	bls.n	8007d00 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cdc:	4413      	add	r3, r2
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d912      	bls.n	8007d10 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cf4:	4413      	add	r3, r2
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007cfe:	e007      	b.n	8007d10 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d102      	bne.n	8007d10 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f002 fa28 	bl	800a160 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f040 816a 	bne.w	8007fec <tcp_receive+0x478>
        pcb->dupacks = 0;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d20:	e164      	b.n	8007fec <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007d22:	4b37      	ldr	r3, [pc, #220]	; (8007e00 <tcp_receive+0x28c>)
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f2c0 8108 	blt.w	8007f44 <tcp_receive+0x3d0>
 8007d34:	4b32      	ldr	r3, [pc, #200]	; (8007e00 <tcp_receive+0x28c>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f300 8100 	bgt.w	8007f44 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	7e9b      	ldrb	r3, [r3, #26]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00c      	beq.n	8007d6a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	7e9b      	ldrb	r3, [r3, #26]
 8007d54:	f023 0304 	bic.w	r3, r3, #4
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007d78:	10db      	asrs	r3, r3, #3
 8007d7a:	b21b      	sxth	r3, r3
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	4413      	add	r3, r2
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	b21a      	sxth	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007d9a:	4b19      	ldr	r3, [pc, #100]	; (8007e00 <tcp_receive+0x28c>)
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	7d1b      	ldrb	r3, [r3, #20]
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	f240 8095 	bls.w	8007ed6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d227      	bcs.n	8007e0c <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007dc6:	4413      	add	r3, r2
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	f240 8080 	bls.w	8007ed6 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007de0:	4413      	add	r3, r2
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007dea:	e074      	b.n	8007ed6 <tcp_receive+0x362>
 8007dec:	0800eae4 	.word	0x0800eae4
 8007df0:	0800ed08 	.word	0x0800ed08
 8007df4:	0800eb28 	.word	0x0800eb28
 8007df8:	20008924 	.word	0x20008924
 8007dfc:	20008918 	.word	0x20008918
 8007e00:	2000891c 	.word	0x2000891c
 8007e04:	20008908 	.word	0x20008908
 8007e08:	20008922 	.word	0x20008922
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e16:	4619      	mov	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8007e26:	fb93 f3f1 	sdiv	r3, r3, r1
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4413      	add	r3, r2
 8007e2e:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007e36:	8a7a      	ldrh	r2, [r7, #18]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d94c      	bls.n	8007ed6 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8a7a      	ldrh	r2, [r7, #18]
 8007e40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8007e44:	e047      	b.n	8007ed6 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fc ff0f 	bl	8004c84 <pbuf_clen>
 8007e66:	4603      	mov	r3, r0
 8007e68:	429c      	cmp	r4, r3
 8007e6a:	d206      	bcs.n	8007e7a <tcp_receive+0x306>
 8007e6c:	4b70      	ldr	r3, [pc, #448]	; (8008030 <tcp_receive+0x4bc>)
 8007e6e:	f240 429e 	movw	r2, #1182	; 0x49e
 8007e72:	4970      	ldr	r1, [pc, #448]	; (8008034 <tcp_receive+0x4c0>)
 8007e74:	4870      	ldr	r0, [pc, #448]	; (8008038 <tcp_receive+0x4c4>)
 8007e76:	f005 f8b1 	bl	800cfdc <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fc ff00 	bl	8004c84 <pbuf_clen>
 8007e84:	4603      	mov	r3, r0
 8007e86:	461a      	mov	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e8e:	1a9b      	subs	r3, r3, r2
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8007e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9a:	891a      	ldrh	r2, [r3, #8]
 8007e9c:	4b67      	ldr	r3, [pc, #412]	; (800803c <tcp_receive+0x4c8>)
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	4b65      	ldr	r3, [pc, #404]	; (800803c <tcp_receive+0x4c8>)
 8007ea6:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8007ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eaa:	f7fe f945 	bl	8006138 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00e      	beq.n	8007ed6 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <tcp_receive+0x362>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d106      	bne.n	8007ed6 <tcp_receive+0x362>
 8007ec8:	4b59      	ldr	r3, [pc, #356]	; (8008030 <tcp_receive+0x4bc>)
 8007eca:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8007ece:	495c      	ldr	r1, [pc, #368]	; (8008040 <tcp_receive+0x4cc>)
 8007ed0:	4859      	ldr	r0, [pc, #356]	; (8008038 <tcp_receive+0x4c4>)
 8007ed2:	f005 f883 	bl	800cfdc <iprintf>
      while (pcb->unacked != NULL &&
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d022      	beq.n	8007f24 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fb fd12 	bl	8003910 <lwip_htonl>
 8007eec:	4604      	mov	r4, r0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef2:	891b      	ldrh	r3, [r3, #8]
 8007ef4:	461d      	mov	r5, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	899b      	ldrh	r3, [r3, #12]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fb fcf8 	bl	80038f6 <lwip_htons>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <tcp_receive+0x3a0>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e000      	b.n	8007f16 <tcp_receive+0x3a2>
 8007f14:	2300      	movs	r3, #0
 8007f16:	442b      	add	r3, r5
 8007f18:	18e2      	adds	r2, r4, r3
 8007f1a:	4b4a      	ldr	r3, [pc, #296]	; (8008044 <tcp_receive+0x4d0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dd90      	ble.n	8007e46 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f32:	861a      	strh	r2, [r3, #48]	; 0x30
 8007f34:	e002      	b.n	8007f3c <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	76da      	strb	r2, [r3, #27]
 8007f42:	e002      	b.n	8007f4a <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 fd2f 	bl	80099a8 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8007f4a:	e04f      	b.n	8007fec <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d103      	bne.n	8007f6c <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fc fe84 	bl	8004c84 <pbuf_clen>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d206      	bcs.n	8007f90 <tcp_receive+0x41c>
 8007f82:	4b2b      	ldr	r3, [pc, #172]	; (8008030 <tcp_receive+0x4bc>)
 8007f84:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007f88:	492a      	ldr	r1, [pc, #168]	; (8008034 <tcp_receive+0x4c0>)
 8007f8a:	482b      	ldr	r0, [pc, #172]	; (8008038 <tcp_receive+0x4c4>)
 8007f8c:	f005 f826 	bl	800cfdc <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fc fe75 	bl	8004c84 <pbuf_clen>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8007fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb0:	891a      	ldrh	r2, [r3, #8]
 8007fb2:	4b22      	ldr	r3, [pc, #136]	; (800803c <tcp_receive+0x4c8>)
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	4b20      	ldr	r3, [pc, #128]	; (800803c <tcp_receive+0x4c8>)
 8007fbc:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8007fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fc0:	f7fe f8ba 	bl	8006138 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <tcp_receive+0x478>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d106      	bne.n	8007fec <tcp_receive+0x478>
 8007fde:	4b14      	ldr	r3, [pc, #80]	; (8008030 <tcp_receive+0x4bc>)
 8007fe0:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8007fe4:	4916      	ldr	r1, [pc, #88]	; (8008040 <tcp_receive+0x4cc>)
 8007fe6:	4814      	ldr	r0, [pc, #80]	; (8008038 <tcp_receive+0x4c4>)
 8007fe8:	f004 fff8 	bl	800cfdc <iprintf>
    while (pcb->unsent != NULL &&
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d037      	beq.n	8008064 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007ff4:	4b13      	ldr	r3, [pc, #76]	; (8008044 <tcp_receive+0x4d0>)
 8007ff6:	681c      	ldr	r4, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	4618      	mov	r0, r3
 8008002:	f7fb fc85 	bl	8003910 <lwip_htonl>
 8008006:	4605      	mov	r5, r0
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800800c:	891b      	ldrh	r3, [r3, #8]
 800800e:	461e      	mov	r6, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	899b      	ldrh	r3, [r3, #12]
 8008018:	b29b      	uxth	r3, r3
 800801a:	4618      	mov	r0, r3
 800801c:	f7fb fc6b 	bl	80038f6 <lwip_htons>
 8008020:	4603      	mov	r3, r0
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00e      	beq.n	8008048 <tcp_receive+0x4d4>
 800802a:	2301      	movs	r3, #1
 800802c:	e00d      	b.n	800804a <tcp_receive+0x4d6>
 800802e:	bf00      	nop
 8008030:	0800eae4 	.word	0x0800eae4
 8008034:	0800ed24 	.word	0x0800ed24
 8008038:	0800eb28 	.word	0x0800eb28
 800803c:	20008920 	.word	0x20008920
 8008040:	0800ed4c 	.word	0x0800ed4c
 8008044:	2000891c 	.word	0x2000891c
 8008048:	2300      	movs	r3, #0
 800804a:	4433      	add	r3, r6
 800804c:	442b      	add	r3, r5
 800804e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8008050:	2b00      	cmp	r3, #0
 8008052:	db07      	blt.n	8008064 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008054:	4b8d      	ldr	r3, [pc, #564]	; (800828c <tcp_receive+0x718>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	f77f af74 	ble.w	8007f4c <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800806a:	4b89      	ldr	r3, [pc, #548]	; (8008290 <tcp_receive+0x71c>)
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	4413      	add	r3, r2
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807c:	2b00      	cmp	r3, #0
 800807e:	d052      	beq.n	8008126 <tcp_receive+0x5b2>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008084:	4b81      	ldr	r3, [pc, #516]	; (800828c <tcp_receive+0x718>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	da4b      	bge.n	8008126 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800808e:	4b81      	ldr	r3, [pc, #516]	; (8008294 <tcp_receive+0x720>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008098:	b29b      	uxth	r3, r3
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	b29b      	uxth	r3, r3
 800809e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80080a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80080a8:	10db      	asrs	r3, r3, #3
 80080aa:	b21b      	sxth	r3, r3
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080be:	4413      	add	r3, r2
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	b21a      	sxth	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80080c8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	da03      	bge.n	80080d8 <tcp_receive+0x564>
        m = -m;
 80080d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080d2:	425b      	negs	r3, r3
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 80080d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80080e0:	109b      	asrs	r3, r3, #2
 80080e2:	b21b      	sxth	r3, r3
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080f6:	4413      	add	r3, r2
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	b21a      	sxth	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008106:	10db      	asrs	r3, r3, #3
 8008108:	b21b      	sxth	r3, r3
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008112:	b29b      	uxth	r3, r3
 8008114:	4413      	add	r3, r2
 8008116:	b29b      	uxth	r3, r3
 8008118:	b21a      	sxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008126:	4b5c      	ldr	r3, [pc, #368]	; (8008298 <tcp_receive+0x724>)
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 84f1 	beq.w	8008b12 <tcp_receive+0xf9e>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7d1b      	ldrb	r3, [r3, #20]
 8008134:	2b06      	cmp	r3, #6
 8008136:	f200 84ec 	bhi.w	8008b12 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800813e:	4b57      	ldr	r3, [pc, #348]	; (800829c <tcp_receive+0x728>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	f2c0 80b8 	blt.w	80082bc <tcp_receive+0x748>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008150:	4b51      	ldr	r3, [pc, #324]	; (8008298 <tcp_receive+0x724>)
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	4619      	mov	r1, r3
 8008156:	4b51      	ldr	r3, [pc, #324]	; (800829c <tcp_receive+0x728>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	440b      	add	r3, r1
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	3301      	adds	r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	f300 80ab 	bgt.w	80082bc <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008166:	4b4e      	ldr	r3, [pc, #312]	; (80082a0 <tcp_receive+0x72c>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008170:	4b4a      	ldr	r3, [pc, #296]	; (800829c <tcp_receive+0x728>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008178:	4b49      	ldr	r3, [pc, #292]	; (80082a0 <tcp_receive+0x72c>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <tcp_receive+0x61a>
 8008180:	4b48      	ldr	r3, [pc, #288]	; (80082a4 <tcp_receive+0x730>)
 8008182:	f240 523c 	movw	r2, #1340	; 0x53c
 8008186:	4948      	ldr	r1, [pc, #288]	; (80082a8 <tcp_receive+0x734>)
 8008188:	4848      	ldr	r0, [pc, #288]	; (80082ac <tcp_receive+0x738>)
 800818a:	f004 ff27 	bl	800cfdc <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008194:	4293      	cmp	r3, r2
 8008196:	dd06      	ble.n	80081a6 <tcp_receive+0x632>
 8008198:	4b42      	ldr	r3, [pc, #264]	; (80082a4 <tcp_receive+0x730>)
 800819a:	f240 523d 	movw	r2, #1341	; 0x53d
 800819e:	4944      	ldr	r1, [pc, #272]	; (80082b0 <tcp_receive+0x73c>)
 80081a0:	4842      	ldr	r0, [pc, #264]	; (80082ac <tcp_receive+0x738>)
 80081a2:	f004 ff1b 	bl	800cfdc <iprintf>
      if (inseg.p->len < off) {
 80081a6:	4b3e      	ldr	r3, [pc, #248]	; (80082a0 <tcp_receive+0x72c>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	895b      	ldrh	r3, [r3, #10]
 80081ac:	461a      	mov	r2, r3
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	4293      	cmp	r3, r2
 80081b2:	dd3e      	ble.n	8008232 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80081b4:	4b3a      	ldr	r3, [pc, #232]	; (80082a0 <tcp_receive+0x72c>)
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	891b      	ldrh	r3, [r3, #8]
 80081ba:	461a      	mov	r2, r3
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	4293      	cmp	r3, r2
 80081c0:	dd06      	ble.n	80081d0 <tcp_receive+0x65c>
 80081c2:	4b38      	ldr	r3, [pc, #224]	; (80082a4 <tcp_receive+0x730>)
 80081c4:	f240 523f 	movw	r2, #1343	; 0x53f
 80081c8:	493a      	ldr	r1, [pc, #232]	; (80082b4 <tcp_receive+0x740>)
 80081ca:	4838      	ldr	r0, [pc, #224]	; (80082ac <tcp_receive+0x738>)
 80081cc:	f004 ff06 	bl	800cfdc <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80081d0:	4b33      	ldr	r3, [pc, #204]	; (80082a0 <tcp_receive+0x72c>)
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	891a      	ldrh	r2, [r3, #8]
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	b29b      	uxth	r3, r3
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80081de:	e00e      	b.n	80081fe <tcp_receive+0x68a>
          off -= p->len;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	895b      	ldrh	r3, [r3, #10]
 80081e4:	461a      	mov	r2, r3
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	8a3a      	ldrh	r2, [r7, #16]
 80081f0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2200      	movs	r2, #0
 80081f6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	895b      	ldrh	r3, [r3, #10]
 8008202:	461a      	mov	r2, r3
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	4293      	cmp	r3, r2
 8008208:	dcea      	bgt.n	80081e0 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	b29b      	uxth	r3, r3
 800820e:	425b      	negs	r3, r3
 8008210:	b29b      	uxth	r3, r3
 8008212:	b21b      	sxth	r3, r3
 8008214:	4619      	mov	r1, r3
 8008216:	69b8      	ldr	r0, [r7, #24]
 8008218:	f7fc fc7c 	bl	8004b14 <pbuf_header>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01c      	beq.n	800825c <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008222:	4b20      	ldr	r3, [pc, #128]	; (80082a4 <tcp_receive+0x730>)
 8008224:	f240 524c 	movw	r2, #1356	; 0x54c
 8008228:	4923      	ldr	r1, [pc, #140]	; (80082b8 <tcp_receive+0x744>)
 800822a:	4820      	ldr	r0, [pc, #128]	; (80082ac <tcp_receive+0x738>)
 800822c:	f004 fed6 	bl	800cfdc <iprintf>
 8008230:	e014      	b.n	800825c <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008232:	4b1b      	ldr	r3, [pc, #108]	; (80082a0 <tcp_receive+0x72c>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008238:	b292      	uxth	r2, r2
 800823a:	4252      	negs	r2, r2
 800823c:	b292      	uxth	r2, r2
 800823e:	b212      	sxth	r2, r2
 8008240:	4611      	mov	r1, r2
 8008242:	4618      	mov	r0, r3
 8008244:	f7fc fc66 	bl	8004b14 <pbuf_header>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d006      	beq.n	800825c <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800824e:	4b15      	ldr	r3, [pc, #84]	; (80082a4 <tcp_receive+0x730>)
 8008250:	f240 5251 	movw	r2, #1361	; 0x551
 8008254:	4918      	ldr	r1, [pc, #96]	; (80082b8 <tcp_receive+0x744>)
 8008256:	4815      	ldr	r0, [pc, #84]	; (80082ac <tcp_receive+0x738>)
 8008258:	f004 fec0 	bl	800cfdc <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800825c:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <tcp_receive+0x72c>)
 800825e:	891a      	ldrh	r2, [r3, #8]
 8008260:	4b0e      	ldr	r3, [pc, #56]	; (800829c <tcp_receive+0x728>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	b299      	uxth	r1, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	b29b      	uxth	r3, r3
 800826c:	1acb      	subs	r3, r1, r3
 800826e:	b29b      	uxth	r3, r3
 8008270:	4413      	add	r3, r2
 8008272:	b29a      	uxth	r2, r3
 8008274:	4b0a      	ldr	r3, [pc, #40]	; (80082a0 <tcp_receive+0x72c>)
 8008276:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	4a07      	ldr	r2, [pc, #28]	; (800829c <tcp_receive+0x728>)
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <tcp_receive+0x72c>)
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	4a05      	ldr	r2, [pc, #20]	; (800829c <tcp_receive+0x728>)
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800828a:	e025      	b.n	80082d8 <tcp_receive+0x764>
 800828c:	2000891c 	.word	0x2000891c
 8008290:	20008920 	.word	0x20008920
 8008294:	200088e0 	.word	0x200088e0
 8008298:	20008922 	.word	0x20008922
 800829c:	20008918 	.word	0x20008918
 80082a0:	200088f8 	.word	0x200088f8
 80082a4:	0800eae4 	.word	0x0800eae4
 80082a8:	0800ed6c 	.word	0x0800ed6c
 80082ac:	0800eb28 	.word	0x0800eb28
 80082b0:	0800ed7c 	.word	0x0800ed7c
 80082b4:	0800ed8c 	.word	0x0800ed8c
 80082b8:	0800ed9c 	.word	0x0800ed9c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80082bc:	4b87      	ldr	r3, [pc, #540]	; (80084dc <tcp_receive+0x968>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	da06      	bge.n	80082d8 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7e9b      	ldrb	r3, [r3, #26]
 80082ce:	f043 0302 	orr.w	r3, r3, #2
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80082d8:	4b80      	ldr	r3, [pc, #512]	; (80084dc <tcp_receive+0x968>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f2c0 8410 	blt.w	8008b08 <tcp_receive+0xf94>
 80082e8:	4b7c      	ldr	r3, [pc, #496]	; (80084dc <tcp_receive+0x968>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80082f4:	440b      	add	r3, r1
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	3301      	adds	r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f300 8404 	bgt.w	8008b08 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008304:	4b75      	ldr	r3, [pc, #468]	; (80084dc <tcp_receive+0x968>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	f040 8287 	bne.w	800881c <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800830e:	4b74      	ldr	r3, [pc, #464]	; (80084e0 <tcp_receive+0x96c>)
 8008310:	891c      	ldrh	r4, [r3, #8]
 8008312:	4b73      	ldr	r3, [pc, #460]	; (80084e0 <tcp_receive+0x96c>)
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	899b      	ldrh	r3, [r3, #12]
 8008318:	b29b      	uxth	r3, r3
 800831a:	4618      	mov	r0, r3
 800831c:	f7fb faeb 	bl	80038f6 <lwip_htons>
 8008320:	4603      	mov	r3, r0
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <tcp_receive+0x7ba>
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <tcp_receive+0x7bc>
 800832e:	2300      	movs	r3, #0
 8008330:	4423      	add	r3, r4
 8008332:	b29a      	uxth	r2, r3
 8008334:	4b6b      	ldr	r3, [pc, #428]	; (80084e4 <tcp_receive+0x970>)
 8008336:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800833c:	4b69      	ldr	r3, [pc, #420]	; (80084e4 <tcp_receive+0x970>)
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d26e      	bcs.n	8008422 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008344:	4b66      	ldr	r3, [pc, #408]	; (80084e0 <tcp_receive+0x96c>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	899b      	ldrh	r3, [r3, #12]
 800834a:	b29b      	uxth	r3, r3
 800834c:	4618      	mov	r0, r3
 800834e:	f7fb fad2 	bl	80038f6 <lwip_htons>
 8008352:	4603      	mov	r3, r0
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01b      	beq.n	8008394 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800835c:	4b60      	ldr	r3, [pc, #384]	; (80084e0 <tcp_receive+0x96c>)
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	899b      	ldrh	r3, [r3, #12]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008368:	b29c      	uxth	r4, r3
 800836a:	4b5d      	ldr	r3, [pc, #372]	; (80084e0 <tcp_receive+0x96c>)
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	899b      	ldrh	r3, [r3, #12]
 8008370:	b29b      	uxth	r3, r3
 8008372:	4618      	mov	r0, r3
 8008374:	f7fb fabf 	bl	80038f6 <lwip_htons>
 8008378:	4603      	mov	r3, r0
 800837a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800837e:	b29b      	uxth	r3, r3
 8008380:	4618      	mov	r0, r3
 8008382:	f7fb fab8 	bl	80038f6 <lwip_htons>
 8008386:	4603      	mov	r3, r0
 8008388:	461a      	mov	r2, r3
 800838a:	4b55      	ldr	r3, [pc, #340]	; (80084e0 <tcp_receive+0x96c>)
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	4322      	orrs	r2, r4
 8008390:	b292      	uxth	r2, r2
 8008392:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008398:	4b51      	ldr	r3, [pc, #324]	; (80084e0 <tcp_receive+0x96c>)
 800839a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800839c:	4b50      	ldr	r3, [pc, #320]	; (80084e0 <tcp_receive+0x96c>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	899b      	ldrh	r3, [r3, #12]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fb faa6 	bl	80038f6 <lwip_htons>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <tcp_receive+0x84c>
            inseg.len -= 1;
 80083b4:	4b4a      	ldr	r3, [pc, #296]	; (80084e0 <tcp_receive+0x96c>)
 80083b6:	891b      	ldrh	r3, [r3, #8]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	4b48      	ldr	r3, [pc, #288]	; (80084e0 <tcp_receive+0x96c>)
 80083be:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80083c0:	4b47      	ldr	r3, [pc, #284]	; (80084e0 <tcp_receive+0x96c>)
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	4a46      	ldr	r2, [pc, #280]	; (80084e0 <tcp_receive+0x96c>)
 80083c6:	8912      	ldrh	r2, [r2, #8]
 80083c8:	4611      	mov	r1, r2
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fc fa52 	bl	8004874 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80083d0:	4b43      	ldr	r3, [pc, #268]	; (80084e0 <tcp_receive+0x96c>)
 80083d2:	891c      	ldrh	r4, [r3, #8]
 80083d4:	4b42      	ldr	r3, [pc, #264]	; (80084e0 <tcp_receive+0x96c>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	899b      	ldrh	r3, [r3, #12]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fb fa8a 	bl	80038f6 <lwip_htons>
 80083e2:	4603      	mov	r3, r0
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <tcp_receive+0x87c>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <tcp_receive+0x87e>
 80083f0:	2300      	movs	r3, #0
 80083f2:	4423      	add	r3, r4
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	4b3b      	ldr	r3, [pc, #236]	; (80084e4 <tcp_receive+0x970>)
 80083f8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80083fa:	4b3a      	ldr	r3, [pc, #232]	; (80084e4 <tcp_receive+0x970>)
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	4b36      	ldr	r3, [pc, #216]	; (80084dc <tcp_receive+0x968>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	441a      	add	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800840e:	440b      	add	r3, r1
 8008410:	429a      	cmp	r2, r3
 8008412:	d006      	beq.n	8008422 <tcp_receive+0x8ae>
 8008414:	4b34      	ldr	r3, [pc, #208]	; (80084e8 <tcp_receive+0x974>)
 8008416:	f240 527e 	movw	r2, #1406	; 0x57e
 800841a:	4934      	ldr	r1, [pc, #208]	; (80084ec <tcp_receive+0x978>)
 800841c:	4834      	ldr	r0, [pc, #208]	; (80084f0 <tcp_receive+0x97c>)
 800841e:	f004 fddd 	bl	800cfdc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80e1 	beq.w	80085ee <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800842c:	4b2c      	ldr	r3, [pc, #176]	; (80084e0 <tcp_receive+0x96c>)
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	899b      	ldrh	r3, [r3, #12]
 8008432:	b29b      	uxth	r3, r3
 8008434:	4618      	mov	r0, r3
 8008436:	f7fb fa5e 	bl	80038f6 <lwip_htons>
 800843a:	4603      	mov	r3, r0
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d010      	beq.n	8008466 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008444:	e00a      	b.n	800845c <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8008456:	68b8      	ldr	r0, [r7, #8]
 8008458:	f7fd fe6e 	bl	8006138 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1f0      	bne.n	8008446 <tcp_receive+0x8d2>
 8008464:	e0c3      	b.n	80085ee <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800846c:	e04f      	b.n	800850e <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	899b      	ldrh	r3, [r3, #12]
 8008474:	b29b      	uxth	r3, r3
 8008476:	4618      	mov	r0, r3
 8008478:	f7fb fa3d 	bl	80038f6 <lwip_htons>
 800847c:	4603      	mov	r3, r0
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d03b      	beq.n	80084fe <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008486:	4b16      	ldr	r3, [pc, #88]	; (80084e0 <tcp_receive+0x96c>)
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	899b      	ldrh	r3, [r3, #12]
 800848c:	b29b      	uxth	r3, r3
 800848e:	4618      	mov	r0, r3
 8008490:	f7fb fa31 	bl	80038f6 <lwip_htons>
 8008494:	4603      	mov	r3, r0
 8008496:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800849a:	2b00      	cmp	r3, #0
 800849c:	d12f      	bne.n	80084fe <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800849e:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <tcp_receive+0x96c>)
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	899b      	ldrh	r3, [r3, #12]
 80084a4:	b29c      	uxth	r4, r3
 80084a6:	2001      	movs	r0, #1
 80084a8:	f7fb fa25 	bl	80038f6 <lwip_htons>
 80084ac:	4603      	mov	r3, r0
 80084ae:	461a      	mov	r2, r3
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <tcp_receive+0x96c>)
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	4322      	orrs	r2, r4
 80084b6:	b292      	uxth	r2, r2
 80084b8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80084ba:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <tcp_receive+0x96c>)
 80084bc:	891c      	ldrh	r4, [r3, #8]
 80084be:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <tcp_receive+0x96c>)
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	899b      	ldrh	r3, [r3, #12]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fb fa15 	bl	80038f6 <lwip_htons>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <tcp_receive+0x980>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e00d      	b.n	80084f6 <tcp_receive+0x982>
 80084da:	bf00      	nop
 80084dc:	20008918 	.word	0x20008918
 80084e0:	200088f8 	.word	0x200088f8
 80084e4:	20008922 	.word	0x20008922
 80084e8:	0800eae4 	.word	0x0800eae4
 80084ec:	0800edb0 	.word	0x0800edb0
 80084f0:	0800eb28 	.word	0x0800eb28
 80084f4:	2300      	movs	r3, #0
 80084f6:	4423      	add	r3, r4
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	4b95      	ldr	r3, [pc, #596]	; (8008750 <tcp_receive+0xbdc>)
 80084fc:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8008508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800850a:	f7fd fe15 	bl	8006138 <tcp_seg_free>
            while (next &&
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00e      	beq.n	8008532 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008514:	4b8e      	ldr	r3, [pc, #568]	; (8008750 <tcp_receive+0xbdc>)
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	4b8e      	ldr	r3, [pc, #568]	; (8008754 <tcp_receive+0xbe0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	441a      	add	r2, r3
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008528:	8909      	ldrh	r1, [r1, #8]
 800852a:	440b      	add	r3, r1
 800852c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800852e:	2b00      	cmp	r3, #0
 8008530:	da9d      	bge.n	800846e <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d057      	beq.n	80085e8 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8008538:	4b85      	ldr	r3, [pc, #532]	; (8008750 <tcp_receive+0xbdc>)
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	4b85      	ldr	r3, [pc, #532]	; (8008754 <tcp_receive+0xbe0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	441a      	add	r2, r3
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd4b      	ble.n	80085e8 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	b29a      	uxth	r2, r3
 8008558:	4b7e      	ldr	r3, [pc, #504]	; (8008754 <tcp_receive+0xbe0>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	b29b      	uxth	r3, r3
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	b29a      	uxth	r2, r3
 8008562:	4b7d      	ldr	r3, [pc, #500]	; (8008758 <tcp_receive+0xbe4>)
 8008564:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008566:	4b7c      	ldr	r3, [pc, #496]	; (8008758 <tcp_receive+0xbe4>)
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	899b      	ldrh	r3, [r3, #12]
 800856c:	b29b      	uxth	r3, r3
 800856e:	4618      	mov	r0, r3
 8008570:	f7fb f9c1 	bl	80038f6 <lwip_htons>
 8008574:	4603      	mov	r3, r0
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d005      	beq.n	800858a <tcp_receive+0xa16>
                inseg.len -= 1;
 800857e:	4b76      	ldr	r3, [pc, #472]	; (8008758 <tcp_receive+0xbe4>)
 8008580:	891b      	ldrh	r3, [r3, #8]
 8008582:	3b01      	subs	r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	4b74      	ldr	r3, [pc, #464]	; (8008758 <tcp_receive+0xbe4>)
 8008588:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800858a:	4b73      	ldr	r3, [pc, #460]	; (8008758 <tcp_receive+0xbe4>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4a72      	ldr	r2, [pc, #456]	; (8008758 <tcp_receive+0xbe4>)
 8008590:	8912      	ldrh	r2, [r2, #8]
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f7fc f96d 	bl	8004874 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800859a:	4b6f      	ldr	r3, [pc, #444]	; (8008758 <tcp_receive+0xbe4>)
 800859c:	891c      	ldrh	r4, [r3, #8]
 800859e:	4b6e      	ldr	r3, [pc, #440]	; (8008758 <tcp_receive+0xbe4>)
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	899b      	ldrh	r3, [r3, #12]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fb f9a5 	bl	80038f6 <lwip_htons>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <tcp_receive+0xa46>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <tcp_receive+0xa48>
 80085ba:	2300      	movs	r3, #0
 80085bc:	4423      	add	r3, r4
 80085be:	b29a      	uxth	r2, r3
 80085c0:	4b63      	ldr	r3, [pc, #396]	; (8008750 <tcp_receive+0xbdc>)
 80085c2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80085c4:	4b62      	ldr	r3, [pc, #392]	; (8008750 <tcp_receive+0xbdc>)
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	4b62      	ldr	r3, [pc, #392]	; (8008754 <tcp_receive+0xbe0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	441a      	add	r2, r3
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d006      	beq.n	80085e8 <tcp_receive+0xa74>
 80085da:	4b60      	ldr	r3, [pc, #384]	; (800875c <tcp_receive+0xbe8>)
 80085dc:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80085e0:	495f      	ldr	r1, [pc, #380]	; (8008760 <tcp_receive+0xbec>)
 80085e2:	4860      	ldr	r0, [pc, #384]	; (8008764 <tcp_receive+0xbf0>)
 80085e4:	f004 fcfa 	bl	800cfdc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ec:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80085ee:	4b58      	ldr	r3, [pc, #352]	; (8008750 <tcp_receive+0xbdc>)
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	4b57      	ldr	r3, [pc, #348]	; (8008754 <tcp_receive+0xbe0>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	441a      	add	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008602:	4b53      	ldr	r3, [pc, #332]	; (8008750 <tcp_receive+0xbdc>)
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d206      	bcs.n	8008618 <tcp_receive+0xaa4>
 800860a:	4b54      	ldr	r3, [pc, #336]	; (800875c <tcp_receive+0xbe8>)
 800860c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008610:	4955      	ldr	r1, [pc, #340]	; (8008768 <tcp_receive+0xbf4>)
 8008612:	4854      	ldr	r0, [pc, #336]	; (8008764 <tcp_receive+0xbf0>)
 8008614:	f004 fce2 	bl	800cfdc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800861c:	4b4c      	ldr	r3, [pc, #304]	; (8008750 <tcp_receive+0xbdc>)
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	b29a      	uxth	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7fd f8f5 	bl	8005818 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800862e:	4b4a      	ldr	r3, [pc, #296]	; (8008758 <tcp_receive+0xbe4>)
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	891b      	ldrh	r3, [r3, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d006      	beq.n	8008646 <tcp_receive+0xad2>
          recv_data = inseg.p;
 8008638:	4b47      	ldr	r3, [pc, #284]	; (8008758 <tcp_receive+0xbe4>)
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	4a4b      	ldr	r2, [pc, #300]	; (800876c <tcp_receive+0xbf8>)
 800863e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008640:	4b45      	ldr	r3, [pc, #276]	; (8008758 <tcp_receive+0xbe4>)
 8008642:	2200      	movs	r2, #0
 8008644:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008646:	4b44      	ldr	r3, [pc, #272]	; (8008758 <tcp_receive+0xbe4>)
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	899b      	ldrh	r3, [r3, #12]
 800864c:	b29b      	uxth	r3, r3
 800864e:	4618      	mov	r0, r3
 8008650:	f7fb f951 	bl	80038f6 <lwip_htons>
 8008654:	4603      	mov	r3, r0
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 80b4 	beq.w	80087c8 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008660:	4b43      	ldr	r3, [pc, #268]	; (8008770 <tcp_receive+0xbfc>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	f043 0320 	orr.w	r3, r3, #32
 8008668:	b2da      	uxtb	r2, r3
 800866a:	4b41      	ldr	r3, [pc, #260]	; (8008770 <tcp_receive+0xbfc>)
 800866c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800866e:	e0ab      	b.n	80087c8 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008674:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	4a35      	ldr	r2, [pc, #212]	; (8008754 <tcp_receive+0xbe0>)
 8008680:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	891b      	ldrh	r3, [r3, #8]
 8008686:	461c      	mov	r4, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	899b      	ldrh	r3, [r3, #12]
 800868e:	b29b      	uxth	r3, r3
 8008690:	4618      	mov	r0, r3
 8008692:	f7fb f930 	bl	80038f6 <lwip_htons>
 8008696:	4603      	mov	r3, r0
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <tcp_receive+0xb30>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <tcp_receive+0xb32>
 80086a4:	2300      	movs	r3, #0
 80086a6:	191a      	adds	r2, r3, r4
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	441a      	add	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b6:	461c      	mov	r4, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	891b      	ldrh	r3, [r3, #8]
 80086bc:	461d      	mov	r5, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	899b      	ldrh	r3, [r3, #12]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fb f915 	bl	80038f6 <lwip_htons>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <tcp_receive+0xb66>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <tcp_receive+0xb68>
 80086da:	2300      	movs	r3, #0
 80086dc:	442b      	add	r3, r5
 80086de:	429c      	cmp	r4, r3
 80086e0:	d206      	bcs.n	80086f0 <tcp_receive+0xb7c>
 80086e2:	4b1e      	ldr	r3, [pc, #120]	; (800875c <tcp_receive+0xbe8>)
 80086e4:	f240 52dd 	movw	r2, #1501	; 0x5dd
 80086e8:	4922      	ldr	r1, [pc, #136]	; (8008774 <tcp_receive+0xc00>)
 80086ea:	481e      	ldr	r0, [pc, #120]	; (8008764 <tcp_receive+0xbf0>)
 80086ec:	f004 fc76 	bl	800cfdc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	891b      	ldrh	r3, [r3, #8]
 80086f4:	461c      	mov	r4, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	899b      	ldrh	r3, [r3, #12]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fb f8f9 	bl	80038f6 <lwip_htons>
 8008704:	4603      	mov	r3, r0
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <tcp_receive+0xb9e>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <tcp_receive+0xba0>
 8008712:	2300      	movs	r3, #0
 8008714:	1919      	adds	r1, r3, r4
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800871a:	b28b      	uxth	r3, r1
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fd f877 	bl	8005818 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	891b      	ldrh	r3, [r3, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d028      	beq.n	8008786 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <tcp_receive+0xbf8>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01d      	beq.n	8008778 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800873c:	4b0b      	ldr	r3, [pc, #44]	; (800876c <tcp_receive+0xbf8>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	4619      	mov	r1, r3
 8008746:	4610      	mov	r0, r2
 8008748:	f7fc fad4 	bl	8004cf4 <pbuf_cat>
 800874c:	e018      	b.n	8008780 <tcp_receive+0xc0c>
 800874e:	bf00      	nop
 8008750:	20008922 	.word	0x20008922
 8008754:	20008918 	.word	0x20008918
 8008758:	200088f8 	.word	0x200088f8
 800875c:	0800eae4 	.word	0x0800eae4
 8008760:	0800ede8 	.word	0x0800ede8
 8008764:	0800eb28 	.word	0x0800eb28
 8008768:	0800ee24 	.word	0x0800ee24
 800876c:	20008928 	.word	0x20008928
 8008770:	20008925 	.word	0x20008925
 8008774:	0800ee44 	.word	0x0800ee44
            } else {
              recv_data = cseg->p;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	4a71      	ldr	r2, [pc, #452]	; (8008944 <tcp_receive+0xdd0>)
 800877e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	899b      	ldrh	r3, [r3, #12]
 800878c:	b29b      	uxth	r3, r3
 800878e:	4618      	mov	r0, r3
 8008790:	f7fb f8b1 	bl	80038f6 <lwip_htons>
 8008794:	4603      	mov	r3, r0
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00d      	beq.n	80087ba <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800879e:	4b6a      	ldr	r3, [pc, #424]	; (8008948 <tcp_receive+0xdd4>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	f043 0320 	orr.w	r3, r3, #32
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	4b67      	ldr	r3, [pc, #412]	; (8008948 <tcp_receive+0xdd4>)
 80087aa:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	7d1b      	ldrb	r3, [r3, #20]
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d102      	bne.n	80087ba <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2207      	movs	r2, #7
 80087b8:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7fd fcb8 	bl	8006138 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d008      	beq.n	80087e2 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80087dc:	429a      	cmp	r2, r3
 80087de:	f43f af47 	beq.w	8008670 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	7e9b      	ldrb	r3, [r3, #26]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00e      	beq.n	800880c <tcp_receive+0xc98>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	7e9b      	ldrb	r3, [r3, #26]
 80087f2:	f023 0301 	bic.w	r3, r3, #1
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	769a      	strb	r2, [r3, #26]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7e9b      	ldrb	r3, [r3, #26]
 8008800:	f043 0302 	orr.w	r3, r3, #2
 8008804:	b2da      	uxtb	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800880a:	e181      	b.n	8008b10 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7e9b      	ldrb	r3, [r3, #26]
 8008810:	f043 0301 	orr.w	r3, r3, #1
 8008814:	b2da      	uxtb	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800881a:	e179      	b.n	8008b10 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 f8c3 	bl	80099a8 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	2b00      	cmp	r3, #0
 8008828:	d106      	bne.n	8008838 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800882a:	4848      	ldr	r0, [pc, #288]	; (800894c <tcp_receive+0xdd8>)
 800882c:	f7fd fcaa 	bl	8006184 <tcp_seg_copy>
 8008830:	4602      	mov	r2, r0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8008836:	e16b      	b.n	8008b10 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8008838:	2300      	movs	r3, #0
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008842:	e150      	b.n	8008ae6 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	4b41      	ldr	r3, [pc, #260]	; (8008950 <tcp_receive+0xddc>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d11d      	bne.n	800888e <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008852:	4b3e      	ldr	r3, [pc, #248]	; (800894c <tcp_receive+0xdd8>)
 8008854:	891a      	ldrh	r2, [r3, #8]
 8008856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008858:	891b      	ldrh	r3, [r3, #8]
 800885a:	429a      	cmp	r2, r3
 800885c:	f240 8148 	bls.w	8008af0 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8008860:	483a      	ldr	r0, [pc, #232]	; (800894c <tcp_receive+0xdd8>)
 8008862:	f7fd fc8f 	bl	8006184 <tcp_seg_copy>
 8008866:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 8142 	beq.w	8008af4 <tcp_receive+0xf80>
                  if (prev != NULL) {
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <tcp_receive+0xd0a>
                    prev->next = cseg;
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e002      	b.n	8008884 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff f8fe 	bl	8007a88 <tcp_oos_insert_segment>
                }
                break;
 800888c:	e132      	b.n	8008af4 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	2b00      	cmp	r3, #0
 8008892:	d117      	bne.n	80088c4 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008894:	4b2e      	ldr	r3, [pc, #184]	; (8008950 <tcp_receive+0xddc>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	da57      	bge.n	8008954 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80088a4:	4829      	ldr	r0, [pc, #164]	; (800894c <tcp_receive+0xdd8>)
 80088a6:	f7fd fc6d 	bl	8006184 <tcp_seg_copy>
 80088aa:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 8122 	beq.w	8008af8 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80088ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7ff f8e3 	bl	8007a88 <tcp_oos_insert_segment>
                  }
                  break;
 80088c2:	e119      	b.n	8008af8 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80088c4:	4b22      	ldr	r3, [pc, #136]	; (8008950 <tcp_receive+0xddc>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	3b01      	subs	r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	db3e      	blt.n	8008954 <tcp_receive+0xde0>
 80088d6:	4b1e      	ldr	r3, [pc, #120]	; (8008950 <tcp_receive+0xddc>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	3301      	adds	r3, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dc35      	bgt.n	8008954 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80088e8:	4818      	ldr	r0, [pc, #96]	; (800894c <tcp_receive+0xdd8>)
 80088ea:	f7fd fc4b 	bl	8006184 <tcp_seg_copy>
 80088ee:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 8102 	beq.w	8008afc <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008900:	8912      	ldrh	r2, [r2, #8]
 8008902:	441a      	add	r2, r3
 8008904:	4b12      	ldr	r3, [pc, #72]	; (8008950 <tcp_receive+0xddc>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	dd12      	ble.n	8008934 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800890e:	4b10      	ldr	r3, [pc, #64]	; (8008950 <tcp_receive+0xddc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	b29a      	uxth	r2, r3
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	b29b      	uxth	r3, r3
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	b29a      	uxth	r2, r3
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	891b      	ldrh	r3, [r3, #8]
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f7fb ffa0 	bl	8004874 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800893a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7ff f8a3 	bl	8007a88 <tcp_oos_insert_segment>
                  }
                  break;
 8008942:	e0db      	b.n	8008afc <tcp_receive+0xf88>
 8008944:	20008928 	.word	0x20008928
 8008948:	20008925 	.word	0x20008925
 800894c:	200088f8 	.word	0x200088f8
 8008950:	20008918 	.word	0x20008918
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f040 80bf 	bne.w	8008adc <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800895e:	4b7c      	ldr	r3, [pc, #496]	; (8008b50 <tcp_receive+0xfdc>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800896a:	2b00      	cmp	r3, #0
 800896c:	f340 80b6 	ble.w	8008adc <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	899b      	ldrh	r3, [r3, #12]
 8008976:	b29b      	uxth	r3, r3
 8008978:	4618      	mov	r0, r3
 800897a:	f7fa ffbc 	bl	80038f6 <lwip_htons>
 800897e:	4603      	mov	r3, r0
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 80bb 	bne.w	8008b00 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800898a:	4872      	ldr	r0, [pc, #456]	; (8008b54 <tcp_receive+0xfe0>)
 800898c:	f7fd fbfa 	bl	8006184 <tcp_seg_copy>
 8008990:	4602      	mov	r2, r0
 8008992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008994:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80b2 	beq.w	8008b04 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a8:	8912      	ldrh	r2, [r2, #8]
 80089aa:	441a      	add	r2, r3
 80089ac:	4b68      	ldr	r3, [pc, #416]	; (8008b50 <tcp_receive+0xfdc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dd12      	ble.n	80089dc <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80089b6:	4b66      	ldr	r3, [pc, #408]	; (8008b50 <tcp_receive+0xfdc>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ca:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d2:	891b      	ldrh	r3, [r3, #8]
 80089d4:	4619      	mov	r1, r3
 80089d6:	4610      	mov	r0, r2
 80089d8:	f7fb ff4c 	bl	8004874 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80089dc:	4b5e      	ldr	r3, [pc, #376]	; (8008b58 <tcp_receive+0xfe4>)
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	4b5b      	ldr	r3, [pc, #364]	; (8008b50 <tcp_receive+0xfdc>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	441a      	add	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	6879      	ldr	r1, [r7, #4]
 80089ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80089f0:	440b      	add	r3, r1
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f340 8085 	ble.w	8008b04 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	899b      	ldrh	r3, [r3, #12]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fa ff76 	bl	80038f6 <lwip_htons>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d01e      	beq.n	8008a52 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	899b      	ldrh	r3, [r3, #12]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a22:	b29c      	uxth	r4, r3
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	899b      	ldrh	r3, [r3, #12]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fa ff61 	bl	80038f6 <lwip_htons>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fa ff5a 	bl	80038f6 <lwip_htons>
 8008a42:	4603      	mov	r3, r0
 8008a44:	461a      	mov	r2, r3
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	4322      	orrs	r2, r4
 8008a4e:	b292      	uxth	r2, r2
 8008a50:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a5c:	4413      	add	r3, r2
 8008a5e:	b299      	uxth	r1, r3
 8008a60:	4b3b      	ldr	r3, [pc, #236]	; (8008b50 <tcp_receive+0xfdc>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	1a8a      	subs	r2, r1, r2
 8008a6c:	b292      	uxth	r2, r2
 8008a6e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	891b      	ldrh	r3, [r3, #8]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f7fb fef8 	bl	8004874 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	891c      	ldrh	r4, [r3, #8]
 8008a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	899b      	ldrh	r3, [r3, #12]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fa ff2e 	bl	80038f6 <lwip_htons>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <tcp_receive+0xf34>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e000      	b.n	8008aaa <tcp_receive+0xf36>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4423      	add	r3, r4
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	4b2a      	ldr	r3, [pc, #168]	; (8008b58 <tcp_receive+0xfe4>)
 8008ab0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ab2:	4b29      	ldr	r3, [pc, #164]	; (8008b58 <tcp_receive+0xfe4>)
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	4b25      	ldr	r3, [pc, #148]	; (8008b50 <tcp_receive+0xfdc>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	441a      	add	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ac6:	440b      	add	r3, r1
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d01b      	beq.n	8008b04 <tcp_receive+0xf90>
 8008acc:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <tcp_receive+0xfe8>)
 8008ace:	f240 627a 	movw	r2, #1658	; 0x67a
 8008ad2:	4923      	ldr	r1, [pc, #140]	; (8008b60 <tcp_receive+0xfec>)
 8008ad4:	4823      	ldr	r0, [pc, #140]	; (8008b64 <tcp_receive+0xff0>)
 8008ad6:	f004 fa81 	bl	800cfdc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008ada:	e013      	b.n	8008b04 <tcp_receive+0xf90>
              }
            }
            prev = next;
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f47f aeab 	bne.w	8008844 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8008aee:	e00f      	b.n	8008b10 <tcp_receive+0xf9c>
                break;
 8008af0:	bf00      	nop
 8008af2:	e00d      	b.n	8008b10 <tcp_receive+0xf9c>
                break;
 8008af4:	bf00      	nop
 8008af6:	e00b      	b.n	8008b10 <tcp_receive+0xf9c>
                  break;
 8008af8:	bf00      	nop
 8008afa:	e009      	b.n	8008b10 <tcp_receive+0xf9c>
                  break;
 8008afc:	bf00      	nop
 8008afe:	e007      	b.n	8008b10 <tcp_receive+0xf9c>
                  break;
 8008b00:	bf00      	nop
 8008b02:	e005      	b.n	8008b10 <tcp_receive+0xf9c>
                break;
 8008b04:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8008b06:	e003      	b.n	8008b10 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 ff4d 	bl	80099a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008b0e:	e01a      	b.n	8008b46 <tcp_receive+0xfd2>
 8008b10:	e019      	b.n	8008b46 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008b12:	4b0f      	ldr	r3, [pc, #60]	; (8008b50 <tcp_receive+0xfdc>)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	db0a      	blt.n	8008b36 <tcp_receive+0xfc2>
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <tcp_receive+0xfdc>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008b2c:	440b      	add	r3, r1
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	3301      	adds	r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dd07      	ble.n	8008b46 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	7e9b      	ldrb	r3, [r3, #26]
 8008b3a:	f043 0302 	orr.w	r3, r3, #2
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8008b44:	e7ff      	b.n	8008b46 <tcp_receive+0xfd2>
 8008b46:	bf00      	nop
 8008b48:	3734      	adds	r7, #52	; 0x34
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20008918 	.word	0x20008918
 8008b54:	200088f8 	.word	0x200088f8
 8008b58:	20008922 	.word	0x20008922
 8008b5c:	0800eae4 	.word	0x0800eae4
 8008b60:	0800edb0 	.word	0x0800edb0
 8008b64:	0800eb28 	.word	0x0800eb28

08008b68 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008b6e:	4b17      	ldr	r3, [pc, #92]	; (8008bcc <tcp_getoptbyte+0x64>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <tcp_getoptbyte+0x1a>
 8008b76:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <tcp_getoptbyte+0x68>)
 8008b78:	881a      	ldrh	r2, [r3, #0]
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <tcp_getoptbyte+0x6c>)
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d20e      	bcs.n	8008ba0 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <tcp_getoptbyte+0x70>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3314      	adds	r3, #20
 8008b88:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8008b8a:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <tcp_getoptbyte+0x68>)
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	b291      	uxth	r1, r2
 8008b92:	4a0f      	ldr	r2, [pc, #60]	; (8008bd0 <tcp_getoptbyte+0x68>)
 8008b94:	8011      	strh	r1, [r2, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	e010      	b.n	8008bc2 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <tcp_getoptbyte+0x68>)
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	b291      	uxth	r1, r2
 8008ba8:	4a09      	ldr	r2, [pc, #36]	; (8008bd0 <tcp_getoptbyte+0x68>)
 8008baa:	8011      	strh	r1, [r2, #0]
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <tcp_getoptbyte+0x6c>)
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8008bb8:	4b04      	ldr	r3, [pc, #16]	; (8008bcc <tcp_getoptbyte+0x64>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr
 8008bcc:	20008910 	.word	0x20008910
 8008bd0:	20008914 	.word	0x20008914
 8008bd4:	2000890e 	.word	0x2000890e
 8008bd8:	20008908 	.word	0x20008908

08008bdc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008be4:	4b2e      	ldr	r3, [pc, #184]	; (8008ca0 <tcp_parseopt+0xc4>)
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d055      	beq.n	8008c98 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008bec:	4b2d      	ldr	r3, [pc, #180]	; (8008ca4 <tcp_parseopt+0xc8>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	e045      	b.n	8008c80 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8008bf4:	f7ff ffb8 	bl	8008b68 <tcp_getoptbyte>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d006      	beq.n	8008c10 <tcp_parseopt+0x34>
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	dc2b      	bgt.n	8008c5e <tcp_parseopt+0x82>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d041      	beq.n	8008c8e <tcp_parseopt+0xb2>
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d127      	bne.n	8008c5e <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 8008c0e:	e037      	b.n	8008c80 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008c10:	f7ff ffaa 	bl	8008b68 <tcp_getoptbyte>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d13b      	bne.n	8008c92 <tcp_parseopt+0xb6>
 8008c1a:	4b22      	ldr	r3, [pc, #136]	; (8008ca4 <tcp_parseopt+0xc8>)
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	4a1f      	ldr	r2, [pc, #124]	; (8008ca0 <tcp_parseopt+0xc4>)
 8008c22:	8812      	ldrh	r2, [r2, #0]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	da34      	bge.n	8008c92 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008c28:	f7ff ff9e 	bl	8008b68 <tcp_getoptbyte>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	021b      	lsls	r3, r3, #8
 8008c32:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8008c34:	f7ff ff98 	bl	8008b68 <tcp_getoptbyte>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	89bb      	ldrh	r3, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008c42:	89bb      	ldrh	r3, [r7, #12]
 8008c44:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008c48:	d804      	bhi.n	8008c54 <tcp_parseopt+0x78>
 8008c4a:	89bb      	ldrh	r3, [r7, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <tcp_parseopt+0x78>
 8008c50:	89ba      	ldrh	r2, [r7, #12]
 8008c52:	e001      	b.n	8008c58 <tcp_parseopt+0x7c>
 8008c54:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8008c5c:	e010      	b.n	8008c80 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008c5e:	f7ff ff83 	bl	8008b68 <tcp_getoptbyte>
 8008c62:	4603      	mov	r3, r0
 8008c64:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8008c66:	7afb      	ldrb	r3, [r7, #11]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d914      	bls.n	8008c96 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008c6c:	7afb      	ldrb	r3, [r7, #11]
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <tcp_parseopt+0xc8>)
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	4413      	add	r3, r2
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b02      	subs	r3, #2
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <tcp_parseopt+0xc8>)
 8008c7e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008c80:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <tcp_parseopt+0xc8>)
 8008c82:	881a      	ldrh	r2, [r3, #0]
 8008c84:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <tcp_parseopt+0xc4>)
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d3b3      	bcc.n	8008bf4 <tcp_parseopt+0x18>
 8008c8c:	e004      	b.n	8008c98 <tcp_parseopt+0xbc>
        return;
 8008c8e:	bf00      	nop
 8008c90:	e002      	b.n	8008c98 <tcp_parseopt+0xbc>
          return;
 8008c92:	bf00      	nop
 8008c94:	e000      	b.n	8008c98 <tcp_parseopt+0xbc>
          return;
 8008c96:	bf00      	nop
      }
    }
  }
}
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	2000890c 	.word	0x2000890c
 8008ca4:	20008914 	.word	0x20008914

08008ca8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <tcp_trigger_input_pcb_close+0x1c>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	f043 0310 	orr.w	r3, r3, #16
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	4b03      	ldr	r3, [pc, #12]	; (8008cc4 <tcp_trigger_input_pcb_close+0x1c>)
 8008cb8:	701a      	strb	r2, [r3, #0]
}
 8008cba:	bf00      	nop
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bc80      	pop	{r7}
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	20008925 	.word	0x20008925

08008cc8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	607b      	str	r3, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	817b      	strh	r3, [r7, #10]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008cda:	897a      	ldrh	r2, [r7, #10]
 8008cdc:	893b      	ldrh	r3, [r7, #8]
 8008cde:	4413      	add	r3, r2
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	3314      	adds	r3, #20
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4619      	mov	r1, r3
 8008cea:	2001      	movs	r0, #1
 8008cec:	f7fb fbbe 	bl	800446c <pbuf_alloc>
 8008cf0:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d056      	beq.n	8008da6 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	3313      	adds	r3, #19
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	8952      	ldrh	r2, [r2, #10]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	db05      	blt.n	8008d10 <tcp_output_alloc_header+0x48>
 8008d04:	4b2a      	ldr	r3, [pc, #168]	; (8008db0 <tcp_output_alloc_header+0xe8>)
 8008d06:	2272      	movs	r2, #114	; 0x72
 8008d08:	492a      	ldr	r1, [pc, #168]	; (8008db4 <tcp_output_alloc_header+0xec>)
 8008d0a:	482b      	ldr	r0, [pc, #172]	; (8008db8 <tcp_output_alloc_header+0xf0>)
 8008d0c:	f004 f966 	bl	800cfdc <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8adb      	ldrh	r3, [r3, #22]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fa fdeb 	bl	80038f6 <lwip_htons>
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8b1b      	ldrh	r3, [r3, #24]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fa fde2 	bl	80038f6 <lwip_htons>
 8008d32:	4603      	mov	r3, r0
 8008d34:	461a      	mov	r2, r3
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fa fde3 	bl	8003910 <lwip_htonl>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008d50:	897b      	ldrh	r3, [r7, #10]
 8008d52:	089b      	lsrs	r3, r3, #2
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	3305      	adds	r3, #5
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	031b      	lsls	r3, r3, #12
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	f043 0310 	orr.w	r3, r3, #16
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fa fdc6 	bl	80038f6 <lwip_htons>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fa fdbd 	bl	80038f6 <lwip_htons>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	461a      	mov	r2, r3
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2200      	movs	r2, #0
 8008d88:	741a      	strb	r2, [r3, #16]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	2200      	movs	r2, #0
 8008d92:	749a      	strb	r2, [r3, #18]
 8008d94:	2200      	movs	r2, #0
 8008d96:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008da0:	441a      	add	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8008da6:	697b      	ldr	r3, [r7, #20]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	0800ee6c 	.word	0x0800ee6c
 8008db4:	0800eea0 	.word	0x0800eea0
 8008db8:	0800eed0 	.word	0x0800eed0

08008dbc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008dbc:	b590      	push	{r4, r7, lr}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d02d      	beq.n	8008e28 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dd0:	60fb      	str	r3, [r7, #12]
 8008dd2:	e002      	b.n	8008dda <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f8      	bne.n	8008dd4 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	899b      	ldrh	r3, [r3, #12]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fa fd83 	bl	80038f6 <lwip_htons>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d116      	bne.n	8008e28 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	899b      	ldrh	r3, [r3, #12]
 8008e00:	b29c      	uxth	r4, r3
 8008e02:	2001      	movs	r0, #1
 8008e04:	f7fa fd77 	bl	80038f6 <lwip_htons>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	4322      	orrs	r2, r4
 8008e12:	b292      	uxth	r2, r2
 8008e14:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	7e9b      	ldrb	r3, [r3, #26]
 8008e1a:	f043 0320 	orr.w	r3, r3, #32
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	e004      	b.n	8008e32 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008e28:	2101      	movs	r1, #1
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fcc0 	bl	80097b0 <tcp_enqueue_flags>
 8008e30:	4603      	mov	r3, r0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd90      	pop	{r4, r7, pc}
	...

08008e3c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8008e3c:	b590      	push	{r4, r7, lr}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008e5a:	2003      	movs	r0, #3
 8008e5c:	f7fb f8f4 	bl	8004048 <memp_malloc>
 8008e60:	6138      	str	r0, [r7, #16]
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d104      	bne.n	8008e72 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008e68:	68b8      	ldr	r0, [r7, #8]
 8008e6a:	f7fb fe77 	bl	8004b5c <pbuf_free>
    return NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	e061      	b.n	8008f36 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008e78:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	891a      	ldrh	r2, [r3, #8]
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d205      	bcs.n	8008e9e <tcp_create_segment+0x62>
 8008e92:	4b2b      	ldr	r3, [pc, #172]	; (8008f40 <tcp_create_segment+0x104>)
 8008e94:	22ba      	movs	r2, #186	; 0xba
 8008e96:	492b      	ldr	r1, [pc, #172]	; (8008f44 <tcp_create_segment+0x108>)
 8008e98:	482b      	ldr	r0, [pc, #172]	; (8008f48 <tcp_create_segment+0x10c>)
 8008e9a:	f004 f89f 	bl	800cfdc <iprintf>
  seg->len = p->tot_len - optlen;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	891a      	ldrh	r2, [r3, #8]
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8008eae:	2114      	movs	r1, #20
 8008eb0:	68b8      	ldr	r0, [r7, #8]
 8008eb2:	f7fb fe2f 	bl	8004b14 <pbuf_header>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d004      	beq.n	8008ec6 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008ebc:	6938      	ldr	r0, [r7, #16]
 8008ebe:	f7fd f93b 	bl	8006138 <tcp_seg_free>
    return NULL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e037      	b.n	8008f36 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8ada      	ldrh	r2, [r3, #22]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	68dc      	ldr	r4, [r3, #12]
 8008ed8:	4610      	mov	r0, r2
 8008eda:	f7fa fd0c 	bl	80038f6 <lwip_htons>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8b1a      	ldrh	r2, [r3, #24]
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	68dc      	ldr	r4, [r3, #12]
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fa fd03 	bl	80038f6 <lwip_htons>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	68dc      	ldr	r4, [r3, #12]
 8008ef8:	6838      	ldr	r0, [r7, #0]
 8008efa:	f7fa fd09 	bl	8003910 <lwip_htonl>
 8008efe:	4603      	mov	r3, r0
 8008f00:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	089b      	lsrs	r3, r3, #2
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3305      	adds	r3, #5
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	031b      	lsls	r3, r3, #12
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	4313      	orrs	r3, r2
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	68dc      	ldr	r4, [r3, #12]
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7fa fce9 	bl	80038f6 <lwip_htons>
 8008f24:	4603      	mov	r3, r0
 8008f26:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	749a      	strb	r2, [r3, #18]
 8008f30:	2200      	movs	r2, #0
 8008f32:	74da      	strb	r2, [r3, #19]
  return seg;
 8008f34:	693b      	ldr	r3, [r7, #16]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd90      	pop	{r4, r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	0800ee6c 	.word	0x0800ee6c
 8008f44:	0800eef8 	.word	0x0800eef8
 8008f48:	0800eed0 	.word	0x0800eed0

08008f4c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	607b      	str	r3, [r7, #4]
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	81bb      	strh	r3, [r7, #12]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8008f60:	89bb      	ldrh	r3, [r7, #12]
 8008f62:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8008f64:	89ba      	ldrh	r2, [r7, #12]
 8008f66:	897b      	ldrh	r3, [r7, #10]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d221      	bcs.n	8008fb0 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8008f6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d111      	bne.n	8008f9c <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	7e9b      	ldrb	r3, [r3, #26]
 8008f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d115      	bne.n	8008fb0 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8008f84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d103      	bne.n	8008f9c <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d009      	beq.n	8008fb0 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8008f9c:	89bb      	ldrh	r3, [r7, #12]
 8008f9e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8008fa2:	f023 0203 	bic.w	r2, r3, #3
 8008fa6:	897b      	ldrh	r3, [r7, #10]
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	bf28      	it	cs
 8008fac:	4613      	movcs	r3, r2
 8008fae:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8008fb0:	8af9      	ldrh	r1, [r7, #22]
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fb fa58 	bl	800446c <pbuf_alloc>
 8008fbc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e019      	b.n	8008ffc <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d006      	beq.n	8008fde <tcp_pbuf_prealloc+0x92>
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <tcp_pbuf_prealloc+0xb8>)
 8008fd2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008fd6:	490c      	ldr	r1, [pc, #48]	; (8009008 <tcp_pbuf_prealloc+0xbc>)
 8008fd8:	480c      	ldr	r0, [pc, #48]	; (800900c <tcp_pbuf_prealloc+0xc0>)
 8008fda:	f003 ffff 	bl	800cfdc <iprintf>
  *oversize = p->len - length;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	895a      	ldrh	r2, [r3, #10]
 8008fe2:	89bb      	ldrh	r3, [r7, #12]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	89ba      	ldrh	r2, [r7, #12]
 8008ff0:	811a      	strh	r2, [r3, #8]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	891a      	ldrh	r2, [r3, #8]
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	815a      	strh	r2, [r3, #10]
  return p;
 8008ffa:	693b      	ldr	r3, [r7, #16]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	0800ee6c 	.word	0x0800ee6c
 8009008:	0800ef10 	.word	0x0800ef10
 800900c:	0800eed0 	.word	0x0800eed0

08009010 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	7d1b      	ldrb	r3, [r3, #20]
 8009020:	2b04      	cmp	r3, #4
 8009022:	d00e      	beq.n	8009042 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009028:	2b07      	cmp	r3, #7
 800902a:	d00a      	beq.n	8009042 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009030:	2b02      	cmp	r3, #2
 8009032:	d006      	beq.n	8009042 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009038:	2b03      	cmp	r3, #3
 800903a:	d002      	beq.n	8009042 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800903c:	f06f 030a 	mvn.w	r3, #10
 8009040:	e04f      	b.n	80090e2 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8009042:	887b      	ldrh	r3, [r7, #2]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <tcp_write_checks+0x3c>
    return ERR_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	e04a      	b.n	80090e2 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009052:	887a      	ldrh	r2, [r7, #2]
 8009054:	429a      	cmp	r2, r3
 8009056:	d909      	bls.n	800906c <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	7e9b      	ldrb	r3, [r3, #26]
 800905c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009060:	b2da      	uxtb	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009066:	f04f 33ff 	mov.w	r3, #4294967295
 800906a:	e03a      	b.n	80090e2 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009072:	2b08      	cmp	r3, #8
 8009074:	d806      	bhi.n	8009084 <tcp_write_checks+0x74>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800907c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8009080:	4293      	cmp	r3, r2
 8009082:	d909      	bls.n	8009098 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	7e9b      	ldrb	r3, [r3, #26]
 8009088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800908c:	b2da      	uxtb	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009092:	f04f 33ff 	mov.w	r3, #4294967295
 8009096:	e024      	b.n	80090e2 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00f      	beq.n	80090c2 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d11a      	bne.n	80090e0 <tcp_write_checks+0xd0>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d116      	bne.n	80090e0 <tcp_write_checks+0xd0>
 80090b2:	4b0e      	ldr	r3, [pc, #56]	; (80090ec <tcp_write_checks+0xdc>)
 80090b4:	f240 1255 	movw	r2, #341	; 0x155
 80090b8:	490d      	ldr	r1, [pc, #52]	; (80090f0 <tcp_write_checks+0xe0>)
 80090ba:	480e      	ldr	r0, [pc, #56]	; (80090f4 <tcp_write_checks+0xe4>)
 80090bc:	f003 ff8e 	bl	800cfdc <iprintf>
 80090c0:	e00e      	b.n	80090e0 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <tcp_write_checks+0xc2>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d006      	beq.n	80090e0 <tcp_write_checks+0xd0>
 80090d2:	4b06      	ldr	r3, [pc, #24]	; (80090ec <tcp_write_checks+0xdc>)
 80090d4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80090d8:	4907      	ldr	r1, [pc, #28]	; (80090f8 <tcp_write_checks+0xe8>)
 80090da:	4806      	ldr	r0, [pc, #24]	; (80090f4 <tcp_write_checks+0xe4>)
 80090dc:	f003 ff7e 	bl	800cfdc <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	0800ee6c 	.word	0x0800ee6c
 80090f0:	0800ef24 	.word	0x0800ef24
 80090f4:	0800eed0 	.word	0x0800eed0
 80090f8:	0800ef60 	.word	0x0800ef60

080090fc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80090fc:	b590      	push	{r4, r7, lr}
 80090fe:	b09b      	sub	sp, #108	; 0x6c
 8009100:	af04      	add	r7, sp, #16
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	4611      	mov	r1, r2
 8009108:	461a      	mov	r2, r3
 800910a:	460b      	mov	r3, r1
 800910c:	80fb      	strh	r3, [r7, #6]
 800910e:	4613      	mov	r3, r2
 8009110:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	653b      	str	r3, [r7, #80]	; 0x50
 800911a:	2300      	movs	r3, #0
 800911c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800911e:	2300      	movs	r3, #0
 8009120:	64bb      	str	r3, [r7, #72]	; 0x48
 8009122:	2300      	movs	r3, #0
 8009124:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009126:	2300      	movs	r3, #0
 8009128:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800914a:	085b      	lsrs	r3, r3, #1
 800914c:	b29a      	uxth	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009152:	4293      	cmp	r3, r2
 8009154:	bf28      	it	cs
 8009156:	4613      	movcs	r3, r2
 8009158:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800915a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <tcp_write+0x6a>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009164:	e000      	b.n	8009168 <tcp_write+0x6c>
 8009166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009168:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d109      	bne.n	8009184 <tcp_write+0x88>
 8009170:	4b92      	ldr	r3, [pc, #584]	; (80093bc <tcp_write+0x2c0>)
 8009172:	f240 1291 	movw	r2, #401	; 0x191
 8009176:	4992      	ldr	r1, [pc, #584]	; (80093c0 <tcp_write+0x2c4>)
 8009178:	4892      	ldr	r0, [pc, #584]	; (80093c4 <tcp_write+0x2c8>)
 800917a:	f003 ff2f 	bl	800cfdc <iprintf>
 800917e:	f06f 030f 	mvn.w	r3, #15
 8009182:	e30a      	b.n	800979a <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009184:	88fb      	ldrh	r3, [r7, #6]
 8009186:	4619      	mov	r1, r3
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7ff ff41 	bl	8009010 <tcp_write_checks>
 800918e:	4603      	mov	r3, r0
 8009190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8009194:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <tcp_write+0xa6>
    return err;
 800919c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80091a0:	e2fb      	b.n	800979a <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 80f4 	beq.w	800939e <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ba:	653b      	str	r3, [r7, #80]	; 0x50
 80091bc:	e002      	b.n	80091c4 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 80091be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80091c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1f8      	bne.n	80091be <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80091cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ce:	7a9b      	ldrb	r3, [r3, #10]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80091da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091de:	891b      	ldrh	r3, [r3, #8]
 80091e0:	4619      	mov	r1, r3
 80091e2:	8c3b      	ldrh	r3, [r7, #32]
 80091e4:	440b      	add	r3, r1
 80091e6:	429a      	cmp	r2, r3
 80091e8:	da06      	bge.n	80091f8 <tcp_write+0xfc>
 80091ea:	4b74      	ldr	r3, [pc, #464]	; (80093bc <tcp_write+0x2c0>)
 80091ec:	f240 12c7 	movw	r2, #455	; 0x1c7
 80091f0:	4975      	ldr	r1, [pc, #468]	; (80093c8 <tcp_write+0x2cc>)
 80091f2:	4874      	ldr	r0, [pc, #464]	; (80093c4 <tcp_write+0x2c8>)
 80091f4:	f003 fef2 	bl	800cfdc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80091f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091fa:	891a      	ldrh	r2, [r3, #8]
 80091fc:	8c3b      	ldrh	r3, [r7, #32]
 80091fe:	4413      	add	r3, r2
 8009200:	b29b      	uxth	r3, r3
 8009202:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800920e:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009210:	8a7b      	ldrh	r3, [r7, #18]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d026      	beq.n	8009264 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009216:	8a7b      	ldrh	r3, [r7, #18]
 8009218:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800921a:	429a      	cmp	r2, r3
 800921c:	d206      	bcs.n	800922c <tcp_write+0x130>
 800921e:	4b67      	ldr	r3, [pc, #412]	; (80093bc <tcp_write+0x2c0>)
 8009220:	f240 12d9 	movw	r2, #473	; 0x1d9
 8009224:	4969      	ldr	r1, [pc, #420]	; (80093cc <tcp_write+0x2d0>)
 8009226:	4867      	ldr	r0, [pc, #412]	; (80093c4 <tcp_write+0x2c8>)
 8009228:	f003 fed8 	bl	800cfdc <iprintf>
      seg = last_unsent;
 800922c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800922e:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009230:	8a7b      	ldrh	r3, [r7, #18]
 8009232:	88fa      	ldrh	r2, [r7, #6]
 8009234:	4293      	cmp	r3, r2
 8009236:	bf28      	it	cs
 8009238:	4613      	movcs	r3, r2
 800923a:	b29b      	uxth	r3, r3
 800923c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800923e:	4293      	cmp	r3, r2
 8009240:	bf28      	it	cs
 8009242:	4613      	movcs	r3, r2
 8009244:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8009246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800924a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800924c:	4413      	add	r3, r2
 800924e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8009252:	8a7a      	ldrh	r2, [r7, #18]
 8009254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	b29b      	uxth	r3, r3
 800925a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800925c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800925e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009264:	8a7b      	ldrh	r3, [r7, #18]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00b      	beq.n	8009282 <tcp_write+0x186>
 800926a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800926e:	88fb      	ldrh	r3, [r7, #6]
 8009270:	429a      	cmp	r2, r3
 8009272:	d006      	beq.n	8009282 <tcp_write+0x186>
 8009274:	4b51      	ldr	r3, [pc, #324]	; (80093bc <tcp_write+0x2c0>)
 8009276:	f240 12e1 	movw	r2, #481	; 0x1e1
 800927a:	4955      	ldr	r1, [pc, #340]	; (80093d0 <tcp_write+0x2d4>)
 800927c:	4851      	ldr	r0, [pc, #324]	; (80093c4 <tcp_write+0x2c8>)
 800927e:	f003 fead 	bl	800cfdc <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009282:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	429a      	cmp	r2, r3
 800928a:	f080 8169 	bcs.w	8009560 <tcp_write+0x464>
 800928e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8165 	beq.w	8009560 <tcp_write+0x464>
 8009296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009298:	891b      	ldrh	r3, [r3, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 8160 	beq.w	8009560 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80092a0:	88fa      	ldrh	r2, [r7, #6]
 80092a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80092a6:	1ad2      	subs	r2, r2, r3
 80092a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80092aa:	4293      	cmp	r3, r2
 80092ac:	bfa8      	it	ge
 80092ae:	4613      	movge	r3, r2
 80092b0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80092b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80092b6:	797b      	ldrb	r3, [r7, #5]
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d027      	beq.n	8009310 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80092c0:	f107 0012 	add.w	r0, r7, #18
 80092c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80092c6:	8bf9      	ldrh	r1, [r7, #30]
 80092c8:	2301      	movs	r3, #1
 80092ca:	9302      	str	r3, [sp, #8]
 80092cc:	797b      	ldrb	r3, [r7, #5]
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	4603      	mov	r3, r0
 80092d6:	2004      	movs	r0, #4
 80092d8:	f7ff fe38 	bl	8008f4c <tcp_pbuf_prealloc>
 80092dc:	6578      	str	r0, [r7, #84]	; 0x54
 80092de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 8228 	beq.w	8009736 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80092e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e8:	6858      	ldr	r0, [r3, #4]
 80092ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	4413      	add	r3, r2
 80092f2:	8bfa      	ldrh	r2, [r7, #30]
 80092f4:	4619      	mov	r1, r3
 80092f6:	f003 ff5d 	bl	800d1b4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80092fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80092fc:	f7fb fcc2 	bl	8004c84 <pbuf_clen>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009308:	4413      	add	r3, r2
 800930a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800930e:	e03f      	b.n	8009390 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
 8009316:	e002      	b.n	800931e <tcp_write+0x222>
 8009318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f8      	bne.n	8009318 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	7b1b      	ldrb	r3, [r3, #12]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d115      	bne.n	800935a <tcp_write+0x25e>
 800932e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009334:	8952      	ldrh	r2, [r2, #10]
 8009336:	4413      	add	r3, r2
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	429a      	cmp	r2, r3
 800933c:	d10d      	bne.n	800935a <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800933e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009342:	2b00      	cmp	r3, #0
 8009344:	d006      	beq.n	8009354 <tcp_write+0x258>
 8009346:	4b1d      	ldr	r3, [pc, #116]	; (80093bc <tcp_write+0x2c0>)
 8009348:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800934c:	4921      	ldr	r1, [pc, #132]	; (80093d4 <tcp_write+0x2d8>)
 800934e:	481d      	ldr	r0, [pc, #116]	; (80093c4 <tcp_write+0x2c8>)
 8009350:	f003 fe44 	bl	800cfdc <iprintf>
          extendlen = seglen;
 8009354:	8bfb      	ldrh	r3, [r7, #30]
 8009356:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009358:	e01a      	b.n	8009390 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800935a:	8bfb      	ldrh	r3, [r7, #30]
 800935c:	2201      	movs	r2, #1
 800935e:	4619      	mov	r1, r3
 8009360:	2004      	movs	r0, #4
 8009362:	f7fb f883 	bl	800446c <pbuf_alloc>
 8009366:	6578      	str	r0, [r7, #84]	; 0x54
 8009368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 81e5 	beq.w	800973a <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8009370:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	441a      	add	r2, r3
 8009378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800937a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800937c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800937e:	f7fb fc81 	bl	8004c84 <pbuf_clen>
 8009382:	4603      	mov	r3, r0
 8009384:	461a      	mov	r2, r3
 8009386:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800938a:	4413      	add	r3, r2
 800938c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8009390:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009394:	8bfb      	ldrh	r3, [r7, #30]
 8009396:	4413      	add	r3, r2
 8009398:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800939c:	e0e0      	b.n	8009560 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 80db 	beq.w	8009560 <tcp_write+0x464>
 80093aa:	4b04      	ldr	r3, [pc, #16]	; (80093bc <tcp_write+0x2c0>)
 80093ac:	f44f 7209 	mov.w	r2, #548	; 0x224
 80093b0:	4909      	ldr	r1, [pc, #36]	; (80093d8 <tcp_write+0x2dc>)
 80093b2:	4804      	ldr	r0, [pc, #16]	; (80093c4 <tcp_write+0x2c8>)
 80093b4:	f003 fe12 	bl	800cfdc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80093b8:	e0d2      	b.n	8009560 <tcp_write+0x464>
 80093ba:	bf00      	nop
 80093bc:	0800ee6c 	.word	0x0800ee6c
 80093c0:	0800ef94 	.word	0x0800ef94
 80093c4:	0800eed0 	.word	0x0800eed0
 80093c8:	0800efc8 	.word	0x0800efc8
 80093cc:	0800efe0 	.word	0x0800efe0
 80093d0:	0800f000 	.word	0x0800f000
 80093d4:	0800f020 	.word	0x0800f020
 80093d8:	0800f04c 	.word	0x0800f04c
    struct pbuf *p;
    u16_t left = len - pos;
 80093dc:	88fa      	ldrh	r2, [r7, #6]
 80093de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80093e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80093f2:	8b7a      	ldrh	r2, [r7, #26]
 80093f4:	8bbb      	ldrh	r3, [r7, #28]
 80093f6:	4293      	cmp	r3, r2
 80093f8:	bf28      	it	cs
 80093fa:	4613      	movcs	r3, r2
 80093fc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80093fe:	797b      	ldrb	r3, [r7, #5]
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b00      	cmp	r3, #0
 8009406:	d036      	beq.n	8009476 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8009408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800940c:	b29a      	uxth	r2, r3
 800940e:	8b3b      	ldrh	r3, [r7, #24]
 8009410:	4413      	add	r3, r2
 8009412:	b299      	uxth	r1, r3
 8009414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009416:	2b00      	cmp	r3, #0
 8009418:	bf0c      	ite	eq
 800941a:	2301      	moveq	r3, #1
 800941c:	2300      	movne	r3, #0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	f107 0012 	add.w	r0, r7, #18
 8009424:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009426:	9302      	str	r3, [sp, #8]
 8009428:	797b      	ldrb	r3, [r7, #5]
 800942a:	9301      	str	r3, [sp, #4]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	4603      	mov	r3, r0
 8009432:	2000      	movs	r0, #0
 8009434:	f7ff fd8a 	bl	8008f4c <tcp_pbuf_prealloc>
 8009438:	6338      	str	r0, [r7, #48]	; 0x30
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 817e 	beq.w	800973e <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009444:	895b      	ldrh	r3, [r3, #10]
 8009446:	8b3a      	ldrh	r2, [r7, #24]
 8009448:	429a      	cmp	r2, r3
 800944a:	d906      	bls.n	800945a <tcp_write+0x35e>
 800944c:	4b8f      	ldr	r3, [pc, #572]	; (800968c <tcp_write+0x590>)
 800944e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009452:	498f      	ldr	r1, [pc, #572]	; (8009690 <tcp_write+0x594>)
 8009454:	488f      	ldr	r0, [pc, #572]	; (8009694 <tcp_write+0x598>)
 8009456:	f003 fdc1 	bl	800cfdc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009462:	18d0      	adds	r0, r2, r3
 8009464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	4413      	add	r3, r2
 800946c:	8b3a      	ldrh	r2, [r7, #24]
 800946e:	4619      	mov	r1, r3
 8009470:	f003 fea0 	bl	800d1b4 <memcpy>
 8009474:	e02e      	b.n	80094d4 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009476:	8a7b      	ldrh	r3, [r7, #18]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d006      	beq.n	800948a <tcp_write+0x38e>
 800947c:	4b83      	ldr	r3, [pc, #524]	; (800968c <tcp_write+0x590>)
 800947e:	f240 224b 	movw	r2, #587	; 0x24b
 8009482:	4985      	ldr	r1, [pc, #532]	; (8009698 <tcp_write+0x59c>)
 8009484:	4883      	ldr	r0, [pc, #524]	; (8009694 <tcp_write+0x598>)
 8009486:	f003 fda9 	bl	800cfdc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800948a:	8b3b      	ldrh	r3, [r7, #24]
 800948c:	2201      	movs	r2, #1
 800948e:	4619      	mov	r1, r3
 8009490:	2000      	movs	r0, #0
 8009492:	f7fa ffeb 	bl	800446c <pbuf_alloc>
 8009496:	6178      	str	r0, [r7, #20]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 8151 	beq.w	8009742 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80094a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	441a      	add	r2, r3
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80094ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2200      	movs	r2, #0
 80094b4:	4619      	mov	r1, r3
 80094b6:	2000      	movs	r0, #0
 80094b8:	f7fa ffd8 	bl	800446c <pbuf_alloc>
 80094bc:	6338      	str	r0, [r7, #48]	; 0x30
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d103      	bne.n	80094cc <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80094c4:	6978      	ldr	r0, [r7, #20]
 80094c6:	f7fb fb49 	bl	8004b5c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80094ca:	e13d      	b.n	8009748 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80094cc:	6979      	ldr	r1, [r7, #20]
 80094ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094d0:	f7fb fc10 	bl	8004cf4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80094d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094d6:	f7fb fbd5 	bl	8004c84 <pbuf_clen>
 80094da:	4603      	mov	r3, r0
 80094dc:	461a      	mov	r2, r3
 80094de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80094e2:	4413      	add	r3, r2
 80094e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80094e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80094ec:	2b09      	cmp	r3, #9
 80094ee:	d805      	bhi.n	80094fc <tcp_write+0x400>
 80094f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80094f4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d903      	bls.n	8009504 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80094fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094fe:	f7fb fb2d 	bl	8004b5c <pbuf_free>
      goto memerr;
 8009502:	e121      	b.n	8009748 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009508:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800950c:	441a      	add	r2, r3
 800950e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	4613      	mov	r3, r2
 8009516:	2200      	movs	r2, #0
 8009518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff fc8e 	bl	8008e3c <tcp_create_segment>
 8009520:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 810e 	beq.w	8009746 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800952a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <tcp_write+0x43a>
      queue = seg;
 8009530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009532:	647b      	str	r3, [r7, #68]	; 0x44
 8009534:	e00c      	b.n	8009550 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009538:	2b00      	cmp	r3, #0
 800953a:	d106      	bne.n	800954a <tcp_write+0x44e>
 800953c:	4b53      	ldr	r3, [pc, #332]	; (800968c <tcp_write+0x590>)
 800953e:	f240 2285 	movw	r2, #645	; 0x285
 8009542:	4956      	ldr	r1, [pc, #344]	; (800969c <tcp_write+0x5a0>)
 8009544:	4853      	ldr	r0, [pc, #332]	; (8009694 <tcp_write+0x598>)
 8009546:	f003 fd49 	bl	800cfdc <iprintf>
      prev_seg->next = seg;
 800954a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800954c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800954e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8009550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009552:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8009554:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009558:	8b3b      	ldrh	r3, [r7, #24]
 800955a:	4413      	add	r3, r2
 800955c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8009560:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009564:	88fb      	ldrh	r3, [r7, #6]
 8009566:	429a      	cmp	r2, r3
 8009568:	f4ff af38 	bcc.w	80093dc <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800956c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800956e:	2b00      	cmp	r3, #0
 8009570:	d02c      	beq.n	80095cc <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8009572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009578:	e01e      	b.n	80095b8 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	891a      	ldrh	r2, [r3, #8]
 800957e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009580:	4413      	add	r3, r2
 8009582:	b29a      	uxth	r2, r3
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d110      	bne.n	80095b2 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009596:	8952      	ldrh	r2, [r2, #10]
 8009598:	4413      	add	r3, r2
 800959a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800959c:	68b9      	ldr	r1, [r7, #8]
 800959e:	4618      	mov	r0, r3
 80095a0:	f003 fe08 	bl	800d1b4 <memcpy>
        p->len += oversize_used;
 80095a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a6:	895a      	ldrh	r2, [r3, #10]
 80095a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80095aa:	4413      	add	r3, r2
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1dd      	bne.n	800957a <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 80095be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c0:	891a      	ldrh	r2, [r3, #8]
 80095c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80095c4:	4413      	add	r3, r2
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ca:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80095cc:	8a7a      	ldrh	r2, [r7, #18]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80095d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d018      	beq.n	800960c <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80095da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d106      	bne.n	80095ee <tcp_write+0x4f2>
 80095e0:	4b2a      	ldr	r3, [pc, #168]	; (800968c <tcp_write+0x590>)
 80095e2:	f240 22ba 	movw	r2, #698	; 0x2ba
 80095e6:	492e      	ldr	r1, [pc, #184]	; (80096a0 <tcp_write+0x5a4>)
 80095e8:	482a      	ldr	r0, [pc, #168]	; (8009694 <tcp_write+0x598>)
 80095ea:	f003 fcf7 	bl	800cfdc <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80095ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fb fb7d 	bl	8004cf4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80095fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095fc:	891a      	ldrh	r2, [r3, #8]
 80095fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009600:	891b      	ldrh	r3, [r3, #8]
 8009602:	4413      	add	r3, r2
 8009604:	b29a      	uxth	r2, r3
 8009606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009608:	811a      	strh	r2, [r3, #8]
 800960a:	e037      	b.n	800967c <tcp_write+0x580>
  } else if (extendlen > 0) {
 800960c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d034      	beq.n	800967c <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8009612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009614:	2b00      	cmp	r3, #0
 8009616:	d003      	beq.n	8009620 <tcp_write+0x524>
 8009618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d106      	bne.n	800962e <tcp_write+0x532>
 8009620:	4b1a      	ldr	r3, [pc, #104]	; (800968c <tcp_write+0x590>)
 8009622:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8009626:	491f      	ldr	r1, [pc, #124]	; (80096a4 <tcp_write+0x5a8>)
 8009628:	481a      	ldr	r0, [pc, #104]	; (8009694 <tcp_write+0x598>)
 800962a:	f003 fcd7 	bl	800cfdc <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800962e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	62bb      	str	r3, [r7, #40]	; 0x28
 8009634:	e009      	b.n	800964a <tcp_write+0x54e>
      p->tot_len += extendlen;
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	891a      	ldrh	r2, [r3, #8]
 800963a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800963c:	4413      	add	r3, r2
 800963e:	b29a      	uxth	r2, r3
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	62bb      	str	r3, [r7, #40]	; 0x28
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1f1      	bne.n	8009636 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	891a      	ldrh	r2, [r3, #8]
 8009656:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009658:	4413      	add	r3, r2
 800965a:	b29a      	uxth	r2, r3
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	895a      	ldrh	r2, [r3, #10]
 8009664:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009666:	4413      	add	r3, r2
 8009668:	b29a      	uxth	r2, r3
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800966e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009670:	891a      	ldrh	r2, [r3, #8]
 8009672:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009674:	4413      	add	r3, r2
 8009676:	b29a      	uxth	r2, r3
 8009678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800967a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800967c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800967e:	2b00      	cmp	r3, #0
 8009680:	d112      	bne.n	80096a8 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009686:	669a      	str	r2, [r3, #104]	; 0x68
 8009688:	e011      	b.n	80096ae <tcp_write+0x5b2>
 800968a:	bf00      	nop
 800968c:	0800ee6c 	.word	0x0800ee6c
 8009690:	0800f07c 	.word	0x0800f07c
 8009694:	0800eed0 	.word	0x0800eed0
 8009698:	0800f0bc 	.word	0x0800f0bc
 800969c:	0800f0cc 	.word	0x0800f0cc
 80096a0:	0800f0e0 	.word	0x0800f0e0
 80096a4:	0800f118 	.word	0x0800f118
  } else {
    last_unsent->next = queue;
 80096a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096ac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096b2:	88fb      	ldrh	r3, [r7, #6]
 80096b4:	441a      	add	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80096c0:	88fb      	ldrh	r3, [r7, #6]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80096d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00e      	beq.n	80096fe <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <tcp_write+0x602>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d106      	bne.n	80096fe <tcp_write+0x602>
 80096f0:	4b2c      	ldr	r3, [pc, #176]	; (80097a4 <tcp_write+0x6a8>)
 80096f2:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 80096f6:	492c      	ldr	r1, [pc, #176]	; (80097a8 <tcp_write+0x6ac>)
 80096f8:	482c      	ldr	r0, [pc, #176]	; (80097ac <tcp_write+0x6b0>)
 80096fa:	f003 fc6f 	bl	800cfdc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80096fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d016      	beq.n	8009732 <tcp_write+0x636>
 8009704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d012      	beq.n	8009732 <tcp_write+0x636>
 800970c:	797b      	ldrb	r3, [r7, #5]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10d      	bne.n	8009732 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	899b      	ldrh	r3, [r3, #12]
 800971c:	b29c      	uxth	r4, r3
 800971e:	2008      	movs	r0, #8
 8009720:	f7fa f8e9 	bl	80038f6 <lwip_htons>
 8009724:	4603      	mov	r3, r0
 8009726:	461a      	mov	r2, r3
 8009728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	4322      	orrs	r2, r4
 800972e:	b292      	uxth	r2, r2
 8009730:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	e031      	b.n	800979a <tcp_write+0x69e>
          goto memerr;
 8009736:	bf00      	nop
 8009738:	e006      	b.n	8009748 <tcp_write+0x64c>
            goto memerr;
 800973a:	bf00      	nop
 800973c:	e004      	b.n	8009748 <tcp_write+0x64c>
        goto memerr;
 800973e:	bf00      	nop
 8009740:	e002      	b.n	8009748 <tcp_write+0x64c>
        goto memerr;
 8009742:	bf00      	nop
 8009744:	e000      	b.n	8009748 <tcp_write+0x64c>
      goto memerr;
 8009746:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	7e9b      	ldrb	r3, [r3, #26]
 800974c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009750:	b2da      	uxtb	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8009756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <tcp_write+0x666>
    pbuf_free(concat_p);
 800975c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800975e:	f7fb f9fd 	bl	8004b5c <pbuf_free>
  }
  if (queue != NULL) {
 8009762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <tcp_write+0x672>
    tcp_segs_free(queue);
 8009768:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800976a:	f7fc fcd0 	bl	800610e <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00e      	beq.n	8009796 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <tcp_write+0x69a>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009784:	2b00      	cmp	r3, #0
 8009786:	d106      	bne.n	8009796 <tcp_write+0x69a>
 8009788:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <tcp_write+0x6a8>)
 800978a:	f240 3201 	movw	r2, #769	; 0x301
 800978e:	4906      	ldr	r1, [pc, #24]	; (80097a8 <tcp_write+0x6ac>)
 8009790:	4806      	ldr	r0, [pc, #24]	; (80097ac <tcp_write+0x6b0>)
 8009792:	f003 fc23 	bl	800cfdc <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8009796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800979a:	4618      	mov	r0, r3
 800979c:	375c      	adds	r7, #92	; 0x5c
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd90      	pop	{r4, r7, pc}
 80097a2:	bf00      	nop
 80097a4:	0800ee6c 	.word	0x0800ee6c
 80097a8:	0800f150 	.word	0x0800f150
 80097ac:	0800eed0 	.word	0x0800eed0

080097b0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08a      	sub	sp, #40	; 0x28
 80097b4:	af02      	add	r7, sp, #8
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <tcp_enqueue_flags+0x2c>
 80097ce:	4b6f      	ldr	r3, [pc, #444]	; (800998c <tcp_enqueue_flags+0x1dc>)
 80097d0:	f240 321a 	movw	r2, #794	; 0x31a
 80097d4:	496e      	ldr	r1, [pc, #440]	; (8009990 <tcp_enqueue_flags+0x1e0>)
 80097d6:	486f      	ldr	r0, [pc, #444]	; (8009994 <tcp_enqueue_flags+0x1e4>)
 80097d8:	f003 fc00 	bl	800cfdc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097e2:	2b08      	cmp	r3, #8
 80097e4:	d806      	bhi.n	80097f4 <tcp_enqueue_flags+0x44>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097ec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d90e      	bls.n	8009812 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d109      	bne.n	8009812 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7e9b      	ldrb	r3, [r3, #26]
 8009802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009806:	b2da      	uxtb	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800980c:	f04f 33ff 	mov.w	r3, #4294967295
 8009810:	e0b7      	b.n	8009982 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800981c:	2301      	movs	r3, #1
 800981e:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009820:	7ffb      	ldrb	r3, [r7, #31]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	b2db      	uxtb	r3, r3
 8009826:	f003 0304 	and.w	r3, r3, #4
 800982a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800982c:	7dfb      	ldrb	r3, [r7, #23]
 800982e:	b29b      	uxth	r3, r3
 8009830:	2200      	movs	r2, #0
 8009832:	4619      	mov	r1, r3
 8009834:	2000      	movs	r0, #0
 8009836:	f7fa fe19 	bl	800446c <pbuf_alloc>
 800983a:	6138      	str	r0, [r7, #16]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d109      	bne.n	8009856 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7e9b      	ldrb	r3, [r3, #26]
 8009846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800984a:	b2da      	uxtb	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009850:	f04f 33ff 	mov.w	r3, #4294967295
 8009854:	e095      	b.n	8009982 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	895a      	ldrh	r2, [r3, #10]
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	b29b      	uxth	r3, r3
 800985e:	429a      	cmp	r2, r3
 8009860:	d206      	bcs.n	8009870 <tcp_enqueue_flags+0xc0>
 8009862:	4b4a      	ldr	r3, [pc, #296]	; (800998c <tcp_enqueue_flags+0x1dc>)
 8009864:	f44f 7250 	mov.w	r2, #832	; 0x340
 8009868:	494b      	ldr	r1, [pc, #300]	; (8009998 <tcp_enqueue_flags+0x1e8>)
 800986a:	484a      	ldr	r0, [pc, #296]	; (8009994 <tcp_enqueue_flags+0x1e4>)
 800986c:	f003 fbb6 	bl	800cfdc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	7ffb      	ldrb	r3, [r7, #31]
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	460b      	mov	r3, r1
 800987c:	6939      	ldr	r1, [r7, #16]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7ff fadc 	bl	8008e3c <tcp_create_segment>
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	7e9b      	ldrb	r3, [r3, #26]
 8009890:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009894:	b2da      	uxtb	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800989a:	f04f 33ff 	mov.w	r3, #4294967295
 800989e:	e070      	b.n	8009982 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f003 0303 	and.w	r3, r3, #3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d006      	beq.n	80098ba <tcp_enqueue_flags+0x10a>
 80098ac:	4b37      	ldr	r3, [pc, #220]	; (800998c <tcp_enqueue_flags+0x1dc>)
 80098ae:	f240 3249 	movw	r2, #841	; 0x349
 80098b2:	493a      	ldr	r1, [pc, #232]	; (800999c <tcp_enqueue_flags+0x1ec>)
 80098b4:	4837      	ldr	r0, [pc, #220]	; (8009994 <tcp_enqueue_flags+0x1e4>)
 80098b6:	f003 fb91 	bl	800cfdc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	891b      	ldrh	r3, [r3, #8]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d006      	beq.n	80098d0 <tcp_enqueue_flags+0x120>
 80098c2:	4b32      	ldr	r3, [pc, #200]	; (800998c <tcp_enqueue_flags+0x1dc>)
 80098c4:	f240 324a 	movw	r2, #842	; 0x34a
 80098c8:	4935      	ldr	r1, [pc, #212]	; (80099a0 <tcp_enqueue_flags+0x1f0>)
 80098ca:	4832      	ldr	r0, [pc, #200]	; (8009994 <tcp_enqueue_flags+0x1e4>)
 80098cc:	f003 fb86 	bl	800cfdc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d103      	bne.n	80098e0 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	669a      	str	r2, [r3, #104]	; 0x68
 80098de:	e00d      	b.n	80098fc <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098e4:	61bb      	str	r3, [r7, #24]
 80098e6:	e002      	b.n	80098ee <tcp_enqueue_flags+0x13e>
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1f8      	bne.n	80098e8 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d104      	bne.n	8009918 <tcp_enqueue_flags+0x168>
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	2b00      	cmp	r3, #0
 800992a:	d006      	beq.n	800993a <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	7e9b      	ldrb	r3, [r3, #26]
 8009930:	f043 0320 	orr.w	r3, r3, #32
 8009934:	b2da      	uxtb	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	4618      	mov	r0, r3
 8009940:	f7fb f9a0 	bl	8004c84 <pbuf_clen>
 8009944:	4603      	mov	r3, r0
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800994e:	4413      	add	r3, r2
 8009950:	b29a      	uxth	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00e      	beq.n	8009980 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10a      	bne.n	8009980 <tcp_enqueue_flags+0x1d0>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <tcp_enqueue_flags+0x1d0>
 8009972:	4b06      	ldr	r3, [pc, #24]	; (800998c <tcp_enqueue_flags+0x1dc>)
 8009974:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009978:	490a      	ldr	r1, [pc, #40]	; (80099a4 <tcp_enqueue_flags+0x1f4>)
 800997a:	4806      	ldr	r0, [pc, #24]	; (8009994 <tcp_enqueue_flags+0x1e4>)
 800997c:	f003 fb2e 	bl	800cfdc <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3720      	adds	r7, #32
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	0800ee6c 	.word	0x0800ee6c
 8009990:	0800f170 	.word	0x0800f170
 8009994:	0800eed0 	.word	0x0800eed0
 8009998:	0800f1c8 	.word	0x0800f1c8
 800999c:	0800f204 	.word	0x0800f204
 80099a0:	0800f21c 	.word	0x0800f21c
 80099a4:	0800f248 	.word	0x0800f248

080099a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80099a8:	b590      	push	{r4, r7, lr}
 80099aa:	b08b      	sub	sp, #44	; 0x2c
 80099ac:	af04      	add	r7, sp, #16
 80099ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80099b4:	7dbb      	ldrb	r3, [r7, #22]
 80099b6:	b29c      	uxth	r4, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099bc:	4618      	mov	r0, r3
 80099be:	f7f9 ffa7 	bl	8003910 <lwip_htonl>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2200      	movs	r2, #0
 80099c6:	4621      	mov	r1, r4
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7ff f97d 	bl	8008cc8 <tcp_output_alloc_header>
 80099ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d109      	bne.n	80099ea <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7e9b      	ldrb	r3, [r3, #26]
 80099da:	f043 0303 	orr.w	r3, r3, #3
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80099e4:	f06f 0301 	mvn.w	r3, #1
 80099e8:	e036      	b.n	8009a58 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4618      	mov	r0, r3
 80099f0:	f002 f84e 	bl	800ba90 <ip4_route>
 80099f4:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80099fc:	23fc      	movs	r3, #252	; 0xfc
 80099fe:	75fb      	strb	r3, [r7, #23]
 8009a00:	e012      	b.n	8009a28 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	1d18      	adds	r0, r3, #4
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7a9c      	ldrb	r4, [r3, #10]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	7a5b      	ldrb	r3, [r3, #9]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	9202      	str	r2, [sp, #8]
 8009a14:	2206      	movs	r2, #6
 8009a16:	9201      	str	r2, [sp, #4]
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	4623      	mov	r3, r4
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	6938      	ldr	r0, [r7, #16]
 8009a20:	f002 f9e0 	bl	800bde4 <ip4_output_if>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009a28:	6938      	ldr	r0, [r7, #16]
 8009a2a:	f7fb f897 	bl	8004b5c <pbuf_free>

  if (err != ERR_OK) {
 8009a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	7e9b      	ldrb	r3, [r3, #26]
 8009a3a:	f043 0303 	orr.w	r3, r3, #3
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	769a      	strb	r2, [r3, #26]
 8009a44:	e006      	b.n	8009a54 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	7e9b      	ldrb	r3, [r3, #26]
 8009a4a:	f023 0303 	bic.w	r3, r3, #3
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8009a54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	371c      	adds	r7, #28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd90      	pop	{r4, r7, pc}

08009a60 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009a60:	b5b0      	push	{r4, r5, r7, lr}
 8009a62:	b08a      	sub	sp, #40	; 0x28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7d1b      	ldrb	r3, [r3, #20]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d106      	bne.n	8009a7e <tcp_output+0x1e>
 8009a70:	4b99      	ldr	r3, [pc, #612]	; (8009cd8 <tcp_output+0x278>)
 8009a72:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8009a76:	4999      	ldr	r1, [pc, #612]	; (8009cdc <tcp_output+0x27c>)
 8009a78:	4899      	ldr	r0, [pc, #612]	; (8009ce0 <tcp_output+0x280>)
 8009a7a:	f003 faaf 	bl	800cfdc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009a7e:	4b99      	ldr	r3, [pc, #612]	; (8009ce4 <tcp_output+0x284>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d101      	bne.n	8009a8c <tcp_output+0x2c>
    return ERR_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e1cb      	b.n	8009e24 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	bf28      	it	cs
 8009a9c:	4613      	movcs	r3, r2
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	7e9b      	ldrb	r3, [r3, #26]
 8009aac:	f003 0302 	and.w	r3, r3, #2
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d017      	beq.n	8009ae4 <tcp_output+0x84>
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00f      	beq.n	8009ada <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7f9 ff25 	bl	8003910 <lwip_htonl>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad0:	8912      	ldrh	r2, [r2, #8]
 8009ad2:	4413      	add	r3, r2
     (seg == NULL ||
 8009ad4:	69ba      	ldr	r2, [r7, #24]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d204      	bcs.n	8009ae4 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff ff64 	bl	80099a8 <tcp_send_empty_ack>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	e19f      	b.n	8009e24 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d007      	beq.n	8009b00 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 8009af0:	e002      	b.n	8009af8 <tcp_output+0x98>
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	623b      	str	r3, [r7, #32]
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1f8      	bne.n	8009af2 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	3304      	adds	r3, #4
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 ffc3 	bl	800ba90 <ip4_route>
 8009b0a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <tcp_output+0xb8>
    return ERR_RTE;
 8009b12:	f06f 0303 	mvn.w	r3, #3
 8009b16:	e185      	b.n	8009e24 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <tcp_output+0xc6>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d111      	bne.n	8009b4a <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <tcp_output+0xd2>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	e000      	b.n	8009b34 <tcp_output+0xd4>
 8009b32:	2300      	movs	r3, #0
 8009b34:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d102      	bne.n	8009b42 <tcp_output+0xe2>
      return ERR_RTE;
 8009b3c:	f06f 0303 	mvn.w	r3, #3
 8009b40:	e170      	b.n	8009e24 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 813f 	beq.w	8009dd0 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7f9 fed9 	bl	8003910 <lwip_htonl>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b68:	8912      	ldrh	r2, [r2, #8]
 8009b6a:	4413      	add	r3, r2
  if (seg != NULL &&
 8009b6c:	69ba      	ldr	r2, [r7, #24]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	f080 812e 	bcs.w	8009dd0 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 812a 	beq.w	8009dd0 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b82:	461a      	mov	r2, r3
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	4293      	cmp	r3, r2
 8009b88:	f040 8122 	bne.w	8009dd0 <tcp_output+0x370>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f040 811d 	bne.w	8009dd0 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 812c 	bne.w	8009dfa <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8009bb2:	e122      	b.n	8009dfa <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	899b      	ldrh	r3, [r3, #12]
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7f9 fe9a 	bl	80038f6 <lwip_htons>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f003 0304 	and.w	r3, r3, #4
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <tcp_output+0x17a>
 8009bcc:	4b42      	ldr	r3, [pc, #264]	; (8009cd8 <tcp_output+0x278>)
 8009bce:	f240 4245 	movw	r2, #1093	; 0x445
 8009bd2:	4945      	ldr	r1, [pc, #276]	; (8009ce8 <tcp_output+0x288>)
 8009bd4:	4842      	ldr	r0, [pc, #264]	; (8009ce0 <tcp_output+0x280>)
 8009bd6:	f003 fa01 	bl	800cfdc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d01f      	beq.n	8009c22 <tcp_output+0x1c2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	7e9b      	ldrb	r3, [r3, #26]
 8009be6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d119      	bne.n	8009c22 <tcp_output+0x1c2>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00b      	beq.n	8009c0e <tcp_output+0x1ae>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d110      	bne.n	8009c22 <tcp_output+0x1c2>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c04:	891a      	ldrh	r2, [r3, #8]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d209      	bcs.n	8009c22 <tcp_output+0x1c2>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d004      	beq.n	8009c22 <tcp_output+0x1c2>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	d901      	bls.n	8009c26 <tcp_output+0x1c6>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <tcp_output+0x1c8>
 8009c26:	2300      	movs	r3, #0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d106      	bne.n	8009c3a <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	7e9b      	ldrb	r3, [r3, #26]
 8009c30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 80e2 	beq.w	8009dfe <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	7d1b      	ldrb	r3, [r3, #20]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d00d      	beq.n	8009c5e <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	899b      	ldrh	r3, [r3, #12]
 8009c48:	b29c      	uxth	r4, r3
 8009c4a:	2010      	movs	r0, #16
 8009c4c:	f7f9 fe53 	bl	80038f6 <lwip_htons>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	4322      	orrs	r2, r4
 8009c5a:	b292      	uxth	r2, r2
 8009c5c:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c64:	f000 f8e2 	bl	8009e2c <tcp_output_segment>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d009      	beq.n	8009c88 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	7e9b      	ldrb	r3, [r3, #26]
 8009c78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	769a      	strb	r2, [r3, #26]
      return err;
 8009c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c86:	e0cd      	b.n	8009e24 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	7d1b      	ldrb	r3, [r3, #20]
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d006      	beq.n	8009ca6 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	7e9b      	ldrb	r3, [r3, #26]
 8009c9c:	f023 0303 	bic.w	r3, r3, #3
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7f9 fe2f 	bl	8003910 <lwip_htonl>
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	891b      	ldrh	r3, [r3, #8]
 8009cb8:	461d      	mov	r5, r3
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	899b      	ldrh	r3, [r3, #12]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7f9 fe17 	bl	80038f6 <lwip_htons>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f003 0303 	and.w	r3, r3, #3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00c      	beq.n	8009cec <tcp_output+0x28c>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e00b      	b.n	8009cee <tcp_output+0x28e>
 8009cd6:	bf00      	nop
 8009cd8:	0800ee6c 	.word	0x0800ee6c
 8009cdc:	0800f270 	.word	0x0800f270
 8009ce0:	0800eed0 	.word	0x0800eed0
 8009ce4:	2000892c 	.word	0x2000892c
 8009ce8:	0800f298 	.word	0x0800f298
 8009cec:	2300      	movs	r3, #0
 8009cee:	442b      	add	r3, r5
 8009cf0:	4423      	add	r3, r4
 8009cf2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	da02      	bge.n	8009d06 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	891b      	ldrh	r3, [r3, #8]
 8009d0a:	461c      	mov	r4, r3
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	899b      	ldrh	r3, [r3, #12]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7f9 fdee 	bl	80038f6 <lwip_htons>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f003 0303 	and.w	r3, r3, #3
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <tcp_output+0x2c8>
 8009d24:	2301      	movs	r3, #1
 8009d26:	e000      	b.n	8009d2a <tcp_output+0x2ca>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4423      	add	r3, r4
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d049      	beq.n	8009dc4 <tcp_output+0x364>
      seg->next = NULL;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d105      	bne.n	8009d4a <tcp_output+0x2ea>
        pcb->unacked = seg;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d42:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	623b      	str	r3, [r7, #32]
 8009d48:	e03f      	b.n	8009dca <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f9 fddd 	bl	8003910 <lwip_htonl>
 8009d56:	4604      	mov	r4, r0
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f9 fdd6 	bl	8003910 <lwip_htonl>
 8009d64:	4603      	mov	r3, r0
 8009d66:	1ae3      	subs	r3, r4, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	da24      	bge.n	8009db6 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	336c      	adds	r3, #108	; 0x6c
 8009d70:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009d72:	e002      	b.n	8009d7a <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d011      	beq.n	8009da6 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7f9 fdc0 	bl	8003910 <lwip_htonl>
 8009d90:	4604      	mov	r4, r0
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7f9 fdb9 	bl	8003910 <lwip_htonl>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	dbe6      	blt.n	8009d74 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	e009      	b.n	8009dca <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dba:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	623b      	str	r3, [r7, #32]
 8009dc2:	e002      	b.n	8009dca <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dc6:	f7fc f9b7 	bl	8006138 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d015      	beq.n	8009e02 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7f9 fd97 	bl	8003910 <lwip_htonl>
 8009de2:	4602      	mov	r2, r0
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dec:	8912      	ldrh	r2, [r2, #8]
 8009dee:	4413      	add	r3, r2
  while (seg != NULL &&
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	f4bf aede 	bcs.w	8009bb4 <tcp_output+0x154>
  }
output_done:
 8009df8:	e003      	b.n	8009e02 <tcp_output+0x3a2>
    goto output_done;
 8009dfa:	bf00      	nop
 8009dfc:	e002      	b.n	8009e04 <tcp_output+0x3a4>
      break;
 8009dfe:	bf00      	nop
 8009e00:	e000      	b.n	8009e04 <tcp_output+0x3a4>
output_done:
 8009e02:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d103      	bne.n	8009e14 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	7e9b      	ldrb	r3, [r3, #26]
 8009e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3728      	adds	r7, #40	; 0x28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bdb0      	pop	{r4, r5, r7, pc}

08009e2c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009e2c:	b5b0      	push	{r4, r5, r7, lr}
 8009e2e:	b08c      	sub	sp, #48	; 0x30
 8009e30:	af04      	add	r7, sp, #16
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	89db      	ldrh	r3, [r3, #14]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d001      	beq.n	8009e46 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	e08a      	b.n	8009f5c <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	68dc      	ldr	r4, [r3, #12]
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f7f9 fd5e 	bl	8003910 <lwip_htonl>
 8009e54:	4603      	mov	r3, r0
 8009e56:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68dc      	ldr	r4, [r3, #12]
 8009e60:	4610      	mov	r0, r2
 8009e62:	f7f9 fd48 	bl	80038f6 <lwip_htons>
 8009e66:	4603      	mov	r3, r0
 8009e68:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009e72:	441a      	add	r2, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	3314      	adds	r3, #20
 8009e7e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	7a9b      	ldrb	r3, [r3, #10]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d014      	beq.n	8009eb6 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4619      	mov	r1, r3
 8009e92:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009e96:	f7fc fc7b 	bl	8006790 <tcp_eff_send_mss_impl>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009e9e:	8b7b      	ldrh	r3, [r7, #26]
 8009ea0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7f9 fd33 	bl	8003910 <lwip_htonl>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	da02      	bge.n	8009ec6 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10c      	bne.n	8009ee8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8009ece:	4b25      	ldr	r3, [pc, #148]	; (8009f64 <tcp_output_segment+0x138>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7f9 fd17 	bl	8003910 <lwip_htonl>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	8959      	ldrh	r1, [r3, #10]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	8b3a      	ldrh	r2, [r7, #24]
 8009f02:	1a8a      	subs	r2, r1, r2
 8009f04:	b292      	uxth	r2, r2
 8009f06:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	8919      	ldrh	r1, [r3, #8]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	8b3a      	ldrh	r2, [r7, #24]
 8009f14:	1a8a      	subs	r2, r1, r2
 8009f16:	b292      	uxth	r2, r2
 8009f18:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	68d2      	ldr	r2, [r2, #12]
 8009f22:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	741a      	strb	r2, [r3, #16]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6858      	ldr	r0, [r3, #4]
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	1d1c      	adds	r4, r3, #4
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	7a9d      	ldrb	r5, [r3, #10]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	7a5b      	ldrb	r3, [r3, #9]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	9202      	str	r2, [sp, #8]
 8009f46:	2206      	movs	r2, #6
 8009f48:	9201      	str	r2, [sp, #4]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	4622      	mov	r2, r4
 8009f50:	f001 ff48 	bl	800bde4 <ip4_output_if>
 8009f54:	4603      	mov	r3, r0
 8009f56:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8009f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3720      	adds	r7, #32
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bdb0      	pop	{r4, r5, r7, pc}
 8009f64:	200088e0 	.word	0x200088e0

08009f68 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b08c      	sub	sp, #48	; 0x30
 8009f6c:	af04      	add	r7, sp, #16
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009f76:	2200      	movs	r2, #0
 8009f78:	2114      	movs	r1, #20
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	f7fa fa76 	bl	800446c <pbuf_alloc>
 8009f80:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d05b      	beq.n	800a040 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	895b      	ldrh	r3, [r3, #10]
 8009f8c:	2b13      	cmp	r3, #19
 8009f8e:	d806      	bhi.n	8009f9e <tcp_rst+0x36>
 8009f90:	4b2d      	ldr	r3, [pc, #180]	; (800a048 <tcp_rst+0xe0>)
 8009f92:	f240 524c 	movw	r2, #1356	; 0x54c
 8009f96:	492d      	ldr	r1, [pc, #180]	; (800a04c <tcp_rst+0xe4>)
 8009f98:	482d      	ldr	r0, [pc, #180]	; (800a050 <tcp_rst+0xe8>)
 8009f9a:	f003 f81f 	bl	800cfdc <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8009fa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7f9 fca5 	bl	80038f6 <lwip_htons>
 8009fac:	4603      	mov	r3, r0
 8009fae:	461a      	mov	r2, r3
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009fb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7f9 fc9d 	bl	80038f6 <lwip_htons>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7f9 fca3 	bl	8003910 <lwip_htonl>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009fd0:	68b8      	ldr	r0, [r7, #8]
 8009fd2:	f7f9 fc9d 	bl	8003910 <lwip_htonl>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009fdc:	f245 0014 	movw	r0, #20500	; 0x5014
 8009fe0:	f7f9 fc89 	bl	80038f6 <lwip_htons>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f042 0208 	orr.w	r2, r2, #8
 8009ff4:	739a      	strb	r2, [r3, #14]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009ffc:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2200      	movs	r2, #0
 800a002:	741a      	strb	r2, [r3, #16]
 800a004:	2200      	movs	r2, #0
 800a006:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	2200      	movs	r2, #0
 800a00c:	749a      	strb	r2, [r3, #18]
 800a00e:	2200      	movs	r2, #0
 800a010:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a012:	6838      	ldr	r0, [r7, #0]
 800a014:	f001 fd3c 	bl	800ba90 <ip4_route>
 800a018:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	9302      	str	r3, [sp, #8]
 800a024:	2306      	movs	r3, #6
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	2300      	movs	r3, #0
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	23ff      	movs	r3, #255	; 0xff
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	6879      	ldr	r1, [r7, #4]
 800a032:	69f8      	ldr	r0, [r7, #28]
 800a034:	f001 fed6 	bl	800bde4 <ip4_output_if>
  }
  pbuf_free(p);
 800a038:	69f8      	ldr	r0, [r7, #28]
 800a03a:	f7fa fd8f 	bl	8004b5c <pbuf_free>
 800a03e:	e000      	b.n	800a042 <tcp_rst+0xda>
    return;
 800a040:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a042:	3720      	adds	r7, #32
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	0800ee6c 	.word	0x0800ee6c
 800a04c:	0800eea0 	.word	0x0800eea0
 800a050:	0800eed0 	.word	0x0800eed0

0800a054 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a060:	2b00      	cmp	r3, #0
 800a062:	d029      	beq.n	800a0b8 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e002      	b.n	800a072 <tcp_rexmit_rto+0x1e>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1f8      	bne.n	800a06c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a096:	2bff      	cmp	r3, #255	; 0xff
 800a098:	d007      	beq.n	800a0aa <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7ff fcd5 	bl	8009a60 <tcp_output>
 800a0b6:	e000      	b.n	800a0ba <tcp_rexmit_rto+0x66>
    return;
 800a0b8:	bf00      	nop
}
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a0c0:	b590      	push	{r4, r7, lr}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d043      	beq.n	800a158 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	3368      	adds	r3, #104	; 0x68
 800a0e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a0e4:	e002      	b.n	800a0ec <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d011      	beq.n	800a118 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7f9 fc07 	bl	8003910 <lwip_htonl>
 800a102:	4604      	mov	r4, r0
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7f9 fc00 	bl	8003910 <lwip_htonl>
 800a110:	4603      	mov	r3, r0
 800a112:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a114:	2b00      	cmp	r3, #0
 800a116:	dbe6      	blt.n	800a0e6 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d103      	bne.n	800a136 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a13c:	2bff      	cmp	r3, #255	; 0xff
 800a13e:	d007      	beq.n	800a150 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a146:	3301      	adds	r3, #1
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	635a      	str	r2, [r3, #52]	; 0x34
 800a156:	e000      	b.n	800a15a <tcp_rexmit+0x9a>
    return;
 800a158:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd90      	pop	{r4, r7, pc}

0800a160 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d041      	beq.n	800a1f4 <tcp_rexmit_fast+0x94>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	7e9b      	ldrb	r3, [r3, #26]
 800a174:	f003 0304 	and.w	r3, r3, #4
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d13b      	bne.n	800a1f4 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff ff9f 	bl	800a0c0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a18e:	4293      	cmp	r3, r2
 800a190:	bf28      	it	cs
 800a192:	4613      	movcs	r3, r2
 800a194:	b29b      	uxth	r3, r3
 800a196:	0fda      	lsrs	r2, r3, #31
 800a198:	4413      	add	r3, r2
 800a19a:	105b      	asrs	r3, r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1b0:	005b      	lsls	r3, r3, #1
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d206      	bcs.n	800a1c4 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	0049      	lsls	r1, r1, #1
 800a1d2:	440b      	add	r3, r1
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	4413      	add	r3, r2
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7e9b      	ldrb	r3, [r3, #26]
 800a1e4:	f043 0304 	orr.w	r3, r3, #4
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08a      	sub	sp, #40	; 0x28
 800a200:	af04      	add	r7, sp, #16
 800a202:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a208:	3b01      	subs	r3, #1
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f9 fb80 	bl	8003910 <lwip_htonl>
 800a210:	4603      	mov	r3, r0
 800a212:	2200      	movs	r2, #0
 800a214:	2100      	movs	r1, #0
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7fe fd56 	bl	8008cc8 <tcp_output_alloc_header>
 800a21c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d102      	bne.n	800a22a <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a224:	f04f 33ff 	mov.w	r3, #4294967295
 800a228:	e021      	b.n	800a26e <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3304      	adds	r3, #4
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 fc2e 	bl	800ba90 <ip4_route>
 800a234:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800a23c:	23fc      	movs	r3, #252	; 0xfc
 800a23e:	75fb      	strb	r3, [r7, #23]
 800a240:	e010      	b.n	800a264 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	1d1a      	adds	r2, r3, #4
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7a98      	ldrb	r0, [r3, #10]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	9302      	str	r3, [sp, #8]
 800a250:	2306      	movs	r3, #6
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	2300      	movs	r3, #0
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	4603      	mov	r3, r0
 800a25a:	6938      	ldr	r0, [r7, #16]
 800a25c:	f001 fdc2 	bl	800bde4 <ip4_output_if>
 800a260:	4603      	mov	r3, r0
 800a262:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a264:	6938      	ldr	r0, [r7, #16]
 800a266:	f7fa fc79 	bl	8004b5c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a26a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a276:	b590      	push	{r4, r7, lr}
 800a278:	b08f      	sub	sp, #60	; 0x3c
 800a27a:	af04      	add	r7, sp, #16
 800a27c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a282:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d102      	bne.n	800a290 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a28e:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	e085      	b.n	800a3a6 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	899b      	ldrh	r3, [r3, #12]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7f9 fb27 	bl	80038f6 <lwip_htons>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <tcp_zero_window_probe+0x48>
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	891b      	ldrh	r3, [r3, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <tcp_zero_window_probe+0x48>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e000      	b.n	800a2c0 <tcp_zero_window_probe+0x4a>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a2c2:	7ffb      	ldrb	r3, [r7, #31]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	bf0c      	ite	eq
 800a2c8:	2301      	moveq	r3, #1
 800a2ca:	2300      	movne	r3, #0
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	8bba      	ldrh	r2, [r7, #28]
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7fe fcf4 	bl	8008cc8 <tcp_output_alloc_header>
 800a2e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ec:	e05b      	b.n	800a3a6 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a2f4:	7ffb      	ldrb	r3, [r7, #31]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00e      	beq.n	800a318 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	899b      	ldrh	r3, [r3, #12]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a304:	b29c      	uxth	r4, r3
 800a306:	2011      	movs	r0, #17
 800a308:	f7f9 faf5 	bl	80038f6 <lwip_htons>
 800a30c:	4603      	mov	r3, r0
 800a30e:	4323      	orrs	r3, r4
 800a310:	b29a      	uxth	r2, r3
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	819a      	strh	r2, [r3, #12]
 800a316:	e010      	b.n	800a33a <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	3314      	adds	r3, #20
 800a31e:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	6858      	ldr	r0, [r3, #4]
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	891a      	ldrh	r2, [r3, #8]
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	891b      	ldrh	r3, [r3, #8]
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	b29b      	uxth	r3, r3
 800a332:	2201      	movs	r2, #1
 800a334:	6939      	ldr	r1, [r7, #16]
 800a336:	f7fa fe0f 	bl	8004f58 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	4618      	mov	r0, r3
 800a342:	f7f9 fae5 	bl	8003910 <lwip_htonl>
 800a346:	4603      	mov	r3, r0
 800a348:	3301      	adds	r3, #1
 800a34a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	da02      	bge.n	800a35e <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	3304      	adds	r3, #4
 800a362:	4618      	mov	r0, r3
 800a364:	f001 fb94 	bl	800ba90 <ip4_route>
 800a368:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d103      	bne.n	800a378 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800a370:	23fc      	movs	r3, #252	; 0xfc
 800a372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a376:	e011      	b.n	800a39c <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	1d1a      	adds	r2, r3, #4
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	7a98      	ldrb	r0, [r3, #10]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	9302      	str	r3, [sp, #8]
 800a386:	2306      	movs	r3, #6
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	2300      	movs	r3, #0
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	4603      	mov	r3, r0
 800a390:	69b8      	ldr	r0, [r7, #24]
 800a392:	f001 fd27 	bl	800bde4 <ip4_output_if>
 800a396:	4603      	mov	r3, r0
 800a398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a39c:	69b8      	ldr	r0, [r7, #24]
 800a39e:	f7fa fbdd 	bl	8004b5c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a3a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	372c      	adds	r7, #44	; 0x2c
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd90      	pop	{r4, r7, pc}
	...

0800a3b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a3b8:	f7fa fe4e 	bl	8005058 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a3bc:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <tcpip_tcp_timer+0x38>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d103      	bne.n	800a3cc <tcpip_tcp_timer+0x1c>
 800a3c4:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <tcpip_tcp_timer+0x3c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	4908      	ldr	r1, [pc, #32]	; (800a3f0 <tcpip_tcp_timer+0x40>)
 800a3d0:	20fa      	movs	r0, #250	; 0xfa
 800a3d2:	f000 f86f 	bl	800a4b4 <sys_timeout>
 800a3d6:	e003      	b.n	800a3e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a3d8:	4b06      	ldr	r3, [pc, #24]	; (800a3f4 <tcpip_tcp_timer+0x44>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	601a      	str	r2, [r3, #0]
  }
}
 800a3de:	bf00      	nop
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	200088ec 	.word	0x200088ec
 800a3ec:	200088f0 	.word	0x200088f0
 800a3f0:	0800a3b1 	.word	0x0800a3b1
 800a3f4:	20008938 	.word	0x20008938

0800a3f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a3fc:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <tcp_timer_needed+0x30>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10f      	bne.n	800a424 <tcp_timer_needed+0x2c>
 800a404:	4b09      	ldr	r3, [pc, #36]	; (800a42c <tcp_timer_needed+0x34>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d103      	bne.n	800a414 <tcp_timer_needed+0x1c>
 800a40c:	4b08      	ldr	r3, [pc, #32]	; (800a430 <tcp_timer_needed+0x38>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d007      	beq.n	800a424 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a414:	4b04      	ldr	r3, [pc, #16]	; (800a428 <tcp_timer_needed+0x30>)
 800a416:	2201      	movs	r2, #1
 800a418:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a41a:	2200      	movs	r2, #0
 800a41c:	4905      	ldr	r1, [pc, #20]	; (800a434 <tcp_timer_needed+0x3c>)
 800a41e:	20fa      	movs	r0, #250	; 0xfa
 800a420:	f000 f848 	bl	800a4b4 <sys_timeout>
  }
}
 800a424:	bf00      	nop
 800a426:	bd80      	pop	{r7, pc}
 800a428:	20008938 	.word	0x20008938
 800a42c:	200088ec 	.word	0x200088ec
 800a430:	200088f0 	.word	0x200088f0
 800a434:	0800a3b1 	.word	0x0800a3b1

0800a438 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	4903      	ldr	r1, [pc, #12]	; (800a460 <cyclic_timer+0x28>)
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f82e 	bl	800a4b4 <sys_timeout>
}
 800a458:	bf00      	nop
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	0800a439 	.word	0x0800a439

0800a464 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a46a:	2301      	movs	r3, #1
 800a46c:	607b      	str	r3, [r7, #4]
 800a46e:	e00e      	b.n	800a48e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a470:	4a0d      	ldr	r2, [pc, #52]	; (800a4a8 <sys_timeouts_init+0x44>)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	4a0a      	ldr	r2, [pc, #40]	; (800a4a8 <sys_timeouts_init+0x44>)
 800a47e:	4413      	add	r3, r2
 800a480:	461a      	mov	r2, r3
 800a482:	490a      	ldr	r1, [pc, #40]	; (800a4ac <sys_timeouts_init+0x48>)
 800a484:	f000 f816 	bl	800a4b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3301      	adds	r3, #1
 800a48c:	607b      	str	r3, [r7, #4]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d9ed      	bls.n	800a470 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800a494:	f7f9 f9a2 	bl	80037dc <sys_now>
 800a498:	4603      	mov	r3, r0
 800a49a:	4a05      	ldr	r2, [pc, #20]	; (800a4b0 <sys_timeouts_init+0x4c>)
 800a49c:	6013      	str	r3, [r2, #0]
}
 800a49e:	bf00      	nop
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	0800fb2c 	.word	0x0800fb2c
 800a4ac:	0800a439 	.word	0x0800a439
 800a4b0:	20008934 	.word	0x20008934

0800a4b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b088      	sub	sp, #32
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a4c0:	2006      	movs	r0, #6
 800a4c2:	f7f9 fdc1 	bl	8004048 <memp_malloc>
 800a4c6:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f040 8084 	bne.w	800a5de <sys_timeout+0x12a>
 800a4d6:	4b44      	ldr	r3, [pc, #272]	; (800a5e8 <sys_timeout+0x134>)
 800a4d8:	22d4      	movs	r2, #212	; 0xd4
 800a4da:	4944      	ldr	r1, [pc, #272]	; (800a5ec <sys_timeout+0x138>)
 800a4dc:	4844      	ldr	r0, [pc, #272]	; (800a5f0 <sys_timeout+0x13c>)
 800a4de:	f002 fd7d 	bl	800cfdc <iprintf>
    return;
 800a4e2:	e07c      	b.n	800a5de <sys_timeout+0x12a>
  }

  now = sys_now();
 800a4e4:	f7f9 f97a 	bl	80037dc <sys_now>
 800a4e8:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800a4ea:	4b42      	ldr	r3, [pc, #264]	; (800a5f4 <sys_timeout+0x140>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d105      	bne.n	800a4fe <sys_timeout+0x4a>
    diff = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800a4f6:	4a40      	ldr	r2, [pc, #256]	; (800a5f8 <sys_timeout+0x144>)
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	e004      	b.n	800a508 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800a4fe:	4b3e      	ldr	r3, [pc, #248]	; (800a5f8 <sys_timeout+0x144>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2200      	movs	r2, #0
 800a50c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	441a      	add	r2, r3
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a524:	4b33      	ldr	r3, [pc, #204]	; (800a5f4 <sys_timeout+0x140>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <sys_timeout+0x80>
    next_timeout = timeout;
 800a52c:	4a31      	ldr	r2, [pc, #196]	; (800a5f4 <sys_timeout+0x140>)
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	6013      	str	r3, [r2, #0]
    return;
 800a532:	e055      	b.n	800a5e0 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800a534:	4b2f      	ldr	r3, [pc, #188]	; (800a5f4 <sys_timeout+0x140>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d20f      	bcs.n	800a560 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800a540:	4b2c      	ldr	r3, [pc, #176]	; (800a5f4 <sys_timeout+0x140>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6859      	ldr	r1, [r3, #4]
 800a546:	4b2b      	ldr	r3, [pc, #172]	; (800a5f4 <sys_timeout+0x140>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	1a8a      	subs	r2, r1, r2
 800a54e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800a550:	4b28      	ldr	r3, [pc, #160]	; (800a5f4 <sys_timeout+0x140>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a558:	4a26      	ldr	r2, [pc, #152]	; (800a5f4 <sys_timeout+0x140>)
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	e03f      	b.n	800a5e0 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a560:	4b24      	ldr	r3, [pc, #144]	; (800a5f4 <sys_timeout+0x140>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	61fb      	str	r3, [r7, #28]
 800a566:	e036      	b.n	800a5d6 <sys_timeout+0x122>
      timeout->time -= t->time;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	1ad2      	subs	r2, r2, r3
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d006      	beq.n	800a58c <sys_timeout+0xd8>
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d921      	bls.n	800a5d0 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d009      	beq.n	800a5a8 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6859      	ldr	r1, [r3, #4]
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	1a8a      	subs	r2, r1, r2
 800a5a4:	605a      	str	r2, [r3, #4]
 800a5a6:	e00b      	b.n	800a5c0 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d206      	bcs.n	800a5c0 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800a5b2:	4b10      	ldr	r3, [pc, #64]	; (800a5f4 <sys_timeout+0x140>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	441a      	add	r2, r3
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	601a      	str	r2, [r3, #0]
        break;
 800a5ce:	e007      	b.n	800a5e0 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	61fb      	str	r3, [r7, #28]
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1c5      	bne.n	800a568 <sys_timeout+0xb4>
 800a5dc:	e000      	b.n	800a5e0 <sys_timeout+0x12c>
    return;
 800a5de:	bf00      	nop
      }
    }
  }
}
 800a5e0:	3720      	adds	r7, #32
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	0800f2b0 	.word	0x0800f2b0
 800a5ec:	0800f2e4 	.word	0x0800f2e4
 800a5f0:	0800f324 	.word	0x0800f324
 800a5f4:	20008930 	.word	0x20008930
 800a5f8:	20008934 	.word	0x20008934

0800a5fc <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800a602:	4b24      	ldr	r3, [pc, #144]	; (800a694 <sys_check_timeouts+0x98>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d040      	beq.n	800a68c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800a60a:	f7f9 f8e7 	bl	80037dc <sys_now>
 800a60e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a610:	4b21      	ldr	r3, [pc, #132]	; (800a698 <sys_check_timeouts+0x9c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a61a:	4b20      	ldr	r3, [pc, #128]	; (800a69c <sys_check_timeouts+0xa0>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <sys_check_timeouts+0x2c>
 800a624:	f7f9 fef2 	bl	800440c <pbuf_free_ooseq>
      had_one = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800a62c:	4b19      	ldr	r3, [pc, #100]	; (800a694 <sys_check_timeouts+0x98>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d026      	beq.n	800a686 <sys_check_timeouts+0x8a>
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d321      	bcc.n	800a686 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800a642:	2301      	movs	r3, #1
 800a644:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	4b13      	ldr	r3, [pc, #76]	; (800a698 <sys_check_timeouts+0x9c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4413      	add	r3, r2
 800a650:	4a11      	ldr	r2, [pc, #68]	; (800a698 <sys_check_timeouts+0x9c>)
 800a652:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a0c      	ldr	r2, [pc, #48]	; (800a694 <sys_check_timeouts+0x98>)
 800a664:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	2006      	movs	r0, #6
 800a676:	f7f9 fd33 	bl	80040e0 <memp_free>
        if (handler != NULL) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6838      	ldr	r0, [r7, #0]
 800a684:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800a686:	7cfb      	ldrb	r3, [r7, #19]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1c6      	bne.n	800a61a <sys_check_timeouts+0x1e>
  }
}
 800a68c:	bf00      	nop
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20008930 	.word	0x20008930
 800a698:	20008934 	.word	0x20008934
 800a69c:	200088dd 	.word	0x200088dd

0800a6a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a6a4:	bf00      	nop
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bc80      	pop	{r7}
 800a6aa:	4770      	bx	lr

0800a6ac <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d018      	beq.n	800a6f2 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d013      	beq.n	800a6ee <udp_input_local_match+0x42>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00f      	beq.n	800a6ee <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a6ce:	4b13      	ldr	r3, [pc, #76]	; (800a71c <udp_input_local_match+0x70>)
 800a6d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d6:	d00a      	beq.n	800a6ee <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <udp_input_local_match+0x70>)
 800a6de:	695b      	ldr	r3, [r3, #20]
 800a6e0:	405a      	eors	r2, r3
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d110      	bne.n	800a710 <udp_input_local_match+0x64>
          return 1;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e00f      	b.n	800a712 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d009      	beq.n	800a70c <udp_input_local_match+0x60>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d005      	beq.n	800a70c <udp_input_local_match+0x60>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	4b05      	ldr	r3, [pc, #20]	; (800a71c <udp_input_local_match+0x70>)
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d101      	bne.n	800a710 <udp_input_local_match+0x64>
      return 1;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e000      	b.n	800a712 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	bc80      	pop	{r7}
 800a71a:	4770      	bx	lr
 800a71c:	200031c4 	.word	0x200031c4

0800a720 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a720:	b590      	push	{r4, r7, lr}
 800a722:	b08d      	sub	sp, #52	; 0x34
 800a724:	af02      	add	r7, sp, #8
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	895b      	ldrh	r3, [r3, #10]
 800a732:	2b07      	cmp	r3, #7
 800a734:	d803      	bhi.n	800a73e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7fa fa10 	bl	8004b5c <pbuf_free>
    goto end;
 800a73c:	e0c6      	b.n	800a8cc <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a744:	4b63      	ldr	r3, [pc, #396]	; (800a8d4 <udp_input+0x1b4>)
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	4a62      	ldr	r2, [pc, #392]	; (800a8d4 <udp_input+0x1b4>)
 800a74a:	6812      	ldr	r2, [r2, #0]
 800a74c:	4611      	mov	r1, r2
 800a74e:	4618      	mov	r0, r3
 800a750:	f001 fc1a 	bl	800bf88 <ip4_addr_isbroadcast_u32>
 800a754:	4603      	mov	r3, r0
 800a756:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	4618      	mov	r0, r3
 800a760:	f7f9 f8c9 	bl	80038f6 <lwip_htons>
 800a764:	4603      	mov	r3, r0
 800a766:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	885b      	ldrh	r3, [r3, #2]
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	4618      	mov	r0, r3
 800a770:	f7f9 f8c1 	bl	80038f6 <lwip_htons>
 800a774:	4603      	mov	r3, r0
 800a776:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a778:	2300      	movs	r3, #0
 800a77a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a780:	2300      	movs	r3, #0
 800a782:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a784:	4b54      	ldr	r3, [pc, #336]	; (800a8d8 <udp_input+0x1b8>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
 800a78a:	e03b      	b.n	800a804 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	8a5b      	ldrh	r3, [r3, #18]
 800a790:	89fa      	ldrh	r2, [r7, #14]
 800a792:	429a      	cmp	r2, r3
 800a794:	d131      	bne.n	800a7fa <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a796:	7cfb      	ldrb	r3, [r7, #19]
 800a798:	461a      	mov	r2, r3
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a79e:	f7ff ff85 	bl	800a6ac <udp_input_local_match>
 800a7a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d028      	beq.n	800a7fa <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	7c1b      	ldrb	r3, [r3, #16]
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d104      	bne.n	800a7be <udp_input+0x9e>
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	8a9b      	ldrh	r3, [r3, #20]
 800a7c2:	8a3a      	ldrh	r2, [r7, #16]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d118      	bne.n	800a7fa <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d005      	beq.n	800a7dc <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	4b3f      	ldr	r3, [pc, #252]	; (800a8d4 <udp_input+0x1b4>)
 800a7d6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d10e      	bne.n	800a7fa <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d014      	beq.n	800a80c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	68da      	ldr	r2, [r3, #12]
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a7ea:	4b3b      	ldr	r3, [pc, #236]	; (800a8d8 <udp_input+0x1b8>)
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a7f2:	4a39      	ldr	r2, [pc, #228]	; (800a8d8 <udp_input+0x1b8>)
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a7f8:	e008      	b.n	800a80c <udp_input+0xec>
      }
    }

    prev = pcb;
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	627b      	str	r3, [r7, #36]	; 0x24
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1c0      	bne.n	800a78c <udp_input+0x6c>
 800a80a:	e000      	b.n	800a80e <udp_input+0xee>
        break;
 800a80c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <udp_input+0xf8>
    pcb = uncon_pcb;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <udp_input+0x104>
    for_us = 1;
 800a81e:	2301      	movs	r3, #1
 800a820:	76fb      	strb	r3, [r7, #27]
 800a822:	e00a      	b.n	800a83a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	3304      	adds	r3, #4
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	4b2a      	ldr	r3, [pc, #168]	; (800a8d4 <udp_input+0x1b4>)
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	429a      	cmp	r2, r3
 800a830:	bf0c      	ite	eq
 800a832:	2301      	moveq	r3, #1
 800a834:	2300      	movne	r3, #0
 800a836:	b2db      	uxtb	r3, r3
 800a838:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800a83a:	7efb      	ldrb	r3, [r7, #27]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d042      	beq.n	800a8c6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800a840:	f06f 0107 	mvn.w	r1, #7
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7fa f965 	bl	8004b14 <pbuf_header>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00a      	beq.n	800a866 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800a850:	4b22      	ldr	r3, [pc, #136]	; (800a8dc <udp_input+0x1bc>)
 800a852:	f240 1255 	movw	r2, #341	; 0x155
 800a856:	4922      	ldr	r1, [pc, #136]	; (800a8e0 <udp_input+0x1c0>)
 800a858:	4822      	ldr	r0, [pc, #136]	; (800a8e4 <udp_input+0x1c4>)
 800a85a:	f002 fbbf 	bl	800cfdc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7fa f97c 	bl	8004b5c <pbuf_free>
      goto end;
 800a864:	e032      	b.n	800a8cc <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d012      	beq.n	800a892 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00a      	beq.n	800a88a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	699c      	ldr	r4, [r3, #24]
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	69d8      	ldr	r0, [r3, #28]
 800a87c:	8a3b      	ldrh	r3, [r7, #16]
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	4b19      	ldr	r3, [pc, #100]	; (800a8e8 <udp_input+0x1c8>)
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a886:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800a888:	e021      	b.n	800a8ce <udp_input+0x1ae>
        pbuf_free(p);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7fa f966 	bl	8004b5c <pbuf_free>
        goto end;
 800a890:	e01c      	b.n	800a8cc <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a892:	7cfb      	ldrb	r3, [r7, #19]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d112      	bne.n	800a8be <udp_input+0x19e>
 800a898:	4b0e      	ldr	r3, [pc, #56]	; (800a8d4 <udp_input+0x1b4>)
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8a0:	2be0      	cmp	r3, #224	; 0xe0
 800a8a2:	d00c      	beq.n	800a8be <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a8a4:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <udp_input+0x1b4>)
 800a8a6:	899b      	ldrh	r3, [r3, #12]
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	b21b      	sxth	r3, r3
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7fa f941 	bl	8004b38 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a8b6:	2103      	movs	r1, #3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f001 f861 	bl	800b980 <icmp_dest_unreach>
      pbuf_free(p);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7fa f94c 	bl	8004b5c <pbuf_free>
  return;
 800a8c4:	e003      	b.n	800a8ce <udp_input+0x1ae>
    pbuf_free(p);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7fa f948 	bl	8004b5c <pbuf_free>
  return;
 800a8cc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a8ce:	372c      	adds	r7, #44	; 0x2c
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd90      	pop	{r4, r7, pc}
 800a8d4:	200031c4 	.word	0x200031c4
 800a8d8:	2000893c 	.word	0x2000893c
 800a8dc:	0800f34c 	.word	0x0800f34c
 800a8e0:	0800f37c 	.word	0x0800f37c
 800a8e4:	0800f390 	.word	0x0800f390
 800a8e8:	200031d4 	.word	0x200031d4

0800a8ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d01e      	beq.n	800a93a <udp_netif_ip_addr_changed+0x4e>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d01a      	beq.n	800a93a <udp_netif_ip_addr_changed+0x4e>
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d017      	beq.n	800a93a <udp_netif_ip_addr_changed+0x4e>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d013      	beq.n	800a93a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a912:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <udp_netif_ip_addr_changed+0x58>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	60fb      	str	r3, [r7, #12]
 800a918:	e00c      	b.n	800a934 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	429a      	cmp	r2, r3
 800a924:	d103      	bne.n	800a92e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1ef      	bne.n	800a91a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800a93a:	bf00      	nop
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	bc80      	pop	{r7}
 800a942:	4770      	bx	lr
 800a944:	2000893c 	.word	0x2000893c

0800a948 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a950:	4915      	ldr	r1, [pc, #84]	; (800a9a8 <etharp_free_entry+0x60>)
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	4613      	mov	r3, r2
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	4413      	add	r3, r2
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	440b      	add	r3, r1
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d013      	beq.n	800a98c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a964:	4910      	ldr	r1, [pc, #64]	; (800a9a8 <etharp_free_entry+0x60>)
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	4613      	mov	r3, r2
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	4413      	add	r3, r2
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	440b      	add	r3, r1
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4618      	mov	r0, r3
 800a976:	f7fa f8f1 	bl	8004b5c <pbuf_free>
    arp_table[i].q = NULL;
 800a97a:	490b      	ldr	r1, [pc, #44]	; (800a9a8 <etharp_free_entry+0x60>)
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	4613      	mov	r3, r2
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	4413      	add	r3, r2
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	440b      	add	r3, r1
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a98c:	4906      	ldr	r1, [pc, #24]	; (800a9a8 <etharp_free_entry+0x60>)
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	4613      	mov	r3, r2
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	4413      	add	r3, r2
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	440b      	add	r3, r1
 800a99a:	3314      	adds	r3, #20
 800a99c:	2200      	movs	r2, #0
 800a99e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a9a0:	bf00      	nop
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	20008940 	.word	0x20008940

0800a9ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	71fb      	strb	r3, [r7, #7]
 800a9b6:	e096      	b.n	800aae6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a9b8:	79fa      	ldrb	r2, [r7, #7]
 800a9ba:	494f      	ldr	r1, [pc, #316]	; (800aaf8 <etharp_tmr+0x14c>)
 800a9bc:	4613      	mov	r3, r2
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	4413      	add	r3, r2
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	440b      	add	r3, r1
 800a9c6:	3314      	adds	r3, #20
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800a9cc:	79bb      	ldrb	r3, [r7, #6]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 8086 	beq.w	800aae0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800a9d4:	79fa      	ldrb	r2, [r7, #7]
 800a9d6:	4948      	ldr	r1, [pc, #288]	; (800aaf8 <etharp_tmr+0x14c>)
 800a9d8:	4613      	mov	r3, r2
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	4413      	add	r3, r2
 800a9de:	00db      	lsls	r3, r3, #3
 800a9e0:	440b      	add	r3, r1
 800a9e2:	3312      	adds	r3, #18
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	b298      	uxth	r0, r3
 800a9ea:	4943      	ldr	r1, [pc, #268]	; (800aaf8 <etharp_tmr+0x14c>)
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	4413      	add	r3, r2
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	440b      	add	r3, r1
 800a9f6:	3312      	adds	r3, #18
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a9fc:	79fa      	ldrb	r2, [r7, #7]
 800a9fe:	493e      	ldr	r1, [pc, #248]	; (800aaf8 <etharp_tmr+0x14c>)
 800aa00:	4613      	mov	r3, r2
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	4413      	add	r3, r2
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	440b      	add	r3, r1
 800aa0a:	3312      	adds	r3, #18
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800aa12:	d215      	bcs.n	800aa40 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800aa14:	79fa      	ldrb	r2, [r7, #7]
 800aa16:	4938      	ldr	r1, [pc, #224]	; (800aaf8 <etharp_tmr+0x14c>)
 800aa18:	4613      	mov	r3, r2
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	4413      	add	r3, r2
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	440b      	add	r3, r1
 800aa22:	3314      	adds	r3, #20
 800aa24:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d10f      	bne.n	800aa4a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800aa2a:	79fa      	ldrb	r2, [r7, #7]
 800aa2c:	4932      	ldr	r1, [pc, #200]	; (800aaf8 <etharp_tmr+0x14c>)
 800aa2e:	4613      	mov	r3, r2
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	4413      	add	r3, r2
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	440b      	add	r3, r1
 800aa38:	3312      	adds	r3, #18
 800aa3a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d904      	bls.n	800aa4a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800aa40:	79fb      	ldrb	r3, [r7, #7]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff ff80 	bl	800a948 <etharp_free_entry>
 800aa48:	e04a      	b.n	800aae0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800aa4a:	79fa      	ldrb	r2, [r7, #7]
 800aa4c:	492a      	ldr	r1, [pc, #168]	; (800aaf8 <etharp_tmr+0x14c>)
 800aa4e:	4613      	mov	r3, r2
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	4413      	add	r3, r2
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	440b      	add	r3, r1
 800aa58:	3314      	adds	r3, #20
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b03      	cmp	r3, #3
 800aa5e:	d10a      	bne.n	800aa76 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800aa60:	79fa      	ldrb	r2, [r7, #7]
 800aa62:	4925      	ldr	r1, [pc, #148]	; (800aaf8 <etharp_tmr+0x14c>)
 800aa64:	4613      	mov	r3, r2
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	4413      	add	r3, r2
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	440b      	add	r3, r1
 800aa6e:	3314      	adds	r3, #20
 800aa70:	2204      	movs	r2, #4
 800aa72:	701a      	strb	r2, [r3, #0]
 800aa74:	e034      	b.n	800aae0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800aa76:	79fa      	ldrb	r2, [r7, #7]
 800aa78:	491f      	ldr	r1, [pc, #124]	; (800aaf8 <etharp_tmr+0x14c>)
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	4413      	add	r3, r2
 800aa80:	00db      	lsls	r3, r3, #3
 800aa82:	440b      	add	r3, r1
 800aa84:	3314      	adds	r3, #20
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2b04      	cmp	r3, #4
 800aa8a:	d10a      	bne.n	800aaa2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800aa8c:	79fa      	ldrb	r2, [r7, #7]
 800aa8e:	491a      	ldr	r1, [pc, #104]	; (800aaf8 <etharp_tmr+0x14c>)
 800aa90:	4613      	mov	r3, r2
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	4413      	add	r3, r2
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	440b      	add	r3, r1
 800aa9a:	3314      	adds	r3, #20
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	e01e      	b.n	800aae0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800aaa2:	79fa      	ldrb	r2, [r7, #7]
 800aaa4:	4914      	ldr	r1, [pc, #80]	; (800aaf8 <etharp_tmr+0x14c>)
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	4413      	add	r3, r2
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	440b      	add	r3, r1
 800aab0:	3314      	adds	r3, #20
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d113      	bne.n	800aae0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800aab8:	79fa      	ldrb	r2, [r7, #7]
 800aaba:	490f      	ldr	r1, [pc, #60]	; (800aaf8 <etharp_tmr+0x14c>)
 800aabc:	4613      	mov	r3, r2
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	4413      	add	r3, r2
 800aac2:	00db      	lsls	r3, r3, #3
 800aac4:	440b      	add	r3, r1
 800aac6:	3308      	adds	r3, #8
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	79fa      	ldrb	r2, [r7, #7]
 800aacc:	4613      	mov	r3, r2
 800aace:	005b      	lsls	r3, r3, #1
 800aad0:	4413      	add	r3, r2
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	4a08      	ldr	r2, [pc, #32]	; (800aaf8 <etharp_tmr+0x14c>)
 800aad6:	4413      	add	r3, r2
 800aad8:	3304      	adds	r3, #4
 800aada:	4619      	mov	r1, r3
 800aadc:	f000 fe38 	bl	800b750 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	3301      	adds	r3, #1
 800aae4:	71fb      	strb	r3, [r7, #7]
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	2b09      	cmp	r3, #9
 800aaea:	f67f af65 	bls.w	800a9b8 <etharp_tmr+0xc>
      }
    }
  }
}
 800aaee:	bf00      	nop
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	20008940 	.word	0x20008940

0800aafc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	460b      	mov	r3, r1
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ab0a:	230a      	movs	r3, #10
 800ab0c:	77fb      	strb	r3, [r7, #31]
 800ab0e:	230a      	movs	r3, #10
 800ab10:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800ab12:	230a      	movs	r3, #10
 800ab14:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800ab1a:	230a      	movs	r3, #10
 800ab1c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	833b      	strh	r3, [r7, #24]
 800ab22:	2300      	movs	r3, #0
 800ab24:	82fb      	strh	r3, [r7, #22]
 800ab26:	2300      	movs	r3, #0
 800ab28:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	773b      	strb	r3, [r7, #28]
 800ab2e:	e093      	b.n	800ac58 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800ab30:	7f3a      	ldrb	r2, [r7, #28]
 800ab32:	4990      	ldr	r1, [pc, #576]	; (800ad74 <etharp_find_entry+0x278>)
 800ab34:	4613      	mov	r3, r2
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	4413      	add	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	440b      	add	r3, r1
 800ab3e:	3314      	adds	r3, #20
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ab44:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ab48:	2b0a      	cmp	r3, #10
 800ab4a:	d105      	bne.n	800ab58 <etharp_find_entry+0x5c>
 800ab4c:	7cfb      	ldrb	r3, [r7, #19]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d102      	bne.n	800ab58 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800ab52:	7f3b      	ldrb	r3, [r7, #28]
 800ab54:	777b      	strb	r3, [r7, #29]
 800ab56:	e07c      	b.n	800ac52 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ab58:	7cfb      	ldrb	r3, [r7, #19]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d079      	beq.n	800ac52 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ab5e:	7cfb      	ldrb	r3, [r7, #19]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d009      	beq.n	800ab78 <etharp_find_entry+0x7c>
 800ab64:	7cfb      	ldrb	r3, [r7, #19]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d806      	bhi.n	800ab78 <etharp_find_entry+0x7c>
 800ab6a:	4b83      	ldr	r3, [pc, #524]	; (800ad78 <etharp_find_entry+0x27c>)
 800ab6c:	f240 1225 	movw	r2, #293	; 0x125
 800ab70:	4982      	ldr	r1, [pc, #520]	; (800ad7c <etharp_find_entry+0x280>)
 800ab72:	4883      	ldr	r0, [pc, #524]	; (800ad80 <etharp_find_entry+0x284>)
 800ab74:	f002 fa32 	bl	800cfdc <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00f      	beq.n	800ab9e <etharp_find_entry+0xa2>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6819      	ldr	r1, [r3, #0]
 800ab82:	7f3a      	ldrb	r2, [r7, #28]
 800ab84:	487b      	ldr	r0, [pc, #492]	; (800ad74 <etharp_find_entry+0x278>)
 800ab86:	4613      	mov	r3, r2
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	4413      	add	r3, r2
 800ab8c:	00db      	lsls	r3, r3, #3
 800ab8e:	4403      	add	r3, r0
 800ab90:	3304      	adds	r3, #4
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4299      	cmp	r1, r3
 800ab96:	d102      	bne.n	800ab9e <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ab98:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ab9c:	e0e5      	b.n	800ad6a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ab9e:	7cfb      	ldrb	r3, [r7, #19]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d13b      	bne.n	800ac1c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800aba4:	7f3a      	ldrb	r2, [r7, #28]
 800aba6:	4973      	ldr	r1, [pc, #460]	; (800ad74 <etharp_find_entry+0x278>)
 800aba8:	4613      	mov	r3, r2
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	4413      	add	r3, r2
 800abae:	00db      	lsls	r3, r3, #3
 800abb0:	440b      	add	r3, r1
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d018      	beq.n	800abea <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800abb8:	7f3a      	ldrb	r2, [r7, #28]
 800abba:	496e      	ldr	r1, [pc, #440]	; (800ad74 <etharp_find_entry+0x278>)
 800abbc:	4613      	mov	r3, r2
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	4413      	add	r3, r2
 800abc2:	00db      	lsls	r3, r3, #3
 800abc4:	440b      	add	r3, r1
 800abc6:	3312      	adds	r3, #18
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	8b3a      	ldrh	r2, [r7, #24]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d840      	bhi.n	800ac52 <etharp_find_entry+0x156>
            old_queue = i;
 800abd0:	7f3b      	ldrb	r3, [r7, #28]
 800abd2:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800abd4:	7f3a      	ldrb	r2, [r7, #28]
 800abd6:	4967      	ldr	r1, [pc, #412]	; (800ad74 <etharp_find_entry+0x278>)
 800abd8:	4613      	mov	r3, r2
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	4413      	add	r3, r2
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	440b      	add	r3, r1
 800abe2:	3312      	adds	r3, #18
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	833b      	strh	r3, [r7, #24]
 800abe8:	e033      	b.n	800ac52 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800abea:	7f3a      	ldrb	r2, [r7, #28]
 800abec:	4961      	ldr	r1, [pc, #388]	; (800ad74 <etharp_find_entry+0x278>)
 800abee:	4613      	mov	r3, r2
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	4413      	add	r3, r2
 800abf4:	00db      	lsls	r3, r3, #3
 800abf6:	440b      	add	r3, r1
 800abf8:	3312      	adds	r3, #18
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	8afa      	ldrh	r2, [r7, #22]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d827      	bhi.n	800ac52 <etharp_find_entry+0x156>
            old_pending = i;
 800ac02:	7f3b      	ldrb	r3, [r7, #28]
 800ac04:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800ac06:	7f3a      	ldrb	r2, [r7, #28]
 800ac08:	495a      	ldr	r1, [pc, #360]	; (800ad74 <etharp_find_entry+0x278>)
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	4413      	add	r3, r2
 800ac10:	00db      	lsls	r3, r3, #3
 800ac12:	440b      	add	r3, r1
 800ac14:	3312      	adds	r3, #18
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	82fb      	strh	r3, [r7, #22]
 800ac1a:	e01a      	b.n	800ac52 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ac1c:	7cfb      	ldrb	r3, [r7, #19]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d917      	bls.n	800ac52 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ac22:	7f3a      	ldrb	r2, [r7, #28]
 800ac24:	4953      	ldr	r1, [pc, #332]	; (800ad74 <etharp_find_entry+0x278>)
 800ac26:	4613      	mov	r3, r2
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	4413      	add	r3, r2
 800ac2c:	00db      	lsls	r3, r3, #3
 800ac2e:	440b      	add	r3, r1
 800ac30:	3312      	adds	r3, #18
 800ac32:	881b      	ldrh	r3, [r3, #0]
 800ac34:	8aba      	ldrh	r2, [r7, #20]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d80b      	bhi.n	800ac52 <etharp_find_entry+0x156>
            old_stable = i;
 800ac3a:	7f3b      	ldrb	r3, [r7, #28]
 800ac3c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800ac3e:	7f3a      	ldrb	r2, [r7, #28]
 800ac40:	494c      	ldr	r1, [pc, #304]	; (800ad74 <etharp_find_entry+0x278>)
 800ac42:	4613      	mov	r3, r2
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	4413      	add	r3, r2
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	440b      	add	r3, r1
 800ac4c:	3312      	adds	r3, #18
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ac52:	7f3b      	ldrb	r3, [r7, #28]
 800ac54:	3301      	adds	r3, #1
 800ac56:	773b      	strb	r3, [r7, #28]
 800ac58:	7f3b      	ldrb	r3, [r7, #28]
 800ac5a:	2b09      	cmp	r3, #9
 800ac5c:	f67f af68 	bls.w	800ab30 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d108      	bne.n	800ac7c <etharp_find_entry+0x180>
 800ac6a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ac6e:	2b0a      	cmp	r3, #10
 800ac70:	d107      	bne.n	800ac82 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ac72:	7afb      	ldrb	r3, [r7, #11]
 800ac74:	f003 0301 	and.w	r3, r3, #1
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d102      	bne.n	800ac82 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800ac7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac80:	e073      	b.n	800ad6a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ac82:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ac86:	2b09      	cmp	r3, #9
 800ac88:	dc02      	bgt.n	800ac90 <etharp_find_entry+0x194>
    i = empty;
 800ac8a:	7f7b      	ldrb	r3, [r7, #29]
 800ac8c:	773b      	strb	r3, [r7, #28]
 800ac8e:	e036      	b.n	800acfe <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ac90:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ac94:	2b09      	cmp	r3, #9
 800ac96:	dc13      	bgt.n	800acc0 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800ac98:	7fbb      	ldrb	r3, [r7, #30]
 800ac9a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ac9c:	7f3a      	ldrb	r2, [r7, #28]
 800ac9e:	4935      	ldr	r1, [pc, #212]	; (800ad74 <etharp_find_entry+0x278>)
 800aca0:	4613      	mov	r3, r2
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	4413      	add	r3, r2
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	440b      	add	r3, r1
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d018      	beq.n	800ace2 <etharp_find_entry+0x1e6>
 800acb0:	4b31      	ldr	r3, [pc, #196]	; (800ad78 <etharp_find_entry+0x27c>)
 800acb2:	f240 126f 	movw	r2, #367	; 0x16f
 800acb6:	4933      	ldr	r1, [pc, #204]	; (800ad84 <etharp_find_entry+0x288>)
 800acb8:	4831      	ldr	r0, [pc, #196]	; (800ad80 <etharp_find_entry+0x284>)
 800acba:	f002 f98f 	bl	800cfdc <iprintf>
 800acbe:	e010      	b.n	800ace2 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800acc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acc4:	2b09      	cmp	r3, #9
 800acc6:	dc02      	bgt.n	800acce <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800acc8:	7ffb      	ldrb	r3, [r7, #31]
 800acca:	773b      	strb	r3, [r7, #28]
 800accc:	e009      	b.n	800ace2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800acce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800acd2:	2b09      	cmp	r3, #9
 800acd4:	dc02      	bgt.n	800acdc <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800acd6:	7efb      	ldrb	r3, [r7, #27]
 800acd8:	773b      	strb	r3, [r7, #28]
 800acda:	e002      	b.n	800ace2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800acdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ace0:	e043      	b.n	800ad6a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ace2:	7f3b      	ldrb	r3, [r7, #28]
 800ace4:	2b09      	cmp	r3, #9
 800ace6:	d906      	bls.n	800acf6 <etharp_find_entry+0x1fa>
 800ace8:	4b23      	ldr	r3, [pc, #140]	; (800ad78 <etharp_find_entry+0x27c>)
 800acea:	f240 1281 	movw	r2, #385	; 0x181
 800acee:	4926      	ldr	r1, [pc, #152]	; (800ad88 <etharp_find_entry+0x28c>)
 800acf0:	4823      	ldr	r0, [pc, #140]	; (800ad80 <etharp_find_entry+0x284>)
 800acf2:	f002 f973 	bl	800cfdc <iprintf>
    etharp_free_entry(i);
 800acf6:	7f3b      	ldrb	r3, [r7, #28]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7ff fe25 	bl	800a948 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800acfe:	7f3b      	ldrb	r3, [r7, #28]
 800ad00:	2b09      	cmp	r3, #9
 800ad02:	d906      	bls.n	800ad12 <etharp_find_entry+0x216>
 800ad04:	4b1c      	ldr	r3, [pc, #112]	; (800ad78 <etharp_find_entry+0x27c>)
 800ad06:	f240 1285 	movw	r2, #389	; 0x185
 800ad0a:	491f      	ldr	r1, [pc, #124]	; (800ad88 <etharp_find_entry+0x28c>)
 800ad0c:	481c      	ldr	r0, [pc, #112]	; (800ad80 <etharp_find_entry+0x284>)
 800ad0e:	f002 f965 	bl	800cfdc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ad12:	7f3a      	ldrb	r2, [r7, #28]
 800ad14:	4917      	ldr	r1, [pc, #92]	; (800ad74 <etharp_find_entry+0x278>)
 800ad16:	4613      	mov	r3, r2
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	4413      	add	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	440b      	add	r3, r1
 800ad20:	3314      	adds	r3, #20
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d006      	beq.n	800ad36 <etharp_find_entry+0x23a>
 800ad28:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <etharp_find_entry+0x27c>)
 800ad2a:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800ad2e:	4917      	ldr	r1, [pc, #92]	; (800ad8c <etharp_find_entry+0x290>)
 800ad30:	4813      	ldr	r0, [pc, #76]	; (800ad80 <etharp_find_entry+0x284>)
 800ad32:	f002 f953 	bl	800cfdc <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00a      	beq.n	800ad52 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ad3c:	7f3a      	ldrb	r2, [r7, #28]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6819      	ldr	r1, [r3, #0]
 800ad42:	480c      	ldr	r0, [pc, #48]	; (800ad74 <etharp_find_entry+0x278>)
 800ad44:	4613      	mov	r3, r2
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	4413      	add	r3, r2
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	4403      	add	r3, r0
 800ad4e:	3304      	adds	r3, #4
 800ad50:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ad52:	7f3a      	ldrb	r2, [r7, #28]
 800ad54:	4907      	ldr	r1, [pc, #28]	; (800ad74 <etharp_find_entry+0x278>)
 800ad56:	4613      	mov	r3, r2
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	4413      	add	r3, r2
 800ad5c:	00db      	lsls	r3, r3, #3
 800ad5e:	440b      	add	r3, r1
 800ad60:	3312      	adds	r3, #18
 800ad62:	2200      	movs	r2, #0
 800ad64:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800ad66:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3720      	adds	r7, #32
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20008940 	.word	0x20008940
 800ad78:	0800f3e8 	.word	0x0800f3e8
 800ad7c:	0800f420 	.word	0x0800f420
 800ad80:	0800f460 	.word	0x0800f460
 800ad84:	0800f488 	.word	0x0800f488
 800ad88:	0800f4a0 	.word	0x0800f4a0
 800ad8c:	0800f4b4 	.word	0x0800f4b4

0800ad90 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af02      	add	r7, sp, #8
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ada4:	2b06      	cmp	r3, #6
 800ada6:	d006      	beq.n	800adb6 <etharp_update_arp_entry+0x26>
 800ada8:	4b48      	ldr	r3, [pc, #288]	; (800aecc <etharp_update_arp_entry+0x13c>)
 800adaa:	f240 12ab 	movw	r2, #427	; 0x1ab
 800adae:	4948      	ldr	r1, [pc, #288]	; (800aed0 <etharp_update_arp_entry+0x140>)
 800adb0:	4848      	ldr	r0, [pc, #288]	; (800aed4 <etharp_update_arp_entry+0x144>)
 800adb2:	f002 f913 	bl	800cfdc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d012      	beq.n	800ade2 <etharp_update_arp_entry+0x52>
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00e      	beq.n	800ade2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68f9      	ldr	r1, [r7, #12]
 800adca:	4618      	mov	r0, r3
 800adcc:	f001 f8dc 	bl	800bf88 <ip4_addr_isbroadcast_u32>
 800add0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800add2:	2b00      	cmp	r3, #0
 800add4:	d105      	bne.n	800ade2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800adde:	2be0      	cmp	r3, #224	; 0xe0
 800ade0:	d102      	bne.n	800ade8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ade2:	f06f 030f 	mvn.w	r3, #15
 800ade6:	e06c      	b.n	800aec2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	4619      	mov	r1, r3
 800adee:	68b8      	ldr	r0, [r7, #8]
 800adf0:	f7ff fe84 	bl	800aafc <etharp_find_entry>
 800adf4:	4603      	mov	r3, r0
 800adf6:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800adf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	da02      	bge.n	800ae06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ae00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae04:	e05d      	b.n	800aec2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ae06:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae0a:	4933      	ldr	r1, [pc, #204]	; (800aed8 <etharp_update_arp_entry+0x148>)
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	005b      	lsls	r3, r3, #1
 800ae10:	4413      	add	r3, r2
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	440b      	add	r3, r1
 800ae16:	3314      	adds	r3, #20
 800ae18:	2202      	movs	r2, #2
 800ae1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ae1c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae20:	492d      	ldr	r1, [pc, #180]	; (800aed8 <etharp_update_arp_entry+0x148>)
 800ae22:	4613      	mov	r3, r2
 800ae24:	005b      	lsls	r3, r3, #1
 800ae26:	4413      	add	r3, r2
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	440b      	add	r3, r1
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800ae32:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae36:	4613      	mov	r3, r2
 800ae38:	005b      	lsls	r3, r3, #1
 800ae3a:	4413      	add	r3, r2
 800ae3c:	00db      	lsls	r3, r3, #3
 800ae3e:	3308      	adds	r3, #8
 800ae40:	4a25      	ldr	r2, [pc, #148]	; (800aed8 <etharp_update_arp_entry+0x148>)
 800ae42:	4413      	add	r3, r2
 800ae44:	3304      	adds	r3, #4
 800ae46:	2206      	movs	r2, #6
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f002 f9b2 	bl	800d1b4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ae50:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae54:	4920      	ldr	r1, [pc, #128]	; (800aed8 <etharp_update_arp_entry+0x148>)
 800ae56:	4613      	mov	r3, r2
 800ae58:	005b      	lsls	r3, r3, #1
 800ae5a:	4413      	add	r3, r2
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	440b      	add	r3, r1
 800ae60:	3312      	adds	r3, #18
 800ae62:	2200      	movs	r2, #0
 800ae64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ae66:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae6a:	491b      	ldr	r1, [pc, #108]	; (800aed8 <etharp_update_arp_entry+0x148>)
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	4413      	add	r3, r2
 800ae72:	00db      	lsls	r3, r3, #3
 800ae74:	440b      	add	r3, r1
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d021      	beq.n	800aec0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ae7c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae80:	4915      	ldr	r1, [pc, #84]	; (800aed8 <etharp_update_arp_entry+0x148>)
 800ae82:	4613      	mov	r3, r2
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	4413      	add	r3, r2
 800ae88:	00db      	lsls	r3, r3, #3
 800ae8a:	440b      	add	r3, r1
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ae90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae94:	4910      	ldr	r1, [pc, #64]	; (800aed8 <etharp_update_arp_entry+0x148>)
 800ae96:	4613      	mov	r3, r2
 800ae98:	005b      	lsls	r3, r3, #1
 800ae9a:	4413      	add	r3, r2
 800ae9c:	00db      	lsls	r3, r3, #3
 800ae9e:	440b      	add	r3, r1
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800aeaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6939      	ldr	r1, [r7, #16]
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f001 ff99 	bl	800cdec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800aeba:	6938      	ldr	r0, [r7, #16]
 800aebc:	f7f9 fe4e 	bl	8004b5c <pbuf_free>
  }
  return ERR_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	0800f3e8 	.word	0x0800f3e8
 800aed0:	0800f4e0 	.word	0x0800f4e0
 800aed4:	0800f460 	.word	0x0800f460
 800aed8:	20008940 	.word	0x20008940

0800aedc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aee4:	2300      	movs	r3, #0
 800aee6:	73fb      	strb	r3, [r7, #15]
 800aee8:	e01f      	b.n	800af2a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800aeea:	7bfa      	ldrb	r2, [r7, #15]
 800aeec:	4913      	ldr	r1, [pc, #76]	; (800af3c <etharp_cleanup_netif+0x60>)
 800aeee:	4613      	mov	r3, r2
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	4413      	add	r3, r2
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	440b      	add	r3, r1
 800aef8:	3314      	adds	r3, #20
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800aefe:	7bbb      	ldrb	r3, [r7, #14]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00f      	beq.n	800af24 <etharp_cleanup_netif+0x48>
 800af04:	7bfa      	ldrb	r2, [r7, #15]
 800af06:	490d      	ldr	r1, [pc, #52]	; (800af3c <etharp_cleanup_netif+0x60>)
 800af08:	4613      	mov	r3, r2
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	4413      	add	r3, r2
 800af0e:	00db      	lsls	r3, r3, #3
 800af10:	440b      	add	r3, r1
 800af12:	3308      	adds	r3, #8
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d103      	bne.n	800af24 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff fd12 	bl	800a948 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	3301      	adds	r3, #1
 800af28:	73fb      	strb	r3, [r7, #15]
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	2b09      	cmp	r3, #9
 800af2e:	d9dc      	bls.n	800aeea <etharp_cleanup_netif+0xe>
    }
  }
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	20008940 	.word	0x20008940

0800af40 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800af40:	b5b0      	push	{r4, r5, r7, lr}
 800af42:	b08a      	sub	sp, #40	; 0x28
 800af44:	af04      	add	r7, sp, #16
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d107      	bne.n	800af60 <etharp_input+0x20>
 800af50:	4b3d      	ldr	r3, [pc, #244]	; (800b048 <etharp_input+0x108>)
 800af52:	f44f 7222 	mov.w	r2, #648	; 0x288
 800af56:	493d      	ldr	r1, [pc, #244]	; (800b04c <etharp_input+0x10c>)
 800af58:	483d      	ldr	r0, [pc, #244]	; (800b050 <etharp_input+0x110>)
 800af5a:	f002 f83f 	bl	800cfdc <iprintf>
 800af5e:	e06f      	b.n	800b040 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af70:	d10c      	bne.n	800af8c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800af76:	2b06      	cmp	r3, #6
 800af78:	d108      	bne.n	800af8c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d104      	bne.n	800af8c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	885b      	ldrh	r3, [r3, #2]
 800af86:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800af88:	2b08      	cmp	r3, #8
 800af8a:	d003      	beq.n	800af94 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7f9 fde5 	bl	8004b5c <pbuf_free>
    return;
 800af92:	e055      	b.n	800b040 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	330e      	adds	r3, #14
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	3318      	adds	r3, #24
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	3304      	adds	r3, #4
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <etharp_input+0x74>
    for_us = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	75fb      	strb	r3, [r7, #23]
 800afb2:	e009      	b.n	800afc8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	3304      	adds	r3, #4
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	bf0c      	ite	eq
 800afc0:	2301      	moveq	r3, #1
 800afc2:	2300      	movne	r3, #0
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f103 0208 	add.w	r2, r3, #8
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <etharp_input+0x98>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e000      	b.n	800afda <etharp_input+0x9a>
 800afd8:	2302      	movs	r3, #2
 800afda:	f107 010c 	add.w	r1, r7, #12
 800afde:	6838      	ldr	r0, [r7, #0]
 800afe0:	f7ff fed6 	bl	800ad90 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	88db      	ldrh	r3, [r3, #6]
 800afe8:	b29b      	uxth	r3, r3
 800afea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afee:	d003      	beq.n	800aff8 <etharp_input+0xb8>
 800aff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aff4:	d01e      	beq.n	800b034 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800aff6:	e020      	b.n	800b03a <etharp_input+0xfa>
    if (for_us) {
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d01c      	beq.n	800b038 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b018:	2102      	movs	r1, #2
 800b01a:	9103      	str	r1, [sp, #12]
 800b01c:	f107 010c 	add.w	r1, r7, #12
 800b020:	9102      	str	r1, [sp, #8]
 800b022:	9201      	str	r2, [sp, #4]
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	462b      	mov	r3, r5
 800b028:	4622      	mov	r2, r4
 800b02a:	4601      	mov	r1, r0
 800b02c:	6838      	ldr	r0, [r7, #0]
 800b02e:	f000 fae1 	bl	800b5f4 <etharp_raw>
    break;
 800b032:	e001      	b.n	800b038 <etharp_input+0xf8>
    break;
 800b034:	bf00      	nop
 800b036:	e000      	b.n	800b03a <etharp_input+0xfa>
    break;
 800b038:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7f9 fd8e 	bl	8004b5c <pbuf_free>
}
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bdb0      	pop	{r4, r5, r7, pc}
 800b046:	bf00      	nop
 800b048:	0800f3e8 	.word	0x0800f3e8
 800b04c:	0800f538 	.word	0x0800f538
 800b050:	0800f460 	.word	0x0800f460

0800b054 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af02      	add	r7, sp, #8
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	4613      	mov	r3, r2
 800b060:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b062:	79fa      	ldrb	r2, [r7, #7]
 800b064:	4944      	ldr	r1, [pc, #272]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b066:	4613      	mov	r3, r2
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	4413      	add	r3, r2
 800b06c:	00db      	lsls	r3, r3, #3
 800b06e:	440b      	add	r3, r1
 800b070:	3314      	adds	r3, #20
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d806      	bhi.n	800b086 <etharp_output_to_arp_index+0x32>
 800b078:	4b40      	ldr	r3, [pc, #256]	; (800b17c <etharp_output_to_arp_index+0x128>)
 800b07a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800b07e:	4940      	ldr	r1, [pc, #256]	; (800b180 <etharp_output_to_arp_index+0x12c>)
 800b080:	4840      	ldr	r0, [pc, #256]	; (800b184 <etharp_output_to_arp_index+0x130>)
 800b082:	f001 ffab 	bl	800cfdc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b086:	79fa      	ldrb	r2, [r7, #7]
 800b088:	493b      	ldr	r1, [pc, #236]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b08a:	4613      	mov	r3, r2
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	4413      	add	r3, r2
 800b090:	00db      	lsls	r3, r3, #3
 800b092:	440b      	add	r3, r1
 800b094:	3314      	adds	r3, #20
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d153      	bne.n	800b144 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b09c:	79fa      	ldrb	r2, [r7, #7]
 800b09e:	4936      	ldr	r1, [pc, #216]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	4413      	add	r3, r2
 800b0a6:	00db      	lsls	r3, r3, #3
 800b0a8:	440b      	add	r3, r1
 800b0aa:	3312      	adds	r3, #18
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b0b2:	d919      	bls.n	800b0e8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b0b4:	79fa      	ldrb	r2, [r7, #7]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	4413      	add	r3, r2
 800b0bc:	00db      	lsls	r3, r3, #3
 800b0be:	4a2e      	ldr	r2, [pc, #184]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b0c0:	4413      	add	r3, r2
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 fb42 	bl	800b750 <etharp_request>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d138      	bne.n	800b144 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b0d2:	79fa      	ldrb	r2, [r7, #7]
 800b0d4:	4928      	ldr	r1, [pc, #160]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	4413      	add	r3, r2
 800b0dc:	00db      	lsls	r3, r3, #3
 800b0de:	440b      	add	r3, r1
 800b0e0:	3314      	adds	r3, #20
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	701a      	strb	r2, [r3, #0]
 800b0e6:	e02d      	b.n	800b144 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b0e8:	79fa      	ldrb	r2, [r7, #7]
 800b0ea:	4923      	ldr	r1, [pc, #140]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	4413      	add	r3, r2
 800b0f2:	00db      	lsls	r3, r3, #3
 800b0f4:	440b      	add	r3, r1
 800b0f6:	3312      	adds	r3, #18
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b0fe:	d321      	bcc.n	800b144 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b100:	79fa      	ldrb	r2, [r7, #7]
 800b102:	4613      	mov	r3, r2
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	4413      	add	r3, r2
 800b108:	00db      	lsls	r3, r3, #3
 800b10a:	4a1b      	ldr	r2, [pc, #108]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b10c:	4413      	add	r3, r2
 800b10e:	1d19      	adds	r1, r3, #4
 800b110:	79fa      	ldrb	r2, [r7, #7]
 800b112:	4613      	mov	r3, r2
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	4413      	add	r3, r2
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	3308      	adds	r3, #8
 800b11c:	4a16      	ldr	r2, [pc, #88]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b11e:	4413      	add	r3, r2
 800b120:	3304      	adds	r3, #4
 800b122:	461a      	mov	r2, r3
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 faf1 	bl	800b70c <etharp_request_dst>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d109      	bne.n	800b144 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b130:	79fa      	ldrb	r2, [r7, #7]
 800b132:	4911      	ldr	r1, [pc, #68]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b134:	4613      	mov	r3, r2
 800b136:	005b      	lsls	r3, r3, #1
 800b138:	4413      	add	r3, r2
 800b13a:	00db      	lsls	r3, r3, #3
 800b13c:	440b      	add	r3, r1
 800b13e:	3314      	adds	r3, #20
 800b140:	2203      	movs	r2, #3
 800b142:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800b14a:	79fa      	ldrb	r2, [r7, #7]
 800b14c:	4613      	mov	r3, r2
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	4413      	add	r3, r2
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	3308      	adds	r3, #8
 800b156:	4a08      	ldr	r2, [pc, #32]	; (800b178 <etharp_output_to_arp_index+0x124>)
 800b158:	4413      	add	r3, r2
 800b15a:	3304      	adds	r3, #4
 800b15c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b160:	9200      	str	r2, [sp, #0]
 800b162:	460a      	mov	r2, r1
 800b164:	68b9      	ldr	r1, [r7, #8]
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f001 fe40 	bl	800cdec <ethernet_output>
 800b16c:	4603      	mov	r3, r0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20008940 	.word	0x20008940
 800b17c:	0800f3e8 	.word	0x0800f3e8
 800b180:	0800f558 	.word	0x0800f558
 800b184:	0800f460 	.word	0x0800f460

0800b188 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08a      	sub	sp, #40	; 0x28
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d106      	bne.n	800b1ac <etharp_output+0x24>
 800b19e:	4b69      	ldr	r3, [pc, #420]	; (800b344 <etharp_output+0x1bc>)
 800b1a0:	f240 321b 	movw	r2, #795	; 0x31b
 800b1a4:	4968      	ldr	r1, [pc, #416]	; (800b348 <etharp_output+0x1c0>)
 800b1a6:	4869      	ldr	r0, [pc, #420]	; (800b34c <etharp_output+0x1c4>)
 800b1a8:	f001 ff18 	bl	800cfdc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d106      	bne.n	800b1c0 <etharp_output+0x38>
 800b1b2:	4b64      	ldr	r3, [pc, #400]	; (800b344 <etharp_output+0x1bc>)
 800b1b4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b1b8:	4965      	ldr	r1, [pc, #404]	; (800b350 <etharp_output+0x1c8>)
 800b1ba:	4864      	ldr	r0, [pc, #400]	; (800b34c <etharp_output+0x1c4>)
 800b1bc:	f001 ff0e 	bl	800cfdc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <etharp_output+0x4c>
 800b1c6:	4b5f      	ldr	r3, [pc, #380]	; (800b344 <etharp_output+0x1bc>)
 800b1c8:	f240 321d 	movw	r2, #797	; 0x31d
 800b1cc:	4961      	ldr	r1, [pc, #388]	; (800b354 <etharp_output+0x1cc>)
 800b1ce:	485f      	ldr	r0, [pc, #380]	; (800b34c <etharp_output+0x1c4>)
 800b1d0:	f001 ff04 	bl	800cfdc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68f9      	ldr	r1, [r7, #12]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 fed4 	bl	800bf88 <ip4_addr_isbroadcast_u32>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d002      	beq.n	800b1ec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b1e6:	4b5c      	ldr	r3, [pc, #368]	; (800b358 <etharp_output+0x1d0>)
 800b1e8:	61fb      	str	r3, [r7, #28]
 800b1ea:	e09b      	b.n	800b324 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1f4:	2be0      	cmp	r3, #224	; 0xe0
 800b1f6:	d118      	bne.n	800b22a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b200:	235e      	movs	r3, #94	; 0x5e
 800b202:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	3301      	adds	r3, #1
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	3302      	adds	r3, #2
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3303      	adds	r3, #3
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b222:	f107 0310 	add.w	r3, r7, #16
 800b226:	61fb      	str	r3, [r7, #28]
 800b228:	e07c      	b.n	800b324 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3304      	adds	r3, #4
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	405a      	eors	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3308      	adds	r3, #8
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4013      	ands	r3, r2
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d012      	beq.n	800b268 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b248:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d00b      	beq.n	800b268 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	330c      	adds	r3, #12
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	330c      	adds	r3, #12
 800b25e:	61bb      	str	r3, [r7, #24]
 800b260:	e002      	b.n	800b268 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b262:	f06f 0303 	mvn.w	r3, #3
 800b266:	e069      	b.n	800b33c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b268:	4b3c      	ldr	r3, [pc, #240]	; (800b35c <etharp_output+0x1d4>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	4619      	mov	r1, r3
 800b26e:	4a3c      	ldr	r2, [pc, #240]	; (800b360 <etharp_output+0x1d8>)
 800b270:	460b      	mov	r3, r1
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	440b      	add	r3, r1
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	4413      	add	r3, r2
 800b27a:	3314      	adds	r3, #20
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d917      	bls.n	800b2b2 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	4b35      	ldr	r3, [pc, #212]	; (800b35c <etharp_output+0x1d4>)
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	4618      	mov	r0, r3
 800b28c:	4934      	ldr	r1, [pc, #208]	; (800b360 <etharp_output+0x1d8>)
 800b28e:	4603      	mov	r3, r0
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	4403      	add	r3, r0
 800b294:	00db      	lsls	r3, r3, #3
 800b296:	440b      	add	r3, r1
 800b298:	3304      	adds	r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d108      	bne.n	800b2b2 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b2a0:	4b2e      	ldr	r3, [pc, #184]	; (800b35c <etharp_output+0x1d4>)
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	68b9      	ldr	r1, [r7, #8]
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f7ff fed3 	bl	800b054 <etharp_output_to_arp_index>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	e044      	b.n	800b33c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	75fb      	strb	r3, [r7, #23]
 800b2b6:	e02a      	b.n	800b30e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b2b8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b2bc:	4928      	ldr	r1, [pc, #160]	; (800b360 <etharp_output+0x1d8>)
 800b2be:	4613      	mov	r3, r2
 800b2c0:	005b      	lsls	r3, r3, #1
 800b2c2:	4413      	add	r3, r2
 800b2c4:	00db      	lsls	r3, r3, #3
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3314      	adds	r3, #20
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d918      	bls.n	800b302 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	6819      	ldr	r1, [r3, #0]
 800b2d4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b2d8:	4821      	ldr	r0, [pc, #132]	; (800b360 <etharp_output+0x1d8>)
 800b2da:	4613      	mov	r3, r2
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	4413      	add	r3, r2
 800b2e0:	00db      	lsls	r3, r3, #3
 800b2e2:	4403      	add	r3, r0
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b2e8:	4299      	cmp	r1, r3
 800b2ea:	d10a      	bne.n	800b302 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800b2ec:	7dfa      	ldrb	r2, [r7, #23]
 800b2ee:	4b1b      	ldr	r3, [pc, #108]	; (800b35c <etharp_output+0x1d4>)
 800b2f0:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	68b9      	ldr	r1, [r7, #8]
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7ff feab 	bl	800b054 <etharp_output_to_arp_index>
 800b2fe:	4603      	mov	r3, r0
 800b300:	e01c      	b.n	800b33c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b302:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b306:	b2db      	uxtb	r3, r3
 800b308:	3301      	adds	r3, #1
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	75fb      	strb	r3, [r7, #23]
 800b30e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b312:	2b09      	cmp	r3, #9
 800b314:	ddd0      	ble.n	800b2b8 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	69b9      	ldr	r1, [r7, #24]
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 f822 	bl	800b364 <etharp_query>
 800b320:	4603      	mov	r3, r0
 800b322:	e00b      	b.n	800b33c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800b32a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f001 fd59 	bl	800cdec <ethernet_output>
 800b33a:	4603      	mov	r3, r0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3720      	adds	r7, #32
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	0800f3e8 	.word	0x0800f3e8
 800b348:	0800f538 	.word	0x0800f538
 800b34c:	0800f460 	.word	0x0800f460
 800b350:	0800f588 	.word	0x0800f588
 800b354:	0800f528 	.word	0x0800f528
 800b358:	0800fb48 	.word	0x0800fb48
 800b35c:	20008a30 	.word	0x20008a30
 800b360:	20008940 	.word	0x20008940

0800b364 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08c      	sub	sp, #48	; 0x30
 800b368:	af02      	add	r7, sp, #8
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	3329      	adds	r3, #41	; 0x29
 800b374:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b376:	23ff      	movs	r3, #255	; 0xff
 800b378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68f9      	ldr	r1, [r7, #12]
 800b386:	4618      	mov	r0, r3
 800b388:	f000 fdfe 	bl	800bf88 <ip4_addr_isbroadcast_u32>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10c      	bne.n	800b3ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b39a:	2be0      	cmp	r3, #224	; 0xe0
 800b39c:	d006      	beq.n	800b3ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d003      	beq.n	800b3ac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b3ac:	f06f 030f 	mvn.w	r3, #15
 800b3b0:	e10e      	b.n	800b5d0 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	68b8      	ldr	r0, [r7, #8]
 800b3b8:	f7ff fba0 	bl	800aafc <etharp_find_entry>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800b3c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	da02      	bge.n	800b3ce <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800b3c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3cc:	e100      	b.n	800b5d0 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b3ce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b3d2:	4981      	ldr	r1, [pc, #516]	; (800b5d8 <etharp_query+0x274>)
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	4413      	add	r3, r2
 800b3da:	00db      	lsls	r3, r3, #3
 800b3dc:	440b      	add	r3, r1
 800b3de:	3314      	adds	r3, #20
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d117      	bne.n	800b416 <etharp_query+0xb2>
    is_new_entry = 1;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b3ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b3ee:	497a      	ldr	r1, [pc, #488]	; (800b5d8 <etharp_query+0x274>)
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	4413      	add	r3, r2
 800b3f6:	00db      	lsls	r3, r3, #3
 800b3f8:	440b      	add	r3, r1
 800b3fa:	3314      	adds	r3, #20
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b400:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b404:	4974      	ldr	r1, [pc, #464]	; (800b5d8 <etharp_query+0x274>)
 800b406:	4613      	mov	r3, r2
 800b408:	005b      	lsls	r3, r3, #1
 800b40a:	4413      	add	r3, r2
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	440b      	add	r3, r1
 800b410:	3308      	adds	r3, #8
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b416:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b41a:	496f      	ldr	r1, [pc, #444]	; (800b5d8 <etharp_query+0x274>)
 800b41c:	4613      	mov	r3, r2
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	4413      	add	r3, r2
 800b422:	00db      	lsls	r3, r3, #3
 800b424:	440b      	add	r3, r1
 800b426:	3314      	adds	r3, #20
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d012      	beq.n	800b454 <etharp_query+0xf0>
 800b42e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b432:	4969      	ldr	r1, [pc, #420]	; (800b5d8 <etharp_query+0x274>)
 800b434:	4613      	mov	r3, r2
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	4413      	add	r3, r2
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	440b      	add	r3, r1
 800b43e:	3314      	adds	r3, #20
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d806      	bhi.n	800b454 <etharp_query+0xf0>
 800b446:	4b65      	ldr	r3, [pc, #404]	; (800b5dc <etharp_query+0x278>)
 800b448:	f240 32c7 	movw	r2, #967	; 0x3c7
 800b44c:	4964      	ldr	r1, [pc, #400]	; (800b5e0 <etharp_query+0x27c>)
 800b44e:	4865      	ldr	r0, [pc, #404]	; (800b5e4 <etharp_query+0x280>)
 800b450:	f001 fdc4 	bl	800cfdc <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d102      	bne.n	800b460 <etharp_query+0xfc>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10c      	bne.n	800b47a <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b460:	68b9      	ldr	r1, [r7, #8]
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 f974 	bl	800b750 <etharp_request>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d102      	bne.n	800b47a <etharp_query+0x116>
      return result;
 800b474:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b478:	e0aa      	b.n	800b5d0 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d106      	bne.n	800b48e <etharp_query+0x12a>
 800b480:	4b56      	ldr	r3, [pc, #344]	; (800b5dc <etharp_query+0x278>)
 800b482:	f240 32db 	movw	r2, #987	; 0x3db
 800b486:	4958      	ldr	r1, [pc, #352]	; (800b5e8 <etharp_query+0x284>)
 800b488:	4856      	ldr	r0, [pc, #344]	; (800b5e4 <etharp_query+0x280>)
 800b48a:	f001 fda7 	bl	800cfdc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b48e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b492:	4951      	ldr	r1, [pc, #324]	; (800b5d8 <etharp_query+0x274>)
 800b494:	4613      	mov	r3, r2
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	4413      	add	r3, r2
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	440b      	add	r3, r1
 800b49e:	3314      	adds	r3, #20
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d918      	bls.n	800b4d8 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800b4a6:	7cfa      	ldrb	r2, [r7, #19]
 800b4a8:	4b50      	ldr	r3, [pc, #320]	; (800b5ec <etharp_query+0x288>)
 800b4aa:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b4ac:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	4413      	add	r3, r2
 800b4b6:	00db      	lsls	r3, r3, #3
 800b4b8:	3308      	adds	r3, #8
 800b4ba:	4a47      	ldr	r2, [pc, #284]	; (800b5d8 <etharp_query+0x274>)
 800b4bc:	4413      	add	r3, r2
 800b4be:	3304      	adds	r3, #4
 800b4c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4c4:	9200      	str	r2, [sp, #0]
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f001 fc8e 	bl	800cdec <ethernet_output>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4d6:	e079      	b.n	800b5cc <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b4d8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b4dc:	493e      	ldr	r1, [pc, #248]	; (800b5d8 <etharp_query+0x274>)
 800b4de:	4613      	mov	r3, r2
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	4413      	add	r3, r2
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	440b      	add	r3, r1
 800b4e8:	3314      	adds	r3, #20
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d16d      	bne.n	800b5cc <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b4f8:	e01a      	b.n	800b530 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	895a      	ldrh	r2, [r3, #10]
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	891b      	ldrh	r3, [r3, #8]
 800b502:	429a      	cmp	r2, r3
 800b504:	d10a      	bne.n	800b51c <etharp_query+0x1b8>
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d006      	beq.n	800b51c <etharp_query+0x1b8>
 800b50e:	4b33      	ldr	r3, [pc, #204]	; (800b5dc <etharp_query+0x278>)
 800b510:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800b514:	4936      	ldr	r1, [pc, #216]	; (800b5f0 <etharp_query+0x28c>)
 800b516:	4833      	ldr	r0, [pc, #204]	; (800b5e4 <etharp_query+0x280>)
 800b518:	f001 fd60 	bl	800cfdc <iprintf>
      if (p->type != PBUF_ROM) {
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	7b1b      	ldrb	r3, [r3, #12]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d002      	beq.n	800b52a <etharp_query+0x1c6>
        copy_needed = 1;
 800b524:	2301      	movs	r3, #1
 800b526:	61bb      	str	r3, [r7, #24]
        break;
 800b528:	e005      	b.n	800b536 <etharp_query+0x1d2>
      }
      p = p->next;
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1e1      	bne.n	800b4fa <etharp_query+0x196>
    }
    if (copy_needed) {
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d017      	beq.n	800b56c <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	891b      	ldrh	r3, [r3, #8]
 800b540:	2200      	movs	r2, #0
 800b542:	4619      	mov	r1, r3
 800b544:	2002      	movs	r0, #2
 800b546:	f7f8 ff91 	bl	800446c <pbuf_alloc>
 800b54a:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d011      	beq.n	800b576 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800b552:	6879      	ldr	r1, [r7, #4]
 800b554:	69f8      	ldr	r0, [r7, #28]
 800b556:	f7f9 fc33 	bl	8004dc0 <pbuf_copy>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00a      	beq.n	800b576 <etharp_query+0x212>
          pbuf_free(p);
 800b560:	69f8      	ldr	r0, [r7, #28]
 800b562:	f7f9 fafb 	bl	8004b5c <pbuf_free>
          p = NULL;
 800b566:	2300      	movs	r3, #0
 800b568:	61fb      	str	r3, [r7, #28]
 800b56a:	e004      	b.n	800b576 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b570:	69f8      	ldr	r0, [r7, #28]
 800b572:	f7f9 fb9d 	bl	8004cb0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d024      	beq.n	800b5c6 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b57c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b580:	4915      	ldr	r1, [pc, #84]	; (800b5d8 <etharp_query+0x274>)
 800b582:	4613      	mov	r3, r2
 800b584:	005b      	lsls	r3, r3, #1
 800b586:	4413      	add	r3, r2
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	440b      	add	r3, r1
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00b      	beq.n	800b5aa <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800b592:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b596:	4910      	ldr	r1, [pc, #64]	; (800b5d8 <etharp_query+0x274>)
 800b598:	4613      	mov	r3, r2
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	4413      	add	r3, r2
 800b59e:	00db      	lsls	r3, r3, #3
 800b5a0:	440b      	add	r3, r1
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7f9 fad9 	bl	8004b5c <pbuf_free>
      }
      arp_table[i].q = p;
 800b5aa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b5ae:	490a      	ldr	r1, [pc, #40]	; (800b5d8 <etharp_query+0x274>)
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	4413      	add	r3, r2
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	440b      	add	r3, r1
 800b5ba:	69fa      	ldr	r2, [r7, #28]
 800b5bc:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5c4:	e002      	b.n	800b5cc <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b5c6:	23ff      	movs	r3, #255	; 0xff
 800b5c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b5cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3728      	adds	r7, #40	; 0x28
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20008940 	.word	0x20008940
 800b5dc:	0800f3e8 	.word	0x0800f3e8
 800b5e0:	0800f594 	.word	0x0800f594
 800b5e4:	0800f460 	.word	0x0800f460
 800b5e8:	0800f588 	.word	0x0800f588
 800b5ec:	20008a30 	.word	0x20008a30
 800b5f0:	0800f5bc 	.word	0x0800f5bc

0800b5f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08a      	sub	sp, #40	; 0x28
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b602:	2300      	movs	r3, #0
 800b604:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d106      	bne.n	800b61a <etharp_raw+0x26>
 800b60c:	4b3a      	ldr	r3, [pc, #232]	; (800b6f8 <etharp_raw+0x104>)
 800b60e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800b612:	493a      	ldr	r1, [pc, #232]	; (800b6fc <etharp_raw+0x108>)
 800b614:	483a      	ldr	r0, [pc, #232]	; (800b700 <etharp_raw+0x10c>)
 800b616:	f001 fce1 	bl	800cfdc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b61a:	2200      	movs	r2, #0
 800b61c:	211c      	movs	r1, #28
 800b61e:	2002      	movs	r0, #2
 800b620:	f7f8 ff24 	bl	800446c <pbuf_alloc>
 800b624:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d102      	bne.n	800b632 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b62c:	f04f 33ff 	mov.w	r3, #4294967295
 800b630:	e05d      	b.n	800b6ee <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	895b      	ldrh	r3, [r3, #10]
 800b636:	2b1b      	cmp	r3, #27
 800b638:	d806      	bhi.n	800b648 <etharp_raw+0x54>
 800b63a:	4b2f      	ldr	r3, [pc, #188]	; (800b6f8 <etharp_raw+0x104>)
 800b63c:	f240 4263 	movw	r2, #1123	; 0x463
 800b640:	4930      	ldr	r1, [pc, #192]	; (800b704 <etharp_raw+0x110>)
 800b642:	482f      	ldr	r0, [pc, #188]	; (800b700 <etharp_raw+0x10c>)
 800b644:	f001 fcca 	bl	800cfdc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b64e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b650:	4618      	mov	r0, r3
 800b652:	f7f8 f950 	bl	80038f6 <lwip_htons>
 800b656:	4603      	mov	r3, r0
 800b658:	461a      	mov	r2, r3
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b664:	2b06      	cmp	r3, #6
 800b666:	d006      	beq.n	800b676 <etharp_raw+0x82>
 800b668:	4b23      	ldr	r3, [pc, #140]	; (800b6f8 <etharp_raw+0x104>)
 800b66a:	f240 426a 	movw	r2, #1130	; 0x46a
 800b66e:	4926      	ldr	r1, [pc, #152]	; (800b708 <etharp_raw+0x114>)
 800b670:	4823      	ldr	r0, [pc, #140]	; (800b700 <etharp_raw+0x10c>)
 800b672:	f001 fcb3 	bl	800cfdc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	3308      	adds	r3, #8
 800b67a:	2206      	movs	r2, #6
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f001 fd98 	bl	800d1b4 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	3312      	adds	r3, #18
 800b688:	2206      	movs	r2, #6
 800b68a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b68c:	4618      	mov	r0, r3
 800b68e:	f001 fd91 	bl	800d1b4 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	330e      	adds	r3, #14
 800b696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b698:	6812      	ldr	r2, [r2, #0]
 800b69a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	3318      	adds	r3, #24
 800b6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a2:	6812      	ldr	r2, [r2, #0]
 800b6a4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	701a      	strb	r2, [r3, #0]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f042 0201 	orr.w	r2, r2, #1
 800b6b2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f042 0208 	orr.w	r2, r2, #8
 800b6bc:	709a      	strb	r2, [r3, #2]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2206      	movs	r2, #6
 800b6c6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2204      	movs	r2, #4
 800b6cc:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b6ce:	f640 0306 	movw	r3, #2054	; 0x806
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	69b9      	ldr	r1, [r7, #24]
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f001 fb86 	bl	800cdec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b6e0:	69b8      	ldr	r0, [r7, #24]
 800b6e2:	f7f9 fa3b 	bl	8004b5c <pbuf_free>
  p = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b6ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3720      	adds	r7, #32
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	0800f3e8 	.word	0x0800f3e8
 800b6fc:	0800f538 	.word	0x0800f538
 800b700:	0800f460 	.word	0x0800f460
 800b704:	0800f5d8 	.word	0x0800f5d8
 800b708:	0800f60c 	.word	0x0800f60c

0800b70c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b088      	sub	sp, #32
 800b710:	af04      	add	r7, sp, #16
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b728:	2201      	movs	r2, #1
 800b72a:	9203      	str	r2, [sp, #12]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	9202      	str	r2, [sp, #8]
 800b730:	4a06      	ldr	r2, [pc, #24]	; (800b74c <etharp_request_dst+0x40>)
 800b732:	9201      	str	r2, [sp, #4]
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	4603      	mov	r3, r0
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f7ff ff5a 	bl	800b5f4 <etharp_raw>
 800b740:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	0800fb50 	.word	0x0800fb50

0800b750 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b75a:	4a05      	ldr	r2, [pc, #20]	; (800b770 <etharp_request+0x20>)
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff ffd4 	bl	800b70c <etharp_request_dst>
 800b764:	4603      	mov	r3, r0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	0800fb48 	.word	0x0800fb48

0800b774 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08e      	sub	sp, #56	; 0x38
 800b778:	af04      	add	r7, sp, #16
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b77e:	4b7a      	ldr	r3, [pc, #488]	; (800b968 <icmp_input+0x1f4>)
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	f003 030f 	and.w	r3, r3, #15
 800b78e:	b29b      	uxth	r3, r3
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800b794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b796:	2b13      	cmp	r3, #19
 800b798:	f240 80d1 	bls.w	800b93e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	895b      	ldrh	r3, [r3, #10]
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	f240 80ce 	bls.w	800b942 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b7b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f000 80bb 	beq.w	800b930 <icmp_input+0x1bc>
 800b7ba:	2b08      	cmp	r3, #8
 800b7bc:	f040 80bb 	bne.w	800b936 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800b7c0:	4b6a      	ldr	r3, [pc, #424]	; (800b96c <icmp_input+0x1f8>)
 800b7c2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b7c4:	4b68      	ldr	r3, [pc, #416]	; (800b968 <icmp_input+0x1f4>)
 800b7c6:	695b      	ldr	r3, [r3, #20]
 800b7c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7cc:	2be0      	cmp	r3, #224	; 0xe0
 800b7ce:	f000 80bf 	beq.w	800b950 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b7d2:	4b65      	ldr	r3, [pc, #404]	; (800b968 <icmp_input+0x1f4>)
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	4a64      	ldr	r2, [pc, #400]	; (800b968 <icmp_input+0x1f4>)
 800b7d8:	6812      	ldr	r2, [r2, #0]
 800b7da:	4611      	mov	r1, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 fbd3 	bl	800bf88 <ip4_addr_isbroadcast_u32>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f040 80b5 	bne.w	800b954 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	891b      	ldrh	r3, [r3, #8]
 800b7ee:	2b07      	cmp	r3, #7
 800b7f0:	f240 80a9 	bls.w	800b946 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b7f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7f6:	330e      	adds	r3, #14
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	b21b      	sxth	r3, r3
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7f9 f988 	bl	8004b14 <pbuf_header>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d046      	beq.n	800b898 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	891a      	ldrh	r2, [r3, #8]
 800b80e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b810:	4413      	add	r3, r2
 800b812:	b29b      	uxth	r3, r3
 800b814:	2200      	movs	r2, #0
 800b816:	4619      	mov	r1, r3
 800b818:	2002      	movs	r0, #2
 800b81a:	f7f8 fe27 	bl	800446c <pbuf_alloc>
 800b81e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 8098 	beq.w	800b958 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	895b      	ldrh	r3, [r3, #10]
 800b82c:	461a      	mov	r2, r3
 800b82e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b830:	3308      	adds	r3, #8
 800b832:	429a      	cmp	r2, r3
 800b834:	d203      	bcs.n	800b83e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800b836:	69b8      	ldr	r0, [r7, #24]
 800b838:	f7f9 f990 	bl	8004b5c <pbuf_free>
        goto icmperr;
 800b83c:	e08d      	b.n	800b95a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b846:	4618      	mov	r0, r3
 800b848:	f001 fcb4 	bl	800d1b4 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800b84c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b84e:	425b      	negs	r3, r3
 800b850:	b29b      	uxth	r3, r3
 800b852:	b21b      	sxth	r3, r3
 800b854:	4619      	mov	r1, r3
 800b856:	69b8      	ldr	r0, [r7, #24]
 800b858:	f7f9 f95c 	bl	8004b14 <pbuf_header>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d009      	beq.n	800b876 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b862:	4b43      	ldr	r3, [pc, #268]	; (800b970 <icmp_input+0x1fc>)
 800b864:	22af      	movs	r2, #175	; 0xaf
 800b866:	4943      	ldr	r1, [pc, #268]	; (800b974 <icmp_input+0x200>)
 800b868:	4843      	ldr	r0, [pc, #268]	; (800b978 <icmp_input+0x204>)
 800b86a:	f001 fbb7 	bl	800cfdc <iprintf>
        pbuf_free(r);
 800b86e:	69b8      	ldr	r0, [r7, #24]
 800b870:	f7f9 f974 	bl	8004b5c <pbuf_free>
        goto icmperr;
 800b874:	e071      	b.n	800b95a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800b876:	6879      	ldr	r1, [r7, #4]
 800b878:	69b8      	ldr	r0, [r7, #24]
 800b87a:	f7f9 faa1 	bl	8004dc0 <pbuf_copy>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d003      	beq.n	800b88c <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800b884:	69b8      	ldr	r0, [r7, #24]
 800b886:	f7f9 f969 	bl	8004b5c <pbuf_free>
        goto icmperr;
 800b88a:	e066      	b.n	800b95a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7f9 f965 	bl	8004b5c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	607b      	str	r3, [r7, #4]
 800b896:	e015      	b.n	800b8c4 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b89a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800b89e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b8a2:	33f2      	adds	r3, #242	; 0xf2
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	b21b      	sxth	r3, r3
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7f9 f932 	bl	8004b14 <pbuf_header>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d006      	beq.n	800b8c4 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b8b6:	4b2e      	ldr	r3, [pc, #184]	; (800b970 <icmp_input+0x1fc>)
 800b8b8:	22c0      	movs	r2, #192	; 0xc0
 800b8ba:	4930      	ldr	r1, [pc, #192]	; (800b97c <icmp_input+0x208>)
 800b8bc:	482e      	ldr	r0, [pc, #184]	; (800b978 <icmp_input+0x204>)
 800b8be:	f001 fb8d 	bl	800cfdc <iprintf>
        goto icmperr;
 800b8c2:	e04a      	b.n	800b95a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800b8ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7f9 f91f 	bl	8004b14 <pbuf_header>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d12b      	bne.n	800b934 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b8ea:	4b1f      	ldr	r3, [pc, #124]	; (800b968 <icmp_input+0x1f4>)
 800b8ec:	691a      	ldr	r2, [r3, #16]
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	709a      	strb	r2, [r3, #2]
 800b8fe:	2200      	movs	r2, #0
 800b900:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	22ff      	movs	r2, #255	; 0xff
 800b906:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2200      	movs	r2, #0
 800b90c:	729a      	strb	r2, [r3, #10]
 800b90e:	2200      	movs	r2, #0
 800b910:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	9302      	str	r3, [sp, #8]
 800b916:	2301      	movs	r3, #1
 800b918:	9301      	str	r3, [sp, #4]
 800b91a:	2300      	movs	r3, #0
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	23ff      	movs	r3, #255	; 0xff
 800b920:	2200      	movs	r2, #0
 800b922:	69f9      	ldr	r1, [r7, #28]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fa5d 	bl	800bde4 <ip4_output_if>
 800b92a:	4603      	mov	r3, r0
 800b92c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800b92e:	e001      	b.n	800b934 <icmp_input+0x1c0>
    break;
 800b930:	bf00      	nop
 800b932:	e000      	b.n	800b936 <icmp_input+0x1c2>
    break;
 800b934:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7f9 f910 	bl	8004b5c <pbuf_free>
  return;
 800b93c:	e011      	b.n	800b962 <icmp_input+0x1ee>
    goto lenerr;
 800b93e:	bf00      	nop
 800b940:	e002      	b.n	800b948 <icmp_input+0x1d4>
    goto lenerr;
 800b942:	bf00      	nop
 800b944:	e000      	b.n	800b948 <icmp_input+0x1d4>
      goto lenerr;
 800b946:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7f9 f907 	bl	8004b5c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b94e:	e008      	b.n	800b962 <icmp_input+0x1ee>
      goto icmperr;
 800b950:	bf00      	nop
 800b952:	e002      	b.n	800b95a <icmp_input+0x1e6>
      goto icmperr;
 800b954:	bf00      	nop
 800b956:	e000      	b.n	800b95a <icmp_input+0x1e6>
        goto icmperr;
 800b958:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7f9 f8fe 	bl	8004b5c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b960:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b962:	3728      	adds	r7, #40	; 0x28
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	200031c4 	.word	0x200031c4
 800b96c:	200031d8 	.word	0x200031d8
 800b970:	0800f650 	.word	0x0800f650
 800b974:	0800f688 	.word	0x0800f688
 800b978:	0800f6c0 	.word	0x0800f6c0
 800b97c:	0800f6e8 	.word	0x0800f6e8

0800b980 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b98c:	78fb      	ldrb	r3, [r7, #3]
 800b98e:	461a      	mov	r2, r3
 800b990:	2103      	movs	r1, #3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f814 	bl	800b9c0 <icmp_send_response>
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b9ac:	78fb      	ldrb	r3, [r7, #3]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	210b      	movs	r1, #11
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f804 	bl	800b9c0 <icmp_send_response>
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b08c      	sub	sp, #48	; 0x30
 800b9c4:	af04      	add	r7, sp, #16
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	2124      	movs	r1, #36	; 0x24
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	f7f8 fd49 	bl	800446c <pbuf_alloc>
 800b9da:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d04c      	beq.n	800ba7c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	895b      	ldrh	r3, [r3, #10]
 800b9e6:	2b23      	cmp	r3, #35	; 0x23
 800b9e8:	d806      	bhi.n	800b9f8 <icmp_send_response+0x38>
 800b9ea:	4b26      	ldr	r3, [pc, #152]	; (800ba84 <icmp_send_response+0xc4>)
 800b9ec:	f240 1261 	movw	r2, #353	; 0x161
 800b9f0:	4925      	ldr	r1, [pc, #148]	; (800ba88 <icmp_send_response+0xc8>)
 800b9f2:	4826      	ldr	r0, [pc, #152]	; (800ba8c <icmp_send_response+0xcc>)
 800b9f4:	f001 faf2 	bl	800cfdc <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	78fa      	ldrb	r2, [r7, #3]
 800ba08:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	78ba      	ldrb	r2, [r7, #2]
 800ba0e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2200      	movs	r2, #0
 800ba14:	711a      	strb	r2, [r3, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	719a      	strb	r2, [r3, #6]
 800ba20:	2200      	movs	r2, #0
 800ba22:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	f103 0008 	add.w	r0, r3, #8
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	221c      	movs	r2, #28
 800ba32:	4619      	mov	r1, r3
 800ba34:	f001 fbbe 	bl	800d1b4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ba3e:	f107 030c 	add.w	r3, r7, #12
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 f824 	bl	800ba90 <ip4_route>
 800ba48:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d011      	beq.n	800ba74 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2200      	movs	r2, #0
 800ba54:	709a      	strb	r2, [r3, #2]
 800ba56:	2200      	movs	r2, #0
 800ba58:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ba5a:	f107 020c 	add.w	r2, r7, #12
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	9302      	str	r3, [sp, #8]
 800ba62:	2301      	movs	r3, #1
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	2300      	movs	r3, #0
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	23ff      	movs	r3, #255	; 0xff
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	69f8      	ldr	r0, [r7, #28]
 800ba70:	f000 f9b8 	bl	800bde4 <ip4_output_if>
  }
  pbuf_free(q);
 800ba74:	69f8      	ldr	r0, [r7, #28]
 800ba76:	f7f9 f871 	bl	8004b5c <pbuf_free>
 800ba7a:	e000      	b.n	800ba7e <icmp_send_response+0xbe>
    return;
 800ba7c:	bf00      	nop
}
 800ba7e:	3720      	adds	r7, #32
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	0800f650 	.word	0x0800f650
 800ba88:	0800f71c 	.word	0x0800f71c
 800ba8c:	0800f6c0 	.word	0x0800f6c0

0800ba90 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ba98:	4b30      	ldr	r3, [pc, #192]	; (800bb5c <ip4_route+0xcc>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	e036      	b.n	800bb0e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	d02b      	beq.n	800bb08 <ip4_route+0x78>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bab6:	089b      	lsrs	r3, r3, #2
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	b2db      	uxtb	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d022      	beq.n	800bb08 <ip4_route+0x78>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3304      	adds	r3, #4
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d01d      	beq.n	800bb08 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	3304      	adds	r3, #4
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	405a      	eors	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	3308      	adds	r3, #8
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4013      	ands	r3, r2
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	e033      	b.n	800bb50 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800baee:	f003 0302 	and.w	r3, r3, #2
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d108      	bne.n	800bb08 <ip4_route+0x78>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	330c      	adds	r3, #12
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d101      	bne.n	800bb08 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	e023      	b.n	800bb50 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1c5      	bne.n	800baa0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bb14:	4b12      	ldr	r3, [pc, #72]	; (800bb60 <ip4_route+0xd0>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d015      	beq.n	800bb48 <ip4_route+0xb8>
 800bb1c:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <ip4_route+0xd0>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00d      	beq.n	800bb48 <ip4_route+0xb8>
 800bb2c:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <ip4_route+0xd0>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb34:	f003 0304 	and.w	r3, r3, #4
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d005      	beq.n	800bb48 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800bb3c:	4b08      	ldr	r3, [pc, #32]	; (800bb60 <ip4_route+0xd0>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3304      	adds	r3, #4
 800bb42:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	e001      	b.n	800bb50 <ip4_route+0xc0>
  }

  return netif_default;
 800bb4c:	4b04      	ldr	r3, [pc, #16]	; (800bb60 <ip4_route+0xd0>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bc80      	pop	{r7}
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	200088d4 	.word	0x200088d4
 800bb60:	200088d8 	.word	0x200088d8

0800bb64 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	091b      	lsrs	r3, r3, #4
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	d004      	beq.n	800bb8a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7f8 ffeb 	bl	8004b5c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	e124      	b.n	800bdd4 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	f003 030f 	and.w	r3, r3, #15
 800bb94:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800bb96:	897b      	ldrh	r3, [r7, #10]
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	885b      	ldrh	r3, [r3, #2]
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7f7 fea7 	bl	80038f6 <lwip_htons>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	891b      	ldrh	r3, [r3, #8]
 800bbb0:	893a      	ldrh	r2, [r7, #8]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d204      	bcs.n	800bbc0 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800bbb6:	893b      	ldrh	r3, [r7, #8]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f7f8 fe5a 	bl	8004874 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	895b      	ldrh	r3, [r3, #10]
 800bbc4:	897a      	ldrh	r2, [r7, #10]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d807      	bhi.n	800bbda <ip4_input+0x76>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	891b      	ldrh	r3, [r3, #8]
 800bbce:	893a      	ldrh	r2, [r7, #8]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d802      	bhi.n	800bbda <ip4_input+0x76>
 800bbd4:	897b      	ldrh	r3, [r7, #10]
 800bbd6:	2b13      	cmp	r3, #19
 800bbd8:	d804      	bhi.n	800bbe4 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7f8 ffbe 	bl	8004b5c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e0f7      	b.n	800bdd4 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	4a7c      	ldr	r2, [pc, #496]	; (800bddc <ip4_input+0x278>)
 800bbea:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	4a7a      	ldr	r2, [pc, #488]	; (800bddc <ip4_input+0x278>)
 800bbf2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bbf4:	4b79      	ldr	r3, [pc, #484]	; (800bddc <ip4_input+0x278>)
 800bbf6:	695b      	ldr	r3, [r3, #20]
 800bbf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbfc:	2be0      	cmp	r3, #224	; 0xe0
 800bbfe:	d112      	bne.n	800bc26 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d007      	beq.n	800bc20 <ip4_input+0xbc>
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	3304      	adds	r3, #4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <ip4_input+0xbc>
      netif = inp;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	613b      	str	r3, [r7, #16]
 800bc1e:	e041      	b.n	800bca4 <ip4_input+0x140>
    } else {
      netif = NULL;
 800bc20:	2300      	movs	r3, #0
 800bc22:	613b      	str	r3, [r7, #16]
 800bc24:	e03e      	b.n	800bca4 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800bc26:	2301      	movs	r3, #1
 800bc28:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc34:	f003 0301 	and.w	r3, r3, #1
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d014      	beq.n	800bc68 <ip4_input+0x104>
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	3304      	adds	r3, #4
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00f      	beq.n	800bc68 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bc48:	4b64      	ldr	r3, [pc, #400]	; (800bddc <ip4_input+0x278>)
 800bc4a:	695a      	ldr	r2, [r3, #20]
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d026      	beq.n	800bca4 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bc56:	4b61      	ldr	r3, [pc, #388]	; (800bddc <ip4_input+0x278>)
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	6939      	ldr	r1, [r7, #16]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 f993 	bl	800bf88 <ip4_addr_isbroadcast_u32>
 800bc62:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d11d      	bne.n	800bca4 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00d      	beq.n	800bc8a <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800bc6e:	4b5b      	ldr	r3, [pc, #364]	; (800bddc <ip4_input+0x278>)
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b7f      	cmp	r3, #127	; 0x7f
 800bc76:	d102      	bne.n	800bc7e <ip4_input+0x11a>
          netif = NULL;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	613b      	str	r3, [r7, #16]
          break;
 800bc7c:	e012      	b.n	800bca4 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800bc82:	4b57      	ldr	r3, [pc, #348]	; (800bde0 <ip4_input+0x27c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	613b      	str	r3, [r7, #16]
 800bc88:	e002      	b.n	800bc90 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d102      	bne.n	800bc9e <ip4_input+0x13a>
        netif = netif->next;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1c4      	bne.n	800bc2e <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bca4:	4b4d      	ldr	r3, [pc, #308]	; (800bddc <ip4_input+0x278>)
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 f96c 	bl	800bf88 <ip4_addr_isbroadcast_u32>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d105      	bne.n	800bcc2 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800bcb6:	4b49      	ldr	r3, [pc, #292]	; (800bddc <ip4_input+0x278>)
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bcbe:	2be0      	cmp	r3, #224	; 0xe0
 800bcc0:	d104      	bne.n	800bccc <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7f8 ff4a 	bl	8004b5c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	e083      	b.n	800bdd4 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d104      	bne.n	800bcdc <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7f8 ff42 	bl	8004b5c <pbuf_free>
    return ERR_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e07b      	b.n	800bdd4 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	88db      	ldrh	r3, [r3, #6]
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	461a      	mov	r2, r3
 800bce4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800bce8:	4013      	ands	r3, r2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00b      	beq.n	800bd06 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fd1e 	bl	800c730 <ip4_reass>
 800bcf4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <ip4_input+0x19c>
      return ERR_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e069      	b.n	800bdd4 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800bd06:	4a35      	ldr	r2, [pc, #212]	; (800bddc <ip4_input+0x278>)
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800bd0c:	4a33      	ldr	r2, [pc, #204]	; (800bddc <ip4_input+0x278>)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800bd12:	4a32      	ldr	r2, [pc, #200]	; (800bddc <ip4_input+0x278>)
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	f003 030f 	and.w	r3, r3, #15
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	4b2c      	ldr	r3, [pc, #176]	; (800bddc <ip4_input+0x278>)
 800bd2a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800bd2c:	897b      	ldrh	r3, [r7, #10]
 800bd2e:	425b      	negs	r3, r3
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	b21b      	sxth	r3, r3
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7f8 feec 	bl	8004b14 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	7a5b      	ldrb	r3, [r3, #9]
 800bd40:	2b11      	cmp	r3, #17
 800bd42:	d006      	beq.n	800bd52 <ip4_input+0x1ee>
 800bd44:	2b11      	cmp	r3, #17
 800bd46:	dc13      	bgt.n	800bd70 <ip4_input+0x20c>
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d00c      	beq.n	800bd66 <ip4_input+0x202>
 800bd4c:	2b06      	cmp	r3, #6
 800bd4e:	d005      	beq.n	800bd5c <ip4_input+0x1f8>
 800bd50:	e00e      	b.n	800bd70 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7fe fce3 	bl	800a720 <udp_input>
      break;
 800bd5a:	e028      	b.n	800bdae <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7fa fd9c 	bl	800689c <tcp_input>
      break;
 800bd64:	e023      	b.n	800bdae <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff fd03 	bl	800b774 <icmp_input>
      break;
 800bd6e:	e01e      	b.n	800bdae <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bd70:	4b1a      	ldr	r3, [pc, #104]	; (800bddc <ip4_input+0x278>)
 800bd72:	695b      	ldr	r3, [r3, #20]
 800bd74:	6939      	ldr	r1, [r7, #16]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 f906 	bl	800bf88 <ip4_addr_isbroadcast_u32>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d112      	bne.n	800bda8 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bd82:	4b16      	ldr	r3, [pc, #88]	; (800bddc <ip4_input+0x278>)
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bd8a:	2be0      	cmp	r3, #224	; 0xe0
 800bd8c:	d00c      	beq.n	800bda8 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800bd8e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bd92:	4619      	mov	r1, r3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7f8 fecf 	bl	8004b38 <pbuf_header_force>
        p->payload = iphdr;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800bda0:	2102      	movs	r1, #2
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7ff fdec 	bl	800b980 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7f8 fed7 	bl	8004b5c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800bdae:	4b0b      	ldr	r3, [pc, #44]	; (800bddc <ip4_input+0x278>)
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800bdb4:	4b09      	ldr	r3, [pc, #36]	; (800bddc <ip4_input+0x278>)
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800bdba:	4b08      	ldr	r3, [pc, #32]	; (800bddc <ip4_input+0x278>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800bdc0:	4b06      	ldr	r3, [pc, #24]	; (800bddc <ip4_input+0x278>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800bdc6:	4b05      	ldr	r3, [pc, #20]	; (800bddc <ip4_input+0x278>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800bdcc:	4b03      	ldr	r3, [pc, #12]	; (800bddc <ip4_input+0x278>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3718      	adds	r7, #24
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	200031c4 	.word	0x200031c4
 800bde0:	200088d4 	.word	0x200088d4

0800bde4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08a      	sub	sp, #40	; 0x28
 800bde8:	af04      	add	r7, sp, #16
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d009      	beq.n	800be10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d003      	beq.n	800be0a <ip4_output_if+0x26>
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d102      	bne.n	800be10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800be0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0c:	3304      	adds	r3, #4
 800be0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800be10:	78fa      	ldrb	r2, [r7, #3]
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	9302      	str	r3, [sp, #8]
 800be16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be1a:	9301      	str	r3, [sp, #4]
 800be1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	4613      	mov	r3, r2
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	6979      	ldr	r1, [r7, #20]
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 f805 	bl	800be38 <ip4_output_if_src>
 800be2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800be30:	4618      	mov	r0, r3
 800be32:	3718      	adds	r7, #24
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	89db      	ldrh	r3, [r3, #14]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d006      	beq.n	800be5c <ip4_output_if_src+0x24>
 800be4e:	4b48      	ldr	r3, [pc, #288]	; (800bf70 <ip4_output_if_src+0x138>)
 800be50:	f240 3233 	movw	r2, #819	; 0x333
 800be54:	4947      	ldr	r1, [pc, #284]	; (800bf74 <ip4_output_if_src+0x13c>)
 800be56:	4848      	ldr	r0, [pc, #288]	; (800bf78 <ip4_output_if_src+0x140>)
 800be58:	f001 f8c0 	bl	800cfdc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d060      	beq.n	800bf24 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800be62:	2314      	movs	r3, #20
 800be64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800be66:	2114      	movs	r1, #20
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7f8 fe53 	bl	8004b14 <pbuf_header>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800be74:	f06f 0301 	mvn.w	r3, #1
 800be78:	e075      	b.n	800bf66 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	895b      	ldrh	r3, [r3, #10]
 800be84:	2b13      	cmp	r3, #19
 800be86:	d806      	bhi.n	800be96 <ip4_output_if_src+0x5e>
 800be88:	4b39      	ldr	r3, [pc, #228]	; (800bf70 <ip4_output_if_src+0x138>)
 800be8a:	f44f 7258 	mov.w	r2, #864	; 0x360
 800be8e:	493b      	ldr	r1, [pc, #236]	; (800bf7c <ip4_output_if_src+0x144>)
 800be90:	4839      	ldr	r0, [pc, #228]	; (800bf78 <ip4_output_if_src+0x140>)
 800be92:	f001 f8a3 	bl	800cfdc <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	78fa      	ldrb	r2, [r7, #3]
 800be9a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bea2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800beac:	8b7b      	ldrh	r3, [r7, #26]
 800beae:	089b      	lsrs	r3, r3, #2
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bec4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	891b      	ldrh	r3, [r3, #8]
 800beca:	4618      	mov	r0, r3
 800becc:	f7f7 fd13 	bl	80038f6 <lwip_htons>
 800bed0:	4603      	mov	r3, r0
 800bed2:	461a      	mov	r2, r3
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	2200      	movs	r2, #0
 800bedc:	719a      	strb	r2, [r3, #6]
 800bede:	2200      	movs	r2, #0
 800bee0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800bee2:	4b27      	ldr	r3, [pc, #156]	; (800bf80 <ip4_output_if_src+0x148>)
 800bee4:	881b      	ldrh	r3, [r3, #0]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f7 fd05 	bl	80038f6 <lwip_htons>
 800beec:	4603      	mov	r3, r0
 800beee:	461a      	mov	r2, r3
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800bef4:	4b22      	ldr	r3, [pc, #136]	; (800bf80 <ip4_output_if_src+0x148>)
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	b29a      	uxth	r2, r3
 800befc:	4b20      	ldr	r3, [pc, #128]	; (800bf80 <ip4_output_if_src+0x148>)
 800befe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d104      	bne.n	800bf10 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800bf06:	4b1f      	ldr	r3, [pc, #124]	; (800bf84 <ip4_output_if_src+0x14c>)
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	60da      	str	r2, [r3, #12]
 800bf0e:	e003      	b.n	800bf18 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	729a      	strb	r2, [r3, #10]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	72da      	strb	r2, [r3, #11]
 800bf22:	e008      	b.n	800bf36 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800bf30:	f107 0314 	add.w	r3, r7, #20
 800bf34:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800bf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00c      	beq.n	800bf58 <ip4_output_if_src+0x120>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	891a      	ldrh	r2, [r3, #8]
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d906      	bls.n	800bf58 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f000 fd98 	bl	800ca84 <ip4_frag>
 800bf54:	4603      	mov	r3, r0
 800bf56:	e006      	b.n	800bf66 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	68f9      	ldr	r1, [r7, #12]
 800bf60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf62:	4798      	blx	r3
 800bf64:	4603      	mov	r3, r0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3720      	adds	r7, #32
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	0800f748 	.word	0x0800f748
 800bf74:	0800f77c 	.word	0x0800f77c
 800bf78:	0800f788 	.word	0x0800f788
 800bf7c:	0800f7b0 	.word	0x0800f7b0
 800bf80:	20008a32 	.word	0x20008a32
 800bf84:	0800fb44 	.word	0x0800fb44

0800bf88 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf9c:	d002      	beq.n	800bfa4 <ip4_addr_isbroadcast_u32+0x1c>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e02a      	b.n	800bffe <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bfae:	f003 0302 	and.w	r3, r3, #2
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d101      	bne.n	800bfba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	e021      	b.n	800bffe <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d101      	bne.n	800bfca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e019      	b.n	800bffe <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	405a      	eors	r2, r3
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4013      	ands	r3, r2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10d      	bne.n	800bffc <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	43da      	mvns	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	3308      	adds	r3, #8
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d101      	bne.n	800bffc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e000      	b.n	800bffe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800bffc:	2300      	movs	r3, #0
  }
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	bc80      	pop	{r7}
 800c006:	4770      	bx	lr

0800c008 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800c010:	2210      	movs	r2, #16
 800c012:	4904      	ldr	r1, [pc, #16]	; (800c024 <ip4addr_ntoa+0x1c>)
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f807 	bl	800c028 <ip4addr_ntoa_r>
 800c01a:	4603      	mov	r3, r0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	20008a34 	.word	0x20008a34

0800c028 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800c028:	b480      	push	{r7}
 800c02a:	b08d      	sub	sp, #52	; 0x34
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800c034:	2300      	movs	r3, #0
 800c036:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800c042:	f107 0318 	add.w	r3, r7, #24
 800c046:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800c048:	2300      	movs	r3, #0
 800c04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c04e:	e058      	b.n	800c102 <ip4addr_ntoa_r+0xda>
    i = 0;
 800c050:	2300      	movs	r3, #0
 800c052:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	781a      	ldrb	r2, [r3, #0]
 800c05a:	4b32      	ldr	r3, [pc, #200]	; (800c124 <ip4addr_ntoa_r+0xfc>)
 800c05c:	fba3 1302 	umull	r1, r3, r3, r2
 800c060:	08d9      	lsrs	r1, r3, #3
 800c062:	460b      	mov	r3, r1
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	440b      	add	r3, r1
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800c06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	4a2c      	ldr	r2, [pc, #176]	; (800c124 <ip4addr_ntoa_r+0xfc>)
 800c074:	fba2 2303 	umull	r2, r3, r2, r3
 800c078:	08db      	lsrs	r3, r3, #3
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800c080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800c08a:	4619      	mov	r1, r3
 800c08c:	7ffb      	ldrb	r3, [r7, #31]
 800c08e:	3330      	adds	r3, #48	; 0x30
 800c090:	b2da      	uxtb	r2, r3
 800c092:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800c096:	443b      	add	r3, r7
 800c098:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1d8      	bne.n	800c056 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800c0a4:	e011      	b.n	800c0ca <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	623a      	str	r2, [r7, #32]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	dc01      	bgt.n	800c0b6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e030      	b.n	800c118 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800c0b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	1c59      	adds	r1, r3, #1
 800c0be:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c0c0:	3230      	adds	r2, #48	; 0x30
 800c0c2:	443a      	add	r2, r7
 800c0c4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800c0c8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800c0ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0ce:	1e5a      	subs	r2, r3, #1
 800c0d0:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1e6      	bne.n	800c0a6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	623a      	str	r2, [r7, #32]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	dc01      	bgt.n	800c0e8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	e017      	b.n	800c118 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800c0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0ee:	222e      	movs	r2, #46	; 0x2e
 800c0f0:	701a      	strb	r2, [r3, #0]
    ap++;
 800c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800c0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c106:	2b03      	cmp	r3, #3
 800c108:	d9a2      	bls.n	800c050 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	3b01      	subs	r3, #1
 800c10e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	2200      	movs	r2, #0
 800c114:	701a      	strb	r2, [r3, #0]
  return buf;
 800c116:	68bb      	ldr	r3, [r7, #8]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3734      	adds	r7, #52	; 0x34
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bc80      	pop	{r7}
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	cccccccd 	.word	0xcccccccd

0800c128 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c132:	4b12      	ldr	r3, [pc, #72]	; (800c17c <ip_reass_tmr+0x54>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c138:	e018      	b.n	800c16c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	7fdb      	ldrb	r3, [r3, #31]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00b      	beq.n	800c15a <ip_reass_tmr+0x32>
      r->timer--;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	7fdb      	ldrb	r3, [r3, #31]
 800c146:	3b01      	subs	r3, #1
 800c148:	b2da      	uxtb	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	e008      	b.n	800c16c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c164:	68b9      	ldr	r1, [r7, #8]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f80a 	bl	800c180 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1e3      	bne.n	800c13a <ip_reass_tmr+0x12>
     }
   }
}
 800c172:	bf00      	nop
 800c174:	bf00      	nop
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	20008a44 	.word	0x20008a44

0800c180 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b088      	sub	sp, #32
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	429a      	cmp	r2, r3
 800c194:	d105      	bne.n	800c1a2 <ip_reass_free_complete_datagram+0x22>
 800c196:	4b45      	ldr	r3, [pc, #276]	; (800c2ac <ip_reass_free_complete_datagram+0x12c>)
 800c198:	22ab      	movs	r2, #171	; 0xab
 800c19a:	4945      	ldr	r1, [pc, #276]	; (800c2b0 <ip_reass_free_complete_datagram+0x130>)
 800c19c:	4845      	ldr	r0, [pc, #276]	; (800c2b4 <ip_reass_free_complete_datagram+0x134>)
 800c19e:	f000 ff1d 	bl	800cfdc <iprintf>
  if (prev != NULL) {
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00a      	beq.n	800c1be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d005      	beq.n	800c1be <ip_reass_free_complete_datagram+0x3e>
 800c1b2:	4b3e      	ldr	r3, [pc, #248]	; (800c2ac <ip_reass_free_complete_datagram+0x12c>)
 800c1b4:	22ad      	movs	r2, #173	; 0xad
 800c1b6:	4940      	ldr	r1, [pc, #256]	; (800c2b8 <ip_reass_free_complete_datagram+0x138>)
 800c1b8:	483e      	ldr	r0, [pc, #248]	; (800c2b4 <ip_reass_free_complete_datagram+0x134>)
 800c1ba:	f000 ff0f 	bl	800cfdc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	889b      	ldrh	r3, [r3, #4]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d12a      	bne.n	800c226 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	6858      	ldr	r0, [r3, #4]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	2214      	movs	r2, #20
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f000 ffe3 	bl	800d1b4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	69b8      	ldr	r0, [r7, #24]
 800c1f2:	f7ff fbd5 	bl	800b9a0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c1f6:	69b8      	ldr	r0, [r7, #24]
 800c1f8:	f7f8 fd44 	bl	8004c84 <pbuf_clen>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c200:	8bfa      	ldrh	r2, [r7, #30]
 800c202:	8a7b      	ldrh	r3, [r7, #18]
 800c204:	4413      	add	r3, r2
 800c206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c20a:	db05      	blt.n	800c218 <ip_reass_free_complete_datagram+0x98>
 800c20c:	4b27      	ldr	r3, [pc, #156]	; (800c2ac <ip_reass_free_complete_datagram+0x12c>)
 800c20e:	22bc      	movs	r2, #188	; 0xbc
 800c210:	492a      	ldr	r1, [pc, #168]	; (800c2bc <ip_reass_free_complete_datagram+0x13c>)
 800c212:	4828      	ldr	r0, [pc, #160]	; (800c2b4 <ip_reass_free_complete_datagram+0x134>)
 800c214:	f000 fee2 	bl	800cfdc <iprintf>
    pbufs_freed += clen;
 800c218:	8bfa      	ldrh	r2, [r7, #30]
 800c21a:	8a7b      	ldrh	r3, [r7, #18]
 800c21c:	4413      	add	r3, r2
 800c21e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c220:	69b8      	ldr	r0, [r7, #24]
 800c222:	f7f8 fc9b 	bl	8004b5c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c22c:	e01f      	b.n	800c26e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f7f8 fd20 	bl	8004c84 <pbuf_clen>
 800c244:	4603      	mov	r3, r0
 800c246:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c248:	8bfa      	ldrh	r2, [r7, #30]
 800c24a:	8a7b      	ldrh	r3, [r7, #18]
 800c24c:	4413      	add	r3, r2
 800c24e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c252:	db05      	blt.n	800c260 <ip_reass_free_complete_datagram+0xe0>
 800c254:	4b15      	ldr	r3, [pc, #84]	; (800c2ac <ip_reass_free_complete_datagram+0x12c>)
 800c256:	22cc      	movs	r2, #204	; 0xcc
 800c258:	4918      	ldr	r1, [pc, #96]	; (800c2bc <ip_reass_free_complete_datagram+0x13c>)
 800c25a:	4816      	ldr	r0, [pc, #88]	; (800c2b4 <ip_reass_free_complete_datagram+0x134>)
 800c25c:	f000 febe 	bl	800cfdc <iprintf>
    pbufs_freed += clen;
 800c260:	8bfa      	ldrh	r2, [r7, #30]
 800c262:	8a7b      	ldrh	r3, [r7, #18]
 800c264:	4413      	add	r3, r2
 800c266:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7f8 fc77 	bl	8004b5c <pbuf_free>
  while (p != NULL) {
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1dc      	bne.n	800c22e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f8c2 	bl	800c400 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800c27c:	4b10      	ldr	r3, [pc, #64]	; (800c2c0 <ip_reass_free_complete_datagram+0x140>)
 800c27e:	881b      	ldrh	r3, [r3, #0]
 800c280:	8bfa      	ldrh	r2, [r7, #30]
 800c282:	429a      	cmp	r2, r3
 800c284:	d905      	bls.n	800c292 <ip_reass_free_complete_datagram+0x112>
 800c286:	4b09      	ldr	r3, [pc, #36]	; (800c2ac <ip_reass_free_complete_datagram+0x12c>)
 800c288:	22d2      	movs	r2, #210	; 0xd2
 800c28a:	490e      	ldr	r1, [pc, #56]	; (800c2c4 <ip_reass_free_complete_datagram+0x144>)
 800c28c:	4809      	ldr	r0, [pc, #36]	; (800c2b4 <ip_reass_free_complete_datagram+0x134>)
 800c28e:	f000 fea5 	bl	800cfdc <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800c292:	4b0b      	ldr	r3, [pc, #44]	; (800c2c0 <ip_reass_free_complete_datagram+0x140>)
 800c294:	881a      	ldrh	r2, [r3, #0]
 800c296:	8bfb      	ldrh	r3, [r7, #30]
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	4b08      	ldr	r3, [pc, #32]	; (800c2c0 <ip_reass_free_complete_datagram+0x140>)
 800c29e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c2a0:	8bfb      	ldrh	r3, [r7, #30]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3720      	adds	r7, #32
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	0800f7e0 	.word	0x0800f7e0
 800c2b0:	0800f81c 	.word	0x0800f81c
 800c2b4:	0800f828 	.word	0x0800f828
 800c2b8:	0800f850 	.word	0x0800f850
 800c2bc:	0800f864 	.word	0x0800f864
 800c2c0:	20008a48 	.word	0x20008a48
 800c2c4:	0800f884 	.word	0x0800f884

0800c2c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08a      	sub	sp, #40	; 0x28
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c2e6:	4b28      	ldr	r3, [pc, #160]	; (800c388 <ip_reass_remove_oldest_datagram+0xc0>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c2ec:	e030      	b.n	800c350 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	695a      	ldr	r2, [r3, #20]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d10c      	bne.n	800c314 <ip_reass_remove_oldest_datagram+0x4c>
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	699a      	ldr	r2, [r3, #24]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	429a      	cmp	r2, r3
 800c304:	d106      	bne.n	800c314 <ip_reass_remove_oldest_datagram+0x4c>
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	899a      	ldrh	r2, [r3, #12]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	889b      	ldrh	r3, [r3, #4]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	429a      	cmp	r2, r3
 800c312:	d014      	beq.n	800c33e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	3301      	adds	r3, #1
 800c318:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d104      	bne.n	800c32a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	61bb      	str	r3, [r7, #24]
 800c328:	e009      	b.n	800c33e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32c:	7fda      	ldrb	r2, [r3, #31]
 800c32e:	6a3b      	ldr	r3, [r7, #32]
 800c330:	7fdb      	ldrb	r3, [r3, #31]
 800c332:	429a      	cmp	r2, r3
 800c334:	d803      	bhi.n	800c33e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c338:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c348:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1cb      	bne.n	800c2ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d008      	beq.n	800c36e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c35c:	69b9      	ldr	r1, [r7, #24]
 800c35e:	6a38      	ldr	r0, [r7, #32]
 800c360:	f7ff ff0e 	bl	800c180 <ip_reass_free_complete_datagram>
 800c364:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	4413      	add	r3, r2
 800c36c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	429a      	cmp	r2, r3
 800c374:	da02      	bge.n	800c37c <ip_reass_remove_oldest_datagram+0xb4>
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	dcac      	bgt.n	800c2d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c37c:	697b      	ldr	r3, [r7, #20]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3728      	adds	r7, #40	; 0x28
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20008a44 	.word	0x20008a44

0800c38c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c396:	2004      	movs	r0, #4
 800c398:	f7f7 fe56 	bl	8004048 <memp_malloc>
 800c39c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d110      	bne.n	800c3c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7ff ff8e 	bl	800c2c8 <ip_reass_remove_oldest_datagram>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	dc03      	bgt.n	800c3bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c3b4:	2004      	movs	r0, #4
 800c3b6:	f7f7 fe47 	bl	8004048 <memp_malloc>
 800c3ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e016      	b.n	800c3f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f000 fe6b 	bl	800d0a6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2203      	movs	r2, #3
 800c3d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c3d6:	4b09      	ldr	r3, [pc, #36]	; (800c3fc <ip_reass_enqueue_new_datagram+0x70>)
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c3de:	4a07      	ldr	r2, [pc, #28]	; (800c3fc <ip_reass_enqueue_new_datagram+0x70>)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3308      	adds	r3, #8
 800c3e8:	2214      	movs	r2, #20
 800c3ea:	6879      	ldr	r1, [r7, #4]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f000 fee1 	bl	800d1b4 <memcpy>
  return ipr;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20008a44 	.word	0x20008a44

0800c400 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c40a:	4b10      	ldr	r3, [pc, #64]	; (800c44c <ip_reass_dequeue_datagram+0x4c>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	429a      	cmp	r2, r3
 800c412:	d104      	bne.n	800c41e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a0c      	ldr	r2, [pc, #48]	; (800c44c <ip_reass_dequeue_datagram+0x4c>)
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	e00d      	b.n	800c43a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d106      	bne.n	800c432 <ip_reass_dequeue_datagram+0x32>
 800c424:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <ip_reass_dequeue_datagram+0x50>)
 800c426:	f240 1245 	movw	r2, #325	; 0x145
 800c42a:	490a      	ldr	r1, [pc, #40]	; (800c454 <ip_reass_dequeue_datagram+0x54>)
 800c42c:	480a      	ldr	r0, [pc, #40]	; (800c458 <ip_reass_dequeue_datagram+0x58>)
 800c42e:	f000 fdd5 	bl	800cfdc <iprintf>
    prev->next = ipr->next;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c43a:	6879      	ldr	r1, [r7, #4]
 800c43c:	2004      	movs	r0, #4
 800c43e:	f7f7 fe4f 	bl	80040e0 <memp_free>
}
 800c442:	bf00      	nop
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	20008a44 	.word	0x20008a44
 800c450:	0800f7e0 	.word	0x0800f7e0
 800c454:	0800f8a0 	.word	0x0800f8a0
 800c458:	0800f828 	.word	0x0800f828

0800c45c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b08c      	sub	sp, #48	; 0x30
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c468:	2300      	movs	r3, #0
 800c46a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c46c:	2301      	movs	r3, #1
 800c46e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	885b      	ldrh	r3, [r3, #2]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7f7 fa3a 	bl	80038f6 <lwip_htons>
 800c482:	4603      	mov	r3, r0
 800c484:	461a      	mov	r2, r3
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	f003 030f 	and.w	r3, r3, #15
 800c490:	b29b      	uxth	r3, r3
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	b29b      	uxth	r3, r3
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	88db      	ldrh	r3, [r3, #6]
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7f7 fa28 	bl	80038f6 <lwip_htons>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	701a      	strb	r2, [r3, #0]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	705a      	strb	r2, [r3, #1]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	709a      	strb	r2, [r3, #2]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	8b3a      	ldrh	r2, [r7, #24]
 800c4ce:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800c4d0:	8b3a      	ldrh	r2, [r7, #24]
 800c4d2:	8b7b      	ldrh	r3, [r7, #26]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4da:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c4e2:	e061      	b.n	800c5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800c4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ec:	889b      	ldrh	r3, [r3, #4]
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	889b      	ldrh	r3, [r3, #4]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d232      	bcs.n	800c560 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4fe:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c502:	2b00      	cmp	r3, #0
 800c504:	d01f      	beq.n	800c546 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c508:	889b      	ldrh	r3, [r3, #4]
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	88db      	ldrh	r3, [r3, #6]
 800c510:	b29b      	uxth	r3, r3
 800c512:	429a      	cmp	r2, r3
 800c514:	f0c0 80e3 	bcc.w	800c6de <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800c518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51a:	88db      	ldrh	r3, [r3, #6]
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	889b      	ldrh	r3, [r3, #4]
 800c522:	b29b      	uxth	r3, r3
 800c524:	429a      	cmp	r2, r3
 800c526:	f200 80da 	bhi.w	800c6de <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	88db      	ldrh	r3, [r3, #6]
 800c534:	b29a      	uxth	r2, r3
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	889b      	ldrh	r3, [r3, #4]
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d037      	beq.n	800c5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c544:	e034      	b.n	800c5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800c546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c548:	88db      	ldrh	r3, [r3, #6]
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	889b      	ldrh	r3, [r3, #4]
 800c550:	b29b      	uxth	r3, r3
 800c552:	429a      	cmp	r2, r3
 800c554:	f200 80c5 	bhi.w	800c6e2 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	605a      	str	r2, [r3, #4]
      break;
 800c55e:	e027      	b.n	800c5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800c560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c562:	889b      	ldrh	r3, [r3, #4]
 800c564:	b29a      	uxth	r2, r3
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	889b      	ldrh	r3, [r3, #4]
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	429a      	cmp	r2, r3
 800c56e:	f000 80ba 	beq.w	800c6e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c574:	889b      	ldrh	r3, [r3, #4]
 800c576:	b29a      	uxth	r2, r3
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	88db      	ldrh	r3, [r3, #6]
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	429a      	cmp	r2, r3
 800c580:	f0c0 80b3 	bcc.w	800c6ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c586:	2b00      	cmp	r3, #0
 800c588:	d009      	beq.n	800c59e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	88db      	ldrh	r3, [r3, #6]
 800c58e:	b29a      	uxth	r2, r3
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	889b      	ldrh	r3, [r3, #4]
 800c594:	b29b      	uxth	r3, r3
 800c596:	429a      	cmp	r2, r3
 800c598:	d001      	beq.n	800c59e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d19a      	bne.n	800c4e4 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800c5ae:	e000      	b.n	800c5b2 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800c5b0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d12d      	bne.n	800c614 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d01c      	beq.n	800c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c0:	88db      	ldrh	r3, [r3, #6]
 800c5c2:	b29a      	uxth	r2, r3
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	889b      	ldrh	r3, [r3, #4]
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d906      	bls.n	800c5dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800c5ce:	4b51      	ldr	r3, [pc, #324]	; (800c714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c5d0:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c5d4:	4950      	ldr	r1, [pc, #320]	; (800c718 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c5d6:	4851      	ldr	r0, [pc, #324]	; (800c71c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c5d8:	f000 fd00 	bl	800cfdc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	88db      	ldrh	r3, [r3, #6]
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ea:	889b      	ldrh	r3, [r3, #4]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d010      	beq.n	800c614 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	623b      	str	r3, [r7, #32]
 800c5f6:	e00d      	b.n	800c614 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d006      	beq.n	800c60e <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800c600:	4b44      	ldr	r3, [pc, #272]	; (800c714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c602:	f240 12b3 	movw	r2, #435	; 0x1b3
 800c606:	4946      	ldr	r1, [pc, #280]	; (800c720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c608:	4844      	ldr	r0, [pc, #272]	; (800c71c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c60a:	f000 fce7 	bl	800cfdc <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d105      	bne.n	800c626 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	7f9b      	ldrb	r3, [r3, #30]
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b00      	cmp	r3, #0
 800c624:	d059      	beq.n	800c6da <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d04f      	beq.n	800c6cc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d006      	beq.n	800c642 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	889b      	ldrh	r3, [r3, #4]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d002      	beq.n	800c648 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	623b      	str	r3, [r7, #32]
 800c646:	e041      	b.n	800c6cc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c652:	e012      	b.n	800c67a <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	88db      	ldrh	r3, [r3, #6]
 800c65e:	b29a      	uxth	r2, r3
 800c660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c662:	889b      	ldrh	r3, [r3, #4]
 800c664:	b29b      	uxth	r3, r3
 800c666:	429a      	cmp	r2, r3
 800c668:	d002      	beq.n	800c670 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	623b      	str	r3, [r7, #32]
            break;
 800c66e:	e007      	b.n	800c680 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e9      	bne.n	800c654 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d022      	beq.n	800c6cc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d106      	bne.n	800c69c <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800c68e:	4b21      	ldr	r3, [pc, #132]	; (800c714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c690:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800c694:	4923      	ldr	r1, [pc, #140]	; (800c724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c696:	4821      	ldr	r0, [pc, #132]	; (800c71c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c698:	f000 fca0 	bl	800cfdc <iprintf>
          LWIP_ASSERT("sanity check",
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d106      	bne.n	800c6b6 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800c6a8:	4b1a      	ldr	r3, [pc, #104]	; (800c714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c6aa:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c6ae:	491d      	ldr	r1, [pc, #116]	; (800c724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c6b0:	481a      	ldr	r0, [pc, #104]	; (800c71c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c6b2:	f000 fc93 	bl	800cfdc <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d006      	beq.n	800c6cc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800c6be:	4b15      	ldr	r3, [pc, #84]	; (800c714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c6c0:	f240 12d7 	movw	r2, #471	; 0x1d7
 800c6c4:	4918      	ldr	r1, [pc, #96]	; (800c728 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c6c6:	4815      	ldr	r0, [pc, #84]	; (800c71c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c6c8:	f000 fc88 	bl	800cfdc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	bf14      	ite	ne
 800c6d2:	2301      	movne	r3, #1
 800c6d4:	2300      	moveq	r3, #0
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	e018      	b.n	800c70c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e016      	b.n	800c70c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800c6de:	bf00      	nop
 800c6e0:	e004      	b.n	800c6ec <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800c6e2:	bf00      	nop
 800c6e4:	e002      	b.n	800c6ec <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c6e6:	bf00      	nop
 800c6e8:	e000      	b.n	800c6ec <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c6ea:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800c6ec:	68b8      	ldr	r0, [r7, #8]
 800c6ee:	f7f8 fac9 	bl	8004c84 <pbuf_clen>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	4b0d      	ldr	r3, [pc, #52]	; (800c72c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c6f8:	881b      	ldrh	r3, [r3, #0]
 800c6fa:	1a9b      	subs	r3, r3, r2
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	4b0b      	ldr	r3, [pc, #44]	; (800c72c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c700:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800c702:	68b8      	ldr	r0, [r7, #8]
 800c704:	f7f8 fa2a 	bl	8004b5c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c708:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3730      	adds	r7, #48	; 0x30
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	0800f7e0 	.word	0x0800f7e0
 800c718:	0800f8bc 	.word	0x0800f8bc
 800c71c:	0800f828 	.word	0x0800f828
 800c720:	0800f8dc 	.word	0x0800f8dc
 800c724:	0800f914 	.word	0x0800f914
 800c728:	0800f924 	.word	0x0800f924
 800c72c:	20008a48 	.word	0x20008a48

0800c730 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b08e      	sub	sp, #56	; 0x38
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	f003 030f 	and.w	r3, r3, #15
 800c746:	2b05      	cmp	r3, #5
 800c748:	f040 8131 	bne.w	800c9ae <ip4_reass+0x27e>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74e:	88db      	ldrh	r3, [r3, #6]
 800c750:	b29b      	uxth	r3, r3
 800c752:	4618      	mov	r0, r3
 800c754:	f7f7 f8cf 	bl	80038f6 <lwip_htons>
 800c758:	4603      	mov	r3, r0
 800c75a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c75e:	b29b      	uxth	r3, r3
 800c760:	00db      	lsls	r3, r3, #3
 800c762:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	885b      	ldrh	r3, [r3, #2]
 800c768:	b29b      	uxth	r3, r3
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7f7 f8c3 	bl	80038f6 <lwip_htons>
 800c770:	4603      	mov	r3, r0
 800c772:	461a      	mov	r2, r3
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	f003 030f 	and.w	r3, r3, #15
 800c77e:	b29b      	uxth	r3, r3
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	b29b      	uxth	r3, r3
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7f8 fa7b 	bl	8004c84 <pbuf_clen>
 800c78e:	4603      	mov	r3, r0
 800c790:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c792:	4b8e      	ldr	r3, [pc, #568]	; (800c9cc <ip4_reass+0x29c>)
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c79a:	4413      	add	r3, r2
 800c79c:	2b0a      	cmp	r3, #10
 800c79e:	dd10      	ble.n	800c7c2 <ip4_reass+0x92>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c7a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a6:	f7ff fd8f 	bl	800c2c8 <ip_reass_remove_oldest_datagram>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8100 	beq.w	800c9b2 <ip4_reass+0x282>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c7b2:	4b86      	ldr	r3, [pc, #536]	; (800c9cc <ip4_reass+0x29c>)
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c7bc:	2b0a      	cmp	r3, #10
 800c7be:	f300 80f8 	bgt.w	800c9b2 <ip4_reass+0x282>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c7c2:	4b83      	ldr	r3, [pc, #524]	; (800c9d0 <ip4_reass+0x2a0>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7c8:	e015      	b.n	800c7f6 <ip4_reass+0xc6>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	695a      	ldr	r2, [r3, #20]
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d10c      	bne.n	800c7f0 <ip4_reass+0xc0>
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	699a      	ldr	r2, [r3, #24]
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d106      	bne.n	800c7f0 <ip4_reass+0xc0>
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	899a      	ldrh	r2, [r3, #12]
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	889b      	ldrh	r3, [r3, #4]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d006      	beq.n	800c7fe <ip4_reass+0xce>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	633b      	str	r3, [r7, #48]	; 0x30
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1e6      	bne.n	800c7ca <ip4_reass+0x9a>
 800c7fc:	e000      	b.n	800c800 <ip4_reass+0xd0>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c7fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	2b00      	cmp	r3, #0
 800c804:	d109      	bne.n	800c81a <ip4_reass+0xea>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c808:	4619      	mov	r1, r3
 800c80a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c80c:	f7ff fdbe 	bl	800c38c <ip_reass_enqueue_new_datagram>
 800c810:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	2b00      	cmp	r3, #0
 800c816:	d11c      	bne.n	800c852 <ip4_reass+0x122>
      goto nullreturn;
 800c818:	e0d0      	b.n	800c9bc <ip4_reass+0x28c>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81c:	88db      	ldrh	r3, [r3, #6]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	4618      	mov	r0, r3
 800c822:	f7f7 f868 	bl	80038f6 <lwip_htons>
 800c826:	4603      	mov	r3, r0
 800c828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d110      	bne.n	800c852 <ip4_reass+0x122>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	89db      	ldrh	r3, [r3, #14]
 800c834:	4618      	mov	r0, r3
 800c836:	f7f7 f85e 	bl	80038f6 <lwip_htons>
 800c83a:	4603      	mov	r3, r0
 800c83c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c840:	2b00      	cmp	r3, #0
 800c842:	d006      	beq.n	800c852 <ip4_reass+0x122>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c846:	3308      	adds	r3, #8
 800c848:	2214      	movs	r2, #20
 800c84a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 fcb1 	bl	800d1b4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c854:	88db      	ldrh	r3, [r3, #6]
 800c856:	b29b      	uxth	r3, r3
 800c858:	f003 0320 	and.w	r3, r3, #32
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	bf0c      	ite	eq
 800c860:	2301      	moveq	r3, #1
 800c862:	2300      	movne	r3, #0
 800c864:	b2db      	uxtb	r3, r3
 800c866:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00e      	beq.n	800c88c <ip4_reass+0x15c>
    u16_t datagram_len = (u16_t)(offset + len);
 800c86e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c872:	4413      	add	r3, r2
 800c874:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c876:	8b7a      	ldrh	r2, [r7, #26]
 800c878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c87a:	429a      	cmp	r2, r3
 800c87c:	f0c0 809b 	bcc.w	800c9b6 <ip4_reass+0x286>
 800c880:	8b7b      	ldrh	r3, [r7, #26]
 800c882:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800c886:	4293      	cmp	r3, r2
 800c888:	f200 8095 	bhi.w	800c9b6 <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c88c:	69fa      	ldr	r2, [r7, #28]
 800c88e:	6879      	ldr	r1, [r7, #4]
 800c890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c892:	f7ff fde3 	bl	800c45c <ip_reass_chain_frag_into_datagram_and_validate>
 800c896:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c89e:	f000 808c 	beq.w	800c9ba <ip4_reass+0x28a>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c8a2:	4b4a      	ldr	r3, [pc, #296]	; (800c9cc <ip4_reass+0x29c>)
 800c8a4:	881a      	ldrh	r2, [r3, #0]
 800c8a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8a8:	4413      	add	r3, r2
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	4b47      	ldr	r3, [pc, #284]	; (800c9cc <ip4_reass+0x29c>)
 800c8ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00d      	beq.n	800c8d2 <ip4_reass+0x1a2>
    u16_t datagram_len = (u16_t)(offset + len);
 800c8b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c8b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8ba:	4413      	add	r3, r2
 800c8bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	8a7a      	ldrh	r2, [r7, #18]
 800c8c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	7f9b      	ldrb	r3, [r3, #30]
 800c8c8:	f043 0301 	orr.w	r3, r3, #1
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d168      	bne.n	800c9aa <ip4_reass+0x27a>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8da:	8b9b      	ldrh	r3, [r3, #28]
 800c8dc:	3314      	adds	r3, #20
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f8:	3308      	adds	r3, #8
 800c8fa:	2214      	movs	r2, #20
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c900:	f000 fc58 	bl	800d1b4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800c904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c906:	8b9b      	ldrh	r3, [r3, #28]
 800c908:	4618      	mov	r0, r3
 800c90a:	f7f6 fff4 	bl	80038f6 <lwip_htons>
 800c90e:	4603      	mov	r3, r0
 800c910:	461a      	mov	r2, r3
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	2200      	movs	r2, #0
 800c91a:	719a      	strb	r2, [r3, #6]
 800c91c:	2200      	movs	r2, #0
 800c91e:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	2200      	movs	r2, #0
 800c924:	729a      	strb	r2, [r3, #10]
 800c926:	2200      	movs	r2, #0
 800c928:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c930:	e00e      	b.n	800c950 <ip4_reass+0x220>
      iprh = (struct ip_reass_helper*)r->payload;
 800c932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800c938:	f06f 0113 	mvn.w	r1, #19
 800c93c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c93e:	f7f8 f8e9 	bl	8004b14 <pbuf_header>
      pbuf_cat(p, r);
 800c942:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7f8 f9d5 	bl	8004cf4 <pbuf_cat>
      r = iprh->next_pbuf;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800c950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1ed      	bne.n	800c932 <ip4_reass+0x202>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c956:	4b1e      	ldr	r3, [pc, #120]	; (800c9d0 <ip4_reass+0x2a0>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d102      	bne.n	800c966 <ip4_reass+0x236>
      ipr_prev = NULL;
 800c960:	2300      	movs	r3, #0
 800c962:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c964:	e010      	b.n	800c988 <ip4_reass+0x258>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c966:	4b1a      	ldr	r3, [pc, #104]	; (800c9d0 <ip4_reass+0x2a0>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c96c:	e007      	b.n	800c97e <ip4_reass+0x24e>
        if (ipr_prev->next == ipr) {
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c974:	429a      	cmp	r2, r3
 800c976:	d006      	beq.n	800c986 <ip4_reass+0x256>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1f4      	bne.n	800c96e <ip4_reass+0x23e>
 800c984:	e000      	b.n	800c988 <ip4_reass+0x258>
          break;
 800c986:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c98a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c98c:	f7ff fd38 	bl	800c400 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7f8 f977 	bl	8004c84 <pbuf_clen>
 800c996:	4603      	mov	r3, r0
 800c998:	461a      	mov	r2, r3
 800c99a:	4b0c      	ldr	r3, [pc, #48]	; (800c9cc <ip4_reass+0x29c>)
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	1a9b      	subs	r3, r3, r2
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <ip4_reass+0x29c>)
 800c9a4:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	e00c      	b.n	800c9c4 <ip4_reass+0x294>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	e00a      	b.n	800c9c4 <ip4_reass+0x294>
    goto nullreturn;
 800c9ae:	bf00      	nop
 800c9b0:	e004      	b.n	800c9bc <ip4_reass+0x28c>
      goto nullreturn;
 800c9b2:	bf00      	nop
 800c9b4:	e002      	b.n	800c9bc <ip4_reass+0x28c>
      goto nullreturn;
 800c9b6:	bf00      	nop
 800c9b8:	e000      	b.n	800c9bc <ip4_reass+0x28c>
    goto nullreturn;
 800c9ba:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7f8 f8cd 	bl	8004b5c <pbuf_free>
  return NULL;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3738      	adds	r7, #56	; 0x38
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20008a48 	.word	0x20008a48
 800c9d0:	20008a44 	.word	0x20008a44

0800c9d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800c9d8:	2005      	movs	r0, #5
 800c9da:	f7f7 fb35 	bl	8004048 <memp_malloc>
 800c9de:	4603      	mov	r3, r0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d106      	bne.n	800ca00 <ip_frag_free_pbuf_custom_ref+0x1c>
 800c9f2:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c9f4:	f240 22ae 	movw	r2, #686	; 0x2ae
 800c9f8:	4906      	ldr	r1, [pc, #24]	; (800ca14 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c9fa:	4807      	ldr	r0, [pc, #28]	; (800ca18 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c9fc:	f000 faee 	bl	800cfdc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	2005      	movs	r0, #5
 800ca04:	f7f7 fb6c 	bl	80040e0 <memp_free>
}
 800ca08:	bf00      	nop
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	0800f7e0 	.word	0x0800f7e0
 800ca14:	0800f948 	.word	0x0800f948
 800ca18:	0800f828 	.word	0x0800f828

0800ca1c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d106      	bne.n	800ca3c <ipfrag_free_pbuf_custom+0x20>
 800ca2e:	4b11      	ldr	r3, [pc, #68]	; (800ca74 <ipfrag_free_pbuf_custom+0x58>)
 800ca30:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800ca34:	4910      	ldr	r1, [pc, #64]	; (800ca78 <ipfrag_free_pbuf_custom+0x5c>)
 800ca36:	4811      	ldr	r0, [pc, #68]	; (800ca7c <ipfrag_free_pbuf_custom+0x60>)
 800ca38:	f000 fad0 	bl	800cfdc <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d006      	beq.n	800ca52 <ipfrag_free_pbuf_custom+0x36>
 800ca44:	4b0b      	ldr	r3, [pc, #44]	; (800ca74 <ipfrag_free_pbuf_custom+0x58>)
 800ca46:	f240 22b9 	movw	r2, #697	; 0x2b9
 800ca4a:	490d      	ldr	r1, [pc, #52]	; (800ca80 <ipfrag_free_pbuf_custom+0x64>)
 800ca4c:	480b      	ldr	r0, [pc, #44]	; (800ca7c <ipfrag_free_pbuf_custom+0x60>)
 800ca4e:	f000 fac5 	bl	800cfdc <iprintf>
  if (pcr->original != NULL) {
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d004      	beq.n	800ca64 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	695b      	ldr	r3, [r3, #20]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7f8 f87c 	bl	8004b5c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7ff ffbd 	bl	800c9e4 <ip_frag_free_pbuf_custom_ref>
}
 800ca6a:	bf00      	nop
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	0800f7e0 	.word	0x0800f7e0
 800ca78:	0800f954 	.word	0x0800f954
 800ca7c:	0800f828 	.word	0x0800f828
 800ca80:	0800f960 	.word	0x0800f960

0800ca84 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b092      	sub	sp, #72	; 0x48
 800ca88:	af02      	add	r7, sp, #8
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca98:	3b14      	subs	r3, #20
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	da00      	bge.n	800caa0 <ip4_frag+0x1c>
 800ca9e:	3307      	adds	r3, #7
 800caa0:	10db      	asrs	r3, r3, #3
 800caa2:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800caa4:	2314      	movs	r3, #20
 800caa6:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800caae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	f003 030f 	and.w	r3, r3, #15
 800caba:	2b05      	cmp	r3, #5
 800cabc:	d009      	beq.n	800cad2 <ip4_frag+0x4e>
 800cabe:	4b7a      	ldr	r3, [pc, #488]	; (800cca8 <ip4_frag+0x224>)
 800cac0:	f240 22e1 	movw	r2, #737	; 0x2e1
 800cac4:	4979      	ldr	r1, [pc, #484]	; (800ccac <ip4_frag+0x228>)
 800cac6:	487a      	ldr	r0, [pc, #488]	; (800ccb0 <ip4_frag+0x22c>)
 800cac8:	f000 fa88 	bl	800cfdc <iprintf>
 800cacc:	f06f 0305 	mvn.w	r3, #5
 800cad0:	e0e6      	b.n	800cca0 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad4:	88db      	ldrh	r3, [r3, #6]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	4618      	mov	r0, r3
 800cada:	f7f6 ff0c 	bl	80038f6 <lwip_htons>
 800cade:	4603      	mov	r3, r0
 800cae0:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800cae2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cae8:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800caea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800caec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d009      	beq.n	800cb08 <ip4_frag+0x84>
 800caf4:	4b6c      	ldr	r3, [pc, #432]	; (800cca8 <ip4_frag+0x224>)
 800caf6:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cafa:	496e      	ldr	r1, [pc, #440]	; (800ccb4 <ip4_frag+0x230>)
 800cafc:	486c      	ldr	r0, [pc, #432]	; (800ccb0 <ip4_frag+0x22c>)
 800cafe:	f000 fa6d 	bl	800cfdc <iprintf>
 800cb02:	f06f 0305 	mvn.w	r3, #5
 800cb06:	e0cb      	b.n	800cca0 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	891b      	ldrh	r3, [r3, #8]
 800cb0c:	3b14      	subs	r3, #20
 800cb0e:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800cb10:	e0bd      	b.n	800cc8e <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800cb12:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cb14:	00da      	lsls	r2, r3, #3
 800cb16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	bfa8      	it	ge
 800cb1c:	4613      	movge	r3, r2
 800cb1e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cb20:	2200      	movs	r2, #0
 800cb22:	2114      	movs	r1, #20
 800cb24:	2002      	movs	r0, #2
 800cb26:	f7f7 fca1 	bl	800446c <pbuf_alloc>
 800cb2a:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 80b3 	beq.w	800cc9a <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	895b      	ldrh	r3, [r3, #10]
 800cb38:	2b13      	cmp	r3, #19
 800cb3a:	d806      	bhi.n	800cb4a <ip4_frag+0xc6>
 800cb3c:	4b5a      	ldr	r3, [pc, #360]	; (800cca8 <ip4_frag+0x224>)
 800cb3e:	f44f 7242 	mov.w	r2, #776	; 0x308
 800cb42:	495d      	ldr	r1, [pc, #372]	; (800ccb8 <ip4_frag+0x234>)
 800cb44:	485a      	ldr	r0, [pc, #360]	; (800ccb0 <ip4_frag+0x22c>)
 800cb46:	f000 fa49 	bl	800cfdc <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cb4a:	6a3b      	ldr	r3, [r7, #32]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	2214      	movs	r2, #20
 800cb50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 fb2e 	bl	800d1b4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800cb5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb60:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800cb62:	e04f      	b.n	800cc04 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	895a      	ldrh	r2, [r3, #10]
 800cb68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cb6e:	8b7a      	ldrh	r2, [r7, #26]
 800cb70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb72:	4293      	cmp	r3, r2
 800cb74:	bf28      	it	cs
 800cb76:	4613      	movcs	r3, r2
 800cb78:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800cb7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d105      	bne.n	800cb8c <ip4_frag+0x108>
        poff = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	60fb      	str	r3, [r7, #12]
        continue;
 800cb8a:	e03b      	b.n	800cc04 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cb8c:	f7ff ff22 	bl	800c9d4 <ip_frag_alloc_pbuf_custom_ref>
 800cb90:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d103      	bne.n	800cba0 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 800cb98:	6a38      	ldr	r0, [r7, #32]
 800cb9a:	f7f7 ffdf 	bl	8004b5c <pbuf_free>
        goto memerr;
 800cb9e:	e07d      	b.n	800cc9c <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cba0:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cba6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cba8:	4413      	add	r3, r2
 800cbaa:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cbac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cbae:	9201      	str	r2, [sp, #4]
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2202      	movs	r2, #2
 800cbb6:	2004      	movs	r0, #4
 800cbb8:	f7f7 fdf2 	bl	80047a0 <pbuf_alloced_custom>
 800cbbc:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d106      	bne.n	800cbd2 <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cbc4:	6978      	ldr	r0, [r7, #20]
 800cbc6:	f7ff ff0d 	bl	800c9e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cbca:	6a38      	ldr	r0, [r7, #32]
 800cbcc:	f7f7 ffc6 	bl	8004b5c <pbuf_free>
        goto memerr;
 800cbd0:	e064      	b.n	800cc9c <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f7f8 f86c 	bl	8004cb0 <pbuf_ref>
      pcr->original = p;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	4a36      	ldr	r2, [pc, #216]	; (800ccbc <ip4_frag+0x238>)
 800cbe2:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cbe4:	6939      	ldr	r1, [r7, #16]
 800cbe6:	6a38      	ldr	r0, [r7, #32]
 800cbe8:	f7f8 f884 	bl	8004cf4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800cbec:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800cbee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800cbf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d004      	beq.n	800cc04 <ip4_frag+0x180>
        poff = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cc04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1ac      	bne.n	800cb64 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 800cc0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc0e:	4413      	add	r3, r2
 800cc10:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc16:	f1a3 0213 	sub.w	r2, r3, #19
 800cc1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	bfcc      	ite	gt
 800cc20:	2301      	movgt	r3, #1
 800cc22:	2300      	movle	r3, #0
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cc28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cc2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc2e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d103      	bne.n	800cc3e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800cc36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cc38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc3c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cc3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7f6 fe58 	bl	80038f6 <lwip_htons>
 800cc46:	4603      	mov	r3, r0
 800cc48:	461a      	mov	r2, r3
 800cc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800cc4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc50:	3314      	adds	r3, #20
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7f6 fe4e 	bl	80038f6 <lwip_htons>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc64:	2200      	movs	r2, #0
 800cc66:	729a      	strb	r2, [r3, #10]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	695b      	ldr	r3, [r3, #20]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	6a39      	ldr	r1, [r7, #32]
 800cc74:	68b8      	ldr	r0, [r7, #8]
 800cc76:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cc78:	6a38      	ldr	r0, [r7, #32]
 800cc7a:	f7f7 ff6f 	bl	8004b5c <pbuf_free>
    left -= fragsize;
 800cc7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cc80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800cc86:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800cc88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cc8a:	4413      	add	r3, r2
 800cc8c:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800cc8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f47f af3e 	bne.w	800cb12 <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	e002      	b.n	800cca0 <ip4_frag+0x21c>
      goto memerr;
 800cc9a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cc9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3740      	adds	r7, #64	; 0x40
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	0800f7e0 	.word	0x0800f7e0
 800ccac:	0800f96c 	.word	0x0800f96c
 800ccb0:	0800f828 	.word	0x0800f828
 800ccb4:	0800f994 	.word	0x0800f994
 800ccb8:	0800f9b0 	.word	0x0800f9b0
 800ccbc:	0800ca1d 	.word	0x0800ca1d

0800ccc0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800ccca:	230e      	movs	r3, #14
 800cccc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	895b      	ldrh	r3, [r3, #10]
 800ccd2:	2b0e      	cmp	r3, #14
 800ccd4:	d977      	bls.n	800cdc6 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	7b1a      	ldrb	r2, [r3, #12]
 800cce0:	7b5b      	ldrb	r3, [r3, #13]
 800cce2:	021b      	lsls	r3, r3, #8
 800cce4:	4313      	orrs	r3, r2
 800cce6:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d023      	beq.n	800cd3c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d10f      	bne.n	800cd1c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	785b      	ldrb	r3, [r3, #1]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d11b      	bne.n	800cd3c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cd08:	2b5e      	cmp	r3, #94	; 0x5e
 800cd0a:	d117      	bne.n	800cd3c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	7b5b      	ldrb	r3, [r3, #13]
 800cd10:	f043 0310 	orr.w	r3, r3, #16
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	735a      	strb	r2, [r3, #13]
 800cd1a:	e00f      	b.n	800cd3c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	2206      	movs	r2, #6
 800cd20:	4931      	ldr	r1, [pc, #196]	; (800cde8 <ethernet_input+0x128>)
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 f9af 	bl	800d086 <memcmp>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d106      	bne.n	800cd3c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	7b5b      	ldrb	r3, [r3, #13]
 800cd32:	f043 0308 	orr.w	r3, r3, #8
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800cd3c:	89fb      	ldrh	r3, [r7, #14]
 800cd3e:	2b08      	cmp	r3, #8
 800cd40:	d003      	beq.n	800cd4a <ethernet_input+0x8a>
 800cd42:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800cd46:	d01e      	beq.n	800cd86 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cd48:	e046      	b.n	800cdd8 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd50:	f003 0308 	and.w	r3, r3, #8
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d038      	beq.n	800cdca <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	895b      	ldrh	r3, [r3, #10]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	db33      	blt.n	800cdce <ethernet_input+0x10e>
 800cd66:	8afb      	ldrh	r3, [r7, #22]
 800cd68:	425b      	negs	r3, r3
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	b21b      	sxth	r3, r3
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7f7 fecf 	bl	8004b14 <pbuf_header>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d128      	bne.n	800cdce <ethernet_input+0x10e>
        ip4_input(p, netif);
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7fe fef0 	bl	800bb64 <ip4_input>
      break;
 800cd84:	e01d      	b.n	800cdc2 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd8c:	f003 0308 	and.w	r3, r3, #8
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d01e      	beq.n	800cdd2 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	895b      	ldrh	r3, [r3, #10]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	db19      	blt.n	800cdd6 <ethernet_input+0x116>
 800cda2:	8afb      	ldrh	r3, [r7, #22]
 800cda4:	425b      	negs	r3, r3
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	b21b      	sxth	r3, r3
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7f7 feb1 	bl	8004b14 <pbuf_header>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10e      	bne.n	800cdd6 <ethernet_input+0x116>
        etharp_input(p, netif);
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7fe f8c0 	bl	800af40 <etharp_input>
      break;
 800cdc0:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	e00c      	b.n	800cde0 <ethernet_input+0x120>
    goto free_and_return;
 800cdc6:	bf00      	nop
 800cdc8:	e006      	b.n	800cdd8 <ethernet_input+0x118>
        goto free_and_return;
 800cdca:	bf00      	nop
 800cdcc:	e004      	b.n	800cdd8 <ethernet_input+0x118>
        goto free_and_return;
 800cdce:	bf00      	nop
 800cdd0:	e002      	b.n	800cdd8 <ethernet_input+0x118>
        goto free_and_return;
 800cdd2:	bf00      	nop
 800cdd4:	e000      	b.n	800cdd8 <ethernet_input+0x118>
        goto free_and_return;
 800cdd6:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f7f7 febf 	bl	8004b5c <pbuf_free>
  return ERR_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3718      	adds	r7, #24
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	0800fb48 	.word	0x0800fb48

0800cdec <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800cdfa:	8c3b      	ldrh	r3, [r7, #32]
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7f6 fd7a 	bl	80038f6 <lwip_htons>
 800ce02:	4603      	mov	r3, r0
 800ce04:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ce06:	210e      	movs	r1, #14
 800ce08:	68b8      	ldr	r0, [r7, #8]
 800ce0a:	f7f7 fe83 	bl	8004b14 <pbuf_header>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d125      	bne.n	800ce60 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	8afa      	ldrh	r2, [r7, #22]
 800ce1e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	2206      	movs	r2, #6
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 f9c4 	bl	800d1b4 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	3306      	adds	r3, #6
 800ce30:	2206      	movs	r2, #6
 800ce32:	6879      	ldr	r1, [r7, #4]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f000 f9bd 	bl	800d1b4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce40:	2b06      	cmp	r3, #6
 800ce42:	d006      	beq.n	800ce52 <ethernet_output+0x66>
 800ce44:	4b0a      	ldr	r3, [pc, #40]	; (800ce70 <ethernet_output+0x84>)
 800ce46:	f240 122b 	movw	r2, #299	; 0x12b
 800ce4a:	490a      	ldr	r1, [pc, #40]	; (800ce74 <ethernet_output+0x88>)
 800ce4c:	480a      	ldr	r0, [pc, #40]	; (800ce78 <ethernet_output+0x8c>)
 800ce4e:	f000 f8c5 	bl	800cfdc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	68b9      	ldr	r1, [r7, #8]
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	4798      	blx	r3
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	e002      	b.n	800ce66 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ce60:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ce62:	f06f 0301 	mvn.w	r3, #1
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3718      	adds	r7, #24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	0800f9d0 	.word	0x0800f9d0
 800ce74:	0800fa08 	.word	0x0800fa08
 800ce78:	0800fa3c 	.word	0x0800fa3c

0800ce7c <std>:
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	b510      	push	{r4, lr}
 800ce80:	4604      	mov	r4, r0
 800ce82:	e9c0 3300 	strd	r3, r3, [r0]
 800ce86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce8a:	6083      	str	r3, [r0, #8]
 800ce8c:	8181      	strh	r1, [r0, #12]
 800ce8e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce90:	81c2      	strh	r2, [r0, #14]
 800ce92:	6183      	str	r3, [r0, #24]
 800ce94:	4619      	mov	r1, r3
 800ce96:	2208      	movs	r2, #8
 800ce98:	305c      	adds	r0, #92	; 0x5c
 800ce9a:	f000 f904 	bl	800d0a6 <memset>
 800ce9e:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <std+0x38>)
 800cea0:	6224      	str	r4, [r4, #32]
 800cea2:	6263      	str	r3, [r4, #36]	; 0x24
 800cea4:	4b04      	ldr	r3, [pc, #16]	; (800ceb8 <std+0x3c>)
 800cea6:	62a3      	str	r3, [r4, #40]	; 0x28
 800cea8:	4b04      	ldr	r3, [pc, #16]	; (800cebc <std+0x40>)
 800ceaa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ceac:	4b04      	ldr	r3, [pc, #16]	; (800cec0 <std+0x44>)
 800ceae:	6323      	str	r3, [r4, #48]	; 0x30
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	bf00      	nop
 800ceb4:	0800d001 	.word	0x0800d001
 800ceb8:	0800d023 	.word	0x0800d023
 800cebc:	0800d05b 	.word	0x0800d05b
 800cec0:	0800d07f 	.word	0x0800d07f

0800cec4 <stdio_exit_handler>:
 800cec4:	4a02      	ldr	r2, [pc, #8]	; (800ced0 <stdio_exit_handler+0xc>)
 800cec6:	4903      	ldr	r1, [pc, #12]	; (800ced4 <stdio_exit_handler+0x10>)
 800cec8:	4803      	ldr	r0, [pc, #12]	; (800ced8 <stdio_exit_handler+0x14>)
 800ceca:	f000 b869 	b.w	800cfa0 <_fwalk_sglue>
 800cece:	bf00      	nop
 800ced0:	20000010 	.word	0x20000010
 800ced4:	0800da69 	.word	0x0800da69
 800ced8:	2000001c 	.word	0x2000001c

0800cedc <cleanup_stdio>:
 800cedc:	6841      	ldr	r1, [r0, #4]
 800cede:	4b0c      	ldr	r3, [pc, #48]	; (800cf10 <cleanup_stdio+0x34>)
 800cee0:	b510      	push	{r4, lr}
 800cee2:	4299      	cmp	r1, r3
 800cee4:	4604      	mov	r4, r0
 800cee6:	d001      	beq.n	800ceec <cleanup_stdio+0x10>
 800cee8:	f000 fdbe 	bl	800da68 <_fflush_r>
 800ceec:	68a1      	ldr	r1, [r4, #8]
 800ceee:	4b09      	ldr	r3, [pc, #36]	; (800cf14 <cleanup_stdio+0x38>)
 800cef0:	4299      	cmp	r1, r3
 800cef2:	d002      	beq.n	800cefa <cleanup_stdio+0x1e>
 800cef4:	4620      	mov	r0, r4
 800cef6:	f000 fdb7 	bl	800da68 <_fflush_r>
 800cefa:	68e1      	ldr	r1, [r4, #12]
 800cefc:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <cleanup_stdio+0x3c>)
 800cefe:	4299      	cmp	r1, r3
 800cf00:	d004      	beq.n	800cf0c <cleanup_stdio+0x30>
 800cf02:	4620      	mov	r0, r4
 800cf04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf08:	f000 bdae 	b.w	800da68 <_fflush_r>
 800cf0c:	bd10      	pop	{r4, pc}
 800cf0e:	bf00      	nop
 800cf10:	20008a4c 	.word	0x20008a4c
 800cf14:	20008ab4 	.word	0x20008ab4
 800cf18:	20008b1c 	.word	0x20008b1c

0800cf1c <global_stdio_init.part.0>:
 800cf1c:	b510      	push	{r4, lr}
 800cf1e:	4b0b      	ldr	r3, [pc, #44]	; (800cf4c <global_stdio_init.part.0+0x30>)
 800cf20:	4c0b      	ldr	r4, [pc, #44]	; (800cf50 <global_stdio_init.part.0+0x34>)
 800cf22:	4a0c      	ldr	r2, [pc, #48]	; (800cf54 <global_stdio_init.part.0+0x38>)
 800cf24:	4620      	mov	r0, r4
 800cf26:	601a      	str	r2, [r3, #0]
 800cf28:	2104      	movs	r1, #4
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f7ff ffa6 	bl	800ce7c <std>
 800cf30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cf34:	2201      	movs	r2, #1
 800cf36:	2109      	movs	r1, #9
 800cf38:	f7ff ffa0 	bl	800ce7c <std>
 800cf3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cf40:	2202      	movs	r2, #2
 800cf42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf46:	2112      	movs	r1, #18
 800cf48:	f7ff bf98 	b.w	800ce7c <std>
 800cf4c:	20008b84 	.word	0x20008b84
 800cf50:	20008a4c 	.word	0x20008a4c
 800cf54:	0800cec5 	.word	0x0800cec5

0800cf58 <__sfp_lock_acquire>:
 800cf58:	4801      	ldr	r0, [pc, #4]	; (800cf60 <__sfp_lock_acquire+0x8>)
 800cf5a:	f000 b929 	b.w	800d1b0 <__retarget_lock_acquire_recursive>
 800cf5e:	bf00      	nop
 800cf60:	20008b8d 	.word	0x20008b8d

0800cf64 <__sfp_lock_release>:
 800cf64:	4801      	ldr	r0, [pc, #4]	; (800cf6c <__sfp_lock_release+0x8>)
 800cf66:	f000 b924 	b.w	800d1b2 <__retarget_lock_release_recursive>
 800cf6a:	bf00      	nop
 800cf6c:	20008b8d 	.word	0x20008b8d

0800cf70 <__sinit>:
 800cf70:	b510      	push	{r4, lr}
 800cf72:	4604      	mov	r4, r0
 800cf74:	f7ff fff0 	bl	800cf58 <__sfp_lock_acquire>
 800cf78:	6a23      	ldr	r3, [r4, #32]
 800cf7a:	b11b      	cbz	r3, 800cf84 <__sinit+0x14>
 800cf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf80:	f7ff bff0 	b.w	800cf64 <__sfp_lock_release>
 800cf84:	4b04      	ldr	r3, [pc, #16]	; (800cf98 <__sinit+0x28>)
 800cf86:	6223      	str	r3, [r4, #32]
 800cf88:	4b04      	ldr	r3, [pc, #16]	; (800cf9c <__sinit+0x2c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1f5      	bne.n	800cf7c <__sinit+0xc>
 800cf90:	f7ff ffc4 	bl	800cf1c <global_stdio_init.part.0>
 800cf94:	e7f2      	b.n	800cf7c <__sinit+0xc>
 800cf96:	bf00      	nop
 800cf98:	0800cedd 	.word	0x0800cedd
 800cf9c:	20008b84 	.word	0x20008b84

0800cfa0 <_fwalk_sglue>:
 800cfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfa4:	4607      	mov	r7, r0
 800cfa6:	4688      	mov	r8, r1
 800cfa8:	4614      	mov	r4, r2
 800cfaa:	2600      	movs	r6, #0
 800cfac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfb0:	f1b9 0901 	subs.w	r9, r9, #1
 800cfb4:	d505      	bpl.n	800cfc2 <_fwalk_sglue+0x22>
 800cfb6:	6824      	ldr	r4, [r4, #0]
 800cfb8:	2c00      	cmp	r4, #0
 800cfba:	d1f7      	bne.n	800cfac <_fwalk_sglue+0xc>
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfc2:	89ab      	ldrh	r3, [r5, #12]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d907      	bls.n	800cfd8 <_fwalk_sglue+0x38>
 800cfc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	d003      	beq.n	800cfd8 <_fwalk_sglue+0x38>
 800cfd0:	4629      	mov	r1, r5
 800cfd2:	4638      	mov	r0, r7
 800cfd4:	47c0      	blx	r8
 800cfd6:	4306      	orrs	r6, r0
 800cfd8:	3568      	adds	r5, #104	; 0x68
 800cfda:	e7e9      	b.n	800cfb0 <_fwalk_sglue+0x10>

0800cfdc <iprintf>:
 800cfdc:	b40f      	push	{r0, r1, r2, r3}
 800cfde:	b507      	push	{r0, r1, r2, lr}
 800cfe0:	4906      	ldr	r1, [pc, #24]	; (800cffc <iprintf+0x20>)
 800cfe2:	ab04      	add	r3, sp, #16
 800cfe4:	6808      	ldr	r0, [r1, #0]
 800cfe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfea:	6881      	ldr	r1, [r0, #8]
 800cfec:	9301      	str	r3, [sp, #4]
 800cfee:	f000 fa0b 	bl	800d408 <_vfiprintf_r>
 800cff2:	b003      	add	sp, #12
 800cff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cff8:	b004      	add	sp, #16
 800cffa:	4770      	bx	lr
 800cffc:	20000068 	.word	0x20000068

0800d000 <__sread>:
 800d000:	b510      	push	{r4, lr}
 800d002:	460c      	mov	r4, r1
 800d004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d008:	f000 f88a 	bl	800d120 <_read_r>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	bfab      	itete	ge
 800d010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d012:	89a3      	ldrhlt	r3, [r4, #12]
 800d014:	181b      	addge	r3, r3, r0
 800d016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d01a:	bfac      	ite	ge
 800d01c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d01e:	81a3      	strhlt	r3, [r4, #12]
 800d020:	bd10      	pop	{r4, pc}

0800d022 <__swrite>:
 800d022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d026:	461f      	mov	r7, r3
 800d028:	898b      	ldrh	r3, [r1, #12]
 800d02a:	4605      	mov	r5, r0
 800d02c:	05db      	lsls	r3, r3, #23
 800d02e:	460c      	mov	r4, r1
 800d030:	4616      	mov	r6, r2
 800d032:	d505      	bpl.n	800d040 <__swrite+0x1e>
 800d034:	2302      	movs	r3, #2
 800d036:	2200      	movs	r2, #0
 800d038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d03c:	f000 f85e 	bl	800d0fc <_lseek_r>
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	4632      	mov	r2, r6
 800d044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d048:	81a3      	strh	r3, [r4, #12]
 800d04a:	4628      	mov	r0, r5
 800d04c:	463b      	mov	r3, r7
 800d04e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d056:	f000 b875 	b.w	800d144 <_write_r>

0800d05a <__sseek>:
 800d05a:	b510      	push	{r4, lr}
 800d05c:	460c      	mov	r4, r1
 800d05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d062:	f000 f84b 	bl	800d0fc <_lseek_r>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	bf15      	itete	ne
 800d06c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d06e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d076:	81a3      	strheq	r3, [r4, #12]
 800d078:	bf18      	it	ne
 800d07a:	81a3      	strhne	r3, [r4, #12]
 800d07c:	bd10      	pop	{r4, pc}

0800d07e <__sclose>:
 800d07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d082:	f000 b82b 	b.w	800d0dc <_close_r>

0800d086 <memcmp>:
 800d086:	b510      	push	{r4, lr}
 800d088:	3901      	subs	r1, #1
 800d08a:	4402      	add	r2, r0
 800d08c:	4290      	cmp	r0, r2
 800d08e:	d101      	bne.n	800d094 <memcmp+0xe>
 800d090:	2000      	movs	r0, #0
 800d092:	e005      	b.n	800d0a0 <memcmp+0x1a>
 800d094:	7803      	ldrb	r3, [r0, #0]
 800d096:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d09a:	42a3      	cmp	r3, r4
 800d09c:	d001      	beq.n	800d0a2 <memcmp+0x1c>
 800d09e:	1b18      	subs	r0, r3, r4
 800d0a0:	bd10      	pop	{r4, pc}
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	e7f2      	b.n	800d08c <memcmp+0x6>

0800d0a6 <memset>:
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	4402      	add	r2, r0
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d100      	bne.n	800d0b0 <memset+0xa>
 800d0ae:	4770      	bx	lr
 800d0b0:	f803 1b01 	strb.w	r1, [r3], #1
 800d0b4:	e7f9      	b.n	800d0aa <memset+0x4>

0800d0b6 <strncpy>:
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	b510      	push	{r4, lr}
 800d0ba:	3901      	subs	r1, #1
 800d0bc:	b132      	cbz	r2, 800d0cc <strncpy+0x16>
 800d0be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d0c2:	3a01      	subs	r2, #1
 800d0c4:	f803 4b01 	strb.w	r4, [r3], #1
 800d0c8:	2c00      	cmp	r4, #0
 800d0ca:	d1f7      	bne.n	800d0bc <strncpy+0x6>
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	441a      	add	r2, r3
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d100      	bne.n	800d0d6 <strncpy+0x20>
 800d0d4:	bd10      	pop	{r4, pc}
 800d0d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d0da:	e7f9      	b.n	800d0d0 <strncpy+0x1a>

0800d0dc <_close_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	2300      	movs	r3, #0
 800d0e0:	4d05      	ldr	r5, [pc, #20]	; (800d0f8 <_close_r+0x1c>)
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	602b      	str	r3, [r5, #0]
 800d0e8:	f7f3 fbbc 	bl	8000864 <_close>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	d102      	bne.n	800d0f6 <_close_r+0x1a>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	b103      	cbz	r3, 800d0f6 <_close_r+0x1a>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	20008b88 	.word	0x20008b88

0800d0fc <_lseek_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4604      	mov	r4, r0
 800d100:	4608      	mov	r0, r1
 800d102:	4611      	mov	r1, r2
 800d104:	2200      	movs	r2, #0
 800d106:	4d05      	ldr	r5, [pc, #20]	; (800d11c <_lseek_r+0x20>)
 800d108:	602a      	str	r2, [r5, #0]
 800d10a:	461a      	mov	r2, r3
 800d10c:	f7f3 fbce 	bl	80008ac <_lseek>
 800d110:	1c43      	adds	r3, r0, #1
 800d112:	d102      	bne.n	800d11a <_lseek_r+0x1e>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	b103      	cbz	r3, 800d11a <_lseek_r+0x1e>
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
 800d11c:	20008b88 	.word	0x20008b88

0800d120 <_read_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4604      	mov	r4, r0
 800d124:	4608      	mov	r0, r1
 800d126:	4611      	mov	r1, r2
 800d128:	2200      	movs	r2, #0
 800d12a:	4d05      	ldr	r5, [pc, #20]	; (800d140 <_read_r+0x20>)
 800d12c:	602a      	str	r2, [r5, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	f7f3 fb5f 	bl	80007f2 <_read>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_read_r+0x1e>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_read_r+0x1e>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	20008b88 	.word	0x20008b88

0800d144 <_write_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	4604      	mov	r4, r0
 800d148:	4608      	mov	r0, r1
 800d14a:	4611      	mov	r1, r2
 800d14c:	2200      	movs	r2, #0
 800d14e:	4d05      	ldr	r5, [pc, #20]	; (800d164 <_write_r+0x20>)
 800d150:	602a      	str	r2, [r5, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	f7f3 fb6a 	bl	800082c <_write>
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	d102      	bne.n	800d162 <_write_r+0x1e>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	b103      	cbz	r3, 800d162 <_write_r+0x1e>
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	20008b88 	.word	0x20008b88

0800d168 <__libc_init_array>:
 800d168:	b570      	push	{r4, r5, r6, lr}
 800d16a:	2600      	movs	r6, #0
 800d16c:	4d0c      	ldr	r5, [pc, #48]	; (800d1a0 <__libc_init_array+0x38>)
 800d16e:	4c0d      	ldr	r4, [pc, #52]	; (800d1a4 <__libc_init_array+0x3c>)
 800d170:	1b64      	subs	r4, r4, r5
 800d172:	10a4      	asrs	r4, r4, #2
 800d174:	42a6      	cmp	r6, r4
 800d176:	d109      	bne.n	800d18c <__libc_init_array+0x24>
 800d178:	f000 fdd6 	bl	800dd28 <_init>
 800d17c:	2600      	movs	r6, #0
 800d17e:	4d0a      	ldr	r5, [pc, #40]	; (800d1a8 <__libc_init_array+0x40>)
 800d180:	4c0a      	ldr	r4, [pc, #40]	; (800d1ac <__libc_init_array+0x44>)
 800d182:	1b64      	subs	r4, r4, r5
 800d184:	10a4      	asrs	r4, r4, #2
 800d186:	42a6      	cmp	r6, r4
 800d188:	d105      	bne.n	800d196 <__libc_init_array+0x2e>
 800d18a:	bd70      	pop	{r4, r5, r6, pc}
 800d18c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d190:	4798      	blx	r3
 800d192:	3601      	adds	r6, #1
 800d194:	e7ee      	b.n	800d174 <__libc_init_array+0xc>
 800d196:	f855 3b04 	ldr.w	r3, [r5], #4
 800d19a:	4798      	blx	r3
 800d19c:	3601      	adds	r6, #1
 800d19e:	e7f2      	b.n	800d186 <__libc_init_array+0x1e>
 800d1a0:	0800fb94 	.word	0x0800fb94
 800d1a4:	0800fb94 	.word	0x0800fb94
 800d1a8:	0800fb94 	.word	0x0800fb94
 800d1ac:	0800fb98 	.word	0x0800fb98

0800d1b0 <__retarget_lock_acquire_recursive>:
 800d1b0:	4770      	bx	lr

0800d1b2 <__retarget_lock_release_recursive>:
 800d1b2:	4770      	bx	lr

0800d1b4 <memcpy>:
 800d1b4:	440a      	add	r2, r1
 800d1b6:	4291      	cmp	r1, r2
 800d1b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1bc:	d100      	bne.n	800d1c0 <memcpy+0xc>
 800d1be:	4770      	bx	lr
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1c6:	4291      	cmp	r1, r2
 800d1c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1cc:	d1f9      	bne.n	800d1c2 <memcpy+0xe>
 800d1ce:	bd10      	pop	{r4, pc}

0800d1d0 <_free_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	2900      	cmp	r1, #0
 800d1d6:	d040      	beq.n	800d25a <_free_r+0x8a>
 800d1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1dc:	1f0c      	subs	r4, r1, #4
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bfb8      	it	lt
 800d1e2:	18e4      	addlt	r4, r4, r3
 800d1e4:	f000 f8dc 	bl	800d3a0 <__malloc_lock>
 800d1e8:	4a1c      	ldr	r2, [pc, #112]	; (800d25c <_free_r+0x8c>)
 800d1ea:	6813      	ldr	r3, [r2, #0]
 800d1ec:	b933      	cbnz	r3, 800d1fc <_free_r+0x2c>
 800d1ee:	6063      	str	r3, [r4, #4]
 800d1f0:	6014      	str	r4, [r2, #0]
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1f8:	f000 b8d8 	b.w	800d3ac <__malloc_unlock>
 800d1fc:	42a3      	cmp	r3, r4
 800d1fe:	d908      	bls.n	800d212 <_free_r+0x42>
 800d200:	6820      	ldr	r0, [r4, #0]
 800d202:	1821      	adds	r1, r4, r0
 800d204:	428b      	cmp	r3, r1
 800d206:	bf01      	itttt	eq
 800d208:	6819      	ldreq	r1, [r3, #0]
 800d20a:	685b      	ldreq	r3, [r3, #4]
 800d20c:	1809      	addeq	r1, r1, r0
 800d20e:	6021      	streq	r1, [r4, #0]
 800d210:	e7ed      	b.n	800d1ee <_free_r+0x1e>
 800d212:	461a      	mov	r2, r3
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	b10b      	cbz	r3, 800d21c <_free_r+0x4c>
 800d218:	42a3      	cmp	r3, r4
 800d21a:	d9fa      	bls.n	800d212 <_free_r+0x42>
 800d21c:	6811      	ldr	r1, [r2, #0]
 800d21e:	1850      	adds	r0, r2, r1
 800d220:	42a0      	cmp	r0, r4
 800d222:	d10b      	bne.n	800d23c <_free_r+0x6c>
 800d224:	6820      	ldr	r0, [r4, #0]
 800d226:	4401      	add	r1, r0
 800d228:	1850      	adds	r0, r2, r1
 800d22a:	4283      	cmp	r3, r0
 800d22c:	6011      	str	r1, [r2, #0]
 800d22e:	d1e0      	bne.n	800d1f2 <_free_r+0x22>
 800d230:	6818      	ldr	r0, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	4408      	add	r0, r1
 800d236:	6010      	str	r0, [r2, #0]
 800d238:	6053      	str	r3, [r2, #4]
 800d23a:	e7da      	b.n	800d1f2 <_free_r+0x22>
 800d23c:	d902      	bls.n	800d244 <_free_r+0x74>
 800d23e:	230c      	movs	r3, #12
 800d240:	602b      	str	r3, [r5, #0]
 800d242:	e7d6      	b.n	800d1f2 <_free_r+0x22>
 800d244:	6820      	ldr	r0, [r4, #0]
 800d246:	1821      	adds	r1, r4, r0
 800d248:	428b      	cmp	r3, r1
 800d24a:	bf01      	itttt	eq
 800d24c:	6819      	ldreq	r1, [r3, #0]
 800d24e:	685b      	ldreq	r3, [r3, #4]
 800d250:	1809      	addeq	r1, r1, r0
 800d252:	6021      	streq	r1, [r4, #0]
 800d254:	6063      	str	r3, [r4, #4]
 800d256:	6054      	str	r4, [r2, #4]
 800d258:	e7cb      	b.n	800d1f2 <_free_r+0x22>
 800d25a:	bd38      	pop	{r3, r4, r5, pc}
 800d25c:	20008b90 	.word	0x20008b90

0800d260 <sbrk_aligned>:
 800d260:	b570      	push	{r4, r5, r6, lr}
 800d262:	4e0e      	ldr	r6, [pc, #56]	; (800d29c <sbrk_aligned+0x3c>)
 800d264:	460c      	mov	r4, r1
 800d266:	6831      	ldr	r1, [r6, #0]
 800d268:	4605      	mov	r5, r0
 800d26a:	b911      	cbnz	r1, 800d272 <sbrk_aligned+0x12>
 800d26c:	f000 fcba 	bl	800dbe4 <_sbrk_r>
 800d270:	6030      	str	r0, [r6, #0]
 800d272:	4621      	mov	r1, r4
 800d274:	4628      	mov	r0, r5
 800d276:	f000 fcb5 	bl	800dbe4 <_sbrk_r>
 800d27a:	1c43      	adds	r3, r0, #1
 800d27c:	d00a      	beq.n	800d294 <sbrk_aligned+0x34>
 800d27e:	1cc4      	adds	r4, r0, #3
 800d280:	f024 0403 	bic.w	r4, r4, #3
 800d284:	42a0      	cmp	r0, r4
 800d286:	d007      	beq.n	800d298 <sbrk_aligned+0x38>
 800d288:	1a21      	subs	r1, r4, r0
 800d28a:	4628      	mov	r0, r5
 800d28c:	f000 fcaa 	bl	800dbe4 <_sbrk_r>
 800d290:	3001      	adds	r0, #1
 800d292:	d101      	bne.n	800d298 <sbrk_aligned+0x38>
 800d294:	f04f 34ff 	mov.w	r4, #4294967295
 800d298:	4620      	mov	r0, r4
 800d29a:	bd70      	pop	{r4, r5, r6, pc}
 800d29c:	20008b94 	.word	0x20008b94

0800d2a0 <_malloc_r>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	1ccd      	adds	r5, r1, #3
 800d2a6:	f025 0503 	bic.w	r5, r5, #3
 800d2aa:	3508      	adds	r5, #8
 800d2ac:	2d0c      	cmp	r5, #12
 800d2ae:	bf38      	it	cc
 800d2b0:	250c      	movcc	r5, #12
 800d2b2:	2d00      	cmp	r5, #0
 800d2b4:	4607      	mov	r7, r0
 800d2b6:	db01      	blt.n	800d2bc <_malloc_r+0x1c>
 800d2b8:	42a9      	cmp	r1, r5
 800d2ba:	d905      	bls.n	800d2c8 <_malloc_r+0x28>
 800d2bc:	230c      	movs	r3, #12
 800d2be:	2600      	movs	r6, #0
 800d2c0:	603b      	str	r3, [r7, #0]
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d39c <_malloc_r+0xfc>
 800d2cc:	f000 f868 	bl	800d3a0 <__malloc_lock>
 800d2d0:	f8d8 3000 	ldr.w	r3, [r8]
 800d2d4:	461c      	mov	r4, r3
 800d2d6:	bb5c      	cbnz	r4, 800d330 <_malloc_r+0x90>
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4638      	mov	r0, r7
 800d2dc:	f7ff ffc0 	bl	800d260 <sbrk_aligned>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	d155      	bne.n	800d392 <_malloc_r+0xf2>
 800d2e6:	f8d8 4000 	ldr.w	r4, [r8]
 800d2ea:	4626      	mov	r6, r4
 800d2ec:	2e00      	cmp	r6, #0
 800d2ee:	d145      	bne.n	800d37c <_malloc_r+0xdc>
 800d2f0:	2c00      	cmp	r4, #0
 800d2f2:	d048      	beq.n	800d386 <_malloc_r+0xe6>
 800d2f4:	6823      	ldr	r3, [r4, #0]
 800d2f6:	4631      	mov	r1, r6
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	eb04 0903 	add.w	r9, r4, r3
 800d2fe:	f000 fc71 	bl	800dbe4 <_sbrk_r>
 800d302:	4581      	cmp	r9, r0
 800d304:	d13f      	bne.n	800d386 <_malloc_r+0xe6>
 800d306:	6821      	ldr	r1, [r4, #0]
 800d308:	4638      	mov	r0, r7
 800d30a:	1a6d      	subs	r5, r5, r1
 800d30c:	4629      	mov	r1, r5
 800d30e:	f7ff ffa7 	bl	800d260 <sbrk_aligned>
 800d312:	3001      	adds	r0, #1
 800d314:	d037      	beq.n	800d386 <_malloc_r+0xe6>
 800d316:	6823      	ldr	r3, [r4, #0]
 800d318:	442b      	add	r3, r5
 800d31a:	6023      	str	r3, [r4, #0]
 800d31c:	f8d8 3000 	ldr.w	r3, [r8]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d038      	beq.n	800d396 <_malloc_r+0xf6>
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	42a2      	cmp	r2, r4
 800d328:	d12b      	bne.n	800d382 <_malloc_r+0xe2>
 800d32a:	2200      	movs	r2, #0
 800d32c:	605a      	str	r2, [r3, #4]
 800d32e:	e00f      	b.n	800d350 <_malloc_r+0xb0>
 800d330:	6822      	ldr	r2, [r4, #0]
 800d332:	1b52      	subs	r2, r2, r5
 800d334:	d41f      	bmi.n	800d376 <_malloc_r+0xd6>
 800d336:	2a0b      	cmp	r2, #11
 800d338:	d917      	bls.n	800d36a <_malloc_r+0xca>
 800d33a:	1961      	adds	r1, r4, r5
 800d33c:	42a3      	cmp	r3, r4
 800d33e:	6025      	str	r5, [r4, #0]
 800d340:	bf18      	it	ne
 800d342:	6059      	strne	r1, [r3, #4]
 800d344:	6863      	ldr	r3, [r4, #4]
 800d346:	bf08      	it	eq
 800d348:	f8c8 1000 	streq.w	r1, [r8]
 800d34c:	5162      	str	r2, [r4, r5]
 800d34e:	604b      	str	r3, [r1, #4]
 800d350:	4638      	mov	r0, r7
 800d352:	f104 060b 	add.w	r6, r4, #11
 800d356:	f000 f829 	bl	800d3ac <__malloc_unlock>
 800d35a:	f026 0607 	bic.w	r6, r6, #7
 800d35e:	1d23      	adds	r3, r4, #4
 800d360:	1af2      	subs	r2, r6, r3
 800d362:	d0ae      	beq.n	800d2c2 <_malloc_r+0x22>
 800d364:	1b9b      	subs	r3, r3, r6
 800d366:	50a3      	str	r3, [r4, r2]
 800d368:	e7ab      	b.n	800d2c2 <_malloc_r+0x22>
 800d36a:	42a3      	cmp	r3, r4
 800d36c:	6862      	ldr	r2, [r4, #4]
 800d36e:	d1dd      	bne.n	800d32c <_malloc_r+0x8c>
 800d370:	f8c8 2000 	str.w	r2, [r8]
 800d374:	e7ec      	b.n	800d350 <_malloc_r+0xb0>
 800d376:	4623      	mov	r3, r4
 800d378:	6864      	ldr	r4, [r4, #4]
 800d37a:	e7ac      	b.n	800d2d6 <_malloc_r+0x36>
 800d37c:	4634      	mov	r4, r6
 800d37e:	6876      	ldr	r6, [r6, #4]
 800d380:	e7b4      	b.n	800d2ec <_malloc_r+0x4c>
 800d382:	4613      	mov	r3, r2
 800d384:	e7cc      	b.n	800d320 <_malloc_r+0x80>
 800d386:	230c      	movs	r3, #12
 800d388:	4638      	mov	r0, r7
 800d38a:	603b      	str	r3, [r7, #0]
 800d38c:	f000 f80e 	bl	800d3ac <__malloc_unlock>
 800d390:	e797      	b.n	800d2c2 <_malloc_r+0x22>
 800d392:	6025      	str	r5, [r4, #0]
 800d394:	e7dc      	b.n	800d350 <_malloc_r+0xb0>
 800d396:	605b      	str	r3, [r3, #4]
 800d398:	deff      	udf	#255	; 0xff
 800d39a:	bf00      	nop
 800d39c:	20008b90 	.word	0x20008b90

0800d3a0 <__malloc_lock>:
 800d3a0:	4801      	ldr	r0, [pc, #4]	; (800d3a8 <__malloc_lock+0x8>)
 800d3a2:	f7ff bf05 	b.w	800d1b0 <__retarget_lock_acquire_recursive>
 800d3a6:	bf00      	nop
 800d3a8:	20008b8c 	.word	0x20008b8c

0800d3ac <__malloc_unlock>:
 800d3ac:	4801      	ldr	r0, [pc, #4]	; (800d3b4 <__malloc_unlock+0x8>)
 800d3ae:	f7ff bf00 	b.w	800d1b2 <__retarget_lock_release_recursive>
 800d3b2:	bf00      	nop
 800d3b4:	20008b8c 	.word	0x20008b8c

0800d3b8 <__sfputc_r>:
 800d3b8:	6893      	ldr	r3, [r2, #8]
 800d3ba:	b410      	push	{r4}
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	6093      	str	r3, [r2, #8]
 800d3c2:	da07      	bge.n	800d3d4 <__sfputc_r+0x1c>
 800d3c4:	6994      	ldr	r4, [r2, #24]
 800d3c6:	42a3      	cmp	r3, r4
 800d3c8:	db01      	blt.n	800d3ce <__sfputc_r+0x16>
 800d3ca:	290a      	cmp	r1, #10
 800d3cc:	d102      	bne.n	800d3d4 <__sfputc_r+0x1c>
 800d3ce:	bc10      	pop	{r4}
 800d3d0:	f000 bb72 	b.w	800dab8 <__swbuf_r>
 800d3d4:	6813      	ldr	r3, [r2, #0]
 800d3d6:	1c58      	adds	r0, r3, #1
 800d3d8:	6010      	str	r0, [r2, #0]
 800d3da:	7019      	strb	r1, [r3, #0]
 800d3dc:	4608      	mov	r0, r1
 800d3de:	bc10      	pop	{r4}
 800d3e0:	4770      	bx	lr

0800d3e2 <__sfputs_r>:
 800d3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	4614      	mov	r4, r2
 800d3ea:	18d5      	adds	r5, r2, r3
 800d3ec:	42ac      	cmp	r4, r5
 800d3ee:	d101      	bne.n	800d3f4 <__sfputs_r+0x12>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	e007      	b.n	800d404 <__sfputs_r+0x22>
 800d3f4:	463a      	mov	r2, r7
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fc:	f7ff ffdc 	bl	800d3b8 <__sfputc_r>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d1f3      	bne.n	800d3ec <__sfputs_r+0xa>
 800d404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d408 <_vfiprintf_r>:
 800d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40c:	460d      	mov	r5, r1
 800d40e:	4614      	mov	r4, r2
 800d410:	4698      	mov	r8, r3
 800d412:	4606      	mov	r6, r0
 800d414:	b09d      	sub	sp, #116	; 0x74
 800d416:	b118      	cbz	r0, 800d420 <_vfiprintf_r+0x18>
 800d418:	6a03      	ldr	r3, [r0, #32]
 800d41a:	b90b      	cbnz	r3, 800d420 <_vfiprintf_r+0x18>
 800d41c:	f7ff fda8 	bl	800cf70 <__sinit>
 800d420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d422:	07d9      	lsls	r1, r3, #31
 800d424:	d405      	bmi.n	800d432 <_vfiprintf_r+0x2a>
 800d426:	89ab      	ldrh	r3, [r5, #12]
 800d428:	059a      	lsls	r2, r3, #22
 800d42a:	d402      	bmi.n	800d432 <_vfiprintf_r+0x2a>
 800d42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d42e:	f7ff febf 	bl	800d1b0 <__retarget_lock_acquire_recursive>
 800d432:	89ab      	ldrh	r3, [r5, #12]
 800d434:	071b      	lsls	r3, r3, #28
 800d436:	d501      	bpl.n	800d43c <_vfiprintf_r+0x34>
 800d438:	692b      	ldr	r3, [r5, #16]
 800d43a:	b99b      	cbnz	r3, 800d464 <_vfiprintf_r+0x5c>
 800d43c:	4629      	mov	r1, r5
 800d43e:	4630      	mov	r0, r6
 800d440:	f000 fb78 	bl	800db34 <__swsetup_r>
 800d444:	b170      	cbz	r0, 800d464 <_vfiprintf_r+0x5c>
 800d446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d448:	07dc      	lsls	r4, r3, #31
 800d44a:	d504      	bpl.n	800d456 <_vfiprintf_r+0x4e>
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295
 800d450:	b01d      	add	sp, #116	; 0x74
 800d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	0598      	lsls	r0, r3, #22
 800d45a:	d4f7      	bmi.n	800d44c <_vfiprintf_r+0x44>
 800d45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d45e:	f7ff fea8 	bl	800d1b2 <__retarget_lock_release_recursive>
 800d462:	e7f3      	b.n	800d44c <_vfiprintf_r+0x44>
 800d464:	2300      	movs	r3, #0
 800d466:	9309      	str	r3, [sp, #36]	; 0x24
 800d468:	2320      	movs	r3, #32
 800d46a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d46e:	2330      	movs	r3, #48	; 0x30
 800d470:	f04f 0901 	mov.w	r9, #1
 800d474:	f8cd 800c 	str.w	r8, [sp, #12]
 800d478:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d628 <_vfiprintf_r+0x220>
 800d47c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d480:	4623      	mov	r3, r4
 800d482:	469a      	mov	sl, r3
 800d484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d488:	b10a      	cbz	r2, 800d48e <_vfiprintf_r+0x86>
 800d48a:	2a25      	cmp	r2, #37	; 0x25
 800d48c:	d1f9      	bne.n	800d482 <_vfiprintf_r+0x7a>
 800d48e:	ebba 0b04 	subs.w	fp, sl, r4
 800d492:	d00b      	beq.n	800d4ac <_vfiprintf_r+0xa4>
 800d494:	465b      	mov	r3, fp
 800d496:	4622      	mov	r2, r4
 800d498:	4629      	mov	r1, r5
 800d49a:	4630      	mov	r0, r6
 800d49c:	f7ff ffa1 	bl	800d3e2 <__sfputs_r>
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	f000 80a9 	beq.w	800d5f8 <_vfiprintf_r+0x1f0>
 800d4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4a8:	445a      	add	r2, fp
 800d4aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 80a1 	beq.w	800d5f8 <_vfiprintf_r+0x1f0>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c0:	f10a 0a01 	add.w	sl, sl, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	9307      	str	r3, [sp, #28]
 800d4c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ce:	4654      	mov	r4, sl
 800d4d0:	2205      	movs	r2, #5
 800d4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d6:	4854      	ldr	r0, [pc, #336]	; (800d628 <_vfiprintf_r+0x220>)
 800d4d8:	f000 fb94 	bl	800dc04 <memchr>
 800d4dc:	9a04      	ldr	r2, [sp, #16]
 800d4de:	b9d8      	cbnz	r0, 800d518 <_vfiprintf_r+0x110>
 800d4e0:	06d1      	lsls	r1, r2, #27
 800d4e2:	bf44      	itt	mi
 800d4e4:	2320      	movmi	r3, #32
 800d4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ea:	0713      	lsls	r3, r2, #28
 800d4ec:	bf44      	itt	mi
 800d4ee:	232b      	movmi	r3, #43	; 0x2b
 800d4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4fa:	d015      	beq.n	800d528 <_vfiprintf_r+0x120>
 800d4fc:	4654      	mov	r4, sl
 800d4fe:	2000      	movs	r0, #0
 800d500:	f04f 0c0a 	mov.w	ip, #10
 800d504:	9a07      	ldr	r2, [sp, #28]
 800d506:	4621      	mov	r1, r4
 800d508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d50c:	3b30      	subs	r3, #48	; 0x30
 800d50e:	2b09      	cmp	r3, #9
 800d510:	d94d      	bls.n	800d5ae <_vfiprintf_r+0x1a6>
 800d512:	b1b0      	cbz	r0, 800d542 <_vfiprintf_r+0x13a>
 800d514:	9207      	str	r2, [sp, #28]
 800d516:	e014      	b.n	800d542 <_vfiprintf_r+0x13a>
 800d518:	eba0 0308 	sub.w	r3, r0, r8
 800d51c:	fa09 f303 	lsl.w	r3, r9, r3
 800d520:	4313      	orrs	r3, r2
 800d522:	46a2      	mov	sl, r4
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	e7d2      	b.n	800d4ce <_vfiprintf_r+0xc6>
 800d528:	9b03      	ldr	r3, [sp, #12]
 800d52a:	1d19      	adds	r1, r3, #4
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	9103      	str	r1, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	bfbb      	ittet	lt
 800d534:	425b      	neglt	r3, r3
 800d536:	f042 0202 	orrlt.w	r2, r2, #2
 800d53a:	9307      	strge	r3, [sp, #28]
 800d53c:	9307      	strlt	r3, [sp, #28]
 800d53e:	bfb8      	it	lt
 800d540:	9204      	strlt	r2, [sp, #16]
 800d542:	7823      	ldrb	r3, [r4, #0]
 800d544:	2b2e      	cmp	r3, #46	; 0x2e
 800d546:	d10c      	bne.n	800d562 <_vfiprintf_r+0x15a>
 800d548:	7863      	ldrb	r3, [r4, #1]
 800d54a:	2b2a      	cmp	r3, #42	; 0x2a
 800d54c:	d134      	bne.n	800d5b8 <_vfiprintf_r+0x1b0>
 800d54e:	9b03      	ldr	r3, [sp, #12]
 800d550:	3402      	adds	r4, #2
 800d552:	1d1a      	adds	r2, r3, #4
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	9203      	str	r2, [sp, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	bfb8      	it	lt
 800d55c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d560:	9305      	str	r3, [sp, #20]
 800d562:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d62c <_vfiprintf_r+0x224>
 800d566:	2203      	movs	r2, #3
 800d568:	4650      	mov	r0, sl
 800d56a:	7821      	ldrb	r1, [r4, #0]
 800d56c:	f000 fb4a 	bl	800dc04 <memchr>
 800d570:	b138      	cbz	r0, 800d582 <_vfiprintf_r+0x17a>
 800d572:	2240      	movs	r2, #64	; 0x40
 800d574:	9b04      	ldr	r3, [sp, #16]
 800d576:	eba0 000a 	sub.w	r0, r0, sl
 800d57a:	4082      	lsls	r2, r0
 800d57c:	4313      	orrs	r3, r2
 800d57e:	3401      	adds	r4, #1
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d586:	2206      	movs	r2, #6
 800d588:	4829      	ldr	r0, [pc, #164]	; (800d630 <_vfiprintf_r+0x228>)
 800d58a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d58e:	f000 fb39 	bl	800dc04 <memchr>
 800d592:	2800      	cmp	r0, #0
 800d594:	d03f      	beq.n	800d616 <_vfiprintf_r+0x20e>
 800d596:	4b27      	ldr	r3, [pc, #156]	; (800d634 <_vfiprintf_r+0x22c>)
 800d598:	bb1b      	cbnz	r3, 800d5e2 <_vfiprintf_r+0x1da>
 800d59a:	9b03      	ldr	r3, [sp, #12]
 800d59c:	3307      	adds	r3, #7
 800d59e:	f023 0307 	bic.w	r3, r3, #7
 800d5a2:	3308      	adds	r3, #8
 800d5a4:	9303      	str	r3, [sp, #12]
 800d5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a8:	443b      	add	r3, r7
 800d5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ac:	e768      	b.n	800d480 <_vfiprintf_r+0x78>
 800d5ae:	460c      	mov	r4, r1
 800d5b0:	2001      	movs	r0, #1
 800d5b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5b6:	e7a6      	b.n	800d506 <_vfiprintf_r+0xfe>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f04f 0c0a 	mov.w	ip, #10
 800d5be:	4619      	mov	r1, r3
 800d5c0:	3401      	adds	r4, #1
 800d5c2:	9305      	str	r3, [sp, #20]
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ca:	3a30      	subs	r2, #48	; 0x30
 800d5cc:	2a09      	cmp	r2, #9
 800d5ce:	d903      	bls.n	800d5d8 <_vfiprintf_r+0x1d0>
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d0c6      	beq.n	800d562 <_vfiprintf_r+0x15a>
 800d5d4:	9105      	str	r1, [sp, #20]
 800d5d6:	e7c4      	b.n	800d562 <_vfiprintf_r+0x15a>
 800d5d8:	4604      	mov	r4, r0
 800d5da:	2301      	movs	r3, #1
 800d5dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5e0:	e7f0      	b.n	800d5c4 <_vfiprintf_r+0x1bc>
 800d5e2:	ab03      	add	r3, sp, #12
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	462a      	mov	r2, r5
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	4b13      	ldr	r3, [pc, #76]	; (800d638 <_vfiprintf_r+0x230>)
 800d5ec:	a904      	add	r1, sp, #16
 800d5ee:	f3af 8000 	nop.w
 800d5f2:	4607      	mov	r7, r0
 800d5f4:	1c78      	adds	r0, r7, #1
 800d5f6:	d1d6      	bne.n	800d5a6 <_vfiprintf_r+0x19e>
 800d5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5fa:	07d9      	lsls	r1, r3, #31
 800d5fc:	d405      	bmi.n	800d60a <_vfiprintf_r+0x202>
 800d5fe:	89ab      	ldrh	r3, [r5, #12]
 800d600:	059a      	lsls	r2, r3, #22
 800d602:	d402      	bmi.n	800d60a <_vfiprintf_r+0x202>
 800d604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d606:	f7ff fdd4 	bl	800d1b2 <__retarget_lock_release_recursive>
 800d60a:	89ab      	ldrh	r3, [r5, #12]
 800d60c:	065b      	lsls	r3, r3, #25
 800d60e:	f53f af1d 	bmi.w	800d44c <_vfiprintf_r+0x44>
 800d612:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d614:	e71c      	b.n	800d450 <_vfiprintf_r+0x48>
 800d616:	ab03      	add	r3, sp, #12
 800d618:	9300      	str	r3, [sp, #0]
 800d61a:	462a      	mov	r2, r5
 800d61c:	4630      	mov	r0, r6
 800d61e:	4b06      	ldr	r3, [pc, #24]	; (800d638 <_vfiprintf_r+0x230>)
 800d620:	a904      	add	r1, sp, #16
 800d622:	f000 f87d 	bl	800d720 <_printf_i>
 800d626:	e7e4      	b.n	800d5f2 <_vfiprintf_r+0x1ea>
 800d628:	0800fb56 	.word	0x0800fb56
 800d62c:	0800fb5c 	.word	0x0800fb5c
 800d630:	0800fb60 	.word	0x0800fb60
 800d634:	00000000 	.word	0x00000000
 800d638:	0800d3e3 	.word	0x0800d3e3

0800d63c <_printf_common>:
 800d63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d640:	4616      	mov	r6, r2
 800d642:	4699      	mov	r9, r3
 800d644:	688a      	ldr	r2, [r1, #8]
 800d646:	690b      	ldr	r3, [r1, #16]
 800d648:	4607      	mov	r7, r0
 800d64a:	4293      	cmp	r3, r2
 800d64c:	bfb8      	it	lt
 800d64e:	4613      	movlt	r3, r2
 800d650:	6033      	str	r3, [r6, #0]
 800d652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d656:	460c      	mov	r4, r1
 800d658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d65c:	b10a      	cbz	r2, 800d662 <_printf_common+0x26>
 800d65e:	3301      	adds	r3, #1
 800d660:	6033      	str	r3, [r6, #0]
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	0699      	lsls	r1, r3, #26
 800d666:	bf42      	ittt	mi
 800d668:	6833      	ldrmi	r3, [r6, #0]
 800d66a:	3302      	addmi	r3, #2
 800d66c:	6033      	strmi	r3, [r6, #0]
 800d66e:	6825      	ldr	r5, [r4, #0]
 800d670:	f015 0506 	ands.w	r5, r5, #6
 800d674:	d106      	bne.n	800d684 <_printf_common+0x48>
 800d676:	f104 0a19 	add.w	sl, r4, #25
 800d67a:	68e3      	ldr	r3, [r4, #12]
 800d67c:	6832      	ldr	r2, [r6, #0]
 800d67e:	1a9b      	subs	r3, r3, r2
 800d680:	42ab      	cmp	r3, r5
 800d682:	dc2b      	bgt.n	800d6dc <_printf_common+0xa0>
 800d684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d688:	1e13      	subs	r3, r2, #0
 800d68a:	6822      	ldr	r2, [r4, #0]
 800d68c:	bf18      	it	ne
 800d68e:	2301      	movne	r3, #1
 800d690:	0692      	lsls	r2, r2, #26
 800d692:	d430      	bmi.n	800d6f6 <_printf_common+0xba>
 800d694:	4649      	mov	r1, r9
 800d696:	4638      	mov	r0, r7
 800d698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d69c:	47c0      	blx	r8
 800d69e:	3001      	adds	r0, #1
 800d6a0:	d023      	beq.n	800d6ea <_printf_common+0xae>
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	6922      	ldr	r2, [r4, #16]
 800d6a6:	f003 0306 	and.w	r3, r3, #6
 800d6aa:	2b04      	cmp	r3, #4
 800d6ac:	bf14      	ite	ne
 800d6ae:	2500      	movne	r5, #0
 800d6b0:	6833      	ldreq	r3, [r6, #0]
 800d6b2:	f04f 0600 	mov.w	r6, #0
 800d6b6:	bf08      	it	eq
 800d6b8:	68e5      	ldreq	r5, [r4, #12]
 800d6ba:	f104 041a 	add.w	r4, r4, #26
 800d6be:	bf08      	it	eq
 800d6c0:	1aed      	subeq	r5, r5, r3
 800d6c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d6c6:	bf08      	it	eq
 800d6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	bfc4      	itt	gt
 800d6d0:	1a9b      	subgt	r3, r3, r2
 800d6d2:	18ed      	addgt	r5, r5, r3
 800d6d4:	42b5      	cmp	r5, r6
 800d6d6:	d11a      	bne.n	800d70e <_printf_common+0xd2>
 800d6d8:	2000      	movs	r0, #0
 800d6da:	e008      	b.n	800d6ee <_printf_common+0xb2>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	4652      	mov	r2, sl
 800d6e0:	4649      	mov	r1, r9
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	47c0      	blx	r8
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	d103      	bne.n	800d6f2 <_printf_common+0xb6>
 800d6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f2:	3501      	adds	r5, #1
 800d6f4:	e7c1      	b.n	800d67a <_printf_common+0x3e>
 800d6f6:	2030      	movs	r0, #48	; 0x30
 800d6f8:	18e1      	adds	r1, r4, r3
 800d6fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6fe:	1c5a      	adds	r2, r3, #1
 800d700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d704:	4422      	add	r2, r4
 800d706:	3302      	adds	r3, #2
 800d708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d70c:	e7c2      	b.n	800d694 <_printf_common+0x58>
 800d70e:	2301      	movs	r3, #1
 800d710:	4622      	mov	r2, r4
 800d712:	4649      	mov	r1, r9
 800d714:	4638      	mov	r0, r7
 800d716:	47c0      	blx	r8
 800d718:	3001      	adds	r0, #1
 800d71a:	d0e6      	beq.n	800d6ea <_printf_common+0xae>
 800d71c:	3601      	adds	r6, #1
 800d71e:	e7d9      	b.n	800d6d4 <_printf_common+0x98>

0800d720 <_printf_i>:
 800d720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d724:	7e0f      	ldrb	r7, [r1, #24]
 800d726:	4691      	mov	r9, r2
 800d728:	2f78      	cmp	r7, #120	; 0x78
 800d72a:	4680      	mov	r8, r0
 800d72c:	460c      	mov	r4, r1
 800d72e:	469a      	mov	sl, r3
 800d730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d736:	d807      	bhi.n	800d748 <_printf_i+0x28>
 800d738:	2f62      	cmp	r7, #98	; 0x62
 800d73a:	d80a      	bhi.n	800d752 <_printf_i+0x32>
 800d73c:	2f00      	cmp	r7, #0
 800d73e:	f000 80d5 	beq.w	800d8ec <_printf_i+0x1cc>
 800d742:	2f58      	cmp	r7, #88	; 0x58
 800d744:	f000 80c1 	beq.w	800d8ca <_printf_i+0x1aa>
 800d748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d74c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d750:	e03a      	b.n	800d7c8 <_printf_i+0xa8>
 800d752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d756:	2b15      	cmp	r3, #21
 800d758:	d8f6      	bhi.n	800d748 <_printf_i+0x28>
 800d75a:	a101      	add	r1, pc, #4	; (adr r1, 800d760 <_printf_i+0x40>)
 800d75c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d760:	0800d7b9 	.word	0x0800d7b9
 800d764:	0800d7cd 	.word	0x0800d7cd
 800d768:	0800d749 	.word	0x0800d749
 800d76c:	0800d749 	.word	0x0800d749
 800d770:	0800d749 	.word	0x0800d749
 800d774:	0800d749 	.word	0x0800d749
 800d778:	0800d7cd 	.word	0x0800d7cd
 800d77c:	0800d749 	.word	0x0800d749
 800d780:	0800d749 	.word	0x0800d749
 800d784:	0800d749 	.word	0x0800d749
 800d788:	0800d749 	.word	0x0800d749
 800d78c:	0800d8d3 	.word	0x0800d8d3
 800d790:	0800d7f9 	.word	0x0800d7f9
 800d794:	0800d88d 	.word	0x0800d88d
 800d798:	0800d749 	.word	0x0800d749
 800d79c:	0800d749 	.word	0x0800d749
 800d7a0:	0800d8f5 	.word	0x0800d8f5
 800d7a4:	0800d749 	.word	0x0800d749
 800d7a8:	0800d7f9 	.word	0x0800d7f9
 800d7ac:	0800d749 	.word	0x0800d749
 800d7b0:	0800d749 	.word	0x0800d749
 800d7b4:	0800d895 	.word	0x0800d895
 800d7b8:	682b      	ldr	r3, [r5, #0]
 800d7ba:	1d1a      	adds	r2, r3, #4
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	602a      	str	r2, [r5, #0]
 800d7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e0a0      	b.n	800d90e <_printf_i+0x1ee>
 800d7cc:	6820      	ldr	r0, [r4, #0]
 800d7ce:	682b      	ldr	r3, [r5, #0]
 800d7d0:	0607      	lsls	r7, r0, #24
 800d7d2:	f103 0104 	add.w	r1, r3, #4
 800d7d6:	6029      	str	r1, [r5, #0]
 800d7d8:	d501      	bpl.n	800d7de <_printf_i+0xbe>
 800d7da:	681e      	ldr	r6, [r3, #0]
 800d7dc:	e003      	b.n	800d7e6 <_printf_i+0xc6>
 800d7de:	0646      	lsls	r6, r0, #25
 800d7e0:	d5fb      	bpl.n	800d7da <_printf_i+0xba>
 800d7e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d7e6:	2e00      	cmp	r6, #0
 800d7e8:	da03      	bge.n	800d7f2 <_printf_i+0xd2>
 800d7ea:	232d      	movs	r3, #45	; 0x2d
 800d7ec:	4276      	negs	r6, r6
 800d7ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7f2:	230a      	movs	r3, #10
 800d7f4:	4859      	ldr	r0, [pc, #356]	; (800d95c <_printf_i+0x23c>)
 800d7f6:	e012      	b.n	800d81e <_printf_i+0xfe>
 800d7f8:	682b      	ldr	r3, [r5, #0]
 800d7fa:	6820      	ldr	r0, [r4, #0]
 800d7fc:	1d19      	adds	r1, r3, #4
 800d7fe:	6029      	str	r1, [r5, #0]
 800d800:	0605      	lsls	r5, r0, #24
 800d802:	d501      	bpl.n	800d808 <_printf_i+0xe8>
 800d804:	681e      	ldr	r6, [r3, #0]
 800d806:	e002      	b.n	800d80e <_printf_i+0xee>
 800d808:	0641      	lsls	r1, r0, #25
 800d80a:	d5fb      	bpl.n	800d804 <_printf_i+0xe4>
 800d80c:	881e      	ldrh	r6, [r3, #0]
 800d80e:	2f6f      	cmp	r7, #111	; 0x6f
 800d810:	bf0c      	ite	eq
 800d812:	2308      	moveq	r3, #8
 800d814:	230a      	movne	r3, #10
 800d816:	4851      	ldr	r0, [pc, #324]	; (800d95c <_printf_i+0x23c>)
 800d818:	2100      	movs	r1, #0
 800d81a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d81e:	6865      	ldr	r5, [r4, #4]
 800d820:	2d00      	cmp	r5, #0
 800d822:	bfa8      	it	ge
 800d824:	6821      	ldrge	r1, [r4, #0]
 800d826:	60a5      	str	r5, [r4, #8]
 800d828:	bfa4      	itt	ge
 800d82a:	f021 0104 	bicge.w	r1, r1, #4
 800d82e:	6021      	strge	r1, [r4, #0]
 800d830:	b90e      	cbnz	r6, 800d836 <_printf_i+0x116>
 800d832:	2d00      	cmp	r5, #0
 800d834:	d04b      	beq.n	800d8ce <_printf_i+0x1ae>
 800d836:	4615      	mov	r5, r2
 800d838:	fbb6 f1f3 	udiv	r1, r6, r3
 800d83c:	fb03 6711 	mls	r7, r3, r1, r6
 800d840:	5dc7      	ldrb	r7, [r0, r7]
 800d842:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d846:	4637      	mov	r7, r6
 800d848:	42bb      	cmp	r3, r7
 800d84a:	460e      	mov	r6, r1
 800d84c:	d9f4      	bls.n	800d838 <_printf_i+0x118>
 800d84e:	2b08      	cmp	r3, #8
 800d850:	d10b      	bne.n	800d86a <_printf_i+0x14a>
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	07de      	lsls	r6, r3, #31
 800d856:	d508      	bpl.n	800d86a <_printf_i+0x14a>
 800d858:	6923      	ldr	r3, [r4, #16]
 800d85a:	6861      	ldr	r1, [r4, #4]
 800d85c:	4299      	cmp	r1, r3
 800d85e:	bfde      	ittt	le
 800d860:	2330      	movle	r3, #48	; 0x30
 800d862:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d86a:	1b52      	subs	r2, r2, r5
 800d86c:	6122      	str	r2, [r4, #16]
 800d86e:	464b      	mov	r3, r9
 800d870:	4621      	mov	r1, r4
 800d872:	4640      	mov	r0, r8
 800d874:	f8cd a000 	str.w	sl, [sp]
 800d878:	aa03      	add	r2, sp, #12
 800d87a:	f7ff fedf 	bl	800d63c <_printf_common>
 800d87e:	3001      	adds	r0, #1
 800d880:	d14a      	bne.n	800d918 <_printf_i+0x1f8>
 800d882:	f04f 30ff 	mov.w	r0, #4294967295
 800d886:	b004      	add	sp, #16
 800d888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	f043 0320 	orr.w	r3, r3, #32
 800d892:	6023      	str	r3, [r4, #0]
 800d894:	2778      	movs	r7, #120	; 0x78
 800d896:	4832      	ldr	r0, [pc, #200]	; (800d960 <_printf_i+0x240>)
 800d898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d89c:	6823      	ldr	r3, [r4, #0]
 800d89e:	6829      	ldr	r1, [r5, #0]
 800d8a0:	061f      	lsls	r7, r3, #24
 800d8a2:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8a6:	d402      	bmi.n	800d8ae <_printf_i+0x18e>
 800d8a8:	065f      	lsls	r7, r3, #25
 800d8aa:	bf48      	it	mi
 800d8ac:	b2b6      	uxthmi	r6, r6
 800d8ae:	07df      	lsls	r7, r3, #31
 800d8b0:	bf48      	it	mi
 800d8b2:	f043 0320 	orrmi.w	r3, r3, #32
 800d8b6:	6029      	str	r1, [r5, #0]
 800d8b8:	bf48      	it	mi
 800d8ba:	6023      	strmi	r3, [r4, #0]
 800d8bc:	b91e      	cbnz	r6, 800d8c6 <_printf_i+0x1a6>
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	f023 0320 	bic.w	r3, r3, #32
 800d8c4:	6023      	str	r3, [r4, #0]
 800d8c6:	2310      	movs	r3, #16
 800d8c8:	e7a6      	b.n	800d818 <_printf_i+0xf8>
 800d8ca:	4824      	ldr	r0, [pc, #144]	; (800d95c <_printf_i+0x23c>)
 800d8cc:	e7e4      	b.n	800d898 <_printf_i+0x178>
 800d8ce:	4615      	mov	r5, r2
 800d8d0:	e7bd      	b.n	800d84e <_printf_i+0x12e>
 800d8d2:	682b      	ldr	r3, [r5, #0]
 800d8d4:	6826      	ldr	r6, [r4, #0]
 800d8d6:	1d18      	adds	r0, r3, #4
 800d8d8:	6961      	ldr	r1, [r4, #20]
 800d8da:	6028      	str	r0, [r5, #0]
 800d8dc:	0635      	lsls	r5, r6, #24
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	d501      	bpl.n	800d8e6 <_printf_i+0x1c6>
 800d8e2:	6019      	str	r1, [r3, #0]
 800d8e4:	e002      	b.n	800d8ec <_printf_i+0x1cc>
 800d8e6:	0670      	lsls	r0, r6, #25
 800d8e8:	d5fb      	bpl.n	800d8e2 <_printf_i+0x1c2>
 800d8ea:	8019      	strh	r1, [r3, #0]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	4615      	mov	r5, r2
 800d8f0:	6123      	str	r3, [r4, #16]
 800d8f2:	e7bc      	b.n	800d86e <_printf_i+0x14e>
 800d8f4:	682b      	ldr	r3, [r5, #0]
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	1d1a      	adds	r2, r3, #4
 800d8fa:	602a      	str	r2, [r5, #0]
 800d8fc:	681d      	ldr	r5, [r3, #0]
 800d8fe:	6862      	ldr	r2, [r4, #4]
 800d900:	4628      	mov	r0, r5
 800d902:	f000 f97f 	bl	800dc04 <memchr>
 800d906:	b108      	cbz	r0, 800d90c <_printf_i+0x1ec>
 800d908:	1b40      	subs	r0, r0, r5
 800d90a:	6060      	str	r0, [r4, #4]
 800d90c:	6863      	ldr	r3, [r4, #4]
 800d90e:	6123      	str	r3, [r4, #16]
 800d910:	2300      	movs	r3, #0
 800d912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d916:	e7aa      	b.n	800d86e <_printf_i+0x14e>
 800d918:	462a      	mov	r2, r5
 800d91a:	4649      	mov	r1, r9
 800d91c:	4640      	mov	r0, r8
 800d91e:	6923      	ldr	r3, [r4, #16]
 800d920:	47d0      	blx	sl
 800d922:	3001      	adds	r0, #1
 800d924:	d0ad      	beq.n	800d882 <_printf_i+0x162>
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	079b      	lsls	r3, r3, #30
 800d92a:	d413      	bmi.n	800d954 <_printf_i+0x234>
 800d92c:	68e0      	ldr	r0, [r4, #12]
 800d92e:	9b03      	ldr	r3, [sp, #12]
 800d930:	4298      	cmp	r0, r3
 800d932:	bfb8      	it	lt
 800d934:	4618      	movlt	r0, r3
 800d936:	e7a6      	b.n	800d886 <_printf_i+0x166>
 800d938:	2301      	movs	r3, #1
 800d93a:	4632      	mov	r2, r6
 800d93c:	4649      	mov	r1, r9
 800d93e:	4640      	mov	r0, r8
 800d940:	47d0      	blx	sl
 800d942:	3001      	adds	r0, #1
 800d944:	d09d      	beq.n	800d882 <_printf_i+0x162>
 800d946:	3501      	adds	r5, #1
 800d948:	68e3      	ldr	r3, [r4, #12]
 800d94a:	9903      	ldr	r1, [sp, #12]
 800d94c:	1a5b      	subs	r3, r3, r1
 800d94e:	42ab      	cmp	r3, r5
 800d950:	dcf2      	bgt.n	800d938 <_printf_i+0x218>
 800d952:	e7eb      	b.n	800d92c <_printf_i+0x20c>
 800d954:	2500      	movs	r5, #0
 800d956:	f104 0619 	add.w	r6, r4, #25
 800d95a:	e7f5      	b.n	800d948 <_printf_i+0x228>
 800d95c:	0800fb67 	.word	0x0800fb67
 800d960:	0800fb78 	.word	0x0800fb78

0800d964 <__sflush_r>:
 800d964:	898a      	ldrh	r2, [r1, #12]
 800d966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d968:	4605      	mov	r5, r0
 800d96a:	0710      	lsls	r0, r2, #28
 800d96c:	460c      	mov	r4, r1
 800d96e:	d457      	bmi.n	800da20 <__sflush_r+0xbc>
 800d970:	684b      	ldr	r3, [r1, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	dc04      	bgt.n	800d980 <__sflush_r+0x1c>
 800d976:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d978:	2b00      	cmp	r3, #0
 800d97a:	dc01      	bgt.n	800d980 <__sflush_r+0x1c>
 800d97c:	2000      	movs	r0, #0
 800d97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d982:	2e00      	cmp	r6, #0
 800d984:	d0fa      	beq.n	800d97c <__sflush_r+0x18>
 800d986:	2300      	movs	r3, #0
 800d988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d98c:	682f      	ldr	r7, [r5, #0]
 800d98e:	6a21      	ldr	r1, [r4, #32]
 800d990:	602b      	str	r3, [r5, #0]
 800d992:	d032      	beq.n	800d9fa <__sflush_r+0x96>
 800d994:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d996:	89a3      	ldrh	r3, [r4, #12]
 800d998:	075a      	lsls	r2, r3, #29
 800d99a:	d505      	bpl.n	800d9a8 <__sflush_r+0x44>
 800d99c:	6863      	ldr	r3, [r4, #4]
 800d99e:	1ac0      	subs	r0, r0, r3
 800d9a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d9a2:	b10b      	cbz	r3, 800d9a8 <__sflush_r+0x44>
 800d9a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9a6:	1ac0      	subs	r0, r0, r3
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	6a21      	ldr	r1, [r4, #32]
 800d9b2:	47b0      	blx	r6
 800d9b4:	1c43      	adds	r3, r0, #1
 800d9b6:	89a3      	ldrh	r3, [r4, #12]
 800d9b8:	d106      	bne.n	800d9c8 <__sflush_r+0x64>
 800d9ba:	6829      	ldr	r1, [r5, #0]
 800d9bc:	291d      	cmp	r1, #29
 800d9be:	d82b      	bhi.n	800da18 <__sflush_r+0xb4>
 800d9c0:	4a28      	ldr	r2, [pc, #160]	; (800da64 <__sflush_r+0x100>)
 800d9c2:	410a      	asrs	r2, r1
 800d9c4:	07d6      	lsls	r6, r2, #31
 800d9c6:	d427      	bmi.n	800da18 <__sflush_r+0xb4>
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	6062      	str	r2, [r4, #4]
 800d9cc:	6922      	ldr	r2, [r4, #16]
 800d9ce:	04d9      	lsls	r1, r3, #19
 800d9d0:	6022      	str	r2, [r4, #0]
 800d9d2:	d504      	bpl.n	800d9de <__sflush_r+0x7a>
 800d9d4:	1c42      	adds	r2, r0, #1
 800d9d6:	d101      	bne.n	800d9dc <__sflush_r+0x78>
 800d9d8:	682b      	ldr	r3, [r5, #0]
 800d9da:	b903      	cbnz	r3, 800d9de <__sflush_r+0x7a>
 800d9dc:	6560      	str	r0, [r4, #84]	; 0x54
 800d9de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9e0:	602f      	str	r7, [r5, #0]
 800d9e2:	2900      	cmp	r1, #0
 800d9e4:	d0ca      	beq.n	800d97c <__sflush_r+0x18>
 800d9e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9ea:	4299      	cmp	r1, r3
 800d9ec:	d002      	beq.n	800d9f4 <__sflush_r+0x90>
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	f7ff fbee 	bl	800d1d0 <_free_r>
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	6360      	str	r0, [r4, #52]	; 0x34
 800d9f8:	e7c1      	b.n	800d97e <__sflush_r+0x1a>
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	47b0      	blx	r6
 800da00:	1c41      	adds	r1, r0, #1
 800da02:	d1c8      	bne.n	800d996 <__sflush_r+0x32>
 800da04:	682b      	ldr	r3, [r5, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d0c5      	beq.n	800d996 <__sflush_r+0x32>
 800da0a:	2b1d      	cmp	r3, #29
 800da0c:	d001      	beq.n	800da12 <__sflush_r+0xae>
 800da0e:	2b16      	cmp	r3, #22
 800da10:	d101      	bne.n	800da16 <__sflush_r+0xb2>
 800da12:	602f      	str	r7, [r5, #0]
 800da14:	e7b2      	b.n	800d97c <__sflush_r+0x18>
 800da16:	89a3      	ldrh	r3, [r4, #12]
 800da18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da1c:	81a3      	strh	r3, [r4, #12]
 800da1e:	e7ae      	b.n	800d97e <__sflush_r+0x1a>
 800da20:	690f      	ldr	r7, [r1, #16]
 800da22:	2f00      	cmp	r7, #0
 800da24:	d0aa      	beq.n	800d97c <__sflush_r+0x18>
 800da26:	0793      	lsls	r3, r2, #30
 800da28:	bf18      	it	ne
 800da2a:	2300      	movne	r3, #0
 800da2c:	680e      	ldr	r6, [r1, #0]
 800da2e:	bf08      	it	eq
 800da30:	694b      	ldreq	r3, [r1, #20]
 800da32:	1bf6      	subs	r6, r6, r7
 800da34:	600f      	str	r7, [r1, #0]
 800da36:	608b      	str	r3, [r1, #8]
 800da38:	2e00      	cmp	r6, #0
 800da3a:	dd9f      	ble.n	800d97c <__sflush_r+0x18>
 800da3c:	4633      	mov	r3, r6
 800da3e:	463a      	mov	r2, r7
 800da40:	4628      	mov	r0, r5
 800da42:	6a21      	ldr	r1, [r4, #32]
 800da44:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800da48:	47e0      	blx	ip
 800da4a:	2800      	cmp	r0, #0
 800da4c:	dc06      	bgt.n	800da5c <__sflush_r+0xf8>
 800da4e:	89a3      	ldrh	r3, [r4, #12]
 800da50:	f04f 30ff 	mov.w	r0, #4294967295
 800da54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da58:	81a3      	strh	r3, [r4, #12]
 800da5a:	e790      	b.n	800d97e <__sflush_r+0x1a>
 800da5c:	4407      	add	r7, r0
 800da5e:	1a36      	subs	r6, r6, r0
 800da60:	e7ea      	b.n	800da38 <__sflush_r+0xd4>
 800da62:	bf00      	nop
 800da64:	dfbffffe 	.word	0xdfbffffe

0800da68 <_fflush_r>:
 800da68:	b538      	push	{r3, r4, r5, lr}
 800da6a:	690b      	ldr	r3, [r1, #16]
 800da6c:	4605      	mov	r5, r0
 800da6e:	460c      	mov	r4, r1
 800da70:	b913      	cbnz	r3, 800da78 <_fflush_r+0x10>
 800da72:	2500      	movs	r5, #0
 800da74:	4628      	mov	r0, r5
 800da76:	bd38      	pop	{r3, r4, r5, pc}
 800da78:	b118      	cbz	r0, 800da82 <_fflush_r+0x1a>
 800da7a:	6a03      	ldr	r3, [r0, #32]
 800da7c:	b90b      	cbnz	r3, 800da82 <_fflush_r+0x1a>
 800da7e:	f7ff fa77 	bl	800cf70 <__sinit>
 800da82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d0f3      	beq.n	800da72 <_fflush_r+0xa>
 800da8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da8c:	07d0      	lsls	r0, r2, #31
 800da8e:	d404      	bmi.n	800da9a <_fflush_r+0x32>
 800da90:	0599      	lsls	r1, r3, #22
 800da92:	d402      	bmi.n	800da9a <_fflush_r+0x32>
 800da94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da96:	f7ff fb8b 	bl	800d1b0 <__retarget_lock_acquire_recursive>
 800da9a:	4628      	mov	r0, r5
 800da9c:	4621      	mov	r1, r4
 800da9e:	f7ff ff61 	bl	800d964 <__sflush_r>
 800daa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800daa4:	4605      	mov	r5, r0
 800daa6:	07da      	lsls	r2, r3, #31
 800daa8:	d4e4      	bmi.n	800da74 <_fflush_r+0xc>
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	059b      	lsls	r3, r3, #22
 800daae:	d4e1      	bmi.n	800da74 <_fflush_r+0xc>
 800dab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dab2:	f7ff fb7e 	bl	800d1b2 <__retarget_lock_release_recursive>
 800dab6:	e7dd      	b.n	800da74 <_fflush_r+0xc>

0800dab8 <__swbuf_r>:
 800dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daba:	460e      	mov	r6, r1
 800dabc:	4614      	mov	r4, r2
 800dabe:	4605      	mov	r5, r0
 800dac0:	b118      	cbz	r0, 800daca <__swbuf_r+0x12>
 800dac2:	6a03      	ldr	r3, [r0, #32]
 800dac4:	b90b      	cbnz	r3, 800daca <__swbuf_r+0x12>
 800dac6:	f7ff fa53 	bl	800cf70 <__sinit>
 800daca:	69a3      	ldr	r3, [r4, #24]
 800dacc:	60a3      	str	r3, [r4, #8]
 800dace:	89a3      	ldrh	r3, [r4, #12]
 800dad0:	071a      	lsls	r2, r3, #28
 800dad2:	d525      	bpl.n	800db20 <__swbuf_r+0x68>
 800dad4:	6923      	ldr	r3, [r4, #16]
 800dad6:	b31b      	cbz	r3, 800db20 <__swbuf_r+0x68>
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	6922      	ldr	r2, [r4, #16]
 800dadc:	b2f6      	uxtb	r6, r6
 800dade:	1a98      	subs	r0, r3, r2
 800dae0:	6963      	ldr	r3, [r4, #20]
 800dae2:	4637      	mov	r7, r6
 800dae4:	4283      	cmp	r3, r0
 800dae6:	dc04      	bgt.n	800daf2 <__swbuf_r+0x3a>
 800dae8:	4621      	mov	r1, r4
 800daea:	4628      	mov	r0, r5
 800daec:	f7ff ffbc 	bl	800da68 <_fflush_r>
 800daf0:	b9e0      	cbnz	r0, 800db2c <__swbuf_r+0x74>
 800daf2:	68a3      	ldr	r3, [r4, #8]
 800daf4:	3b01      	subs	r3, #1
 800daf6:	60a3      	str	r3, [r4, #8]
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	1c5a      	adds	r2, r3, #1
 800dafc:	6022      	str	r2, [r4, #0]
 800dafe:	701e      	strb	r6, [r3, #0]
 800db00:	6962      	ldr	r2, [r4, #20]
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	429a      	cmp	r2, r3
 800db06:	d004      	beq.n	800db12 <__swbuf_r+0x5a>
 800db08:	89a3      	ldrh	r3, [r4, #12]
 800db0a:	07db      	lsls	r3, r3, #31
 800db0c:	d506      	bpl.n	800db1c <__swbuf_r+0x64>
 800db0e:	2e0a      	cmp	r6, #10
 800db10:	d104      	bne.n	800db1c <__swbuf_r+0x64>
 800db12:	4621      	mov	r1, r4
 800db14:	4628      	mov	r0, r5
 800db16:	f7ff ffa7 	bl	800da68 <_fflush_r>
 800db1a:	b938      	cbnz	r0, 800db2c <__swbuf_r+0x74>
 800db1c:	4638      	mov	r0, r7
 800db1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db20:	4621      	mov	r1, r4
 800db22:	4628      	mov	r0, r5
 800db24:	f000 f806 	bl	800db34 <__swsetup_r>
 800db28:	2800      	cmp	r0, #0
 800db2a:	d0d5      	beq.n	800dad8 <__swbuf_r+0x20>
 800db2c:	f04f 37ff 	mov.w	r7, #4294967295
 800db30:	e7f4      	b.n	800db1c <__swbuf_r+0x64>
	...

0800db34 <__swsetup_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	4b2a      	ldr	r3, [pc, #168]	; (800dbe0 <__swsetup_r+0xac>)
 800db38:	4605      	mov	r5, r0
 800db3a:	6818      	ldr	r0, [r3, #0]
 800db3c:	460c      	mov	r4, r1
 800db3e:	b118      	cbz	r0, 800db48 <__swsetup_r+0x14>
 800db40:	6a03      	ldr	r3, [r0, #32]
 800db42:	b90b      	cbnz	r3, 800db48 <__swsetup_r+0x14>
 800db44:	f7ff fa14 	bl	800cf70 <__sinit>
 800db48:	89a3      	ldrh	r3, [r4, #12]
 800db4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db4e:	0718      	lsls	r0, r3, #28
 800db50:	d422      	bmi.n	800db98 <__swsetup_r+0x64>
 800db52:	06d9      	lsls	r1, r3, #27
 800db54:	d407      	bmi.n	800db66 <__swsetup_r+0x32>
 800db56:	2309      	movs	r3, #9
 800db58:	602b      	str	r3, [r5, #0]
 800db5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db5e:	f04f 30ff 	mov.w	r0, #4294967295
 800db62:	81a3      	strh	r3, [r4, #12]
 800db64:	e034      	b.n	800dbd0 <__swsetup_r+0x9c>
 800db66:	0758      	lsls	r0, r3, #29
 800db68:	d512      	bpl.n	800db90 <__swsetup_r+0x5c>
 800db6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db6c:	b141      	cbz	r1, 800db80 <__swsetup_r+0x4c>
 800db6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db72:	4299      	cmp	r1, r3
 800db74:	d002      	beq.n	800db7c <__swsetup_r+0x48>
 800db76:	4628      	mov	r0, r5
 800db78:	f7ff fb2a 	bl	800d1d0 <_free_r>
 800db7c:	2300      	movs	r3, #0
 800db7e:	6363      	str	r3, [r4, #52]	; 0x34
 800db80:	89a3      	ldrh	r3, [r4, #12]
 800db82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db86:	81a3      	strh	r3, [r4, #12]
 800db88:	2300      	movs	r3, #0
 800db8a:	6063      	str	r3, [r4, #4]
 800db8c:	6923      	ldr	r3, [r4, #16]
 800db8e:	6023      	str	r3, [r4, #0]
 800db90:	89a3      	ldrh	r3, [r4, #12]
 800db92:	f043 0308 	orr.w	r3, r3, #8
 800db96:	81a3      	strh	r3, [r4, #12]
 800db98:	6923      	ldr	r3, [r4, #16]
 800db9a:	b94b      	cbnz	r3, 800dbb0 <__swsetup_r+0x7c>
 800db9c:	89a3      	ldrh	r3, [r4, #12]
 800db9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dba6:	d003      	beq.n	800dbb0 <__swsetup_r+0x7c>
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4628      	mov	r0, r5
 800dbac:	f000 f85d 	bl	800dc6a <__smakebuf_r>
 800dbb0:	89a0      	ldrh	r0, [r4, #12]
 800dbb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbb6:	f010 0301 	ands.w	r3, r0, #1
 800dbba:	d00a      	beq.n	800dbd2 <__swsetup_r+0x9e>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	60a3      	str	r3, [r4, #8]
 800dbc0:	6963      	ldr	r3, [r4, #20]
 800dbc2:	425b      	negs	r3, r3
 800dbc4:	61a3      	str	r3, [r4, #24]
 800dbc6:	6923      	ldr	r3, [r4, #16]
 800dbc8:	b943      	cbnz	r3, 800dbdc <__swsetup_r+0xa8>
 800dbca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbce:	d1c4      	bne.n	800db5a <__swsetup_r+0x26>
 800dbd0:	bd38      	pop	{r3, r4, r5, pc}
 800dbd2:	0781      	lsls	r1, r0, #30
 800dbd4:	bf58      	it	pl
 800dbd6:	6963      	ldrpl	r3, [r4, #20]
 800dbd8:	60a3      	str	r3, [r4, #8]
 800dbda:	e7f4      	b.n	800dbc6 <__swsetup_r+0x92>
 800dbdc:	2000      	movs	r0, #0
 800dbde:	e7f7      	b.n	800dbd0 <__swsetup_r+0x9c>
 800dbe0:	20000068 	.word	0x20000068

0800dbe4 <_sbrk_r>:
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	4d05      	ldr	r5, [pc, #20]	; (800dc00 <_sbrk_r+0x1c>)
 800dbea:	4604      	mov	r4, r0
 800dbec:	4608      	mov	r0, r1
 800dbee:	602b      	str	r3, [r5, #0]
 800dbf0:	f7f2 fe68 	bl	80008c4 <_sbrk>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	d102      	bne.n	800dbfe <_sbrk_r+0x1a>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	b103      	cbz	r3, 800dbfe <_sbrk_r+0x1a>
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	20008b88 	.word	0x20008b88

0800dc04 <memchr>:
 800dc04:	4603      	mov	r3, r0
 800dc06:	b510      	push	{r4, lr}
 800dc08:	b2c9      	uxtb	r1, r1
 800dc0a:	4402      	add	r2, r0
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	4618      	mov	r0, r3
 800dc10:	d101      	bne.n	800dc16 <memchr+0x12>
 800dc12:	2000      	movs	r0, #0
 800dc14:	e003      	b.n	800dc1e <memchr+0x1a>
 800dc16:	7804      	ldrb	r4, [r0, #0]
 800dc18:	3301      	adds	r3, #1
 800dc1a:	428c      	cmp	r4, r1
 800dc1c:	d1f6      	bne.n	800dc0c <memchr+0x8>
 800dc1e:	bd10      	pop	{r4, pc}

0800dc20 <__swhatbuf_r>:
 800dc20:	b570      	push	{r4, r5, r6, lr}
 800dc22:	460c      	mov	r4, r1
 800dc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc28:	4615      	mov	r5, r2
 800dc2a:	2900      	cmp	r1, #0
 800dc2c:	461e      	mov	r6, r3
 800dc2e:	b096      	sub	sp, #88	; 0x58
 800dc30:	da0c      	bge.n	800dc4c <__swhatbuf_r+0x2c>
 800dc32:	89a3      	ldrh	r3, [r4, #12]
 800dc34:	2100      	movs	r1, #0
 800dc36:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc3a:	bf0c      	ite	eq
 800dc3c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc40:	2340      	movne	r3, #64	; 0x40
 800dc42:	2000      	movs	r0, #0
 800dc44:	6031      	str	r1, [r6, #0]
 800dc46:	602b      	str	r3, [r5, #0]
 800dc48:	b016      	add	sp, #88	; 0x58
 800dc4a:	bd70      	pop	{r4, r5, r6, pc}
 800dc4c:	466a      	mov	r2, sp
 800dc4e:	f000 f849 	bl	800dce4 <_fstat_r>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	dbed      	blt.n	800dc32 <__swhatbuf_r+0x12>
 800dc56:	9901      	ldr	r1, [sp, #4]
 800dc58:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc5c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc60:	4259      	negs	r1, r3
 800dc62:	4159      	adcs	r1, r3
 800dc64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc68:	e7eb      	b.n	800dc42 <__swhatbuf_r+0x22>

0800dc6a <__smakebuf_r>:
 800dc6a:	898b      	ldrh	r3, [r1, #12]
 800dc6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc6e:	079d      	lsls	r5, r3, #30
 800dc70:	4606      	mov	r6, r0
 800dc72:	460c      	mov	r4, r1
 800dc74:	d507      	bpl.n	800dc86 <__smakebuf_r+0x1c>
 800dc76:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc7a:	6023      	str	r3, [r4, #0]
 800dc7c:	6123      	str	r3, [r4, #16]
 800dc7e:	2301      	movs	r3, #1
 800dc80:	6163      	str	r3, [r4, #20]
 800dc82:	b002      	add	sp, #8
 800dc84:	bd70      	pop	{r4, r5, r6, pc}
 800dc86:	466a      	mov	r2, sp
 800dc88:	ab01      	add	r3, sp, #4
 800dc8a:	f7ff ffc9 	bl	800dc20 <__swhatbuf_r>
 800dc8e:	9900      	ldr	r1, [sp, #0]
 800dc90:	4605      	mov	r5, r0
 800dc92:	4630      	mov	r0, r6
 800dc94:	f7ff fb04 	bl	800d2a0 <_malloc_r>
 800dc98:	b948      	cbnz	r0, 800dcae <__smakebuf_r+0x44>
 800dc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc9e:	059a      	lsls	r2, r3, #22
 800dca0:	d4ef      	bmi.n	800dc82 <__smakebuf_r+0x18>
 800dca2:	f023 0303 	bic.w	r3, r3, #3
 800dca6:	f043 0302 	orr.w	r3, r3, #2
 800dcaa:	81a3      	strh	r3, [r4, #12]
 800dcac:	e7e3      	b.n	800dc76 <__smakebuf_r+0xc>
 800dcae:	89a3      	ldrh	r3, [r4, #12]
 800dcb0:	6020      	str	r0, [r4, #0]
 800dcb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcb6:	81a3      	strh	r3, [r4, #12]
 800dcb8:	9b00      	ldr	r3, [sp, #0]
 800dcba:	6120      	str	r0, [r4, #16]
 800dcbc:	6163      	str	r3, [r4, #20]
 800dcbe:	9b01      	ldr	r3, [sp, #4]
 800dcc0:	b15b      	cbz	r3, 800dcda <__smakebuf_r+0x70>
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcc8:	f000 f81e 	bl	800dd08 <_isatty_r>
 800dccc:	b128      	cbz	r0, 800dcda <__smakebuf_r+0x70>
 800dcce:	89a3      	ldrh	r3, [r4, #12]
 800dcd0:	f023 0303 	bic.w	r3, r3, #3
 800dcd4:	f043 0301 	orr.w	r3, r3, #1
 800dcd8:	81a3      	strh	r3, [r4, #12]
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	431d      	orrs	r5, r3
 800dcde:	81a5      	strh	r5, [r4, #12]
 800dce0:	e7cf      	b.n	800dc82 <__smakebuf_r+0x18>
	...

0800dce4 <_fstat_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	2300      	movs	r3, #0
 800dce8:	4d06      	ldr	r5, [pc, #24]	; (800dd04 <_fstat_r+0x20>)
 800dcea:	4604      	mov	r4, r0
 800dcec:	4608      	mov	r0, r1
 800dcee:	4611      	mov	r1, r2
 800dcf0:	602b      	str	r3, [r5, #0]
 800dcf2:	f7f2 fdc2 	bl	800087a <_fstat>
 800dcf6:	1c43      	adds	r3, r0, #1
 800dcf8:	d102      	bne.n	800dd00 <_fstat_r+0x1c>
 800dcfa:	682b      	ldr	r3, [r5, #0]
 800dcfc:	b103      	cbz	r3, 800dd00 <_fstat_r+0x1c>
 800dcfe:	6023      	str	r3, [r4, #0]
 800dd00:	bd38      	pop	{r3, r4, r5, pc}
 800dd02:	bf00      	nop
 800dd04:	20008b88 	.word	0x20008b88

0800dd08 <_isatty_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	4d05      	ldr	r5, [pc, #20]	; (800dd24 <_isatty_r+0x1c>)
 800dd0e:	4604      	mov	r4, r0
 800dd10:	4608      	mov	r0, r1
 800dd12:	602b      	str	r3, [r5, #0]
 800dd14:	f7f2 fdc0 	bl	8000898 <_isatty>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	d102      	bne.n	800dd22 <_isatty_r+0x1a>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	b103      	cbz	r3, 800dd22 <_isatty_r+0x1a>
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	bd38      	pop	{r3, r4, r5, pc}
 800dd24:	20008b88 	.word	0x20008b88

0800dd28 <_init>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	bf00      	nop
 800dd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2e:	bc08      	pop	{r3}
 800dd30:	469e      	mov	lr, r3
 800dd32:	4770      	bx	lr

0800dd34 <_fini>:
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd36:	bf00      	nop
 800dd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3a:	bc08      	pop	{r3}
 800dd3c:	469e      	mov	lr, r3
 800dd3e:	4770      	bx	lr
