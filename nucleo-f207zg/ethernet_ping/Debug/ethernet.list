
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d00  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000108c  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f10  08008f10  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f18  08008f18  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f18  08008f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000853c  20000068  08008f88  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200085a4  08008f88  000285a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d83b  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d7  00000000  00000000  0002d90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  00030de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000847  00000000  00000000  00031930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282f9  00000000  00000000  00032177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ad0  00000000  00000000  0005a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc8df  00000000  00000000  00071f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000311c  00000000  00000000  0013e820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0014193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000068 	.word	0x20000068
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08007e6c 	.word	0x08007e6c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000006c 	.word	0x2000006c
 80001c0:	08007e6c 	.word	0x08007e6c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa5a 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80c 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f852 	bl	8000578 <MX_GPIO_Init>
  MX_LWIP_Init();
 80004d4:	f002 face 	bl	8002a74 <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <main+0x20>)
 80004da:	f002 fec1 	bl	8003260 <ethernetif_input>
	  sys_check_timeouts();
 80004de:	f004 fb3d 	bl	8004b5c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80004e2:	e7f9      	b.n	80004d8 <main+0x14>
 80004e4:	2000008c 	.word	0x2000008c

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b092      	sub	sp, #72	; 0x48
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0318 	add.w	r3, r7, #24
 80004f2:	2230      	movs	r2, #48	; 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 fe89 	bl	800720e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	2310      	movs	r3, #16
 8000514:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051a:	2300      	movs	r3, #0
 800051c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 800051e:	230d      	movs	r3, #13
 8000520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000522:	23c3      	movs	r3, #195	; 0xc3
 8000524:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000526:	2302      	movs	r3, #2
 8000528:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800052a:	2305      	movs	r3, #5
 800052c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	f107 0318 	add.w	r3, r7, #24
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fe48 	bl	80021c8 <HAL_RCC_OscConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800053e:	f000 f8fb 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	230f      	movs	r3, #15
 8000544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000546:	2302      	movs	r3, #2
 8000548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800054e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2103      	movs	r1, #3
 800055e:	4618      	mov	r0, r3
 8000560:	f002 f886 	bl	8002670 <HAL_RCC_ClockConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800056a:	f000 f8e5 	bl	8000738 <Error_Handler>
  }
}
 800056e:	bf00      	nop
 8000570:	3748      	adds	r7, #72	; 0x48
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08c      	sub	sp, #48	; 0x30
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
 8000592:	4b63      	ldr	r3, [pc, #396]	; (8000720 <MX_GPIO_Init+0x1a8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a62      	ldr	r2, [pc, #392]	; (8000720 <MX_GPIO_Init+0x1a8>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b60      	ldr	r3, [pc, #384]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	61bb      	str	r3, [r7, #24]
 80005a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	4b5c      	ldr	r3, [pc, #368]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a5b      	ldr	r2, [pc, #364]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b59      	ldr	r3, [pc, #356]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b55      	ldr	r3, [pc, #340]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a54      	ldr	r2, [pc, #336]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b52      	ldr	r3, [pc, #328]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b4e      	ldr	r3, [pc, #312]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a4d      	ldr	r2, [pc, #308]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b4b      	ldr	r3, [pc, #300]	; (8000720 <MX_GPIO_Init+0x1a8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b47      	ldr	r3, [pc, #284]	; (8000720 <MX_GPIO_Init+0x1a8>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a46      	ldr	r2, [pc, #280]	; (8000720 <MX_GPIO_Init+0x1a8>)
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b44      	ldr	r3, [pc, #272]	; (8000720 <MX_GPIO_Init+0x1a8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0308 	and.w	r3, r3, #8
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b40      	ldr	r3, [pc, #256]	; (8000720 <MX_GPIO_Init+0x1a8>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a3f      	ldr	r2, [pc, #252]	; (8000720 <MX_GPIO_Init+0x1a8>)
 8000624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b3d      	ldr	r3, [pc, #244]	; (8000720 <MX_GPIO_Init+0x1a8>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f244 0181 	movw	r1, #16513	; 0x4081
 800063c:	4839      	ldr	r0, [pc, #228]	; (8000724 <MX_GPIO_Init+0x1ac>)
 800063e:	f001 fdab 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2140      	movs	r1, #64	; 0x40
 8000646:	4838      	ldr	r0, [pc, #224]	; (8000728 <MX_GPIO_Init+0x1b0>)
 8000648:	f001 fda6 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800064c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000652:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4832      	ldr	r0, [pc, #200]	; (800072c <MX_GPIO_Init+0x1b4>)
 8000664:	f001 fbfa 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000668:	f244 0381 	movw	r3, #16513	; 0x4081
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4828      	ldr	r0, [pc, #160]	; (8000724 <MX_GPIO_Init+0x1ac>)
 8000682:	f001 fbeb 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000698:	2307      	movs	r3, #7
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	4823      	ldr	r0, [pc, #140]	; (8000730 <MX_GPIO_Init+0x1b8>)
 80006a4:	f001 fbda 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	481a      	ldr	r0, [pc, #104]	; (8000728 <MX_GPIO_Init+0x1b0>)
 80006c0:	f001 fbcc 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4814      	ldr	r0, [pc, #80]	; (8000728 <MX_GPIO_Init+0x1b0>)
 80006d8:	f001 fbc0 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006dc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006ee:	230a      	movs	r3, #10
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	480e      	ldr	r0, [pc, #56]	; (8000734 <MX_GPIO_Init+0x1bc>)
 80006fa:	f001 fbaf 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <MX_GPIO_Init+0x1bc>)
 8000714:	f001 fba2 	bl	8001e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000718:	bf00      	nop
 800071a:	3730      	adds	r7, #48	; 0x30
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40020400 	.word	0x40020400
 8000728:	40021800 	.word	0x40021800
 800072c:	40020800 	.word	0x40020800
 8000730:	40020c00 	.word	0x40020c00
 8000734:	40020000 	.word	0x40020000

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x48>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_MspInit+0x48>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_MspInit+0x48>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_MspInit+0x48>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_MspInit+0x48>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_MspInit+0x48>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40023800 	.word	0x40023800

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d6:	f000 f925 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}

080007de <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e00a      	b.n	8000806 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007f0:	f3af 8000 	nop.w
 80007f4:	4601      	mov	r1, r0
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	60ba      	str	r2, [r7, #8]
 80007fc:	b2ca      	uxtb	r2, r1
 80007fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3301      	adds	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	dbf0      	blt.n	80007f0 <_read+0x12>
  }

  return len;
 800080e:	687b      	ldr	r3, [r7, #4]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e009      	b.n	800083e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	60ba      	str	r2, [r7, #8]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	429a      	cmp	r2, r3
 8000844:	dbf1      	blt.n	800082a <_write+0x12>
  }
  return len;
 8000846:	687b      	ldr	r3, [r7, #4]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <_close>:

int _close(int file)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000876:	605a      	str	r2, [r3, #4]
  return 0;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <_isatty>:

int _isatty(int file)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800088c:	2301      	movs	r3, #1
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <_sbrk+0x5c>)
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <_sbrk+0x60>)
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <_sbrk+0x64>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <_sbrk+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d205      	bcs.n	80008ec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <_sbrk+0x6c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	e009      	b.n	8000900 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a06      	ldr	r2, [pc, #24]	; (8000914 <_sbrk+0x64>)
 80008fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008fe:	68fb      	ldr	r3, [r7, #12]
}
 8000900:	4618      	mov	r0, r3
 8000902:	371c      	adds	r7, #28
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20020000 	.word	0x20020000
 8000910:	00000400 	.word	0x00000400
 8000914:	20000084 	.word	0x20000084
 8000918:	200085a8 	.word	0x200085a8
 800091c:	20008594 	.word	0x20008594

08000920 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000930:	f7ff fff6 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	; (800096c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f006 fca7 	bl	80072ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fdb1 	bl	80004c4 <main>
  bx  lr
 8000962:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000970:	08008f20 	.word	0x08008f20
  ldr r2, =_sbss
 8000974:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000978:	200085a4 	.word	0x200085a4

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_Init+0x40>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_Init+0x40>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_Init+0x40>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f92b 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fec6 	bl	8000744 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f935 	bl	8000c52 <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f90b 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <HAL_IncTick+0x20>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000088 	.word	0x20000088

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b02      	ldr	r3, [pc, #8]	; (8000a58 <HAL_GetTick+0x10>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	20000088 	.word	0x20000088

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff fff0 	bl	8000a48 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffe0 	bl	8000a48 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f7ff ff90 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff49 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff5e 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff90 	bl	8000b5c <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5f 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffb0 	bl	8000bc0 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000c7c:	4ba3      	ldr	r3, [pc, #652]	; (8000f0c <HAL_ETH_Init+0x2a0>)
 8000c7e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e173      	b.n	8000f7a <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f002 f816 	bl	8002cd8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b97      	ldr	r3, [pc, #604]	; (8000f10 <HAL_ETH_Init+0x2a4>)
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb4:	4a96      	ldr	r2, [pc, #600]	; (8000f10 <HAL_ETH_Init+0x2a4>)
 8000cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cba:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbc:	4b94      	ldr	r3, [pc, #592]	; (8000f10 <HAL_ETH_Init+0x2a4>)
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000cc8:	4b92      	ldr	r3, [pc, #584]	; (8000f14 <HAL_ETH_Init+0x2a8>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4a91      	ldr	r2, [pc, #580]	; (8000f14 <HAL_ETH_Init+0x2a8>)
 8000cce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000cd2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000cd4:	4b8f      	ldr	r3, [pc, #572]	; (8000f14 <HAL_ETH_Init+0x2a8>)
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	498d      	ldr	r1, [pc, #564]	; (8000f14 <HAL_ETH_Init+0x2a8>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000cf8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cfa:	f7ff fea5 	bl	8000a48 <HAL_GetTick>
 8000cfe:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d00:	e011      	b.n	8000d26 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8000d02:	f7ff fea1 	bl	8000a48 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d10:	d909      	bls.n	8000d26 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2203      	movs	r2, #3
 8000d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e129      	b.n	8000f7a <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1e4      	bne.n	8000d02 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f023 031c 	bic.w	r3, r3, #28
 8000d46:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000d48:	f001 fe8a 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8000d4c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4a71      	ldr	r2, [pc, #452]	; (8000f18 <HAL_ETH_Init+0x2ac>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d908      	bls.n	8000d68 <HAL_ETH_Init+0xfc>
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4a70      	ldr	r2, [pc, #448]	; (8000f1c <HAL_ETH_Init+0x2b0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d804      	bhi.n	8000d68 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	e01a      	b.n	8000d9e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	4a6c      	ldr	r2, [pc, #432]	; (8000f1c <HAL_ETH_Init+0x2b0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d908      	bls.n	8000d82 <HAL_ETH_Init+0x116>
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	4a66      	ldr	r2, [pc, #408]	; (8000f0c <HAL_ETH_Init+0x2a0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d204      	bcs.n	8000d82 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f043 030c 	orr.w	r3, r3, #12
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	e00d      	b.n	8000d9e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4a61      	ldr	r2, [pc, #388]	; (8000f0c <HAL_ETH_Init+0x2a0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d303      	bcc.n	8000d92 <HAL_ETH_Init+0x126>
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4a64      	ldr	r2, [pc, #400]	; (8000f20 <HAL_ETH_Init+0x2b4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d904      	bls.n	8000d9c <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e000      	b.n	8000d9e <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000d9c:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000da6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000daa:	2100      	movs	r1, #0
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 fb8e 	bl	80014ce <HAL_ETH_WritePHYRegister>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00b      	beq.n	8000dd0 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000dbc:	6939      	ldr	r1, [r7, #16]
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fd44 	bl	800184c <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e0d4      	b.n	8000f7a <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000dd0:	20ff      	movs	r0, #255	; 0xff
 8000dd2:	f7ff fe43 	bl	8000a5c <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 80a2 	beq.w	8000f24 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000de0:	f7ff fe32 	bl	8000a48 <HAL_GetTick>
 8000de4:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	461a      	mov	r2, r3
 8000dec:	2101      	movs	r1, #1
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 fb05 	bl	80013fe <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8000df4:	f7ff fe28 	bl	8000a48 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d90f      	bls.n	8000e26 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e0a:	6939      	ldr	r1, [r7, #16]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fd1d 	bl	800184c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e0a9      	b.n	8000f7a <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0da      	beq.n	8000de6 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e34:	2100      	movs	r1, #0
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 fb49 	bl	80014ce <HAL_ETH_WritePHYRegister>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00b      	beq.n	8000e5a <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000e46:	6939      	ldr	r1, [r7, #16]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 fcff 	bl	800184c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e08f      	b.n	8000f7a <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e5a:	f7ff fdf5 	bl	8000a48 <HAL_GetTick>
 8000e5e:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	461a      	mov	r2, r3
 8000e66:	2101      	movs	r1, #1
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fac8 	bl	80013fe <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000e6e:	f7ff fdeb 	bl	8000a48 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d90f      	bls.n	8000ea0 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e84:	6939      	ldr	r1, [r7, #16]
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 fce0 	bl	800184c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e06c      	b.n	8000f7a <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0da      	beq.n	8000e60 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	461a      	mov	r2, r3
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 faa3 	bl	80013fe <HAL_ETH_ReadPHYRegister>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ec2:	6939      	ldr	r1, [r7, #16]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 fcc1 	bl	800184c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e051      	b.n	8000f7a <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	e002      	b.n	8000ef0 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	e032      	b.n	8000f68 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	e02d      	b.n	8000f68 <HAL_ETH_Init+0x2fc>
 8000f0c:	03938700 	.word	0x03938700
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40013800 	.word	0x40013800
 8000f18:	01312cff 	.word	0x01312cff
 8000f1c:	02160ebf 	.word	0x02160ebf
 8000f20:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	08db      	lsrs	r3, r3, #3
 8000f2a:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	085b      	lsrs	r3, r3, #1
 8000f32:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 fac6 	bl	80014ce <HAL_ETH_WritePHYRegister>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00b      	beq.n	8000f60 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fc7c 	bl	800184c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e00c      	b.n	8000f7a <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000f60:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f64:	f7ff fd7a 	bl	8000a5c <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000f68:	6939      	ldr	r1, [r7, #16]
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fc6e 	bl	800184c <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3720      	adds	r7, #32
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop

08000f84 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <HAL_ETH_DMATxDescListInit+0x20>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e051      	b.n	8001048 <HAL_ETH_DMATxDescListInit+0xc4>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e030      	b.n	8001022 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fd0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000fd8:	fb02 f303 	mul.w	r3, r2, r3
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	d208      	bcs.n	8001016 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	015b      	lsls	r3, r3, #5
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	4413      	add	r3, r2
 800100e:	461a      	mov	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	e002      	b.n	800101c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d3ca      	bcc.n	8000fc0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001034:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001052:	b480      	push	{r7}
 8001054:	b087      	sub	sp, #28
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_ETH_DMARxDescListInit+0x20>
 800106e:	2302      	movs	r3, #2
 8001070:	e055      	b.n	800111e <HAL_ETH_DMARxDescListInit+0xcc>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2202      	movs	r2, #2
 800107e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e034      	b.n	80010f8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	015b      	lsls	r3, r3, #5
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800109e:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80010a6:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	461a      	mov	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d105      	bne.n	80010d0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d208      	bcs.n	80010ec <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	4413      	add	r3, r2
 80010e4:	461a      	mov	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	e002      	b.n	80010f2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3c6      	bcc.n	800108e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800110a:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_ETH_TransmitFrame+0x24>
 8001148:	2302      	movs	r3, #2
 800114a:	e0cc      	b.n	80012e6 <HAL_ETH_TransmitFrame+0x1be>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2202      	movs	r2, #2
 8001158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e0b7      	b.n	80012e6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	da09      	bge.n	8001194 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2212      	movs	r2, #18
 8001184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0a8      	b.n	80012e6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800119a:	4293      	cmp	r3, r2
 800119c:	d915      	bls.n	80011ca <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	4a53      	ldr	r2, [pc, #332]	; (80012f0 <HAL_ETH_TransmitFrame+0x1c8>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0a9b      	lsrs	r3, r3, #10
 80011a8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <HAL_ETH_TransmitFrame+0x1c8>)
 80011ae:	fba3 1302 	umull	r1, r3, r3, r2
 80011b2:	0a9b      	lsrs	r3, r3, #10
 80011b4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80011b8:	fb01 f303 	mul.w	r3, r1, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e001      	b.n	80011ce <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d11c      	bne.n	800120e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011de:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80011e2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80011ee:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011fe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	461a      	mov	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
 800120c:	e04b      	b.n	80012a6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	e044      	b.n	800129e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001222:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d107      	bne.n	800123a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001238:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001242:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3b01      	subs	r3, #1
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	429a      	cmp	r2, r3
 800124c:	d116      	bne.n	800127c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800125c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001262:	fb03 f202 	mul.w	r2, r3, r2
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	4413      	add	r3, r2
 800126a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800126e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800127a:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800128a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	3301      	adds	r3, #1
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d3b6      	bcc.n	8001214 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00d      	beq.n	80012d4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c0:	461a      	mov	r2, r3
 80012c2:	2304      	movs	r3, #4
 80012c4:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ce:	461a      	mov	r2, r3
 80012d0:	2300      	movs	r3, #0
 80012d2:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	ac02b00b 	.word	0xac02b00b
 80012f4:	fffffa0c 	.word	0xfffffa0c

080012f8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_ETH_GetReceivedFrame+0x1a>
 800130e:	2302      	movs	r3, #2
 8001310:	e070      	b.n	80013f4 <HAL_ETH_GetReceivedFrame+0xfc>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2202      	movs	r2, #2
 800131e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db5a      	blt.n	80013e2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d030      	beq.n	800139c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001348:	2b01      	cmp	r3, #1
 800134a:	d103      	bne.n	8001354 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0c1b      	lsrs	r3, r3, #16
 8001364:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001368:	3b04      	subs	r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	e02b      	b.n	80013f4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d010      	beq.n	80013cc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
 80013ca:	e00a      	b.n	80013e2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	461a      	mov	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	460b      	mov	r3, r1
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b82      	cmp	r3, #130	; 0x82
 800141e:	d101      	bne.n	8001424 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001420:	2302      	movs	r3, #2
 8001422:	e050      	b.n	80014c6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2282      	movs	r2, #130	; 0x82
 8001428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f003 031c 	and.w	r3, r3, #28
 800143a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8a1b      	ldrh	r3, [r3, #16]
 8001440:	02db      	lsls	r3, r3, #11
 8001442:	b29b      	uxth	r3, r3
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800144a:	897b      	ldrh	r3, [r7, #10]
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f023 0302 	bic.w	r3, r3, #2
 800145e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001470:	f7ff faea 	bl	8000a48 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001476:	e015      	b.n	80014a4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001478:	f7ff fae6 	bl	8000a48 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001486:	d309      	bcc.n	800149c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e014      	b.n	80014c6 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1e4      	bne.n	8001478 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	460b      	mov	r3, r1
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b42      	cmp	r3, #66	; 0x42
 80014ee:	d101      	bne.n	80014f4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80014f0:	2302      	movs	r3, #2
 80014f2:	e04e      	b.n	8001592 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2242      	movs	r2, #66	; 0x42
 80014f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 031c 	and.w	r3, r3, #28
 800150a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8a1b      	ldrh	r3, [r3, #16]
 8001510:	02db      	lsls	r3, r3, #11
 8001512:	b29b      	uxth	r3, r3
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4313      	orrs	r3, r2
 8001518:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	019b      	lsls	r3, r3, #6
 800151e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4313      	orrs	r3, r2
 8001526:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800154a:	f7ff fa7d 	bl	8000a48 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001550:	e015      	b.n	800157e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001552:	f7ff fa79 	bl	8000a48 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001560:	d309      	bcc.n	8001576 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e00d      	b.n	8001592 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e4      	bne.n	8001552 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_ETH_Start+0x16>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e01f      	b.n	80015f0 <HAL_ETH_Start+0x56>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fb3f 	bl	8001c44 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fb76 	bl	8001cb8 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fc01 	bl	8001dd4 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fbaa 	bl	8001d2c <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fbd1 	bl	8001d80 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_ETH_Stop+0x16>
 800160a:	2302      	movs	r3, #2
 800160c:	e01f      	b.n	800164e <HAL_ETH_Stop+0x56>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fb99 	bl	8001d56 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fbc0 	bl	8001daa <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fb61 	bl	8001cf2 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fbcf 	bl	8001dd4 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fb21 	bl	8001c7e <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_ETH_ConfigMAC+0x1c>
 8001670:	2302      	movs	r3, #2
 8001672:	e0e4      	b.n	800183e <HAL_ETH_ConfigMAC+0x1e6>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80b1 	beq.w	80017ee <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <HAL_ETH_ConfigMAC+0x1f0>)
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80016a4:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 80016aa:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 80016b0:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 80016b6:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 80016bc:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 80016c2:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 80016c8:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 80016ce:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 80016d4:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 80016da:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 80016e0:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 80016e6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff f9ac 	bl	8000a5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001714:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800171a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001720:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8001726:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800172c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001732:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800173e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001740:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff f986 	bl	8000a5c <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001760:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800176a:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	f64f 7341 	movw	r3, #65345	; 0xff41
 800177a:	4013      	ands	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001788:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800178e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001794:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 800179a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80017a0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff f94f 	bl	8000a5c <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff f93c 	bl	8000a5c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	61da      	str	r2, [r3, #28]
 80017ec:	e01e      	b.n	800182c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80017fc:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff f91c 	bl	8000a5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	ff20810f 	.word	0xff20810f

0800184c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0b0      	sub	sp, #192	; 0xc0
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001868:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001870:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800187a:	2300      	movs	r3, #0
 800187c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001896:	663b      	str	r3, [r7, #96]	; 0x60
 8001898:	e001      	b.n	800189e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800189e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018a8:	2300      	movs	r3, #0
 80018aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80018b8:	2340      	movs	r3, #64	; 0x40
 80018ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001920:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001924:	4baa      	ldr	r3, [pc, #680]	; (8001bd0 <ETH_MACDMAConfig+0x384>)
 8001926:	4013      	ands	r3, r2
 8001928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800192c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 800192e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001930:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001934:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001938:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 800193e:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001942:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001946:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 800194c:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 800194e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001950:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001954:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001958:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800195a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 800195c:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 800195e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001960:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001962:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001974:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001980:	2001      	movs	r0, #1
 8001982:	f7ff f86b 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800198e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001990:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001994:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001998:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800199a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800199e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80019a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80019a4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80019a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80019aa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80019ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80019b0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80019b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80019bc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80019be:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f7ff f846 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019d8:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019e2:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019ec:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019fc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a00:	4013      	ands	r3, r2
 8001a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a0a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001a10:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001a16:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001a18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001a1c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8001a22:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001a28:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001a2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a3c:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7ff f807 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a56:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001a58:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8001a5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a72:	2001      	movs	r0, #1
 8001a74:	f7fe fff2 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a80:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8a:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a94:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001adc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <ETH_MACDMAConfig+0x388>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001ae8:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8001aea:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001aec:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8001aee:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8001af0:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8001af2:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8001af4:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8001af6:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8001af8:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8001afa:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8001afc:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8001afe:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8001b00:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8001b04:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8001b08:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001b0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b22:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7fe ff92 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b40:	461a      	mov	r2, r3
 8001b42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b46:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001b4c:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8001b50:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b54:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8001b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8001b58:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b5c:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8001b5e:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8001b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001b62:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b70:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7fe ff6b 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b94:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10d      	bne.n	8001bba <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bb8:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f808 	bl	8001bd8 <ETH_MACAddressConfig>
}
 8001bc8:	bf00      	nop
 8001bca:	37c0      	adds	r7, #192	; 0xc0
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	ff20810f 	.word	0xff20810f
 8001bd4:	f8de3f23 	.word	0xf8de3f23

08001bd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3305      	adds	r3, #5
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	3204      	adds	r2, #4
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <ETH_MACAddressConfig+0x64>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3303      	adds	r3, #3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	061a      	lsls	r2, r3, #24
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3301      	adds	r3, #1
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <ETH_MACAddressConfig+0x68>)
 8001c2a:	4413      	add	r3, r2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40028040 	.word	0x40028040
 8001c40:	40028044 	.word	0x40028044

08001c44 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0208 	orr.w	r2, r2, #8
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f000 f8d9 	bl	8001e20 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0208 	bic.w	r2, r2, #8
 8001c98:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f000 f8bc 	bl	8001e20 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0204 	orr.w	r2, r2, #4
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f000 f89f 	bl	8001e20 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0204 	bic.w	r2, r2, #4
 8001d0c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f000 f882 	bl	8001e20 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	601a      	str	r2, [r3, #0]
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d4a:	6193      	str	r3, [r2, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d74:	6193      	str	r3, [r2, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d9e:	6193      	str	r3, [r2, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	f023 0302 	bic.w	r3, r3, #2
 8001dc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dc8:	6193      	str	r3, [r2, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001df2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001df6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f000 f80b 	bl	8001e20 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e14:	6193      	str	r3, [r2, #24]
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <ETH_Delay+0x34>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <ETH_Delay+0x38>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0a5b      	lsrs	r3, r3, #9
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e3c:	bf00      	nop
  }
  while (Delay --);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1e5a      	subs	r2, r3, #1
 8001e42:	60fa      	str	r2, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f9      	bne.n	8001e3c <ETH_Delay+0x1c>
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20000000 	.word	0x20000000
 8001e58:	10624dd3 	.word	0x10624dd3

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6a:	e16f      	b.n	800214c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8161 	beq.w	8002146 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d005      	beq.n	8001e9c <HAL_GPIO_Init+0x40>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d130      	bne.n	8001efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0201 	and.w	r2, r3, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d017      	beq.n	8001f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d123      	bne.n	8001f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80bb 	beq.w	8002146 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_GPIO_Init+0x30c>)
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_GPIO_Init+0x30c>)
 8001fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fde:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <HAL_GPIO_Init+0x30c>)
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fec:	4a5f      	ldr	r2, [pc, #380]	; (800216c <HAL_GPIO_Init+0x310>)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_GPIO_Init+0x314>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d031      	beq.n	800207c <HAL_GPIO_Init+0x220>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a56      	ldr	r2, [pc, #344]	; (8002174 <HAL_GPIO_Init+0x318>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d02b      	beq.n	8002078 <HAL_GPIO_Init+0x21c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a55      	ldr	r2, [pc, #340]	; (8002178 <HAL_GPIO_Init+0x31c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d025      	beq.n	8002074 <HAL_GPIO_Init+0x218>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a54      	ldr	r2, [pc, #336]	; (800217c <HAL_GPIO_Init+0x320>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d01f      	beq.n	8002070 <HAL_GPIO_Init+0x214>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a53      	ldr	r2, [pc, #332]	; (8002180 <HAL_GPIO_Init+0x324>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d019      	beq.n	800206c <HAL_GPIO_Init+0x210>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_GPIO_Init+0x328>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <HAL_GPIO_Init+0x20c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a51      	ldr	r2, [pc, #324]	; (8002188 <HAL_GPIO_Init+0x32c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_GPIO_Init+0x208>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a50      	ldr	r2, [pc, #320]	; (800218c <HAL_GPIO_Init+0x330>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x204>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a4f      	ldr	r2, [pc, #316]	; (8002190 <HAL_GPIO_Init+0x334>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_GPIO_Init+0x200>
 8002058:	2308      	movs	r3, #8
 800205a:	e010      	b.n	800207e <HAL_GPIO_Init+0x222>
 800205c:	2309      	movs	r3, #9
 800205e:	e00e      	b.n	800207e <HAL_GPIO_Init+0x222>
 8002060:	2307      	movs	r3, #7
 8002062:	e00c      	b.n	800207e <HAL_GPIO_Init+0x222>
 8002064:	2306      	movs	r3, #6
 8002066:	e00a      	b.n	800207e <HAL_GPIO_Init+0x222>
 8002068:	2305      	movs	r3, #5
 800206a:	e008      	b.n	800207e <HAL_GPIO_Init+0x222>
 800206c:	2304      	movs	r3, #4
 800206e:	e006      	b.n	800207e <HAL_GPIO_Init+0x222>
 8002070:	2303      	movs	r3, #3
 8002072:	e004      	b.n	800207e <HAL_GPIO_Init+0x222>
 8002074:	2302      	movs	r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x222>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_GPIO_Init+0x222>
 800207c:	2300      	movs	r3, #0
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	461a      	mov	r2, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002090:	4936      	ldr	r1, [pc, #216]	; (800216c <HAL_GPIO_Init+0x310>)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_GPIO_Init+0x338>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020c2:	4a34      	ldr	r2, [pc, #208]	; (8002194 <HAL_GPIO_Init+0x338>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c8:	4b32      	ldr	r3, [pc, #200]	; (8002194 <HAL_GPIO_Init+0x338>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020ec:	4a29      	ldr	r2, [pc, #164]	; (8002194 <HAL_GPIO_Init+0x338>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_GPIO_Init+0x338>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002116:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <HAL_GPIO_Init+0x338>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_GPIO_Init+0x338>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <HAL_GPIO_Init+0x338>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f47f ae88 	bne.w	8001e6c <HAL_GPIO_Init+0x10>
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40023800 	.word	0x40023800
 800216c:	40013800 	.word	0x40013800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400
 8002178:	40020800 	.word	0x40020800
 800217c:	40020c00 	.word	0x40020c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40021400 	.word	0x40021400
 8002188:	40021800 	.word	0x40021800
 800218c:	40021c00 	.word	0x40021c00
 8002190:	40022000 	.word	0x40022000
 8002194:	40013c00 	.word	0x40013c00

08002198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
 80021a4:	4613      	mov	r3, r2
 80021a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a8:	787b      	ldrb	r3, [r7, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b4:	e003      	b.n	80021be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	041a      	lsls	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	619a      	str	r2, [r3, #24]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e23b      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d050      	beq.n	8002288 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021e6:	4b9e      	ldr	r3, [pc, #632]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d00c      	beq.n	800220c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4b9b      	ldr	r3, [pc, #620]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d112      	bne.n	8002224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fe:	4b98      	ldr	r3, [pc, #608]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800220a:	d10b      	bne.n	8002224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	4b94      	ldr	r3, [pc, #592]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d036      	beq.n	8002286 <HAL_RCC_OscConfig+0xbe>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d132      	bne.n	8002286 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e216      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <HAL_RCC_OscConfig+0x29c>)
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d013      	beq.n	800225e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fc07 	bl	8000a48 <HAL_GetTick>
 800223a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223e:	f7fe fc03 	bl	8000a48 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b64      	cmp	r3, #100	; 0x64
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e200      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002250:	4b83      	ldr	r3, [pc, #524]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x76>
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe fbf3 	bl	8000a48 <HAL_GetTick>
 8002262:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002266:	f7fe fbef 	bl	8000a48 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1ec      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002278:	4b79      	ldr	r3, [pc, #484]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x9e>
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002286:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d077      	beq.n	8002384 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002294:	4b72      	ldr	r3, [pc, #456]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a0:	4b6f      	ldr	r3, [pc, #444]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d126      	bne.n	80022fa <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ac:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d120      	bne.n	80022fa <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b8:	4b69      	ldr	r3, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_OscConfig+0x108>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e1c0      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	21f8      	movs	r1, #248	; 0xf8
 80022de:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	69b9      	ldr	r1, [r7, #24]
 80022e2:	fa91 f1a1 	rbit	r1, r1
 80022e6:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e8:	6979      	ldr	r1, [r7, #20]
 80022ea:	fab1 f181 	clz	r1, r1
 80022ee:	b2c9      	uxtb	r1, r1
 80022f0:	408b      	lsls	r3, r1
 80022f2:	495b      	ldr	r1, [pc, #364]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f8:	e044      	b.n	8002384 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d02a      	beq.n	8002358 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002302:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_OscConfig+0x2a0>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fb9e 	bl	8000a48 <HAL_GetTick>
 800230c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fb9a 	bl	8000a48 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e197      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	4b4f      	ldr	r3, [pc, #316]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	21f8      	movs	r1, #248	; 0xf8
 800233c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	6939      	ldr	r1, [r7, #16]
 8002340:	fa91 f1a1 	rbit	r1, r1
 8002344:	60f9      	str	r1, [r7, #12]
  return result;
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	fab1 f181 	clz	r1, r1
 800234c:	b2c9      	uxtb	r1, r1
 800234e:	408b      	lsls	r3, r1
 8002350:	4943      	ldr	r1, [pc, #268]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
 8002356:	e015      	b.n	8002384 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002358:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0x2a0>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe fb73 	bl	8000a48 <HAL_GetTick>
 8002362:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002366:	f7fe fb6f 	bl	8000a48 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e16c      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d030      	beq.n	80023f2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d016      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCC_OscConfig+0x2a4>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7fe fb53 	bl	8000a48 <HAL_GetTick>
 80023a2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a6:	f7fe fb4f 	bl	8000a48 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e14c      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1de>
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_RCC_OscConfig+0x2a4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023cc:	f7fe fb3c 	bl	8000a48 <HAL_GetTick>
 80023d0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d4:	f7fe fb38 	bl	8000a48 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e135      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 80023e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8087 	beq.w	800250e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d110      	bne.n	8002434 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a11      	ldr	r2, [pc, #68]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_RCC_OscConfig+0x298>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_RCC_OscConfig+0x2a8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_RCC_OscConfig+0x2a8>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_OscConfig+0x2a8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d122      	bne.n	8002492 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_RCC_OscConfig+0x2a8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_RCC_OscConfig+0x2a8>)
 8002452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002456:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002458:	f7fe faf6 	bl	8000a48 <HAL_GetTick>
 800245c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245e:	e012      	b.n	8002486 <HAL_RCC_OscConfig+0x2be>
 8002460:	40023800 	.word	0x40023800
 8002464:	40023802 	.word	0x40023802
 8002468:	42470000 	.word	0x42470000
 800246c:	42470e80 	.word	0x42470e80
 8002470:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fae8 	bl	8000a48 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0e5      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b75      	ldr	r3, [pc, #468]	; (800265c <HAL_RCC_OscConfig+0x494>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_OscConfig+0x498>)
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d015      	beq.n	80024d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a4:	f7fe fad0 	bl	8000a48 <HAL_GetTick>
 80024a8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe facc 	bl	8000a48 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0c7      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0ee      	beq.n	80024ac <HAL_RCC_OscConfig+0x2e4>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7fe faba 	bl	8000a48 <HAL_GetTick>
 80024d4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7fe fab6 	bl	8000a48 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0b1      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	4b5d      	ldr	r3, [pc, #372]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ee      	bne.n	80024d8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b58      	ldr	r3, [pc, #352]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 809c 	beq.w	8002650 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002518:	4b52      	ldr	r3, [pc, #328]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d061      	beq.n	80025e8 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d146      	bne.n	80025ba <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b4e      	ldr	r3, [pc, #312]	; (8002668 <HAL_RCC_OscConfig+0x4a0>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe fa89 	bl	8000a48 <HAL_GetTick>
 8002536:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fa85 	bl	8000a48 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b64      	cmp	r3, #100	; 0x64
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e082      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254c:	4b45      	ldr	r3, [pc, #276]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCC_OscConfig+0x4a4>)
 800255e:	4013      	ands	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	69d1      	ldr	r1, [r2, #28]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6a12      	ldr	r2, [r2, #32]
 8002568:	4311      	orrs	r1, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800256e:	0192      	lsls	r2, r2, #6
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002576:	0612      	lsls	r2, r2, #24
 8002578:	4311      	orrs	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800257e:	0852      	lsrs	r2, r2, #1
 8002580:	3a01      	subs	r2, #1
 8002582:	0412      	lsls	r2, r2, #16
 8002584:	430a      	orrs	r2, r1
 8002586:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <HAL_RCC_OscConfig+0x4a0>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fa59 	bl	8000a48 <HAL_GetTick>
 8002596:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fa55 	bl	8000a48 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e052      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x3d2>
 80025b8:	e04a      	b.n	8002650 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_OscConfig+0x4a0>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fa42 	bl	8000a48 <HAL_GetTick>
 80025c4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fa3e 	bl	8000a48 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e03b      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x400>
 80025e6:	e033      	b.n	8002650 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e02e      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x49c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	429a      	cmp	r2, r3
 8002606:	d121      	bne.n	800264c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d11a      	bne.n	800264c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002622:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002624:	4293      	cmp	r3, r2
 8002626:	d111      	bne.n	800264c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	3b01      	subs	r3, #1
 8002636:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d107      	bne.n	800264c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3728      	adds	r7, #40	; 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40007000 	.word	0x40007000
 8002660:	40023870 	.word	0x40023870
 8002664:	40023800 	.word	0x40023800
 8002668:	42470060 	.word	0x42470060
 800266c:	f0bc8000 	.word	0xf0bc8000

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0d2      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b6b      	ldr	r3, [pc, #428]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d90c      	bls.n	80026ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b68      	ldr	r3, [pc, #416]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b66      	ldr	r3, [pc, #408]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0be      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a5b      	ldr	r2, [pc, #364]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80026dc:	4b56      	ldr	r3, [pc, #344]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a55      	ldr	r2, [pc, #340]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4950      	ldr	r1, [pc, #320]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d040      	beq.n	8002788 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e085      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e079      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e071      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b3c      	ldr	r3, [pc, #240]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4939      	ldr	r1, [pc, #228]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7fe f976 	bl	8000a48 <HAL_GetTick>
 800275c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fe f972 	bl	8000a48 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e059      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d20c      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b25      	ldr	r3, [pc, #148]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e03c      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027bc:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	491b      	ldr	r1, [pc, #108]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4913      	ldr	r1, [pc, #76]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80027ee:	f000 f82b 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80027f2:	4601      	mov	r1, r0
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fc:	22f0      	movs	r2, #240	; 0xf0
 80027fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	fa92 f2a2 	rbit	r2, r2
 8002806:	60fa      	str	r2, [r7, #12]
  return result;
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	40d3      	lsrs	r3, r2
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x1cc>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	fa21 f303 	lsr.w	r3, r1, r3
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1d0>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1d4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe f8ce 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00
 8002838:	40023800 	.word	0x40023800
 800283c:	08008e58 	.word	0x08008e58
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b094      	sub	sp, #80	; 0x50
 800284e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	647b      	str	r3, [r7, #68]	; 0x44
 8002854:	2300      	movs	r3, #0
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002858:	2300      	movs	r3, #0
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002860:	4b7c      	ldr	r3, [pc, #496]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d00d      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x40>
 800286c:	2b08      	cmp	r3, #8
 800286e:	f200 80e7 	bhi.w	8002a40 <HAL_RCC_GetSysClockFreq+0x1f8>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x34>
 8002876:	2b04      	cmp	r3, #4
 8002878:	d003      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x3a>
 800287a:	e0e1      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b76      	ldr	r3, [pc, #472]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x210>)
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002880:	e0e1      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002882:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x214>)
 8002884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002886:	e0de      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002888:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x20c>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d065      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x20c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	2200      	movs	r2, #0
 80028a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
 80028b2:	2300      	movs	r3, #0
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
 80028b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ba:	4622      	mov	r2, r4
 80028bc:	462b      	mov	r3, r5
 80028be:	f04f 0000 	mov.w	r0, #0
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	0159      	lsls	r1, r3, #5
 80028c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028cc:	0150      	lsls	r0, r2, #5
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4621      	mov	r1, r4
 80028d4:	1a51      	subs	r1, r2, r1
 80028d6:	6139      	str	r1, [r7, #16]
 80028d8:	4629      	mov	r1, r5
 80028da:	eb63 0301 	sbc.w	r3, r3, r1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028ec:	4659      	mov	r1, fp
 80028ee:	018b      	lsls	r3, r1, #6
 80028f0:	4651      	mov	r1, sl
 80028f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f6:	4651      	mov	r1, sl
 80028f8:	018a      	lsls	r2, r1, #6
 80028fa:	46d4      	mov	ip, sl
 80028fc:	ebb2 080c 	subs.w	r8, r2, ip
 8002900:	4659      	mov	r1, fp
 8002902:	eb63 0901 	sbc.w	r9, r3, r1
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	4623      	mov	r3, r4
 8002920:	eb18 0303 	adds.w	r3, r8, r3
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	462b      	mov	r3, r5
 8002928:	eb49 0303 	adc.w	r3, r9, r3
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293a:	4629      	mov	r1, r5
 800293c:	024b      	lsls	r3, r1, #9
 800293e:	4620      	mov	r0, r4
 8002940:	4629      	mov	r1, r5
 8002942:	4604      	mov	r4, r0
 8002944:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002948:	4601      	mov	r1, r0
 800294a:	024a      	lsls	r2, r1, #9
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002952:	2200      	movs	r2, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800295c:	f7fd fc32 	bl	80001c4 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002968:	e05c      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x20c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	4618      	mov	r0, r3
 8002974:	4611      	mov	r1, r2
 8002976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002984:	4642      	mov	r2, r8
 8002986:	464b      	mov	r3, r9
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	0159      	lsls	r1, r3, #5
 8002992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002996:	0150      	lsls	r0, r2, #5
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	46c4      	mov	ip, r8
 800299e:	ebb2 0a0c 	subs.w	sl, r2, ip
 80029a2:	4640      	mov	r0, r8
 80029a4:	4649      	mov	r1, r9
 80029a6:	468c      	mov	ip, r1
 80029a8:	eb63 0b0c 	sbc.w	fp, r3, ip
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029c0:	ebb2 040a 	subs.w	r4, r2, sl
 80029c4:	eb63 050b 	sbc.w	r5, r3, fp
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	00eb      	lsls	r3, r5, #3
 80029d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d6:	00e2      	lsls	r2, r4, #3
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	4603      	mov	r3, r0
 80029de:	18e3      	adds	r3, r4, r3
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	460b      	mov	r3, r1
 80029e4:	eb45 0303 	adc.w	r3, r5, r3
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029f6:	4629      	mov	r1, r5
 80029f8:	028b      	lsls	r3, r1, #10
 80029fa:	4620      	mov	r0, r4
 80029fc:	4629      	mov	r1, r5
 80029fe:	4604      	mov	r4, r0
 8002a00:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002a04:	4601      	mov	r1, r0
 8002a06:	028a      	lsls	r2, r1, #10
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	61fa      	str	r2, [r7, #28]
 8002a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a18:	f7fd fbd4 	bl	80001c4 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4613      	mov	r3, r2
 8002a22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a3e:	e002      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x210>)
 8002a42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3750      	adds	r7, #80	; 0x50
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	00f42400 	.word	0x00f42400
 8002a5c:	007a1200 	.word	0x007a1200

08002a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b02      	ldr	r3, [pc, #8]	; (8002a70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000000 	.word	0x20000000

08002a74 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002a7a:	4b8d      	ldr	r3, [pc, #564]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002a7c:	22c0      	movs	r2, #192	; 0xc0
 8002a7e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002a80:	4b8b      	ldr	r3, [pc, #556]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002a82:	22a8      	movs	r2, #168	; 0xa8
 8002a84:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8002a86:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 8002a8c:	4b88      	ldr	r3, [pc, #544]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002a8e:	226e      	movs	r2, #110	; 0x6e
 8002a90:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002a92:	4b88      	ldr	r3, [pc, #544]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002a98:	4b86      	ldr	r3, [pc, #536]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002a9a:	22ff      	movs	r2, #255	; 0xff
 8002a9c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002a9e:	4b85      	ldr	r3, [pc, #532]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002aa4:	4b83      	ldr	r3, [pc, #524]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002aaa:	4b83      	ldr	r3, [pc, #524]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002aac:	22c0      	movs	r2, #192	; 0xc0
 8002aae:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002ab0:	4b81      	ldr	r3, [pc, #516]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002ab2:	22a8      	movs	r2, #168	; 0xa8
 8002ab4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002ab6:	4b80      	ldr	r3, [pc, #512]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002abc:	4b7e      	ldr	r3, [pc, #504]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002ac2:	f000 fcb5 	bl	8003430 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	061a      	lsls	r2, r3, #24
 8002acc:	4b78      	ldr	r3, [pc, #480]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002ad6:	789b      	ldrb	r3, [r3, #2]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	4313      	orrs	r3, r2
 8002adc:	4a74      	ldr	r2, [pc, #464]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002ade:	78d2      	ldrb	r2, [r2, #3]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	061a      	lsls	r2, r3, #24
 8002ae4:	4b72      	ldr	r3, [pc, #456]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	0619      	lsls	r1, r3, #24
 8002aea:	4b71      	ldr	r3, [pc, #452]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	4319      	orrs	r1, r3
 8002af2:	4b6f      	ldr	r3, [pc, #444]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002af4:	789b      	ldrb	r3, [r3, #2]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	430b      	orrs	r3, r1
 8002afa:	496d      	ldr	r1, [pc, #436]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002afc:	78c9      	ldrb	r1, [r1, #3]
 8002afe:	430b      	orrs	r3, r1
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b06:	431a      	orrs	r2, r3
 8002b08:	4b69      	ldr	r3, [pc, #420]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	0619      	lsls	r1, r3, #24
 8002b0e:	4b68      	ldr	r3, [pc, #416]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	4319      	orrs	r1, r3
 8002b16:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002b18:	789b      	ldrb	r3, [r3, #2]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	4964      	ldr	r1, [pc, #400]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002b20:	78c9      	ldrb	r1, [r1, #3]
 8002b22:	430b      	orrs	r3, r1
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	4b60      	ldr	r3, [pc, #384]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	0619      	lsls	r1, r3, #24
 8002b32:	4b5f      	ldr	r3, [pc, #380]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	4319      	orrs	r1, r3
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002b3c:	789b      	ldrb	r3, [r3, #2]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	430b      	orrs	r3, r1
 8002b42:	495b      	ldr	r1, [pc, #364]	; (8002cb0 <MX_LWIP_Init+0x23c>)
 8002b44:	78c9      	ldrb	r1, [r1, #3]
 8002b46:	430b      	orrs	r3, r1
 8002b48:	0e1b      	lsrs	r3, r3, #24
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	4a5b      	ldr	r2, [pc, #364]	; (8002cbc <MX_LWIP_Init+0x248>)
 8002b4e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002b50:	4b58      	ldr	r3, [pc, #352]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	061a      	lsls	r2, r3, #24
 8002b56:	4b57      	ldr	r3, [pc, #348]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b58:	785b      	ldrb	r3, [r3, #1]
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b60:	789b      	ldrb	r3, [r3, #2]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	4313      	orrs	r3, r2
 8002b66:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b68:	78d2      	ldrb	r2, [r2, #3]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	061a      	lsls	r2, r3, #24
 8002b6e:	4b51      	ldr	r3, [pc, #324]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	0619      	lsls	r1, r3, #24
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	4319      	orrs	r1, r3
 8002b7c:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b7e:	789b      	ldrb	r3, [r3, #2]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	430b      	orrs	r3, r1
 8002b84:	494b      	ldr	r1, [pc, #300]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b86:	78c9      	ldrb	r1, [r1, #3]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b90:	431a      	orrs	r2, r3
 8002b92:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	0619      	lsls	r1, r3, #24
 8002b98:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	4319      	orrs	r1, r3
 8002ba0:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002ba2:	789b      	ldrb	r3, [r3, #2]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	4942      	ldr	r1, [pc, #264]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002baa:	78c9      	ldrb	r1, [r1, #3]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	0619      	lsls	r1, r3, #24
 8002bbc:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	4319      	orrs	r1, r3
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002bc6:	789b      	ldrb	r3, [r3, #2]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	4939      	ldr	r1, [pc, #228]	; (8002cb4 <MX_LWIP_Init+0x240>)
 8002bce:	78c9      	ldrb	r1, [r1, #3]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	0e1b      	lsrs	r3, r3, #24
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	4a3a      	ldr	r2, [pc, #232]	; (8002cc0 <MX_LWIP_Init+0x24c>)
 8002bd8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	061a      	lsls	r2, r3, #24
 8002be0:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002be2:	785b      	ldrb	r3, [r3, #1]
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002bea:	789b      	ldrb	r3, [r3, #2]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002bf2:	78d2      	ldrb	r2, [r2, #3]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	061a      	lsls	r2, r3, #24
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	0619      	lsls	r1, r3, #24
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	4319      	orrs	r1, r3
 8002c06:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c08:	789b      	ldrb	r3, [r3, #2]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	492a      	ldr	r1, [pc, #168]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c10:	78c9      	ldrb	r1, [r1, #3]
 8002c12:	430b      	orrs	r3, r1
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	0619      	lsls	r1, r3, #24
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	4319      	orrs	r1, r3
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c2c:	789b      	ldrb	r3, [r3, #2]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	430b      	orrs	r3, r1
 8002c32:	4921      	ldr	r1, [pc, #132]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c34:	78c9      	ldrb	r1, [r1, #3]
 8002c36:	430b      	orrs	r3, r1
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	0619      	lsls	r1, r3, #24
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c48:	785b      	ldrb	r3, [r3, #1]
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	4319      	orrs	r1, r3
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	430b      	orrs	r3, r1
 8002c56:	4918      	ldr	r1, [pc, #96]	; (8002cb8 <MX_LWIP_Init+0x244>)
 8002c58:	78c9      	ldrb	r1, [r1, #3]
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	0e1b      	lsrs	r3, r3, #24
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <MX_LWIP_Init+0x250>)
 8002c62:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <MX_LWIP_Init+0x254>)
 8002c66:	9302      	str	r3, [sp, #8]
 8002c68:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <MX_LWIP_Init+0x258>)
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <MX_LWIP_Init+0x250>)
 8002c72:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <MX_LWIP_Init+0x24c>)
 8002c74:	4911      	ldr	r1, [pc, #68]	; (8002cbc <MX_LWIP_Init+0x248>)
 8002c76:	4816      	ldr	r0, [pc, #88]	; (8002cd0 <MX_LWIP_Init+0x25c>)
 8002c78:	f000 ffd6 	bl	8003c28 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002c7c:	4814      	ldr	r0, [pc, #80]	; (8002cd0 <MX_LWIP_Init+0x25c>)
 8002c7e:	f001 f8a5 	bl	8003dcc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <MX_LWIP_Init+0x25c>)
 8002c84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002c94:	480e      	ldr	r0, [pc, #56]	; (8002cd0 <MX_LWIP_Init+0x25c>)
 8002c96:	f001 f8a7 	bl	8003de8 <netif_set_up>
 8002c9a:	e002      	b.n	8002ca2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <MX_LWIP_Init+0x25c>)
 8002c9e:	f001 f8e7 	bl	8003e70 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002ca2:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <MX_LWIP_Init+0x260>)
 8002ca4:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <MX_LWIP_Init+0x25c>)
 8002ca6:	f001 f905 	bl	8003eb4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200000cc 	.word	0x200000cc
 8002cb4:	200000d0 	.word	0x200000d0
 8002cb8:	200000d4 	.word	0x200000d4
 8002cbc:	200000c0 	.word	0x200000c0
 8002cc0:	200000c4 	.word	0x200000c4
 8002cc4:	200000c8 	.word	0x200000c8
 8002cc8:	08006e29 	.word	0x08006e29
 8002ccc:	080032a1 	.word	0x080032a1
 8002cd0:	2000008c 	.word	0x2000008c
 8002cd4:	0800330d 	.word	0x0800330d

08002cd8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a55      	ldr	r2, [pc, #340]	; (8002e4c <HAL_ETH_MspInit+0x174>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f040 80a4 	bne.w	8002e44 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	623b      	str	r3, [r7, #32]
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4a4b      	ldr	r2, [pc, #300]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d26:	6313      	str	r3, [r2, #48]	; 0x30
 8002d28:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4a44      	ldr	r2, [pc, #272]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d42:	6313      	str	r3, [r2, #48]	; 0x30
 8002d44:	4b42      	ldr	r3, [pc, #264]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	4a3d      	ldr	r2, [pc, #244]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d60:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	4a36      	ldr	r2, [pc, #216]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7c:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4a2f      	ldr	r2, [pc, #188]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	6313      	str	r3, [r2, #48]	; 0x30
 8002d98:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db2:	6313      	str	r3, [r2, #48]	; 0x30
 8002db4:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_ETH_MspInit+0x178>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002dc0:	2332      	movs	r3, #50	; 0x32
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dd0:	230b      	movs	r3, #11
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd8:	4619      	mov	r1, r3
 8002dda:	481e      	ldr	r0, [pc, #120]	; (8002e54 <HAL_ETH_MspInit+0x17c>)
 8002ddc:	f7ff f83e 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002de0:	2386      	movs	r3, #134	; 0x86
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002df0:	230b      	movs	r3, #11
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4817      	ldr	r0, [pc, #92]	; (8002e58 <HAL_ETH_MspInit+0x180>)
 8002dfc:	f7ff f82e 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e12:	230b      	movs	r3, #11
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	480f      	ldr	r0, [pc, #60]	; (8002e5c <HAL_ETH_MspInit+0x184>)
 8002e1e:	f7ff f81d 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002e22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e30:	2303      	movs	r3, #3
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e34:	230b      	movs	r3, #11
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4808      	ldr	r0, [pc, #32]	; (8002e60 <HAL_ETH_MspInit+0x188>)
 8002e40:	f7ff f80c 	bl	8001e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002e44:	bf00      	nop
 8002e46:	3738      	adds	r7, #56	; 0x38
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40028000 	.word	0x40028000
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40020400 	.word	0x40020400
 8002e60:	40021800 	.word	0x40021800

08002e64 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002e70:	4b4d      	ldr	r3, [pc, #308]	; (8002fa8 <low_level_init+0x144>)
 8002e72:	4a4e      	ldr	r2, [pc, #312]	; (8002fac <low_level_init+0x148>)
 8002e74:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002e76:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <low_level_init+0x144>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8002e7c:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <low_level_init+0x144>)
 8002e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e82:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <low_level_init+0x144>)
 8002e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e8a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002e8c:	4b46      	ldr	r3, [pc, #280]	; (8002fa8 <low_level_init+0x144>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002e92:	2300      	movs	r3, #0
 8002e94:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002e9a:	23e1      	movs	r3, #225	; 0xe1
 8002e9c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002eaa:	4a3f      	ldr	r2, [pc, #252]	; (8002fa8 <low_level_init+0x144>)
 8002eac:	f107 0308 	add.w	r3, r7, #8
 8002eb0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002eb2:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <low_level_init+0x144>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <low_level_init+0x144>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <low_level_init+0x144>)
 8002ec0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ec4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002ec6:	4838      	ldr	r0, [pc, #224]	; (8002fa8 <low_level_init+0x144>)
 8002ec8:	f7fd fed0 	bl	8000c6c <HAL_ETH_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002ee8:	2304      	movs	r3, #4
 8002eea:	4a31      	ldr	r2, [pc, #196]	; (8002fb0 <low_level_init+0x14c>)
 8002eec:	4931      	ldr	r1, [pc, #196]	; (8002fb4 <low_level_init+0x150>)
 8002eee:	482e      	ldr	r0, [pc, #184]	; (8002fa8 <low_level_init+0x144>)
 8002ef0:	f7fe f848 	bl	8000f84 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	4a30      	ldr	r2, [pc, #192]	; (8002fb8 <low_level_init+0x154>)
 8002ef8:	4930      	ldr	r1, [pc, #192]	; (8002fbc <low_level_init+0x158>)
 8002efa:	482b      	ldr	r0, [pc, #172]	; (8002fa8 <low_level_init+0x144>)
 8002efc:	f7fe f8a9 	bl	8001052 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2206      	movs	r2, #6
 8002f04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <low_level_init+0x144>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002f14:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <low_level_init+0x144>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	785a      	ldrb	r2, [r3, #1]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <low_level_init+0x144>)
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	789a      	ldrb	r2, [r3, #2]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <low_level_init+0x144>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	78da      	ldrb	r2, [r3, #3]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <low_level_init+0x144>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	791a      	ldrb	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <low_level_init+0x144>)
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	795a      	ldrb	r2, [r3, #5]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002f56:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002f5e:	f043 030a 	orr.w	r3, r3, #10
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8002f6a:	480f      	ldr	r0, [pc, #60]	; (8002fa8 <low_level_init+0x144>)
 8002f6c:	f7fe fb15 	bl	800159a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8002f70:	f107 0310 	add.w	r3, r7, #16
 8002f74:	461a      	mov	r2, r3
 8002f76:	211d      	movs	r1, #29
 8002f78:	480b      	ldr	r0, [pc, #44]	; (8002fa8 <low_level_init+0x144>)
 8002f7a:	f7fe fa40 	bl	80013fe <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f043 030b 	orr.w	r3, r3, #11
 8002f84:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	211d      	movs	r1, #29
 8002f8c:	4806      	ldr	r0, [pc, #24]	; (8002fa8 <low_level_init+0x144>)
 8002f8e:	f7fe fa9e 	bl	80014ce <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002f92:	f107 0310 	add.w	r3, r7, #16
 8002f96:	461a      	mov	r2, r3
 8002f98:	211d      	movs	r1, #29
 8002f9a:	4803      	ldr	r0, [pc, #12]	; (8002fa8 <low_level_init+0x144>)
 8002f9c:	f7fe fa2f 	bl	80013fe <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8002fa0:	bf00      	nop
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20003178 	.word	0x20003178
 8002fac:	40028000 	.word	0x40028000
 8002fb0:	200019a8 	.word	0x200019a8
 8002fb4:	20000158 	.word	0x20000158
 8002fb8:	200001d8 	.word	0x200001d8
 8002fbc:	200000d8 	.word	0x200000d8

08002fc0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8002fca:	4b4b      	ldr	r3, [pc, #300]	; (80030f8 <low_level_output+0x138>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8002fe2:	4b45      	ldr	r3, [pc, #276]	; (80030f8 <low_level_output+0x138>)
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	623b      	str	r3, [r7, #32]
 8002ff0:	e05a      	b.n	80030a8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	da03      	bge.n	8003002 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8002ffa:	23f8      	movs	r3, #248	; 0xf8
 8002ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003000:	e05c      	b.n	80030bc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	895b      	ldrh	r3, [r3, #10]
 8003006:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800300c:	e02f      	b.n	800306e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	18d0      	adds	r0, r2, r3
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	18d1      	adds	r1, r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003022:	3304      	adds	r3, #4
 8003024:	461a      	mov	r2, r3
 8003026:	f004 f967 	bl	80072f8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	da03      	bge.n	8003040 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003038:	23f8      	movs	r3, #248	; 0xf8
 800303a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800303e:	e03d      	b.n	80030bc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003050:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800305c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003068:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003078:	4293      	cmp	r3, r2
 800307a:	d8c8      	bhi.n	800300e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	18d0      	adds	r0, r2, r3
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4413      	add	r3, r2
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4619      	mov	r1, r3
 800308e:	f004 f933 	bl	80072f8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	623b      	str	r3, [r7, #32]
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1a1      	bne.n	8002ff2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80030ae:	6979      	ldr	r1, [r7, #20]
 80030b0:	4811      	ldr	r0, [pc, #68]	; (80030f8 <low_level_output+0x138>)
 80030b2:	f7fe f839 	bl	8001128 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <low_level_output+0x138>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00d      	beq.n	80030ea <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <low_level_output+0x138>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d6:	461a      	mov	r2, r3
 80030d8:	2320      	movs	r3, #32
 80030da:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <low_level_output+0x138>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e4:	461a      	mov	r2, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80030ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20003178 	.word	0x20003178

080030fc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08c      	sub	sp, #48	; 0x30
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003120:	484e      	ldr	r0, [pc, #312]	; (800325c <low_level_input+0x160>)
 8003122:	f7fe f8e9 	bl	80012f8 <HAL_ETH_GetReceivedFrame>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <low_level_input+0x34>

    return NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	e090      	b.n	8003252 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003130:	4b4a      	ldr	r3, [pc, #296]	; (800325c <low_level_input+0x160>)
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <low_level_input+0x160>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800313c:	89fb      	ldrh	r3, [r7, #14]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003142:	89fb      	ldrh	r3, [r7, #14]
 8003144:	2203      	movs	r2, #3
 8003146:	4619      	mov	r1, r3
 8003148:	2004      	movs	r0, #4
 800314a:	f000 fec3 	bl	8003ed4 <pbuf_alloc>
 800314e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d04b      	beq.n	80031ee <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <low_level_input+0x160>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
 8003164:	e040      	b.n	80031e8 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	895b      	ldrh	r3, [r3, #10]
 800316a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003170:	e021      	b.n	80031b6 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	18d0      	adds	r0, r2, r3
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	18d1      	adds	r1, r2, r3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003186:	3304      	adds	r3, #4
 8003188:	461a      	mov	r2, r3
 800318a:	f004 f8b5 	bl	80072f8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4413      	add	r3, r2
 80031a0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80031a4:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80031b0:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	4413      	add	r3, r2
 80031bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d8d6      	bhi.n	8003172 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	18d0      	adds	r0, r2, r3
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4413      	add	r3, r2
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4619      	mov	r1, r3
 80031d6:	f004 f88f 	bl	80072f8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4413      	add	r3, r2
 80031e0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1bb      	bne.n	8003166 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <low_level_input+0x160>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e00b      	b.n	8003212 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3301      	adds	r3, #1
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <low_level_input+0x160>)
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	429a      	cmp	r2, r3
 800321a:	d3ee      	bcc.n	80031fa <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <low_level_input+0x160>)
 800321e:	2200      	movs	r2, #0
 8003220:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <low_level_input+0x160>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00d      	beq.n	8003250 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <low_level_input+0x160>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323c:	461a      	mov	r2, r3
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <low_level_input+0x160>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800324a:	461a      	mov	r2, r3
 800324c:	2300      	movs	r3, #0
 800324e:	6093      	str	r3, [r2, #8]
  }
  return p;
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003252:	4618      	mov	r0, r3
 8003254:	3730      	adds	r7, #48	; 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20003178 	.word	0x20003178

08003260 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff47 	bl	80030fc <low_level_input>
 800326e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d010      	beq.n	8003298 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	4798      	blx	r3
 8003280:	4603      	mov	r3, r0
 8003282:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003284:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d006      	beq.n	800329a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f001 f995 	bl	80045bc <pbuf_free>
    p = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e000      	b.n	800329a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003298:	bf00      	nop
  }
}
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <ethernetif_init+0x1c>
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <ethernetif_init+0x48>)
 80032b0:	f44f 7205 	mov.w	r2, #532	; 0x214
 80032b4:	490d      	ldr	r1, [pc, #52]	; (80032ec <ethernetif_init+0x4c>)
 80032b6:	480e      	ldr	r0, [pc, #56]	; (80032f0 <ethernetif_init+0x50>)
 80032b8:	f003 ff44 	bl	8007144 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2273      	movs	r2, #115	; 0x73
 80032c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2274      	movs	r2, #116	; 0x74
 80032c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <ethernetif_init+0x54>)
 80032d0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <ethernetif_init+0x58>)
 80032d6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fdc3 	bl	8002e64 <low_level_init>

  return ERR_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	08007e84 	.word	0x08007e84
 80032ec:	08007ea0 	.word	0x08007ea0
 80032f0:	08007eb0 	.word	0x08007eb0
 80032f4:	08005431 	.word	0x08005431
 80032f8:	08002fc1 	.word	0x08002fc1

080032fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003300:	f7fd fba2 	bl	8000a48 <HAL_GetTick>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d05d      	beq.n	80033ea <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800332e:	4b34      	ldr	r3, [pc, #208]	; (8003400 <ethernetif_update_config+0xf4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d03f      	beq.n	80033b6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800333a:	2100      	movs	r1, #0
 800333c:	4830      	ldr	r0, [pc, #192]	; (8003400 <ethernetif_update_config+0xf4>)
 800333e:	f7fe f8c6 	bl	80014ce <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003342:	f7fd fb81 	bl	8000a48 <HAL_GetTick>
 8003346:	4603      	mov	r3, r0
 8003348:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800334a:	f107 0308 	add.w	r3, r7, #8
 800334e:	461a      	mov	r2, r3
 8003350:	2101      	movs	r1, #1
 8003352:	482b      	ldr	r0, [pc, #172]	; (8003400 <ethernetif_update_config+0xf4>)
 8003354:	f7fe f853 	bl	80013fe <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003358:	f7fd fb76 	bl	8000a48 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003366:	d828      	bhi.n	80033ba <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0eb      	beq.n	800334a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	461a      	mov	r2, r3
 8003378:	2110      	movs	r1, #16
 800337a:	4821      	ldr	r0, [pc, #132]	; (8003400 <ethernetif_update_config+0xf4>)
 800337c:	f7fe f83f 	bl	80013fe <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800338a:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <ethernetif_update_config+0xf4>)
 800338c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	e002      	b.n	800339a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <ethernetif_update_config+0xf4>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <ethernetif_update_config+0xf4>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	e016      	b.n	80033da <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <ethernetif_update_config+0xf4>)
 80033ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	e011      	b.n	80033da <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <ethernetif_update_config+0xb0>
          goto error;
 80033ba:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <ethernetif_update_config+0xf4>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <ethernetif_update_config+0xf4>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	2100      	movs	r1, #0
 80033d4:	480a      	ldr	r0, [pc, #40]	; (8003400 <ethernetif_update_config+0xf4>)
 80033d6:	f7fe f87a 	bl	80014ce <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80033da:	2100      	movs	r1, #0
 80033dc:	4808      	ldr	r0, [pc, #32]	; (8003400 <ethernetif_update_config+0xf4>)
 80033de:	f7fe f93b 	bl	8001658 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80033e2:	4807      	ldr	r0, [pc, #28]	; (8003400 <ethernetif_update_config+0xf4>)
 80033e4:	f7fe f8d9 	bl	800159a <HAL_ETH_Start>
 80033e8:	e002      	b.n	80033f0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80033ea:	4805      	ldr	r0, [pc, #20]	; (8003400 <ethernetif_update_config+0xf4>)
 80033ec:	f7fe f904 	bl	80015f8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f807 	bl	8003404 <ethernetif_notify_conn_changed>
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20003178 	.word	0x20003178

08003404 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	ba5b      	rev16	r3, r3
 8003424:	b29b      	uxth	r3, r3
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800343a:	f000 f8a3 	bl	8003584 <mem_init>
  memp_init();
 800343e:	f000 fb33 	bl	8003aa8 <memp_init>
  pbuf_init();
  netif_init();
 8003442:	f000 fbeb 	bl	8003c1c <netif_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8003446:	f001 fabd 	bl	80049c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <plug_holes+0x10c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d206      	bcs.n	8003474 <plug_holes+0x20>
 8003466:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <plug_holes+0x110>)
 8003468:	f240 125d 	movw	r2, #349	; 0x15d
 800346c:	493e      	ldr	r1, [pc, #248]	; (8003568 <plug_holes+0x114>)
 800346e:	483f      	ldr	r0, [pc, #252]	; (800356c <plug_holes+0x118>)
 8003470:	f003 fe68 	bl	8007144 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003474:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <plug_holes+0x11c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d306      	bcc.n	800348c <plug_holes+0x38>
 800347e:	4b39      	ldr	r3, [pc, #228]	; (8003564 <plug_holes+0x110>)
 8003480:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003484:	493b      	ldr	r1, [pc, #236]	; (8003574 <plug_holes+0x120>)
 8003486:	4839      	ldr	r0, [pc, #228]	; (800356c <plug_holes+0x118>)
 8003488:	f003 fe5c 	bl	8007144 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	791b      	ldrb	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d006      	beq.n	80034a2 <plug_holes+0x4e>
 8003494:	4b33      	ldr	r3, [pc, #204]	; (8003564 <plug_holes+0x110>)
 8003496:	f240 125f 	movw	r2, #351	; 0x15f
 800349a:	4937      	ldr	r1, [pc, #220]	; (8003578 <plug_holes+0x124>)
 800349c:	4833      	ldr	r0, [pc, #204]	; (800356c <plug_holes+0x118>)
 800349e:	f003 fe51 	bl	8007144 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80034aa:	d906      	bls.n	80034ba <plug_holes+0x66>
 80034ac:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <plug_holes+0x110>)
 80034ae:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80034b2:	4932      	ldr	r1, [pc, #200]	; (800357c <plug_holes+0x128>)
 80034b4:	482d      	ldr	r0, [pc, #180]	; (800356c <plug_holes+0x118>)
 80034b6:	f003 fe45 	bl	8007144 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80034ba:	4b29      	ldr	r3, [pc, #164]	; (8003560 <plug_holes+0x10c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	8812      	ldrh	r2, [r2, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d01f      	beq.n	800350e <plug_holes+0xba>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	791b      	ldrb	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11b      	bne.n	800350e <plug_holes+0xba>
 80034d6:	4b26      	ldr	r3, [pc, #152]	; (8003570 <plug_holes+0x11c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d016      	beq.n	800350e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <plug_holes+0x12c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d102      	bne.n	80034f0 <plug_holes+0x9c>
      lfree = mem;
 80034ea:	4a25      	ldr	r2, [pc, #148]	; (8003580 <plug_holes+0x12c>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	881a      	ldrh	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <plug_holes+0x10c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	1ad1      	subs	r1, r2, r3
 8003500:	4b17      	ldr	r3, [pc, #92]	; (8003560 <plug_holes+0x10c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	8812      	ldrh	r2, [r2, #0]
 8003508:	4413      	add	r3, r2
 800350a:	b28a      	uxth	r2, r1
 800350c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <plug_holes+0x10c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	8852      	ldrh	r2, [r2, #2]
 8003516:	4413      	add	r3, r2
 8003518:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d01a      	beq.n	8003558 <plug_holes+0x104>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	791b      	ldrb	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d116      	bne.n	8003558 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <plug_holes+0x12c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d102      	bne.n	800353a <plug_holes+0xe6>
      lfree = pmem;
 8003534:	4a12      	ldr	r2, [pc, #72]	; (8003580 <plug_holes+0x12c>)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <plug_holes+0x10c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	1ad1      	subs	r1, r2, r3
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <plug_holes+0x10c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	4413      	add	r3, r2
 8003554:	b28a      	uxth	r2, r1
 8003556:	805a      	strh	r2, [r3, #2]
  }
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200059ec 	.word	0x200059ec
 8003564:	08007ed8 	.word	0x08007ed8
 8003568:	08007f08 	.word	0x08007f08
 800356c:	08007f20 	.word	0x08007f20
 8003570:	200059f0 	.word	0x200059f0
 8003574:	08007f48 	.word	0x08007f48
 8003578:	08007f64 	.word	0x08007f64
 800357c:	08007f80 	.word	0x08007f80
 8003580:	200059f4 	.word	0x200059f4

08003584 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <mem_init+0x68>)
 800358c:	3303      	adds	r3, #3
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	461a      	mov	r2, r3
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <mem_init+0x6c>)
 8003596:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <mem_init+0x6c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80035a4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <mem_init+0x6c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <mem_init+0x70>)
 80035bc:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <mem_init+0x70>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2201      	movs	r2, #1
 80035c4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <mem_init+0x70>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80035ce:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <mem_init+0x70>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80035d8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <mem_init+0x6c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a06      	ldr	r2, [pc, #24]	; (80035f8 <mem_init+0x74>)
 80035e0:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	200031d8 	.word	0x200031d8
 80035f0:	200059ec 	.word	0x200059ec
 80035f4:	200059f0 	.word	0x200059f0
 80035f8:	200059f4 	.word	0x200059f4

080035fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d043      	beq.n	8003692 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d006      	beq.n	8003622 <mem_free+0x26>
 8003614:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <mem_free+0xa4>)
 8003616:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800361a:	4922      	ldr	r1, [pc, #136]	; (80036a4 <mem_free+0xa8>)
 800361c:	4822      	ldr	r0, [pc, #136]	; (80036a8 <mem_free+0xac>)
 800361e:	f003 fd91 	bl	8007144 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <mem_free+0xb0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d304      	bcc.n	8003636 <mem_free+0x3a>
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <mem_free+0xb4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	d306      	bcc.n	8003644 <mem_free+0x48>
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <mem_free+0xa4>)
 8003638:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800363c:	491d      	ldr	r1, [pc, #116]	; (80036b4 <mem_free+0xb8>)
 800363e:	481a      	ldr	r0, [pc, #104]	; (80036a8 <mem_free+0xac>)
 8003640:	f003 fd80 	bl	8007144 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <mem_free+0xb0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	429a      	cmp	r2, r3
 800364c:	d323      	bcc.n	8003696 <mem_free+0x9a>
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <mem_free+0xb4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d21e      	bcs.n	8003696 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b08      	subs	r3, #8
 800365c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	791b      	ldrb	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <mem_free+0x78>
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <mem_free+0xa4>)
 8003668:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800366c:	4912      	ldr	r1, [pc, #72]	; (80036b8 <mem_free+0xbc>)
 800366e:	480e      	ldr	r0, [pc, #56]	; (80036a8 <mem_free+0xac>)
 8003670:	f003 fd68 	bl	8007144 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <mem_free+0xc0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d202      	bcs.n	800368a <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <mem_free+0xc0>)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff fee2 	bl	8003454 <plug_holes>
 8003690:	e002      	b.n	8003698 <mem_free+0x9c>
    return;
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <mem_free+0x9c>
    return;
 8003696:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	08007ed8 	.word	0x08007ed8
 80036a4:	08007fac 	.word	0x08007fac
 80036a8:	08007f20 	.word	0x08007f20
 80036ac:	200059ec 	.word	0x200059ec
 80036b0:	200059f0 	.word	0x200059f0
 80036b4:	08007fd0 	.word	0x08007fd0
 80036b8:	08007fe8 	.word	0x08007fe8
 80036bc:	200059f4 	.word	0x200059f4

080036c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	3303      	adds	r3, #3
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	2b0b      	cmp	r3, #11
 80036dc:	d801      	bhi.n	80036e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80036de:	230c      	movs	r3, #12
 80036e0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80036e8:	d901      	bls.n	80036ee <mem_trim+0x2e>
    return NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e0b1      	b.n	8003852 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80036ee:	4b5b      	ldr	r3, [pc, #364]	; (800385c <mem_trim+0x19c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d304      	bcc.n	8003702 <mem_trim+0x42>
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <mem_trim+0x1a0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d306      	bcc.n	8003710 <mem_trim+0x50>
 8003702:	4b58      	ldr	r3, [pc, #352]	; (8003864 <mem_trim+0x1a4>)
 8003704:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003708:	4957      	ldr	r1, [pc, #348]	; (8003868 <mem_trim+0x1a8>)
 800370a:	4858      	ldr	r0, [pc, #352]	; (800386c <mem_trim+0x1ac>)
 800370c:	f003 fd1a 	bl	8007144 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003710:	4b52      	ldr	r3, [pc, #328]	; (800385c <mem_trim+0x19c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d304      	bcc.n	8003724 <mem_trim+0x64>
 800371a:	4b51      	ldr	r3, [pc, #324]	; (8003860 <mem_trim+0x1a0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d301      	bcc.n	8003728 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	e094      	b.n	8003852 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b08      	subs	r3, #8
 800372c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800372e:	4b4b      	ldr	r3, [pc, #300]	; (800385c <mem_trim+0x19c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	881a      	ldrh	r2, [r3, #0]
 800373c:	8a7b      	ldrh	r3, [r7, #18]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b08      	subs	r3, #8
 8003744:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	8a3b      	ldrh	r3, [r7, #16]
 800374a:	429a      	cmp	r2, r3
 800374c:	d906      	bls.n	800375c <mem_trim+0x9c>
 800374e:	4b45      	ldr	r3, [pc, #276]	; (8003864 <mem_trim+0x1a4>)
 8003750:	f240 2206 	movw	r2, #518	; 0x206
 8003754:	4946      	ldr	r1, [pc, #280]	; (8003870 <mem_trim+0x1b0>)
 8003756:	4845      	ldr	r0, [pc, #276]	; (800386c <mem_trim+0x1ac>)
 8003758:	f003 fcf4 	bl	8007144 <iprintf>
  if (newsize > size) {
 800375c:	887a      	ldrh	r2, [r7, #2]
 800375e:	8a3b      	ldrh	r3, [r7, #16]
 8003760:	429a      	cmp	r2, r3
 8003762:	d901      	bls.n	8003768 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8003764:	2300      	movs	r3, #0
 8003766:	e074      	b.n	8003852 <mem_trim+0x192>
  }
  if (newsize == size) {
 8003768:	887a      	ldrh	r2, [r7, #2]
 800376a:	8a3b      	ldrh	r3, [r7, #16]
 800376c:	429a      	cmp	r2, r3
 800376e:	d101      	bne.n	8003774 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	e06e      	b.n	8003852 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <mem_trim+0x19c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	4413      	add	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	791b      	ldrb	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d131      	bne.n	80037ec <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800378e:	8a7a      	ldrh	r2, [r7, #18]
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	4413      	add	r3, r2
 8003794:	b29b      	uxth	r3, r3
 8003796:	3308      	adds	r3, #8
 8003798:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <mem_trim+0x1b4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d105      	bne.n	80037b0 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80037a4:	4b2d      	ldr	r3, [pc, #180]	; (800385c <mem_trim+0x19c>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	4413      	add	r3, r2
 80037ac:	4a31      	ldr	r2, [pc, #196]	; (8003874 <mem_trim+0x1b4>)
 80037ae:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80037b0:	4b2a      	ldr	r3, [pc, #168]	; (800385c <mem_trim+0x19c>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	897b      	ldrh	r3, [r7, #10]
 80037b6:	4413      	add	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	893a      	ldrh	r2, [r7, #8]
 80037c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8a7a      	ldrh	r2, [r7, #18]
 80037ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	897a      	ldrh	r2, [r7, #10]
 80037d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80037da:	d039      	beq.n	8003850 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <mem_trim+0x19c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	8812      	ldrh	r2, [r2, #0]
 80037e4:	4413      	add	r3, r2
 80037e6:	897a      	ldrh	r2, [r7, #10]
 80037e8:	805a      	strh	r2, [r3, #2]
 80037ea:	e031      	b.n	8003850 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	f103 0214 	add.w	r2, r3, #20
 80037f2:	8a3b      	ldrh	r3, [r7, #16]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d82b      	bhi.n	8003850 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80037f8:	8a7a      	ldrh	r2, [r7, #18]
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	4413      	add	r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3308      	adds	r3, #8
 8003802:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003804:	4b15      	ldr	r3, [pc, #84]	; (800385c <mem_trim+0x19c>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	897b      	ldrh	r3, [r7, #10]
 800380a:	4413      	add	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800380e:	4b19      	ldr	r3, [pc, #100]	; (8003874 <mem_trim+0x1b4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	429a      	cmp	r2, r3
 8003816:	d202      	bcs.n	800381e <mem_trim+0x15e>
      lfree = mem2;
 8003818:	4a16      	ldr	r2, [pc, #88]	; (8003874 <mem_trim+0x1b4>)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	881a      	ldrh	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8a7a      	ldrh	r2, [r7, #18]
 8003830:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	897a      	ldrh	r2, [r7, #10]
 8003836:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003840:	d006      	beq.n	8003850 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <mem_trim+0x19c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	8812      	ldrh	r2, [r2, #0]
 800384a:	4413      	add	r3, r2
 800384c:	897a      	ldrh	r2, [r7, #10]
 800384e:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200059ec 	.word	0x200059ec
 8003860:	200059f0 	.word	0x200059f0
 8003864:	08007ed8 	.word	0x08007ed8
 8003868:	08007ffc 	.word	0x08007ffc
 800386c:	08007f20 	.word	0x08007f20
 8003870:	08008014 	.word	0x08008014
 8003874:	200059f4 	.word	0x200059f4

08003878 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <mem_malloc+0x14>
    return NULL;
 8003888:	2300      	movs	r3, #0
 800388a:	e0c7      	b.n	8003a1c <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	3303      	adds	r3, #3
 8003890:	b29b      	uxth	r3, r3
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	2b0b      	cmp	r3, #11
 800389c:	d801      	bhi.n	80038a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800389e:	230c      	movs	r3, #12
 80038a0:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80038a8:	d901      	bls.n	80038ae <mem_malloc+0x36>
    return NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e0b6      	b.n	8003a1c <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80038ae:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <mem_malloc+0x1ac>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b5d      	ldr	r3, [pc, #372]	; (8003a28 <mem_malloc+0x1b0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	83fb      	strh	r3, [r7, #30]
 80038ba:	e0a7      	b.n	8003a0c <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80038bc:	4b5a      	ldr	r3, [pc, #360]	; (8003a28 <mem_malloc+0x1b0>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	8bfb      	ldrh	r3, [r7, #30]
 80038c2:	4413      	add	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	791b      	ldrb	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 8098 	bne.w	8003a00 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	8bfb      	ldrh	r3, [r7, #30]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f1a3 0208 	sub.w	r2, r3, #8
 80038de:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80038e0:	429a      	cmp	r2, r3
 80038e2:	f0c0 808d 	bcc.w	8003a00 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	8bfb      	ldrh	r3, [r7, #30]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f1a3 0208 	sub.w	r2, r3, #8
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	3314      	adds	r3, #20
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d327      	bcc.n	800394c <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80038fc:	8bfa      	ldrh	r2, [r7, #30]
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	4413      	add	r3, r2
 8003902:	b29b      	uxth	r3, r3
 8003904:	3308      	adds	r3, #8
 8003906:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8003908:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <mem_malloc+0x1b0>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	8a7b      	ldrh	r3, [r7, #18]
 800390e:	4413      	add	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	881a      	ldrh	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8bfa      	ldrh	r2, [r7, #30]
 8003924:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	8a7a      	ldrh	r2, [r7, #18]
 800392a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2201      	movs	r2, #1
 8003930:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800393a:	d00a      	beq.n	8003952 <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800393c:	4b3a      	ldr	r3, [pc, #232]	; (8003a28 <mem_malloc+0x1b0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	8812      	ldrh	r2, [r2, #0]
 8003944:	4413      	add	r3, r2
 8003946:	8a7a      	ldrh	r2, [r7, #18]
 8003948:	805a      	strh	r2, [r3, #2]
 800394a:	e002      	b.n	8003952 <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2201      	movs	r2, #1
 8003950:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <mem_malloc+0x1ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d127      	bne.n	80039ac <mem_malloc+0x134>
          struct mem *cur = lfree;
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <mem_malloc+0x1ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003962:	e005      	b.n	8003970 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <mem_malloc+0x1b0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	8812      	ldrh	r2, [r2, #0]
 800396c:	4413      	add	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	791b      	ldrb	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <mem_malloc+0x10a>
 8003978:	4b2c      	ldr	r3, [pc, #176]	; (8003a2c <mem_malloc+0x1b4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	429a      	cmp	r2, r3
 8003980:	d1f0      	bne.n	8003964 <mem_malloc+0xec>
          }
          lfree = cur;
 8003982:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <mem_malloc+0x1ac>)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003988:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <mem_malloc+0x1ac>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <mem_malloc+0x1b4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d00b      	beq.n	80039ac <mem_malloc+0x134>
 8003994:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <mem_malloc+0x1ac>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	791b      	ldrb	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d006      	beq.n	80039ac <mem_malloc+0x134>
 800399e:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <mem_malloc+0x1b8>)
 80039a0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80039a4:	4923      	ldr	r1, [pc, #140]	; (8003a34 <mem_malloc+0x1bc>)
 80039a6:	4824      	ldr	r0, [pc, #144]	; (8003a38 <mem_malloc+0x1c0>)
 80039a8:	f003 fbcc 	bl	8007144 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4413      	add	r3, r2
 80039b2:	3308      	adds	r3, #8
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <mem_malloc+0x1b4>)
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d906      	bls.n	80039ca <mem_malloc+0x152>
 80039bc:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <mem_malloc+0x1b8>)
 80039be:	f240 22d3 	movw	r2, #723	; 0x2d3
 80039c2:	491e      	ldr	r1, [pc, #120]	; (8003a3c <mem_malloc+0x1c4>)
 80039c4:	481c      	ldr	r0, [pc, #112]	; (8003a38 <mem_malloc+0x1c0>)
 80039c6:	f003 fbbd 	bl	8007144 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d006      	beq.n	80039e2 <mem_malloc+0x16a>
 80039d4:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <mem_malloc+0x1b8>)
 80039d6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80039da:	4919      	ldr	r1, [pc, #100]	; (8003a40 <mem_malloc+0x1c8>)
 80039dc:	4816      	ldr	r0, [pc, #88]	; (8003a38 <mem_malloc+0x1c0>)
 80039de:	f003 fbb1 	bl	8007144 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <mem_malloc+0x182>
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <mem_malloc+0x1b8>)
 80039ee:	f240 22d7 	movw	r2, #727	; 0x2d7
 80039f2:	4914      	ldr	r1, [pc, #80]	; (8003a44 <mem_malloc+0x1cc>)
 80039f4:	4810      	ldr	r0, [pc, #64]	; (8003a38 <mem_malloc+0x1c0>)
 80039f6:	f003 fba5 	bl	8007144 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3308      	adds	r3, #8
 80039fe:	e00d      	b.n	8003a1c <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <mem_malloc+0x1b0>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	8bfb      	ldrh	r3, [r7, #30]
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003a0c:	8bfa      	ldrh	r2, [r7, #30]
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8003a14:	429a      	cmp	r2, r3
 8003a16:	f4ff af51 	bcc.w	80038bc <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	200059f4 	.word	0x200059f4
 8003a28:	200059ec 	.word	0x200059ec
 8003a2c:	200059f0 	.word	0x200059f0
 8003a30:	08007ed8 	.word	0x08007ed8
 8003a34:	08008034 	.word	0x08008034
 8003a38:	08007f20 	.word	0x08007f20
 8003a3c:	08008050 	.word	0x08008050
 8003a40:	08008080 	.word	0x08008080
 8003a44:	080080b0 	.word	0x080080b0

08003a48 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	3303      	adds	r3, #3
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e011      	b.n	8003a8e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4413      	add	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	885b      	ldrh	r3, [r3, #2]
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4293      	cmp	r3, r2
 8003a98:	dbe7      	blt.n	8003a6a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr
	...

08003aa8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003aae:	2300      	movs	r3, #0
 8003ab0:	80fb      	strh	r3, [r7, #6]
 8003ab2:	e009      	b.n	8003ac8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	4a08      	ldr	r2, [pc, #32]	; (8003ad8 <memp_init+0x30>)
 8003ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ffc3 	bl	8003a48 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	80fb      	strh	r3, [r7, #6]
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d9f2      	bls.n	8003ab4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003ace:	bf00      	nop
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	08008ea4 	.word	0x08008ea4

08003adc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d012      	beq.n	8003b18 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <do_memp_malloc_pool+0x38>
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <do_memp_malloc_pool+0x48>)
 8003b08:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8003b0c:	4906      	ldr	r1, [pc, #24]	; (8003b28 <do_memp_malloc_pool+0x4c>)
 8003b0e:	4807      	ldr	r0, [pc, #28]	; (8003b2c <do_memp_malloc_pool+0x50>)
 8003b10:	f003 fb18 	bl	8007144 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	e000      	b.n	8003b1a <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	080080d4 	.word	0x080080d4
 8003b28:	08008104 	.word	0x08008104
 8003b2c:	08008128 	.word	0x08008128

08003b30 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d908      	bls.n	8003b52 <memp_malloc+0x22>
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <memp_malloc+0x3c>)
 8003b42:	f240 1287 	movw	r2, #391	; 0x187
 8003b46:	490a      	ldr	r1, [pc, #40]	; (8003b70 <memp_malloc+0x40>)
 8003b48:	480a      	ldr	r0, [pc, #40]	; (8003b74 <memp_malloc+0x44>)
 8003b4a:	f003 fafb 	bl	8007144 <iprintf>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e008      	b.n	8003b64 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <memp_malloc+0x48>)
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ffbe 	bl	8003adc <do_memp_malloc_pool>
 8003b60:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003b62:	68fb      	ldr	r3, [r7, #12]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	080080d4 	.word	0x080080d4
 8003b70:	08008164 	.word	0x08008164
 8003b74:	08008128 	.word	0x08008128
 8003b78:	08008ea4 	.word	0x08008ea4

08003b7c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <do_memp_free_pool+0x22>
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <do_memp_free_pool+0x40>)
 8003b92:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8003b96:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <do_memp_free_pool+0x44>)
 8003b98:	480a      	ldr	r0, [pc, #40]	; (8003bc4 <do_memp_free_pool+0x48>)
 8003b9a:	f003 fad3 	bl	8007144 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	080080d4 	.word	0x080080d4
 8003bc0:	08008184 	.word	0x08008184
 8003bc4:	08008128 	.word	0x08008128

08003bc8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d907      	bls.n	8003bea <memp_free+0x22>
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <memp_free+0x44>)
 8003bdc:	f240 12db 	movw	r2, #475	; 0x1db
 8003be0:	490b      	ldr	r1, [pc, #44]	; (8003c10 <memp_free+0x48>)
 8003be2:	480c      	ldr	r0, [pc, #48]	; (8003c14 <memp_free+0x4c>)
 8003be4:	f003 faae 	bl	8007144 <iprintf>
 8003be8:	e00c      	b.n	8003c04 <memp_free+0x3c>

  if (mem == NULL) {
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <memp_free+0x50>)
 8003bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf8:	6839      	ldr	r1, [r7, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ffbe 	bl	8003b7c <do_memp_free_pool>
 8003c00:	e000      	b.n	8003c04 <memp_free+0x3c>
    return;
 8003c02:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	080080d4 	.word	0x080080d4
 8003c10:	080081a4 	.word	0x080081a4
 8003c14:	08008128 	.word	0x08008128
 8003c18:	08008ea4 	.word	0x08008ea4

08003c1c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d105      	bne.n	8003c48 <netif_add+0x20>
 8003c3c:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <netif_add+0x9c>)
 8003c3e:	22fb      	movs	r2, #251	; 0xfb
 8003c40:	4921      	ldr	r1, [pc, #132]	; (8003cc8 <netif_add+0xa0>)
 8003c42:	4822      	ldr	r0, [pc, #136]	; (8003ccc <netif_add+0xa4>)
 8003c44:	f003 fa7e 	bl	8007144 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2203      	movs	r2, #3
 8003c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <netif_add+0xa8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	b2d1      	uxtb	r1, r2
 8003c7e:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <netif_add+0xa8>)
 8003c80:	7011      	strb	r1, [r2, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f81f 	bl	8003cd8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	4798      	blx	r3
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <netif_add+0x82>
    return NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e007      	b.n	8003cba <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <netif_add+0xac>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003cb2:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <netif_add+0xac>)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	080081c0 	.word	0x080081c0
 8003cc8:	080081f4 	.word	0x080081f4
 8003ccc:	0800820c 	.word	0x0800820c
 8003cd0:	20008350 	.word	0x20008350
 8003cd4:	20008348 	.word	0x20008348

08003cd8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <netif_set_addr+0x1c>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10c      	bne.n	8003d0e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f81a 	bl	8003d30 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f851 	bl	8003da6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003d04:	6839      	ldr	r1, [r7, #0]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f83a 	bl	8003d80 <netif_set_gw>
 8003d0c:	e00c      	b.n	8003d28 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f848 	bl	8003da6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003d16:	6839      	ldr	r1, [r7, #0]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f831 	bl	8003d80 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f805 	bl	8003d30 <netif_set_ipaddr>
  }
}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <netif_set_ipaddr+0x18>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e002      	b.n	8003d4e <netif_set_ipaddr+0x1e>
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <netif_set_ipaddr+0x4c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d00c      	beq.n	8003d74 <netif_set_ipaddr+0x44>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <netif_set_ipaddr+0x36>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	e000      	b.n	8003d68 <netif_set_ipaddr+0x38>
 8003d66:	2300      	movs	r3, #0
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f85d 	bl	8003e2e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	08008ec8 	.word	0x08008ec8

08003d80 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <netif_set_gw+0x16>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	e000      	b.n	8003d98 <netif_set_gw+0x18>
 8003d96:	2300      	movs	r3, #0
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <netif_set_netmask+0x16>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	e000      	b.n	8003dbe <netif_set_netmask+0x18>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8003dd4:	4a03      	ldr	r2, [pc, #12]	; (8003de4 <netif_set_default+0x18>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	2000834c 	.word	0x2000834c

08003de8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d113      	bne.n	8003e26 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8003e1e:	2103      	movs	r1, #3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f804 	bl	8003e2e <netif_issue_reports>
    }
  }
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d011      	beq.n	8003e68 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00c      	beq.n	8003e68 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f001 fdc8 	bl	80059f8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d012      	beq.n	8003eac <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f001 f96c 	bl	8005184 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  if (netif) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	61da      	str	r2, [r3, #28]
  }
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	80bb      	strh	r3, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d81c      	bhi.n	8003f26 <pbuf_alloc+0x52>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <pbuf_alloc+0x20>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f09 	.word	0x08003f09
 8003ef8:	08003f0f 	.word	0x08003f0f
 8003efc:	08003f15 	.word	0x08003f15
 8003f00:	08003f1b 	.word	0x08003f1b
 8003f04:	08003f21 	.word	0x08003f21
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003f08:	2336      	movs	r3, #54	; 0x36
 8003f0a:	82fb      	strh	r3, [r7, #22]
    break;
 8003f0c:	e014      	b.n	8003f38 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003f0e:	2322      	movs	r3, #34	; 0x22
 8003f10:	82fb      	strh	r3, [r7, #22]
    break;
 8003f12:	e011      	b.n	8003f38 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003f14:	230e      	movs	r3, #14
 8003f16:	82fb      	strh	r3, [r7, #22]
    break;
 8003f18:	e00e      	b.n	8003f38 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	82fb      	strh	r3, [r7, #22]
    break;
 8003f1e:	e00b      	b.n	8003f38 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	82fb      	strh	r3, [r7, #22]
    break;
 8003f24:	e008      	b.n	8003f38 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8003f26:	4b9f      	ldr	r3, [pc, #636]	; (80041a4 <pbuf_alloc+0x2d0>)
 8003f28:	f44f 728b 	mov.w	r2, #278	; 0x116
 8003f2c:	499e      	ldr	r1, [pc, #632]	; (80041a8 <pbuf_alloc+0x2d4>)
 8003f2e:	489f      	ldr	r0, [pc, #636]	; (80041ac <pbuf_alloc+0x2d8>)
 8003f30:	f003 f908 	bl	8007144 <iprintf>
    return NULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e158      	b.n	80041ea <pbuf_alloc+0x316>
  }

  switch (type) {
 8003f38:	79bb      	ldrb	r3, [r7, #6]
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d00d      	beq.n	8003f5a <pbuf_alloc+0x86>
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	f300 8142 	bgt.w	80041c8 <pbuf_alloc+0x2f4>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80cc 	beq.w	80040e2 <pbuf_alloc+0x20e>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f2c0 813c 	blt.w	80041c8 <pbuf_alloc+0x2f4>
 8003f50:	3b01      	subs	r3, #1
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	f200 8138 	bhi.w	80041c8 <pbuf_alloc+0x2f4>
 8003f58:	e109      	b.n	800416e <pbuf_alloc+0x29a>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003f5a:	2004      	movs	r0, #4
 8003f5c:	f7ff fde8 	bl	8003b30 <memp_malloc>
 8003f60:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <pbuf_alloc+0x98>
      PBUF_POOL_IS_EMPTY();
      return NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e13e      	b.n	80041ea <pbuf_alloc+0x316>
    }
    p->type = type;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	79ba      	ldrb	r2, [r7, #6]
 8003f70:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003f78:	8afb      	ldrh	r3, [r7, #22]
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	4413      	add	r3, r2
 8003f80:	3303      	adds	r3, #3
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	461a      	mov	r2, r3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <pbuf_alloc+0xd2>
 8003f98:	4b82      	ldr	r3, [pc, #520]	; (80041a4 <pbuf_alloc+0x2d0>)
 8003f9a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003f9e:	4984      	ldr	r1, [pc, #528]	; (80041b0 <pbuf_alloc+0x2dc>)
 8003fa0:	4882      	ldr	r0, [pc, #520]	; (80041ac <pbuf_alloc+0x2d8>)
 8003fa2:	f003 f8cf 	bl	8007144 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	88ba      	ldrh	r2, [r7, #4]
 8003faa:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003fac:	8afb      	ldrh	r3, [r7, #22]
 8003fae:	3303      	adds	r3, #3
 8003fb0:	f023 0303 	bic.w	r3, r3, #3
 8003fb4:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8003fb8:	88bb      	ldrh	r3, [r7, #4]
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	bf28      	it	cs
 8003fbe:	4613      	movcs	r3, r2
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	8952      	ldrh	r2, [r2, #10]
 8003fce:	441a      	add	r2, r3
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d906      	bls.n	8003fe8 <pbuf_alloc+0x114>
 8003fda:	4b72      	ldr	r3, [pc, #456]	; (80041a4 <pbuf_alloc+0x2d0>)
 8003fdc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003fe0:	4974      	ldr	r1, [pc, #464]	; (80041b4 <pbuf_alloc+0x2e0>)
 8003fe2:	4872      	ldr	r0, [pc, #456]	; (80041ac <pbuf_alloc+0x2d8>)
 8003fe4:	f003 f8ae 	bl	8007144 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8003fe8:	8afb      	ldrh	r3, [r7, #22]
 8003fea:	3303      	adds	r3, #3
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8003ff4:	d106      	bne.n	8004004 <pbuf_alloc+0x130>
 8003ff6:	4b6b      	ldr	r3, [pc, #428]	; (80041a4 <pbuf_alloc+0x2d0>)
 8003ff8:	f240 1231 	movw	r2, #305	; 0x131
 8003ffc:	496e      	ldr	r1, [pc, #440]	; (80041b8 <pbuf_alloc+0x2e4>)
 8003ffe:	486b      	ldr	r0, [pc, #428]	; (80041ac <pbuf_alloc+0x2d8>)
 8004000:	f003 f8a0 	bl	8007144 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2201      	movs	r2, #1
 8004008:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800400e:	88bb      	ldrh	r3, [r7, #4]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	8952      	ldrh	r2, [r2, #10]
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8004018:	e05f      	b.n	80040da <pbuf_alloc+0x206>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800401a:	2004      	movs	r0, #4
 800401c:	f7ff fd88 	bl	8003b30 <memp_malloc>
 8004020:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <pbuf_alloc+0x15e>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 8004028:	69f8      	ldr	r0, [r7, #28]
 800402a:	f000 fac7 	bl	80045bc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	e0db      	b.n	80041ea <pbuf_alloc+0x316>
      }
      q->type = type;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	79ba      	ldrb	r2, [r7, #6]
 8004036:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004050:	4293      	cmp	r3, r2
 8004052:	dd06      	ble.n	8004062 <pbuf_alloc+0x18e>
 8004054:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <pbuf_alloc+0x2d0>)
 8004056:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800405a:	4958      	ldr	r1, [pc, #352]	; (80041bc <pbuf_alloc+0x2e8>)
 800405c:	4853      	ldr	r0, [pc, #332]	; (80041ac <pbuf_alloc+0x2d8>)
 800405e:	f003 f871 	bl	8007144 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004072:	bf28      	it	cs
 8004074:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f103 0210 	add.w	r2, r3, #16
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <pbuf_alloc+0x1ce>
 8004094:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <pbuf_alloc+0x2d0>)
 8004096:	f240 1251 	movw	r2, #337	; 0x151
 800409a:	4949      	ldr	r1, [pc, #292]	; (80041c0 <pbuf_alloc+0x2ec>)
 800409c:	4843      	ldr	r0, [pc, #268]	; (80041ac <pbuf_alloc+0x2d8>)
 800409e:	f003 f851 	bl	8007144 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	8952      	ldrh	r2, [r2, #10]
 80040aa:	441a      	add	r2, r3
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d906      	bls.n	80040c4 <pbuf_alloc+0x1f0>
 80040b6:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <pbuf_alloc+0x2d0>)
 80040b8:	f240 1253 	movw	r2, #339	; 0x153
 80040bc:	493d      	ldr	r1, [pc, #244]	; (80041b4 <pbuf_alloc+0x2e0>)
 80040be:	483b      	ldr	r0, [pc, #236]	; (80041ac <pbuf_alloc+0x2d8>)
 80040c0:	f003 f840 	bl	8007144 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	895b      	ldrh	r3, [r3, #10]
 80040ce:	461a      	mov	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	dc9c      	bgt.n	800401a <pbuf_alloc+0x146>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80040e0:	e07c      	b.n	80041dc <pbuf_alloc+0x308>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80040e2:	8afb      	ldrh	r3, [r7, #22]
 80040e4:	3313      	adds	r3, #19
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f023 0303 	bic.w	r3, r3, #3
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	88bb      	ldrh	r3, [r7, #4]
 80040f0:	3303      	adds	r3, #3
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80040fe:	897a      	ldrh	r2, [r7, #10]
 8004100:	88bb      	ldrh	r3, [r7, #4]
 8004102:	3303      	adds	r3, #3
 8004104:	f023 0303 	bic.w	r3, r3, #3
 8004108:	429a      	cmp	r2, r3
 800410a:	d201      	bcs.n	8004110 <pbuf_alloc+0x23c>
        return NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	e06c      	b.n	80041ea <pbuf_alloc+0x316>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8004110:	897b      	ldrh	r3, [r7, #10]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fbb0 	bl	8003878 <mem_malloc>
 8004118:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <pbuf_alloc+0x250>
      return NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	e062      	b.n	80041ea <pbuf_alloc+0x316>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8004124:	8afb      	ldrh	r3, [r7, #22]
 8004126:	3310      	adds	r3, #16
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	3303      	adds	r3, #3
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	461a      	mov	r2, r3
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	88ba      	ldrh	r2, [r7, #4]
 800413c:	811a      	strh	r2, [r3, #8]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	891a      	ldrh	r2, [r3, #8]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	79ba      	ldrb	r2, [r7, #6]
 8004150:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d03d      	beq.n	80041da <pbuf_alloc+0x306>
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <pbuf_alloc+0x2d0>)
 8004160:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8004164:	4917      	ldr	r1, [pc, #92]	; (80041c4 <pbuf_alloc+0x2f0>)
 8004166:	4811      	ldr	r0, [pc, #68]	; (80041ac <pbuf_alloc+0x2d8>)
 8004168:	f002 ffec 	bl	8007144 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800416c:	e035      	b.n	80041da <pbuf_alloc+0x306>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800416e:	2003      	movs	r0, #3
 8004170:	f7ff fcde 	bl	8003b30 <memp_malloc>
 8004174:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <pbuf_alloc+0x2ac>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	e034      	b.n	80041ea <pbuf_alloc+0x316>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2200      	movs	r2, #0
 8004184:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	88ba      	ldrh	r2, [r7, #4]
 800418a:	811a      	strh	r2, [r3, #8]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	891a      	ldrh	r2, [r3, #8]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
    p->type = type;
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	79ba      	ldrb	r2, [r7, #6]
 800419e:	731a      	strb	r2, [r3, #12]
    break;
 80041a0:	e01c      	b.n	80041dc <pbuf_alloc+0x308>
 80041a2:	bf00      	nop
 80041a4:	08008234 	.word	0x08008234
 80041a8:	08008264 	.word	0x08008264
 80041ac:	08008280 	.word	0x08008280
 80041b0:	080082a8 	.word	0x080082a8
 80041b4:	080082d8 	.word	0x080082d8
 80041b8:	0800830c 	.word	0x0800830c
 80041bc:	08008340 	.word	0x08008340
 80041c0:	08008354 	.word	0x08008354
 80041c4:	08008384 	.word	0x08008384
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <pbuf_alloc+0x320>)
 80041ca:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80041ce:	490a      	ldr	r1, [pc, #40]	; (80041f8 <pbuf_alloc+0x324>)
 80041d0:	480a      	ldr	r0, [pc, #40]	; (80041fc <pbuf_alloc+0x328>)
 80041d2:	f002 ffb7 	bl	8007144 <iprintf>
    return NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e007      	b.n	80041ea <pbuf_alloc+0x316>
    break;
 80041da:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2201      	movs	r2, #1
 80041e0:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2200      	movs	r2, #0
 80041e6:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80041e8:	69fb      	ldr	r3, [r7, #28]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	08008234 	.word	0x08008234
 80041f8:	080083b0 	.word	0x080083b0
 80041fc:	08008280 	.word	0x08008280

08004200 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4603      	mov	r3, r0
 800420a:	71fb      	strb	r3, [r7, #7]
 800420c:	460b      	mov	r3, r1
 800420e:	80bb      	strh	r3, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	2b04      	cmp	r3, #4
 8004218:	d81b      	bhi.n	8004252 <pbuf_alloced_custom+0x52>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <pbuf_alloced_custom+0x20>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004235 	.word	0x08004235
 8004224:	0800423b 	.word	0x0800423b
 8004228:	08004241 	.word	0x08004241
 800422c:	08004247 	.word	0x08004247
 8004230:	0800424d 	.word	0x0800424d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004234:	2336      	movs	r3, #54	; 0x36
 8004236:	81fb      	strh	r3, [r7, #14]
    break;
 8004238:	e014      	b.n	8004264 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800423a:	2322      	movs	r3, #34	; 0x22
 800423c:	81fb      	strh	r3, [r7, #14]
    break;
 800423e:	e011      	b.n	8004264 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004240:	230e      	movs	r3, #14
 8004242:	81fb      	strh	r3, [r7, #14]
    break;
 8004244:	e00e      	b.n	8004264 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004246:	2300      	movs	r3, #0
 8004248:	81fb      	strh	r3, [r7, #14]
    break;
 800424a:	e00b      	b.n	8004264 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	81fb      	strh	r3, [r7, #14]
    break;
 8004250:	e008      	b.n	8004264 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <pbuf_alloced_custom+0xc8>)
 8004254:	f240 12c5 	movw	r2, #453	; 0x1c5
 8004258:	491c      	ldr	r1, [pc, #112]	; (80042cc <pbuf_alloced_custom+0xcc>)
 800425a:	481d      	ldr	r0, [pc, #116]	; (80042d0 <pbuf_alloced_custom+0xd0>)
 800425c:	f002 ff72 	bl	8007144 <iprintf>
    return NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	e02d      	b.n	80042c0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004264:	89fb      	ldrh	r3, [r7, #14]
 8004266:	3303      	adds	r3, #3
 8004268:	f023 0203 	bic.w	r2, r3, #3
 800426c:	88bb      	ldrh	r3, [r7, #4]
 800426e:	441a      	add	r2, r3
 8004270:	8bbb      	ldrh	r3, [r7, #28]
 8004272:	429a      	cmp	r2, r3
 8004274:	d901      	bls.n	800427a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	e022      	b.n	80042c0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d008      	beq.n	8004298 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004286:	89fb      	ldrh	r3, [r7, #14]
 8004288:	3303      	adds	r3, #3
 800428a:	f023 0303 	bic.w	r3, r3, #3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	441a      	add	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	e002      	b.n	800429e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2202      	movs	r2, #2
 80042a2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	88ba      	ldrh	r2, [r7, #4]
 80042a8:	811a      	strh	r2, [r3, #8]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	891a      	ldrh	r2, [r3, #8]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	79ba      	ldrb	r2, [r7, #6]
 80042b6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2201      	movs	r2, #1
 80042bc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80042be:	683b      	ldr	r3, [r7, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	08008234 	.word	0x08008234
 80042cc:	080083cc 	.word	0x080083cc
 80042d0:	08008280 	.word	0x08008280

080042d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <pbuf_realloc+0x20>
 80042e6:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <pbuf_realloc+0x140>)
 80042e8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80042ec:	494a      	ldr	r1, [pc, #296]	; (8004418 <pbuf_realloc+0x144>)
 80042ee:	484b      	ldr	r0, [pc, #300]	; (800441c <pbuf_realloc+0x148>)
 80042f0:	f002 ff28 	bl	8007144 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	7b1b      	ldrb	r3, [r3, #12]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d012      	beq.n	8004322 <pbuf_realloc+0x4e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7b1b      	ldrb	r3, [r3, #12]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d00e      	beq.n	8004322 <pbuf_realloc+0x4e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	7b1b      	ldrb	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <pbuf_realloc+0x4e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7b1b      	ldrb	r3, [r3, #12]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d006      	beq.n	8004322 <pbuf_realloc+0x4e>
 8004314:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <pbuf_realloc+0x140>)
 8004316:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800431a:	4941      	ldr	r1, [pc, #260]	; (8004420 <pbuf_realloc+0x14c>)
 800431c:	483f      	ldr	r0, [pc, #252]	; (800441c <pbuf_realloc+0x148>)
 800431e:	f002 ff11 	bl	8007144 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	891b      	ldrh	r3, [r3, #8]
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	429a      	cmp	r2, r3
 800432a:	d26e      	bcs.n	800440a <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800432c:	887b      	ldrh	r3, [r7, #2]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	8912      	ldrh	r2, [r2, #8]
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004336:	887b      	ldrh	r3, [r7, #2]
 8004338:	827b      	strh	r3, [r7, #18]
  q = p;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800433e:	e025      	b.n	800438c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	895b      	ldrh	r3, [r3, #10]
 8004344:	8a7a      	ldrh	r2, [r7, #18]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004350:	4293      	cmp	r3, r2
 8004352:	dd06      	ble.n	8004362 <pbuf_realloc+0x8e>
 8004354:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <pbuf_realloc+0x140>)
 8004356:	f240 220b 	movw	r2, #523	; 0x20b
 800435a:	4932      	ldr	r1, [pc, #200]	; (8004424 <pbuf_realloc+0x150>)
 800435c:	482f      	ldr	r0, [pc, #188]	; (800441c <pbuf_realloc+0x148>)
 800435e:	f002 fef1 	bl	8007144 <iprintf>
    q->tot_len += (u16_t)grow;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	891a      	ldrh	r2, [r3, #8]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	b29b      	uxth	r3, r3
 800436a:	4413      	add	r3, r2
 800436c:	b29a      	uxth	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <pbuf_realloc+0xb8>
 800437e:	4b25      	ldr	r3, [pc, #148]	; (8004414 <pbuf_realloc+0x140>)
 8004380:	f240 220f 	movw	r2, #527	; 0x20f
 8004384:	4928      	ldr	r1, [pc, #160]	; (8004428 <pbuf_realloc+0x154>)
 8004386:	4825      	ldr	r0, [pc, #148]	; (800441c <pbuf_realloc+0x148>)
 8004388:	f002 fedc 	bl	8007144 <iprintf>
  while (rem_len > q->len) {
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	895b      	ldrh	r3, [r3, #10]
 8004390:	8a7a      	ldrh	r2, [r7, #18]
 8004392:	429a      	cmp	r2, r3
 8004394:	d8d4      	bhi.n	8004340 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	7b1b      	ldrb	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d121      	bne.n	80043e2 <pbuf_realloc+0x10e>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	895b      	ldrh	r3, [r3, #10]
 80043a2:	8a7a      	ldrh	r2, [r7, #18]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d01c      	beq.n	80043e2 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	7b5b      	ldrb	r3, [r3, #13]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d116      	bne.n	80043e2 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	b29a      	uxth	r2, r3
 80043be:	8a7b      	ldrh	r3, [r7, #18]
 80043c0:	4413      	add	r3, r2
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	4619      	mov	r1, r3
 80043c6:	6978      	ldr	r0, [r7, #20]
 80043c8:	f7ff f97a 	bl	80036c0 <mem_trim>
 80043cc:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <pbuf_realloc+0x10e>
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <pbuf_realloc+0x140>)
 80043d6:	f240 221d 	movw	r2, #541	; 0x21d
 80043da:	4914      	ldr	r1, [pc, #80]	; (800442c <pbuf_realloc+0x158>)
 80043dc:	480f      	ldr	r0, [pc, #60]	; (800441c <pbuf_realloc+0x148>)
 80043de:	f002 feb1 	bl	8007144 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	8a7a      	ldrh	r2, [r7, #18]
 80043e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	895a      	ldrh	r2, [r3, #10]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f8dd 	bl	80045bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e000      	b.n	800440c <pbuf_realloc+0x138>
    return;
 800440a:	bf00      	nop

}
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	08008234 	.word	0x08008234
 8004418:	080083f0 	.word	0x080083f0
 800441c:	08008280 	.word	0x08008280
 8004420:	08008408 	.word	0x08008408
 8004424:	08008424 	.word	0x08008424
 8004428:	08008438 	.word	0x08008438
 800442c:	08008450 	.word	0x08008450

08004430 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	807b      	strh	r3, [r7, #2]
 800443c:	4613      	mov	r3, r2
 800443e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <pbuf_header_impl+0x24>
 8004446:	4b46      	ldr	r3, [pc, #280]	; (8004560 <pbuf_header_impl+0x130>)
 8004448:	f240 223f 	movw	r2, #575	; 0x23f
 800444c:	4945      	ldr	r1, [pc, #276]	; (8004564 <pbuf_header_impl+0x134>)
 800444e:	4846      	ldr	r0, [pc, #280]	; (8004568 <pbuf_header_impl+0x138>)
 8004450:	f002 fe78 	bl	8007144 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <pbuf_header_impl+0x32>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <pbuf_header_impl+0x36>
    return 0;
 8004462:	2300      	movs	r3, #0
 8004464:	e078      	b.n	8004558 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8004466:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800446a:	2b00      	cmp	r3, #0
 800446c:	da10      	bge.n	8004490 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800446e:	887b      	ldrh	r3, [r7, #2]
 8004470:	425b      	negs	r3, r3
 8004472:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	895b      	ldrh	r3, [r3, #10]
 8004478:	89fa      	ldrh	r2, [r7, #14]
 800447a:	429a      	cmp	r2, r3
 800447c:	d90a      	bls.n	8004494 <pbuf_header_impl+0x64>
 800447e:	4b38      	ldr	r3, [pc, #224]	; (8004560 <pbuf_header_impl+0x130>)
 8004480:	f240 2247 	movw	r2, #583	; 0x247
 8004484:	4939      	ldr	r1, [pc, #228]	; (800456c <pbuf_header_impl+0x13c>)
 8004486:	4838      	ldr	r0, [pc, #224]	; (8004568 <pbuf_header_impl+0x138>)
 8004488:	f002 fe5c 	bl	8007144 <iprintf>
 800448c:	2301      	movs	r3, #1
 800448e:	e063      	b.n	8004558 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004490:	887b      	ldrh	r3, [r7, #2]
 8004492:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7b1b      	ldrb	r3, [r3, #12]
 8004498:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80044a0:	89bb      	ldrh	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <pbuf_header_impl+0x7c>
 80044a6:	89bb      	ldrh	r3, [r7, #12]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d112      	bne.n	80044d2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044b4:	425b      	negs	r3, r3
 80044b6:	441a      	add	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3310      	adds	r3, #16
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d238      	bcs.n	800453a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e042      	b.n	8004558 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80044d2:	89bb      	ldrh	r3, [r7, #12]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d002      	beq.n	80044de <pbuf_header_impl+0xae>
 80044d8:	89bb      	ldrh	r3, [r7, #12]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d124      	bne.n	8004528 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80044de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da0d      	bge.n	8004502 <pbuf_header_impl+0xd2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	895b      	ldrh	r3, [r3, #10]
 80044ea:	89fa      	ldrh	r2, [r7, #14]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d808      	bhi.n	8004502 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044f8:	425b      	negs	r3, r3
 80044fa:	441a      	add	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	605a      	str	r2, [r3, #4]
 8004500:	e011      	b.n	8004526 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004502:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004506:	2b00      	cmp	r3, #0
 8004508:	dd0b      	ble.n	8004522 <pbuf_header_impl+0xf2>
 800450a:	787b      	ldrb	r3, [r7, #1]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004518:	425b      	negs	r3, r3
 800451a:	441a      	add	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	e001      	b.n	8004526 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004522:	2301      	movs	r3, #1
 8004524:	e018      	b.n	8004558 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004526:	e008      	b.n	800453a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8004528:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <pbuf_header_impl+0x130>)
 800452a:	f240 2277 	movw	r2, #631	; 0x277
 800452e:	4910      	ldr	r1, [pc, #64]	; (8004570 <pbuf_header_impl+0x140>)
 8004530:	480d      	ldr	r0, [pc, #52]	; (8004568 <pbuf_header_impl+0x138>)
 8004532:	f002 fe07 	bl	8007144 <iprintf>
    return 1;
 8004536:	2301      	movs	r3, #1
 8004538:	e00e      	b.n	8004558 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	895a      	ldrh	r2, [r3, #10]
 800453e:	887b      	ldrh	r3, [r7, #2]
 8004540:	4413      	add	r3, r2
 8004542:	b29a      	uxth	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	891a      	ldrh	r2, [r3, #8]
 800454c:	887b      	ldrh	r3, [r7, #2]
 800454e:	4413      	add	r3, r2
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	08008234 	.word	0x08008234
 8004564:	0800846c 	.word	0x0800846c
 8004568:	08008280 	.word	0x08008280
 800456c:	08008478 	.word	0x08008478
 8004570:	08008498 	.word	0x08008498

08004574 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8004580:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004584:	2200      	movs	r2, #0
 8004586:	4619      	mov	r1, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ff51 	bl	8004430 <pbuf_header_impl>
 800458e:	4603      	mov	r3, r0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80045a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045a8:	2201      	movs	r2, #1
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ff3f 	bl	8004430 <pbuf_header_impl>
 80045b2:	4603      	mov	r3, r0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <pbuf_free+0x22>
 80045d0:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <pbuf_free+0x110>)
 80045d2:	f240 22d2 	movw	r2, #722	; 0x2d2
 80045d6:	493e      	ldr	r1, [pc, #248]	; (80046d0 <pbuf_free+0x114>)
 80045d8:	483e      	ldr	r0, [pc, #248]	; (80046d4 <pbuf_free+0x118>)
 80045da:	f002 fdb3 	bl	8007144 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	e070      	b.n	80046c4 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7b1b      	ldrb	r3, [r3, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d012      	beq.n	8004610 <pbuf_free+0x54>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7b1b      	ldrb	r3, [r3, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d00e      	beq.n	8004610 <pbuf_free+0x54>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	7b1b      	ldrb	r3, [r3, #12]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d00a      	beq.n	8004610 <pbuf_free+0x54>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7b1b      	ldrb	r3, [r3, #12]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d006      	beq.n	8004610 <pbuf_free+0x54>
 8004602:	4b32      	ldr	r3, [pc, #200]	; (80046cc <pbuf_free+0x110>)
 8004604:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004608:	4933      	ldr	r1, [pc, #204]	; (80046d8 <pbuf_free+0x11c>)
 800460a:	4832      	ldr	r0, [pc, #200]	; (80046d4 <pbuf_free+0x118>)
 800460c:	f002 fd9a 	bl	8007144 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004614:	e052      	b.n	80046bc <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	89db      	ldrh	r3, [r3, #14]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <pbuf_free+0x70>
 800461e:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <pbuf_free+0x110>)
 8004620:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004624:	492d      	ldr	r1, [pc, #180]	; (80046dc <pbuf_free+0x120>)
 8004626:	482b      	ldr	r0, [pc, #172]	; (80046d4 <pbuf_free+0x118>)
 8004628:	f002 fd8c 	bl	8007144 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	89db      	ldrh	r3, [r3, #14]
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	81da      	strh	r2, [r3, #14]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	89db      	ldrh	r3, [r3, #14]
 800463c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800463e:	8abb      	ldrh	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d139      	bne.n	80046b8 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	7b1b      	ldrb	r3, [r3, #12]
 800464e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	7b5b      	ldrb	r3, [r3, #13]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d011      	beq.n	8004680 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d106      	bne.n	8004676 <pbuf_free+0xba>
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <pbuf_free+0x110>)
 800466a:	f240 22f9 	movw	r2, #761	; 0x2f9
 800466e:	491c      	ldr	r1, [pc, #112]	; (80046e0 <pbuf_free+0x124>)
 8004670:	4818      	ldr	r0, [pc, #96]	; (80046d4 <pbuf_free+0x118>)
 8004672:	f002 fd67 	bl	8007144 <iprintf>
        pc->custom_free_function(p);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
 800467e:	e015      	b.n	80046ac <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8004680:	89fb      	ldrh	r3, [r7, #14]
 8004682:	2b03      	cmp	r3, #3
 8004684:	d104      	bne.n	8004690 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	2004      	movs	r0, #4
 800468a:	f7ff fa9d 	bl	8003bc8 <memp_free>
 800468e:	e00d      	b.n	80046ac <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004690:	89fb      	ldrh	r3, [r7, #14]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d002      	beq.n	800469c <pbuf_free+0xe0>
 8004696:	89fb      	ldrh	r3, [r7, #14]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d104      	bne.n	80046a6 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	2003      	movs	r0, #3
 80046a0:	f7ff fa92 	bl	8003bc8 <memp_free>
 80046a4:	e002      	b.n	80046ac <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fe ffa8 	bl	80035fc <mem_free>
        }
      }
      count++;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	3301      	adds	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	e001      	b.n	80046bc <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1a9      	bne.n	8004616 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	08008234 	.word	0x08008234
 80046d0:	0800846c 	.word	0x0800846c
 80046d4:	08008280 	.word	0x08008280
 80046d8:	080084a8 	.word	0x080084a8
 80046dc:	080084c0 	.word	0x080084c0
 80046e0:	080084d8 	.word	0x080084d8

080046e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80046f0:	e005      	b.n	80046fe <pbuf_clen+0x1a>
    ++len;
 80046f2:	89fb      	ldrh	r3, [r7, #14]
 80046f4:	3301      	adds	r3, #1
 80046f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f6      	bne.n	80046f2 <pbuf_clen+0xe>
  }
  return len;
 8004704:	89fb      	ldrh	r3, [r7, #14]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	89db      	ldrh	r3, [r3, #14]
 8004722:	3301      	adds	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	89db      	ldrh	r3, [r3, #14]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <pbuf_ref+0x30>
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <pbuf_ref+0x38>)
 8004734:	f240 3239 	movw	r2, #825	; 0x339
 8004738:	4904      	ldr	r1, [pc, #16]	; (800474c <pbuf_ref+0x3c>)
 800473a:	4805      	ldr	r0, [pc, #20]	; (8004750 <pbuf_ref+0x40>)
 800473c:	f002 fd02 	bl	8007144 <iprintf>
  }
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	08008234 	.word	0x08008234
 800474c:	080084fc 	.word	0x080084fc
 8004750:	08008280 	.word	0x08008280

08004754 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <pbuf_cat+0x16>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d107      	bne.n	800477a <pbuf_cat+0x26>
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <pbuf_cat+0x98>)
 800476c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8004770:	491f      	ldr	r1, [pc, #124]	; (80047f0 <pbuf_cat+0x9c>)
 8004772:	4820      	ldr	r0, [pc, #128]	; (80047f4 <pbuf_cat+0xa0>)
 8004774:	f002 fce6 	bl	8007144 <iprintf>
 8004778:	e034      	b.n	80047e4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e00a      	b.n	8004796 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	891a      	ldrh	r2, [r3, #8]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	891b      	ldrh	r3, [r3, #8]
 8004788:	4413      	add	r3, r2
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	891a      	ldrh	r2, [r3, #8]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	895b      	ldrh	r3, [r3, #10]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d006      	beq.n	80047b8 <pbuf_cat+0x64>
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <pbuf_cat+0x98>)
 80047ac:	f240 3255 	movw	r2, #853	; 0x355
 80047b0:	4911      	ldr	r1, [pc, #68]	; (80047f8 <pbuf_cat+0xa4>)
 80047b2:	4810      	ldr	r0, [pc, #64]	; (80047f4 <pbuf_cat+0xa0>)
 80047b4:	f002 fcc6 	bl	8007144 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d006      	beq.n	80047ce <pbuf_cat+0x7a>
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <pbuf_cat+0x98>)
 80047c2:	f240 3256 	movw	r2, #854	; 0x356
 80047c6:	490d      	ldr	r1, [pc, #52]	; (80047fc <pbuf_cat+0xa8>)
 80047c8:	480a      	ldr	r0, [pc, #40]	; (80047f4 <pbuf_cat+0xa0>)
 80047ca:	f002 fcbb 	bl	8007144 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	891a      	ldrh	r2, [r3, #8]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	891b      	ldrh	r3, [r3, #8]
 80047d6:	4413      	add	r3, r2
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	08008234 	.word	0x08008234
 80047f0:	08008510 	.word	0x08008510
 80047f4:	08008280 	.word	0x08008280
 80047f8:	08008548 	.word	0x08008548
 80047fc:	08008578 	.word	0x08008578

08004800 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800480a:	2300      	movs	r3, #0
 800480c:	81fb      	strh	r3, [r7, #14]
 800480e:	2300      	movs	r3, #0
 8004810:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <pbuf_copy+0x2a>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <pbuf_copy+0x2a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	891a      	ldrh	r2, [r3, #8]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	891b      	ldrh	r3, [r3, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d209      	bcs.n	800483e <pbuf_copy+0x3e>
 800482a:	4b54      	ldr	r3, [pc, #336]	; (800497c <pbuf_copy+0x17c>)
 800482c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8004830:	4953      	ldr	r1, [pc, #332]	; (8004980 <pbuf_copy+0x180>)
 8004832:	4854      	ldr	r0, [pc, #336]	; (8004984 <pbuf_copy+0x184>)
 8004834:	f002 fc86 	bl	8007144 <iprintf>
 8004838:	f06f 030f 	mvn.w	r3, #15
 800483c:	e099      	b.n	8004972 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	895b      	ldrh	r3, [r3, #10]
 8004842:	461a      	mov	r2, r3
 8004844:	89fb      	ldrh	r3, [r7, #14]
 8004846:	1ad2      	subs	r2, r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	895b      	ldrh	r3, [r3, #10]
 800484c:	4619      	mov	r1, r3
 800484e:	89bb      	ldrh	r3, [r7, #12]
 8004850:	1acb      	subs	r3, r1, r3
 8004852:	429a      	cmp	r2, r3
 8004854:	db05      	blt.n	8004862 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	895a      	ldrh	r2, [r3, #10]
 800485a:	89bb      	ldrh	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	817b      	strh	r3, [r7, #10]
 8004860:	e004      	b.n	800486c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	895a      	ldrh	r2, [r3, #10]
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	18d0      	adds	r0, r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	89bb      	ldrh	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	897a      	ldrh	r2, [r7, #10]
 800487e:	4619      	mov	r1, r3
 8004880:	f002 fd3a 	bl	80072f8 <memcpy>
    offset_to += len;
 8004884:	89fa      	ldrh	r2, [r7, #14]
 8004886:	897b      	ldrh	r3, [r7, #10]
 8004888:	4413      	add	r3, r2
 800488a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800488c:	89ba      	ldrh	r2, [r7, #12]
 800488e:	897b      	ldrh	r3, [r7, #10]
 8004890:	4413      	add	r3, r2
 8004892:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	895b      	ldrh	r3, [r3, #10]
 8004898:	89fa      	ldrh	r2, [r7, #14]
 800489a:	429a      	cmp	r2, r3
 800489c:	d906      	bls.n	80048ac <pbuf_copy+0xac>
 800489e:	4b37      	ldr	r3, [pc, #220]	; (800497c <pbuf_copy+0x17c>)
 80048a0:	f240 32cd 	movw	r2, #973	; 0x3cd
 80048a4:	4938      	ldr	r1, [pc, #224]	; (8004988 <pbuf_copy+0x188>)
 80048a6:	4837      	ldr	r0, [pc, #220]	; (8004984 <pbuf_copy+0x184>)
 80048a8:	f002 fc4c 	bl	8007144 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	895b      	ldrh	r3, [r3, #10]
 80048b0:	89ba      	ldrh	r2, [r7, #12]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d906      	bls.n	80048c4 <pbuf_copy+0xc4>
 80048b6:	4b31      	ldr	r3, [pc, #196]	; (800497c <pbuf_copy+0x17c>)
 80048b8:	f240 32ce 	movw	r2, #974	; 0x3ce
 80048bc:	4933      	ldr	r1, [pc, #204]	; (800498c <pbuf_copy+0x18c>)
 80048be:	4831      	ldr	r0, [pc, #196]	; (8004984 <pbuf_copy+0x184>)
 80048c0:	f002 fc40 	bl	8007144 <iprintf>
    if (offset_from >= p_from->len) {
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	895b      	ldrh	r3, [r3, #10]
 80048c8:	89ba      	ldrh	r2, [r7, #12]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d304      	bcc.n	80048d8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	895b      	ldrh	r3, [r3, #10]
 80048dc:	89fa      	ldrh	r2, [r7, #14]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d114      	bne.n	800490c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10c      	bne.n	800490c <pbuf_copy+0x10c>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <pbuf_copy+0x10c>
 80048f8:	4b20      	ldr	r3, [pc, #128]	; (800497c <pbuf_copy+0x17c>)
 80048fa:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80048fe:	4924      	ldr	r1, [pc, #144]	; (8004990 <pbuf_copy+0x190>)
 8004900:	4820      	ldr	r0, [pc, #128]	; (8004984 <pbuf_copy+0x184>)
 8004902:	f002 fc1f 	bl	8007144 <iprintf>
 8004906:	f06f 030f 	mvn.w	r3, #15
 800490a:	e032      	b.n	8004972 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d013      	beq.n	800493a <pbuf_copy+0x13a>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	895a      	ldrh	r2, [r3, #10]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	891b      	ldrh	r3, [r3, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	d10d      	bne.n	800493a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <pbuf_copy+0x13a>
 8004926:	4b15      	ldr	r3, [pc, #84]	; (800497c <pbuf_copy+0x17c>)
 8004928:	f240 32dd 	movw	r2, #989	; 0x3dd
 800492c:	4919      	ldr	r1, [pc, #100]	; (8004994 <pbuf_copy+0x194>)
 800492e:	4815      	ldr	r0, [pc, #84]	; (8004984 <pbuf_copy+0x184>)
 8004930:	f002 fc08 	bl	8007144 <iprintf>
 8004934:	f06f 0305 	mvn.w	r3, #5
 8004938:	e01b      	b.n	8004972 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d013      	beq.n	8004968 <pbuf_copy+0x168>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	895a      	ldrh	r2, [r3, #10]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	891b      	ldrh	r3, [r3, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	d10d      	bne.n	8004968 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <pbuf_copy+0x168>
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <pbuf_copy+0x17c>)
 8004956:	f240 32e2 	movw	r2, #994	; 0x3e2
 800495a:	490e      	ldr	r1, [pc, #56]	; (8004994 <pbuf_copy+0x194>)
 800495c:	4809      	ldr	r0, [pc, #36]	; (8004984 <pbuf_copy+0x184>)
 800495e:	f002 fbf1 	bl	8007144 <iprintf>
 8004962:	f06f 0305 	mvn.w	r3, #5
 8004966:	e004      	b.n	8004972 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f47f af67 	bne.w	800483e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	08008234 	.word	0x08008234
 8004980:	080085c4 	.word	0x080085c4
 8004984:	08008280 	.word	0x08008280
 8004988:	080085f4 	.word	0x080085f4
 800498c:	0800860c 	.word	0x0800860c
 8004990:	08008628 	.word	0x08008628
 8004994:	08008638 	.word	0x08008638

08004998 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4903      	ldr	r1, [pc, #12]	; (80049c0 <cyclic_timer+0x28>)
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f82e 	bl	8004a14 <sys_timeout>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	08004999 	.word	0x08004999

080049c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80049ca:	2300      	movs	r3, #0
 80049cc:	607b      	str	r3, [r7, #4]
 80049ce:	e00e      	b.n	80049ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80049d0:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <sys_timeouts_init+0x44>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <sys_timeouts_init+0x44>)
 80049de:	4413      	add	r3, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <sys_timeouts_init+0x48>)
 80049e4:	f000 f816 	bl	8004a14 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3301      	adds	r3, #1
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d9ed      	bls.n	80049d0 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80049f4:	f7fe fc82 	bl	80032fc <sys_now>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <sys_timeouts_init+0x4c>)
 80049fc:	6013      	str	r3, [r2, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	08008eb8 	.word	0x08008eb8
 8004a0c:	08004999 	.word	0x08004999
 8004a10:	20008358 	.word	0x20008358

08004a14 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8004a20:	2002      	movs	r0, #2
 8004a22:	f7ff f885 	bl	8003b30 <memp_malloc>
 8004a26:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f040 8084 	bne.w	8004b3e <sys_timeout+0x12a>
 8004a36:	4b44      	ldr	r3, [pc, #272]	; (8004b48 <sys_timeout+0x134>)
 8004a38:	22d4      	movs	r2, #212	; 0xd4
 8004a3a:	4944      	ldr	r1, [pc, #272]	; (8004b4c <sys_timeout+0x138>)
 8004a3c:	4844      	ldr	r0, [pc, #272]	; (8004b50 <sys_timeout+0x13c>)
 8004a3e:	f002 fb81 	bl	8007144 <iprintf>
    return;
 8004a42:	e07c      	b.n	8004b3e <sys_timeout+0x12a>
  }

  now = sys_now();
 8004a44:	f7fe fc5a 	bl	80032fc <sys_now>
 8004a48:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8004a4a:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <sys_timeout+0x140>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d105      	bne.n	8004a5e <sys_timeout+0x4a>
    diff = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8004a56:	4a40      	ldr	r2, [pc, #256]	; (8004b58 <sys_timeout+0x144>)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	e004      	b.n	8004a68 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	; (8004b58 <sys_timeout+0x144>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	441a      	add	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8004a84:	4b33      	ldr	r3, [pc, #204]	; (8004b54 <sys_timeout+0x140>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <sys_timeout+0x80>
    next_timeout = timeout;
 8004a8c:	4a31      	ldr	r2, [pc, #196]	; (8004b54 <sys_timeout+0x140>)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6013      	str	r3, [r2, #0]
    return;
 8004a92:	e055      	b.n	8004b40 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8004a94:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <sys_timeout+0x140>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d20f      	bcs.n	8004ac0 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8004aa0:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <sys_timeout+0x140>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <sys_timeout+0x140>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	1a8a      	subs	r2, r1, r2
 8004aae:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8004ab0:	4b28      	ldr	r3, [pc, #160]	; (8004b54 <sys_timeout+0x140>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8004ab8:	4a26      	ldr	r2, [pc, #152]	; (8004b54 <sys_timeout+0x140>)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e03f      	b.n	8004b40 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <sys_timeout+0x140>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	e036      	b.n	8004b36 <sys_timeout+0x122>
      timeout->time -= t->time;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	1ad2      	subs	r2, r2, r3
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d006      	beq.n	8004aec <sys_timeout+0xd8>
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d921      	bls.n	8004b30 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	1a8a      	subs	r2, r1, r2
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	e00b      	b.n	8004b20 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d206      	bcs.n	8004b20 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <sys_timeout+0x140>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	601a      	str	r2, [r3, #0]
        break;
 8004b2e:	e007      	b.n	8004b40 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1c5      	bne.n	8004ac8 <sys_timeout+0xb4>
 8004b3c:	e000      	b.n	8004b40 <sys_timeout+0x12c>
    return;
 8004b3e:	bf00      	nop
      }
    }
  }
}
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	08008740 	.word	0x08008740
 8004b4c:	08008774 	.word	0x08008774
 8004b50:	080087b4 	.word	0x080087b4
 8004b54:	20008354 	.word	0x20008354
 8004b58:	20008358 	.word	0x20008358

08004b5c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8004b62:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <sys_check_timeouts+0x8c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d039      	beq.n	8004bde <sys_check_timeouts+0x82>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8004b6a:	f7fe fbc7 	bl	80032fc <sys_now>
 8004b6e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8004b70:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <sys_check_timeouts+0x90>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8004b7e:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <sys_check_timeouts+0x8c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d026      	beq.n	8004bd8 <sys_check_timeouts+0x7c>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d321      	bcc.n	8004bd8 <sys_check_timeouts+0x7c>
        /* timeout has expired */
        had_one = 1;
 8004b94:	2301      	movs	r3, #1
 8004b96:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <sys_check_timeouts+0x90>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4a12      	ldr	r2, [pc, #72]	; (8004bec <sys_check_timeouts+0x90>)
 8004ba4:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <sys_check_timeouts+0x8c>)
 8004bb6:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	2002      	movs	r0, #2
 8004bc8:	f7fe fffe 	bl	8003bc8 <memp_free>
        if (handler != NULL) {
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <sys_check_timeouts+0x7c>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6838      	ldr	r0, [r7, #0]
 8004bd6:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1cd      	bne.n	8004b7a <sys_check_timeouts+0x1e>
  }
}
 8004bde:	bf00      	nop
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20008354 	.word	0x20008354
 8004bec:	20008358 	.word	0x20008358

08004bf0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004bf8:	4915      	ldr	r1, [pc, #84]	; (8004c50 <etharp_free_entry+0x60>)
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	4413      	add	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	440b      	add	r3, r1
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d013      	beq.n	8004c34 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004c0c:	4910      	ldr	r1, [pc, #64]	; (8004c50 <etharp_free_entry+0x60>)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	440b      	add	r3, r1
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fccd 	bl	80045bc <pbuf_free>
    arp_table[i].q = NULL;
 8004c22:	490b      	ldr	r1, [pc, #44]	; (8004c50 <etharp_free_entry+0x60>)
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	4413      	add	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	440b      	add	r3, r1
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004c34:	4906      	ldr	r1, [pc, #24]	; (8004c50 <etharp_free_entry+0x60>)
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	440b      	add	r3, r1
 8004c42:	3314      	adds	r3, #20
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	2000835c 	.word	0x2000835c

08004c54 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	71fb      	strb	r3, [r7, #7]
 8004c5e:	e096      	b.n	8004d8e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8004c60:	79fa      	ldrb	r2, [r7, #7]
 8004c62:	494f      	ldr	r1, [pc, #316]	; (8004da0 <etharp_tmr+0x14c>)
 8004c64:	4613      	mov	r3, r2
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4413      	add	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3314      	adds	r3, #20
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8004c74:	79bb      	ldrb	r3, [r7, #6]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 8086 	beq.w	8004d88 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8004c7c:	79fa      	ldrb	r2, [r7, #7]
 8004c7e:	4948      	ldr	r1, [pc, #288]	; (8004da0 <etharp_tmr+0x14c>)
 8004c80:	4613      	mov	r3, r2
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4413      	add	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	440b      	add	r3, r1
 8004c8a:	3312      	adds	r3, #18
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	b298      	uxth	r0, r3
 8004c92:	4943      	ldr	r1, [pc, #268]	; (8004da0 <etharp_tmr+0x14c>)
 8004c94:	4613      	mov	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4413      	add	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3312      	adds	r3, #18
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004ca4:	79fa      	ldrb	r2, [r7, #7]
 8004ca6:	493e      	ldr	r1, [pc, #248]	; (8004da0 <etharp_tmr+0x14c>)
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	440b      	add	r3, r1
 8004cb2:	3312      	adds	r3, #18
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004cba:	d215      	bcs.n	8004ce8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004cbc:	79fa      	ldrb	r2, [r7, #7]
 8004cbe:	4938      	ldr	r1, [pc, #224]	; (8004da0 <etharp_tmr+0x14c>)
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	440b      	add	r3, r1
 8004cca:	3314      	adds	r3, #20
 8004ccc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d10f      	bne.n	8004cf2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8004cd2:	79fa      	ldrb	r2, [r7, #7]
 8004cd4:	4932      	ldr	r1, [pc, #200]	; (8004da0 <etharp_tmr+0x14c>)
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4413      	add	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	440b      	add	r3, r1
 8004ce0:	3312      	adds	r3, #18
 8004ce2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d904      	bls.n	8004cf2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff ff80 	bl	8004bf0 <etharp_free_entry>
 8004cf0:	e04a      	b.n	8004d88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8004cf2:	79fa      	ldrb	r2, [r7, #7]
 8004cf4:	492a      	ldr	r1, [pc, #168]	; (8004da0 <etharp_tmr+0x14c>)
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	440b      	add	r3, r1
 8004d00:	3314      	adds	r3, #20
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d10a      	bne.n	8004d1e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004d08:	79fa      	ldrb	r2, [r7, #7]
 8004d0a:	4925      	ldr	r1, [pc, #148]	; (8004da0 <etharp_tmr+0x14c>)
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	440b      	add	r3, r1
 8004d16:	3314      	adds	r3, #20
 8004d18:	2204      	movs	r2, #4
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	e034      	b.n	8004d88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8004d1e:	79fa      	ldrb	r2, [r7, #7]
 8004d20:	491f      	ldr	r1, [pc, #124]	; (8004da0 <etharp_tmr+0x14c>)
 8004d22:	4613      	mov	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	4413      	add	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3314      	adds	r3, #20
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d10a      	bne.n	8004d4a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004d34:	79fa      	ldrb	r2, [r7, #7]
 8004d36:	491a      	ldr	r1, [pc, #104]	; (8004da0 <etharp_tmr+0x14c>)
 8004d38:	4613      	mov	r3, r2
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	4413      	add	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	440b      	add	r3, r1
 8004d42:	3314      	adds	r3, #20
 8004d44:	2202      	movs	r2, #2
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	e01e      	b.n	8004d88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004d4a:	79fa      	ldrb	r2, [r7, #7]
 8004d4c:	4914      	ldr	r1, [pc, #80]	; (8004da0 <etharp_tmr+0x14c>)
 8004d4e:	4613      	mov	r3, r2
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4413      	add	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	440b      	add	r3, r1
 8004d58:	3314      	adds	r3, #20
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d113      	bne.n	8004d88 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8004d60:	79fa      	ldrb	r2, [r7, #7]
 8004d62:	490f      	ldr	r1, [pc, #60]	; (8004da0 <etharp_tmr+0x14c>)
 8004d64:	4613      	mov	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4413      	add	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3308      	adds	r3, #8
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	79fa      	ldrb	r2, [r7, #7]
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <etharp_tmr+0x14c>)
 8004d7e:	4413      	add	r3, r2
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	f000 fe38 	bl	80059f8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	71fb      	strb	r3, [r7, #7]
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	2b09      	cmp	r3, #9
 8004d92:	f67f af65 	bls.w	8004c60 <etharp_tmr+0xc>
      }
    }
  }
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	2000835c 	.word	0x2000835c

08004da4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	460b      	mov	r3, r1
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8004db2:	230a      	movs	r3, #10
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	230a      	movs	r3, #10
 8004db8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8004dba:	230a      	movs	r3, #10
 8004dbc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8004dc2:	230a      	movs	r3, #10
 8004dc4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	833b      	strh	r3, [r7, #24]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	82fb      	strh	r3, [r7, #22]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	773b      	strb	r3, [r7, #28]
 8004dd6:	e093      	b.n	8004f00 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8004dd8:	7f3a      	ldrb	r2, [r7, #28]
 8004dda:	4990      	ldr	r1, [pc, #576]	; (800501c <etharp_find_entry+0x278>)
 8004ddc:	4613      	mov	r3, r2
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	440b      	add	r3, r1
 8004de6:	3314      	adds	r3, #20
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004dec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004df0:	2b0a      	cmp	r3, #10
 8004df2:	d105      	bne.n	8004e00 <etharp_find_entry+0x5c>
 8004df4:	7cfb      	ldrb	r3, [r7, #19]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8004dfa:	7f3b      	ldrb	r3, [r7, #28]
 8004dfc:	777b      	strb	r3, [r7, #29]
 8004dfe:	e07c      	b.n	8004efa <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d079      	beq.n	8004efa <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8004e06:	7cfb      	ldrb	r3, [r7, #19]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d009      	beq.n	8004e20 <etharp_find_entry+0x7c>
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d806      	bhi.n	8004e20 <etharp_find_entry+0x7c>
 8004e12:	4b83      	ldr	r3, [pc, #524]	; (8005020 <etharp_find_entry+0x27c>)
 8004e14:	f240 1225 	movw	r2, #293	; 0x125
 8004e18:	4982      	ldr	r1, [pc, #520]	; (8005024 <etharp_find_entry+0x280>)
 8004e1a:	4883      	ldr	r0, [pc, #524]	; (8005028 <etharp_find_entry+0x284>)
 8004e1c:	f002 f992 	bl	8007144 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00f      	beq.n	8004e46 <etharp_find_entry+0xa2>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	7f3a      	ldrb	r2, [r7, #28]
 8004e2c:	487b      	ldr	r0, [pc, #492]	; (800501c <etharp_find_entry+0x278>)
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4403      	add	r3, r0
 8004e38:	3304      	adds	r3, #4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	d102      	bne.n	8004e46 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8004e40:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004e44:	e0e5      	b.n	8005012 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8004e46:	7cfb      	ldrb	r3, [r7, #19]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d13b      	bne.n	8004ec4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8004e4c:	7f3a      	ldrb	r2, [r7, #28]
 8004e4e:	4973      	ldr	r1, [pc, #460]	; (800501c <etharp_find_entry+0x278>)
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	440b      	add	r3, r1
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d018      	beq.n	8004e92 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8004e60:	7f3a      	ldrb	r2, [r7, #28]
 8004e62:	496e      	ldr	r1, [pc, #440]	; (800501c <etharp_find_entry+0x278>)
 8004e64:	4613      	mov	r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3312      	adds	r3, #18
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	8b3a      	ldrh	r2, [r7, #24]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d840      	bhi.n	8004efa <etharp_find_entry+0x156>
            old_queue = i;
 8004e78:	7f3b      	ldrb	r3, [r7, #28]
 8004e7a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8004e7c:	7f3a      	ldrb	r2, [r7, #28]
 8004e7e:	4967      	ldr	r1, [pc, #412]	; (800501c <etharp_find_entry+0x278>)
 8004e80:	4613      	mov	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4413      	add	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	440b      	add	r3, r1
 8004e8a:	3312      	adds	r3, #18
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	833b      	strh	r3, [r7, #24]
 8004e90:	e033      	b.n	8004efa <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8004e92:	7f3a      	ldrb	r2, [r7, #28]
 8004e94:	4961      	ldr	r1, [pc, #388]	; (800501c <etharp_find_entry+0x278>)
 8004e96:	4613      	mov	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	4413      	add	r3, r2
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3312      	adds	r3, #18
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	8afa      	ldrh	r2, [r7, #22]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d827      	bhi.n	8004efa <etharp_find_entry+0x156>
            old_pending = i;
 8004eaa:	7f3b      	ldrb	r3, [r7, #28]
 8004eac:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8004eae:	7f3a      	ldrb	r2, [r7, #28]
 8004eb0:	495a      	ldr	r1, [pc, #360]	; (800501c <etharp_find_entry+0x278>)
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	4413      	add	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	440b      	add	r3, r1
 8004ebc:	3312      	adds	r3, #18
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	82fb      	strh	r3, [r7, #22]
 8004ec2:	e01a      	b.n	8004efa <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d917      	bls.n	8004efa <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8004eca:	7f3a      	ldrb	r2, [r7, #28]
 8004ecc:	4953      	ldr	r1, [pc, #332]	; (800501c <etharp_find_entry+0x278>)
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3312      	adds	r3, #18
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	8aba      	ldrh	r2, [r7, #20]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d80b      	bhi.n	8004efa <etharp_find_entry+0x156>
            old_stable = i;
 8004ee2:	7f3b      	ldrb	r3, [r7, #28]
 8004ee4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8004ee6:	7f3a      	ldrb	r2, [r7, #28]
 8004ee8:	494c      	ldr	r1, [pc, #304]	; (800501c <etharp_find_entry+0x278>)
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3312      	adds	r3, #18
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004efa:	7f3b      	ldrb	r3, [r7, #28]
 8004efc:	3301      	adds	r3, #1
 8004efe:	773b      	strb	r3, [r7, #28]
 8004f00:	7f3b      	ldrb	r3, [r7, #28]
 8004f02:	2b09      	cmp	r3, #9
 8004f04:	f67f af68 	bls.w	8004dd8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004f08:	7afb      	ldrb	r3, [r7, #11]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d108      	bne.n	8004f24 <etharp_find_entry+0x180>
 8004f12:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004f16:	2b0a      	cmp	r3, #10
 8004f18:	d107      	bne.n	8004f2a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8004f1a:	7afb      	ldrb	r3, [r7, #11]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8004f24:	f04f 33ff 	mov.w	r3, #4294967295
 8004f28:	e073      	b.n	8005012 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8004f2a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004f2e:	2b09      	cmp	r3, #9
 8004f30:	dc02      	bgt.n	8004f38 <etharp_find_entry+0x194>
    i = empty;
 8004f32:	7f7b      	ldrb	r3, [r7, #29]
 8004f34:	773b      	strb	r3, [r7, #28]
 8004f36:	e036      	b.n	8004fa6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8004f38:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004f3c:	2b09      	cmp	r3, #9
 8004f3e:	dc13      	bgt.n	8004f68 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8004f40:	7fbb      	ldrb	r3, [r7, #30]
 8004f42:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8004f44:	7f3a      	ldrb	r2, [r7, #28]
 8004f46:	4935      	ldr	r1, [pc, #212]	; (800501c <etharp_find_entry+0x278>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d018      	beq.n	8004f8a <etharp_find_entry+0x1e6>
 8004f58:	4b31      	ldr	r3, [pc, #196]	; (8005020 <etharp_find_entry+0x27c>)
 8004f5a:	f240 126f 	movw	r2, #367	; 0x16f
 8004f5e:	4933      	ldr	r1, [pc, #204]	; (800502c <etharp_find_entry+0x288>)
 8004f60:	4831      	ldr	r0, [pc, #196]	; (8005028 <etharp_find_entry+0x284>)
 8004f62:	f002 f8ef 	bl	8007144 <iprintf>
 8004f66:	e010      	b.n	8004f8a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004f68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f6c:	2b09      	cmp	r3, #9
 8004f6e:	dc02      	bgt.n	8004f76 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8004f70:	7ffb      	ldrb	r3, [r7, #31]
 8004f72:	773b      	strb	r3, [r7, #28]
 8004f74:	e009      	b.n	8004f8a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004f76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004f7a:	2b09      	cmp	r3, #9
 8004f7c:	dc02      	bgt.n	8004f84 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8004f7e:	7efb      	ldrb	r3, [r7, #27]
 8004f80:	773b      	strb	r3, [r7, #28]
 8004f82:	e002      	b.n	8004f8a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8004f84:	f04f 33ff 	mov.w	r3, #4294967295
 8004f88:	e043      	b.n	8005012 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8004f8a:	7f3b      	ldrb	r3, [r7, #28]
 8004f8c:	2b09      	cmp	r3, #9
 8004f8e:	d906      	bls.n	8004f9e <etharp_find_entry+0x1fa>
 8004f90:	4b23      	ldr	r3, [pc, #140]	; (8005020 <etharp_find_entry+0x27c>)
 8004f92:	f240 1281 	movw	r2, #385	; 0x181
 8004f96:	4926      	ldr	r1, [pc, #152]	; (8005030 <etharp_find_entry+0x28c>)
 8004f98:	4823      	ldr	r0, [pc, #140]	; (8005028 <etharp_find_entry+0x284>)
 8004f9a:	f002 f8d3 	bl	8007144 <iprintf>
    etharp_free_entry(i);
 8004f9e:	7f3b      	ldrb	r3, [r7, #28]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fe25 	bl	8004bf0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8004fa6:	7f3b      	ldrb	r3, [r7, #28]
 8004fa8:	2b09      	cmp	r3, #9
 8004faa:	d906      	bls.n	8004fba <etharp_find_entry+0x216>
 8004fac:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <etharp_find_entry+0x27c>)
 8004fae:	f240 1285 	movw	r2, #389	; 0x185
 8004fb2:	491f      	ldr	r1, [pc, #124]	; (8005030 <etharp_find_entry+0x28c>)
 8004fb4:	481c      	ldr	r0, [pc, #112]	; (8005028 <etharp_find_entry+0x284>)
 8004fb6:	f002 f8c5 	bl	8007144 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8004fba:	7f3a      	ldrb	r2, [r7, #28]
 8004fbc:	4917      	ldr	r1, [pc, #92]	; (800501c <etharp_find_entry+0x278>)
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	440b      	add	r3, r1
 8004fc8:	3314      	adds	r3, #20
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d006      	beq.n	8004fde <etharp_find_entry+0x23a>
 8004fd0:	4b13      	ldr	r3, [pc, #76]	; (8005020 <etharp_find_entry+0x27c>)
 8004fd2:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8004fd6:	4917      	ldr	r1, [pc, #92]	; (8005034 <etharp_find_entry+0x290>)
 8004fd8:	4813      	ldr	r0, [pc, #76]	; (8005028 <etharp_find_entry+0x284>)
 8004fda:	f002 f8b3 	bl	8007144 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004fe4:	7f3a      	ldrb	r2, [r7, #28]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6819      	ldr	r1, [r3, #0]
 8004fea:	480c      	ldr	r0, [pc, #48]	; (800501c <etharp_find_entry+0x278>)
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4403      	add	r3, r0
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8004ffa:	7f3a      	ldrb	r2, [r7, #28]
 8004ffc:	4907      	ldr	r1, [pc, #28]	; (800501c <etharp_find_entry+0x278>)
 8004ffe:	4613      	mov	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4413      	add	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	440b      	add	r3, r1
 8005008:	3312      	adds	r3, #18
 800500a:	2200      	movs	r2, #0
 800500c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800500e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	2000835c 	.word	0x2000835c
 8005020:	080087dc 	.word	0x080087dc
 8005024:	08008814 	.word	0x08008814
 8005028:	08008854 	.word	0x08008854
 800502c:	0800887c 	.word	0x0800887c
 8005030:	08008894 	.word	0x08008894
 8005034:	080088a8 	.word	0x080088a8

08005038 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800504c:	2b06      	cmp	r3, #6
 800504e:	d006      	beq.n	800505e <etharp_update_arp_entry+0x26>
 8005050:	4b48      	ldr	r3, [pc, #288]	; (8005174 <etharp_update_arp_entry+0x13c>)
 8005052:	f240 12ab 	movw	r2, #427	; 0x1ab
 8005056:	4948      	ldr	r1, [pc, #288]	; (8005178 <etharp_update_arp_entry+0x140>)
 8005058:	4848      	ldr	r0, [pc, #288]	; (800517c <etharp_update_arp_entry+0x144>)
 800505a:	f002 f873 	bl	8007144 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d012      	beq.n	800508a <etharp_update_arp_entry+0x52>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68f9      	ldr	r1, [r7, #12]
 8005072:	4618      	mov	r0, r3
 8005074:	f001 f8cc 	bl	8006210 <ip4_addr_isbroadcast_u32>
 8005078:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800507a:	2b00      	cmp	r3, #0
 800507c:	d105      	bne.n	800508a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005086:	2be0      	cmp	r3, #224	; 0xe0
 8005088:	d102      	bne.n	8005090 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800508a:	f06f 030f 	mvn.w	r3, #15
 800508e:	e06c      	b.n	800516a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4619      	mov	r1, r3
 8005096:	68b8      	ldr	r0, [r7, #8]
 8005098:	f7ff fe84 	bl	8004da4 <etharp_find_entry>
 800509c:	4603      	mov	r3, r0
 800509e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80050a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	da02      	bge.n	80050ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80050a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050ac:	e05d      	b.n	800516a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80050ae:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80050b2:	4933      	ldr	r1, [pc, #204]	; (8005180 <etharp_update_arp_entry+0x148>)
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	440b      	add	r3, r1
 80050be:	3314      	adds	r3, #20
 80050c0:	2202      	movs	r2, #2
 80050c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80050c4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80050c8:	492d      	ldr	r1, [pc, #180]	; (8005180 <etharp_update_arp_entry+0x148>)
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	440b      	add	r3, r1
 80050d4:	3308      	adds	r3, #8
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80050da:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	3308      	adds	r3, #8
 80050e8:	4a25      	ldr	r2, [pc, #148]	; (8005180 <etharp_update_arp_entry+0x148>)
 80050ea:	4413      	add	r3, r2
 80050ec:	3304      	adds	r3, #4
 80050ee:	2206      	movs	r2, #6
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f002 f900 	bl	80072f8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80050f8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80050fc:	4920      	ldr	r1, [pc, #128]	; (8005180 <etharp_update_arp_entry+0x148>)
 80050fe:	4613      	mov	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4413      	add	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	440b      	add	r3, r1
 8005108:	3312      	adds	r3, #18
 800510a:	2200      	movs	r2, #0
 800510c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800510e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005112:	491b      	ldr	r1, [pc, #108]	; (8005180 <etharp_update_arp_entry+0x148>)
 8005114:	4613      	mov	r3, r2
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	4413      	add	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	440b      	add	r3, r1
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d021      	beq.n	8005168 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8005124:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005128:	4915      	ldr	r1, [pc, #84]	; (8005180 <etharp_update_arp_entry+0x148>)
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	440b      	add	r3, r1
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8005138:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800513c:	4910      	ldr	r1, [pc, #64]	; (8005180 <etharp_update_arp_entry+0x148>)
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8005152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6939      	ldr	r1, [r7, #16]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f001 fef9 	bl	8006f54 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8005162:	6938      	ldr	r0, [r7, #16]
 8005164:	f7ff fa2a 	bl	80045bc <pbuf_free>
  }
  return ERR_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	080087dc 	.word	0x080087dc
 8005178:	080088d4 	.word	0x080088d4
 800517c:	08008854 	.word	0x08008854
 8005180:	2000835c 	.word	0x2000835c

08005184 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]
 8005190:	e01f      	b.n	80051d2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	4913      	ldr	r1, [pc, #76]	; (80051e4 <etharp_cleanup_netif+0x60>)
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	440b      	add	r3, r1
 80051a0:	3314      	adds	r3, #20
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80051a6:	7bbb      	ldrb	r3, [r7, #14]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00f      	beq.n	80051cc <etharp_cleanup_netif+0x48>
 80051ac:	7bfa      	ldrb	r2, [r7, #15]
 80051ae:	490d      	ldr	r1, [pc, #52]	; (80051e4 <etharp_cleanup_netif+0x60>)
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	440b      	add	r3, r1
 80051ba:	3308      	adds	r3, #8
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d103      	bne.n	80051cc <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fd12 	bl	8004bf0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	3301      	adds	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b09      	cmp	r3, #9
 80051d6:	d9dc      	bls.n	8005192 <etharp_cleanup_netif+0xe>
    }
  }
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	2000835c 	.word	0x2000835c

080051e8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80051e8:	b5b0      	push	{r4, r5, r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af04      	add	r7, sp, #16
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d107      	bne.n	8005208 <etharp_input+0x20>
 80051f8:	4b3d      	ldr	r3, [pc, #244]	; (80052f0 <etharp_input+0x108>)
 80051fa:	f44f 7222 	mov.w	r2, #648	; 0x288
 80051fe:	493d      	ldr	r1, [pc, #244]	; (80052f4 <etharp_input+0x10c>)
 8005200:	483d      	ldr	r0, [pc, #244]	; (80052f8 <etharp_input+0x110>)
 8005202:	f001 ff9f 	bl	8007144 <iprintf>
 8005206:	e06f      	b.n	80052e8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005218:	d10c      	bne.n	8005234 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800521e:	2b06      	cmp	r3, #6
 8005220:	d108      	bne.n	8005234 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005226:	2b04      	cmp	r3, #4
 8005228:	d104      	bne.n	8005234 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	885b      	ldrh	r3, [r3, #2]
 800522e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005230:	2b08      	cmp	r3, #8
 8005232:	d003      	beq.n	800523c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff f9c1 	bl	80045bc <pbuf_free>
    return;
 800523a:	e055      	b.n	80052e8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	330e      	adds	r3, #14
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	3318      	adds	r3, #24
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	3304      	adds	r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <etharp_input+0x74>
    for_us = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
 800525a:	e009      	b.n	8005270 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	3304      	adds	r3, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	bf0c      	ite	eq
 8005268:	2301      	moveq	r3, #1
 800526a:	2300      	movne	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f103 0208 	add.w	r2, r3, #8
 8005276:	7dfb      	ldrb	r3, [r7, #23]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <etharp_input+0x98>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <etharp_input+0x9a>
 8005280:	2302      	movs	r3, #2
 8005282:	f107 010c 	add.w	r1, r7, #12
 8005286:	6838      	ldr	r0, [r7, #0]
 8005288:	f7ff fed6 	bl	8005038 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	88db      	ldrh	r3, [r3, #6]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005296:	d003      	beq.n	80052a0 <etharp_input+0xb8>
 8005298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529c:	d01e      	beq.n	80052dc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800529e:	e020      	b.n	80052e2 <etharp_input+0xfa>
    if (for_us) {
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01c      	beq.n	80052e0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	3208      	adds	r2, #8
      etharp_raw(netif,
 80052c0:	2102      	movs	r1, #2
 80052c2:	9103      	str	r1, [sp, #12]
 80052c4:	f107 010c 	add.w	r1, r7, #12
 80052c8:	9102      	str	r1, [sp, #8]
 80052ca:	9201      	str	r2, [sp, #4]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	462b      	mov	r3, r5
 80052d0:	4622      	mov	r2, r4
 80052d2:	4601      	mov	r1, r0
 80052d4:	6838      	ldr	r0, [r7, #0]
 80052d6:	f000 fae1 	bl	800589c <etharp_raw>
    break;
 80052da:	e001      	b.n	80052e0 <etharp_input+0xf8>
    break;
 80052dc:	bf00      	nop
 80052de:	e000      	b.n	80052e2 <etharp_input+0xfa>
    break;
 80052e0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff f96a 	bl	80045bc <pbuf_free>
}
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bdb0      	pop	{r4, r5, r7, pc}
 80052ee:	bf00      	nop
 80052f0:	080087dc 	.word	0x080087dc
 80052f4:	0800892c 	.word	0x0800892c
 80052f8:	08008854 	.word	0x08008854

080052fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800530a:	79fa      	ldrb	r2, [r7, #7]
 800530c:	4944      	ldr	r1, [pc, #272]	; (8005420 <etharp_output_to_arp_index+0x124>)
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	3314      	adds	r3, #20
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d806      	bhi.n	800532e <etharp_output_to_arp_index+0x32>
 8005320:	4b40      	ldr	r3, [pc, #256]	; (8005424 <etharp_output_to_arp_index+0x128>)
 8005322:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8005326:	4940      	ldr	r1, [pc, #256]	; (8005428 <etharp_output_to_arp_index+0x12c>)
 8005328:	4840      	ldr	r0, [pc, #256]	; (800542c <etharp_output_to_arp_index+0x130>)
 800532a:	f001 ff0b 	bl	8007144 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800532e:	79fa      	ldrb	r2, [r7, #7]
 8005330:	493b      	ldr	r1, [pc, #236]	; (8005420 <etharp_output_to_arp_index+0x124>)
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	440b      	add	r3, r1
 800533c:	3314      	adds	r3, #20
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d153      	bne.n	80053ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005344:	79fa      	ldrb	r2, [r7, #7]
 8005346:	4936      	ldr	r1, [pc, #216]	; (8005420 <etharp_output_to_arp_index+0x124>)
 8005348:	4613      	mov	r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	440b      	add	r3, r1
 8005352:	3312      	adds	r3, #18
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800535a:	d919      	bls.n	8005390 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800535c:	79fa      	ldrb	r2, [r7, #7]
 800535e:	4613      	mov	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4413      	add	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4a2e      	ldr	r2, [pc, #184]	; (8005420 <etharp_output_to_arp_index+0x124>)
 8005368:	4413      	add	r3, r2
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fb42 	bl	80059f8 <etharp_request>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d138      	bne.n	80053ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800537a:	79fa      	ldrb	r2, [r7, #7]
 800537c:	4928      	ldr	r1, [pc, #160]	; (8005420 <etharp_output_to_arp_index+0x124>)
 800537e:	4613      	mov	r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	3314      	adds	r3, #20
 800538a:	2203      	movs	r2, #3
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e02d      	b.n	80053ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005390:	79fa      	ldrb	r2, [r7, #7]
 8005392:	4923      	ldr	r1, [pc, #140]	; (8005420 <etharp_output_to_arp_index+0x124>)
 8005394:	4613      	mov	r3, r2
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	3312      	adds	r3, #18
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80053a6:	d321      	bcc.n	80053ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80053a8:	79fa      	ldrb	r2, [r7, #7]
 80053aa:	4613      	mov	r3, r2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	4413      	add	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <etharp_output_to_arp_index+0x124>)
 80053b4:	4413      	add	r3, r2
 80053b6:	1d19      	adds	r1, r3, #4
 80053b8:	79fa      	ldrb	r2, [r7, #7]
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	3308      	adds	r3, #8
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <etharp_output_to_arp_index+0x124>)
 80053c6:	4413      	add	r3, r2
 80053c8:	3304      	adds	r3, #4
 80053ca:	461a      	mov	r2, r3
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 faf1 	bl	80059b4 <etharp_request_dst>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80053d8:	79fa      	ldrb	r2, [r7, #7]
 80053da:	4911      	ldr	r1, [pc, #68]	; (8005420 <etharp_output_to_arp_index+0x124>)
 80053dc:	4613      	mov	r3, r2
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	440b      	add	r3, r1
 80053e6:	3314      	adds	r3, #20
 80053e8:	2203      	movs	r2, #3
 80053ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80053f2:	79fa      	ldrb	r2, [r7, #7]
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	3308      	adds	r3, #8
 80053fe:	4a08      	ldr	r2, [pc, #32]	; (8005420 <etharp_output_to_arp_index+0x124>)
 8005400:	4413      	add	r3, r2
 8005402:	3304      	adds	r3, #4
 8005404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005408:	9200      	str	r2, [sp, #0]
 800540a:	460a      	mov	r2, r1
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f001 fda0 	bl	8006f54 <ethernet_output>
 8005414:	4603      	mov	r3, r0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	2000835c 	.word	0x2000835c
 8005424:	080087dc 	.word	0x080087dc
 8005428:	0800894c 	.word	0x0800894c
 800542c:	08008854 	.word	0x08008854

08005430 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <etharp_output+0x24>
 8005446:	4b69      	ldr	r3, [pc, #420]	; (80055ec <etharp_output+0x1bc>)
 8005448:	f240 321b 	movw	r2, #795	; 0x31b
 800544c:	4968      	ldr	r1, [pc, #416]	; (80055f0 <etharp_output+0x1c0>)
 800544e:	4869      	ldr	r0, [pc, #420]	; (80055f4 <etharp_output+0x1c4>)
 8005450:	f001 fe78 	bl	8007144 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <etharp_output+0x38>
 800545a:	4b64      	ldr	r3, [pc, #400]	; (80055ec <etharp_output+0x1bc>)
 800545c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8005460:	4965      	ldr	r1, [pc, #404]	; (80055f8 <etharp_output+0x1c8>)
 8005462:	4864      	ldr	r0, [pc, #400]	; (80055f4 <etharp_output+0x1c4>)
 8005464:	f001 fe6e 	bl	8007144 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <etharp_output+0x4c>
 800546e:	4b5f      	ldr	r3, [pc, #380]	; (80055ec <etharp_output+0x1bc>)
 8005470:	f240 321d 	movw	r2, #797	; 0x31d
 8005474:	4961      	ldr	r1, [pc, #388]	; (80055fc <etharp_output+0x1cc>)
 8005476:	485f      	ldr	r0, [pc, #380]	; (80055f4 <etharp_output+0x1c4>)
 8005478:	f001 fe64 	bl	8007144 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68f9      	ldr	r1, [r7, #12]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fec4 	bl	8006210 <ip4_addr_isbroadcast_u32>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800548e:	4b5c      	ldr	r3, [pc, #368]	; (8005600 <etharp_output+0x1d0>)
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	e09b      	b.n	80055cc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800549c:	2be0      	cmp	r3, #224	; 0xe0
 800549e:	d118      	bne.n	80054d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80054a0:	2301      	movs	r3, #1
 80054a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80054a4:	2300      	movs	r3, #0
 80054a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80054a8:	235e      	movs	r3, #94	; 0x5e
 80054aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3301      	adds	r3, #1
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3302      	adds	r3, #2
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3303      	adds	r3, #3
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80054ca:	f107 0310 	add.w	r3, r7, #16
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	e07c      	b.n	80055cc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3304      	adds	r3, #4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	405a      	eors	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3308      	adds	r3, #8
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d012      	beq.n	8005510 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80054f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00b      	beq.n	8005510 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	330c      	adds	r3, #12
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	330c      	adds	r3, #12
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e002      	b.n	8005510 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800550a:	f06f 0303 	mvn.w	r3, #3
 800550e:	e069      	b.n	80055e4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005510:	4b3c      	ldr	r3, [pc, #240]	; (8005604 <etharp_output+0x1d4>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	4619      	mov	r1, r3
 8005516:	4a3c      	ldr	r2, [pc, #240]	; (8005608 <etharp_output+0x1d8>)
 8005518:	460b      	mov	r3, r1
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	440b      	add	r3, r1
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	4413      	add	r3, r2
 8005522:	3314      	adds	r3, #20
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d917      	bls.n	800555a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b35      	ldr	r3, [pc, #212]	; (8005604 <etharp_output+0x1d4>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	4934      	ldr	r1, [pc, #208]	; (8005608 <etharp_output+0x1d8>)
 8005536:	4603      	mov	r3, r0
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4403      	add	r3, r0
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	440b      	add	r3, r1
 8005540:	3304      	adds	r3, #4
 8005542:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005544:	429a      	cmp	r2, r3
 8005546:	d108      	bne.n	800555a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8005548:	4b2e      	ldr	r3, [pc, #184]	; (8005604 <etharp_output+0x1d4>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff fed3 	bl	80052fc <etharp_output_to_arp_index>
 8005556:	4603      	mov	r3, r0
 8005558:	e044      	b.n	80055e4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]
 800555e:	e02a      	b.n	80055b6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005560:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005564:	4928      	ldr	r1, [pc, #160]	; (8005608 <etharp_output+0x1d8>)
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	440b      	add	r3, r1
 8005570:	3314      	adds	r3, #20
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d918      	bls.n	80055aa <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005580:	4821      	ldr	r0, [pc, #132]	; (8005608 <etharp_output+0x1d8>)
 8005582:	4613      	mov	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	4413      	add	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4403      	add	r3, r0
 800558c:	3304      	adds	r3, #4
 800558e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005590:	4299      	cmp	r1, r3
 8005592:	d10a      	bne.n	80055aa <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8005594:	7dfa      	ldrb	r2, [r7, #23]
 8005596:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <etharp_output+0x1d4>)
 8005598:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	461a      	mov	r2, r3
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff feab 	bl	80052fc <etharp_output_to_arp_index>
 80055a6:	4603      	mov	r3, r0
 80055a8:	e01c      	b.n	80055e4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80055aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	3301      	adds	r3, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	75fb      	strb	r3, [r7, #23]
 80055b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055ba:	2b09      	cmp	r3, #9
 80055bc:	ddd0      	ble.n	8005560 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f822 	bl	800560c <etharp_query>
 80055c8:	4603      	mov	r3, r0
 80055ca:	e00b      	b.n	80055e4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80055d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f001 fcb9 	bl	8006f54 <ethernet_output>
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	080087dc 	.word	0x080087dc
 80055f0:	0800892c 	.word	0x0800892c
 80055f4:	08008854 	.word	0x08008854
 80055f8:	0800897c 	.word	0x0800897c
 80055fc:	0800891c 	.word	0x0800891c
 8005600:	08008ecc 	.word	0x08008ecc
 8005604:	2000844c 	.word	0x2000844c
 8005608:	2000835c 	.word	0x2000835c

0800560c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08c      	sub	sp, #48	; 0x30
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3329      	adds	r3, #41	; 0x29
 800561c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800561e:	23ff      	movs	r3, #255	; 0xff
 8005620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68f9      	ldr	r1, [r7, #12]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fdee 	bl	8006210 <ip4_addr_isbroadcast_u32>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10c      	bne.n	8005654 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005642:	2be0      	cmp	r3, #224	; 0xe0
 8005644:	d006      	beq.n	8005654 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8005654:	f06f 030f 	mvn.w	r3, #15
 8005658:	e10e      	b.n	8005878 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	2101      	movs	r1, #1
 800565e:	68b8      	ldr	r0, [r7, #8]
 8005660:	f7ff fba0 	bl	8004da4 <etharp_find_entry>
 8005664:	4603      	mov	r3, r0
 8005666:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8005668:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800566c:	2b00      	cmp	r3, #0
 800566e:	da02      	bge.n	8005676 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8005670:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005674:	e100      	b.n	8005878 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8005676:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800567a:	4981      	ldr	r1, [pc, #516]	; (8005880 <etharp_query+0x274>)
 800567c:	4613      	mov	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4413      	add	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	440b      	add	r3, r1
 8005686:	3314      	adds	r3, #20
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d117      	bne.n	80056be <etharp_query+0xb2>
    is_new_entry = 1;
 800568e:	2301      	movs	r3, #1
 8005690:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005692:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8005696:	497a      	ldr	r1, [pc, #488]	; (8005880 <etharp_query+0x274>)
 8005698:	4613      	mov	r3, r2
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	4413      	add	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	440b      	add	r3, r1
 80056a2:	3314      	adds	r3, #20
 80056a4:	2201      	movs	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80056a8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80056ac:	4974      	ldr	r1, [pc, #464]	; (8005880 <etharp_query+0x274>)
 80056ae:	4613      	mov	r3, r2
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	4413      	add	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	440b      	add	r3, r1
 80056b8:	3308      	adds	r3, #8
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80056be:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80056c2:	496f      	ldr	r1, [pc, #444]	; (8005880 <etharp_query+0x274>)
 80056c4:	4613      	mov	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	440b      	add	r3, r1
 80056ce:	3314      	adds	r3, #20
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d012      	beq.n	80056fc <etharp_query+0xf0>
 80056d6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80056da:	4969      	ldr	r1, [pc, #420]	; (8005880 <etharp_query+0x274>)
 80056dc:	4613      	mov	r3, r2
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	3314      	adds	r3, #20
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d806      	bhi.n	80056fc <etharp_query+0xf0>
 80056ee:	4b65      	ldr	r3, [pc, #404]	; (8005884 <etharp_query+0x278>)
 80056f0:	f240 32c7 	movw	r2, #967	; 0x3c7
 80056f4:	4964      	ldr	r1, [pc, #400]	; (8005888 <etharp_query+0x27c>)
 80056f6:	4865      	ldr	r0, [pc, #404]	; (800588c <etharp_query+0x280>)
 80056f8:	f001 fd24 	bl	8007144 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d102      	bne.n	8005708 <etharp_query+0xfc>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10c      	bne.n	8005722 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f974 	bl	80059f8 <etharp_request>
 8005710:	4603      	mov	r3, r0
 8005712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <etharp_query+0x116>
      return result;
 800571c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005720:	e0aa      	b.n	8005878 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <etharp_query+0x12a>
 8005728:	4b56      	ldr	r3, [pc, #344]	; (8005884 <etharp_query+0x278>)
 800572a:	f240 32db 	movw	r2, #987	; 0x3db
 800572e:	4958      	ldr	r1, [pc, #352]	; (8005890 <etharp_query+0x284>)
 8005730:	4856      	ldr	r0, [pc, #344]	; (800588c <etharp_query+0x280>)
 8005732:	f001 fd07 	bl	8007144 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005736:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800573a:	4951      	ldr	r1, [pc, #324]	; (8005880 <etharp_query+0x274>)
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	440b      	add	r3, r1
 8005746:	3314      	adds	r3, #20
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d918      	bls.n	8005780 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800574e:	7cfa      	ldrb	r2, [r7, #19]
 8005750:	4b50      	ldr	r3, [pc, #320]	; (8005894 <etharp_query+0x288>)
 8005752:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005754:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8005758:	4613      	mov	r3, r2
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	4413      	add	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	3308      	adds	r3, #8
 8005762:	4a47      	ldr	r2, [pc, #284]	; (8005880 <etharp_query+0x274>)
 8005764:	4413      	add	r3, r2
 8005766:	3304      	adds	r3, #4
 8005768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800576c:	9200      	str	r2, [sp, #0]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f001 fbee 	bl	8006f54 <ethernet_output>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800577e:	e079      	b.n	8005874 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005780:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8005784:	493e      	ldr	r1, [pc, #248]	; (8005880 <etharp_query+0x274>)
 8005786:	4613      	mov	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4413      	add	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	440b      	add	r3, r1
 8005790:	3314      	adds	r3, #20
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d16d      	bne.n	8005874 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80057a0:	e01a      	b.n	80057d8 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	895a      	ldrh	r2, [r3, #10]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	891b      	ldrh	r3, [r3, #8]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d10a      	bne.n	80057c4 <etharp_query+0x1b8>
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d006      	beq.n	80057c4 <etharp_query+0x1b8>
 80057b6:	4b33      	ldr	r3, [pc, #204]	; (8005884 <etharp_query+0x278>)
 80057b8:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80057bc:	4936      	ldr	r1, [pc, #216]	; (8005898 <etharp_query+0x28c>)
 80057be:	4833      	ldr	r0, [pc, #204]	; (800588c <etharp_query+0x280>)
 80057c0:	f001 fcc0 	bl	8007144 <iprintf>
      if (p->type != PBUF_ROM) {
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	7b1b      	ldrb	r3, [r3, #12]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d002      	beq.n	80057d2 <etharp_query+0x1c6>
        copy_needed = 1;
 80057cc:	2301      	movs	r3, #1
 80057ce:	61bb      	str	r3, [r7, #24]
        break;
 80057d0:	e005      	b.n	80057de <etharp_query+0x1d2>
      }
      p = p->next;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e1      	bne.n	80057a2 <etharp_query+0x196>
    }
    if (copy_needed) {
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d017      	beq.n	8005814 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	891b      	ldrh	r3, [r3, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	4619      	mov	r1, r3
 80057ec:	2002      	movs	r0, #2
 80057ee:	f7fe fb71 	bl	8003ed4 <pbuf_alloc>
 80057f2:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	69f8      	ldr	r0, [r7, #28]
 80057fe:	f7fe ffff 	bl	8004800 <pbuf_copy>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <etharp_query+0x212>
          pbuf_free(p);
 8005808:	69f8      	ldr	r0, [r7, #28]
 800580a:	f7fe fed7 	bl	80045bc <pbuf_free>
          p = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	e004      	b.n	800581e <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8005818:	69f8      	ldr	r0, [r7, #28]
 800581a:	f7fe ff79 	bl	8004710 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d024      	beq.n	800586e <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8005824:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8005828:	4915      	ldr	r1, [pc, #84]	; (8005880 <etharp_query+0x274>)
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800583a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800583e:	4910      	ldr	r1, [pc, #64]	; (8005880 <etharp_query+0x274>)
 8005840:	4613      	mov	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	440b      	add	r3, r1
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f7fe feb5 	bl	80045bc <pbuf_free>
      }
      arp_table[i].q = p;
 8005852:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8005856:	490a      	ldr	r1, [pc, #40]	; (8005880 <etharp_query+0x274>)
 8005858:	4613      	mov	r3, r2
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4413      	add	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	440b      	add	r3, r1
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800586c:	e002      	b.n	8005874 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800586e:	23ff      	movs	r3, #255	; 0xff
 8005870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8005874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005878:	4618      	mov	r0, r3
 800587a:	3728      	adds	r7, #40	; 0x28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	2000835c 	.word	0x2000835c
 8005884:	080087dc 	.word	0x080087dc
 8005888:	08008988 	.word	0x08008988
 800588c:	08008854 	.word	0x08008854
 8005890:	0800897c 	.word	0x0800897c
 8005894:	2000844c 	.word	0x2000844c
 8005898:	080089b0 	.word	0x080089b0

0800589c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <etharp_raw+0x26>
 80058b4:	4b3a      	ldr	r3, [pc, #232]	; (80059a0 <etharp_raw+0x104>)
 80058b6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80058ba:	493a      	ldr	r1, [pc, #232]	; (80059a4 <etharp_raw+0x108>)
 80058bc:	483a      	ldr	r0, [pc, #232]	; (80059a8 <etharp_raw+0x10c>)
 80058be:	f001 fc41 	bl	8007144 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80058c2:	2200      	movs	r2, #0
 80058c4:	211c      	movs	r1, #28
 80058c6:	2002      	movs	r0, #2
 80058c8:	f7fe fb04 	bl	8003ed4 <pbuf_alloc>
 80058cc:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
 80058d8:	e05d      	b.n	8005996 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	895b      	ldrh	r3, [r3, #10]
 80058de:	2b1b      	cmp	r3, #27
 80058e0:	d806      	bhi.n	80058f0 <etharp_raw+0x54>
 80058e2:	4b2f      	ldr	r3, [pc, #188]	; (80059a0 <etharp_raw+0x104>)
 80058e4:	f240 4263 	movw	r2, #1123	; 0x463
 80058e8:	4930      	ldr	r1, [pc, #192]	; (80059ac <etharp_raw+0x110>)
 80058ea:	482f      	ldr	r0, [pc, #188]	; (80059a8 <etharp_raw+0x10c>)
 80058ec:	f001 fc2a 	bl	8007144 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80058f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fd fd8c 	bl	8003416 <lwip_htons>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590c:	2b06      	cmp	r3, #6
 800590e:	d006      	beq.n	800591e <etharp_raw+0x82>
 8005910:	4b23      	ldr	r3, [pc, #140]	; (80059a0 <etharp_raw+0x104>)
 8005912:	f240 426a 	movw	r2, #1130	; 0x46a
 8005916:	4926      	ldr	r1, [pc, #152]	; (80059b0 <etharp_raw+0x114>)
 8005918:	4823      	ldr	r0, [pc, #140]	; (80059a8 <etharp_raw+0x10c>)
 800591a:	f001 fc13 	bl	8007144 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3308      	adds	r3, #8
 8005922:	2206      	movs	r2, #6
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f001 fce6 	bl	80072f8 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	3312      	adds	r3, #18
 8005930:	2206      	movs	r2, #6
 8005932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fcdf 	bl	80072f8 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	330e      	adds	r3, #14
 800593e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3318      	adds	r3, #24
 8005948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	2200      	movs	r2, #0
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	f042 0208 	orr.w	r2, r2, #8
 8005964:	709a      	strb	r2, [r3, #2]
 8005966:	2200      	movs	r2, #0
 8005968:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2206      	movs	r2, #6
 800596e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2204      	movs	r2, #4
 8005974:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005976:	f640 0306 	movw	r3, #2054	; 0x806
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f001 fae6 	bl	8006f54 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005988:	69b8      	ldr	r0, [r7, #24]
 800598a:	f7fe fe17 	bl	80045bc <pbuf_free>
  p = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8005992:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	080087dc 	.word	0x080087dc
 80059a4:	0800892c 	.word	0x0800892c
 80059a8:	08008854 	.word	0x08008854
 80059ac:	080089cc 	.word	0x080089cc
 80059b0:	08008a00 	.word	0x08008a00

080059b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af04      	add	r7, sp, #16
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80059d0:	2201      	movs	r2, #1
 80059d2:	9203      	str	r2, [sp, #12]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	9202      	str	r2, [sp, #8]
 80059d8:	4a06      	ldr	r2, [pc, #24]	; (80059f4 <etharp_request_dst+0x40>)
 80059da:	9201      	str	r2, [sp, #4]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	4603      	mov	r3, r0
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff ff5a 	bl	800589c <etharp_raw>
 80059e8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	08008ed4 	.word	0x08008ed4

080059f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8005a02:	4a05      	ldr	r2, [pc, #20]	; (8005a18 <etharp_request+0x20>)
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff ffd4 	bl	80059b4 <etharp_request_dst>
 8005a0c:	4603      	mov	r3, r0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	08008ecc 	.word	0x08008ecc

08005a1c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08e      	sub	sp, #56	; 0x38
 8005a20:	af04      	add	r7, sp, #16
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8005a26:	4b7a      	ldr	r3, [pc, #488]	; (8005c10 <icmp_input+0x1f4>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8005a3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a3e:	2b13      	cmp	r3, #19
 8005a40:	f240 80d1 	bls.w	8005be6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	895b      	ldrh	r3, [r3, #10]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	f240 80ce 	bls.w	8005bea <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8005a58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80bb 	beq.w	8005bd8 <icmp_input+0x1bc>
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	f040 80bb 	bne.w	8005bde <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8005a68:	4b6a      	ldr	r3, [pc, #424]	; (8005c14 <icmp_input+0x1f8>)
 8005a6a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005a6c:	4b68      	ldr	r3, [pc, #416]	; (8005c10 <icmp_input+0x1f4>)
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a74:	2be0      	cmp	r3, #224	; 0xe0
 8005a76:	f000 80bf 	beq.w	8005bf8 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8005a7a:	4b65      	ldr	r3, [pc, #404]	; (8005c10 <icmp_input+0x1f4>)
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	4a64      	ldr	r2, [pc, #400]	; (8005c10 <icmp_input+0x1f4>)
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fbc3 	bl	8006210 <ip4_addr_isbroadcast_u32>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f040 80b5 	bne.w	8005bfc <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	891b      	ldrh	r3, [r3, #8]
 8005a96:	2b07      	cmp	r3, #7
 8005a98:	f240 80a9 	bls.w	8005bee <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005a9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a9e:	330e      	adds	r3, #14
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	b21b      	sxth	r3, r3
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fe fd64 	bl	8004574 <pbuf_header>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d046      	beq.n	8005b40 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	891a      	ldrh	r2, [r3, #8]
 8005ab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ab8:	4413      	add	r3, r2
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2200      	movs	r2, #0
 8005abe:	4619      	mov	r1, r3
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	f7fe fa07 	bl	8003ed4 <pbuf_alloc>
 8005ac6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8098 	beq.w	8005c00 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	895b      	ldrh	r3, [r3, #10]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ad8:	3308      	adds	r3, #8
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d203      	bcs.n	8005ae6 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8005ade:	69b8      	ldr	r0, [r7, #24]
 8005ae0:	f7fe fd6c 	bl	80045bc <pbuf_free>
        goto icmperr;
 8005ae4:	e08d      	b.n	8005c02 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 fc02 	bl	80072f8 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8005af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005af6:	425b      	negs	r3, r3
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	b21b      	sxth	r3, r3
 8005afc:	4619      	mov	r1, r3
 8005afe:	69b8      	ldr	r0, [r7, #24]
 8005b00:	f7fe fd38 	bl	8004574 <pbuf_header>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005b0a:	4b43      	ldr	r3, [pc, #268]	; (8005c18 <icmp_input+0x1fc>)
 8005b0c:	22af      	movs	r2, #175	; 0xaf
 8005b0e:	4943      	ldr	r1, [pc, #268]	; (8005c1c <icmp_input+0x200>)
 8005b10:	4843      	ldr	r0, [pc, #268]	; (8005c20 <icmp_input+0x204>)
 8005b12:	f001 fb17 	bl	8007144 <iprintf>
        pbuf_free(r);
 8005b16:	69b8      	ldr	r0, [r7, #24]
 8005b18:	f7fe fd50 	bl	80045bc <pbuf_free>
        goto icmperr;
 8005b1c:	e071      	b.n	8005c02 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	69b8      	ldr	r0, [r7, #24]
 8005b22:	f7fe fe6d 	bl	8004800 <pbuf_copy>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8005b2c:	69b8      	ldr	r0, [r7, #24]
 8005b2e:	f7fe fd45 	bl	80045bc <pbuf_free>
        goto icmperr;
 8005b32:	e066      	b.n	8005c02 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fe fd41 	bl	80045bc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	e015      	b.n	8005b6c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005b40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b42:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8005b46:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005b4a:	33f2      	adds	r3, #242	; 0xf2
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	b21b      	sxth	r3, r3
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fe fd0e 	bl	8004574 <pbuf_header>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d006      	beq.n	8005b6c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <icmp_input+0x1fc>)
 8005b60:	22c0      	movs	r2, #192	; 0xc0
 8005b62:	4930      	ldr	r1, [pc, #192]	; (8005c24 <icmp_input+0x208>)
 8005b64:	482e      	ldr	r0, [pc, #184]	; (8005c20 <icmp_input+0x204>)
 8005b66:	f001 faed 	bl	8007144 <iprintf>
        goto icmperr;
 8005b6a:	e04a      	b.n	8005c02 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8005b72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7fe fcfb 	bl	8004574 <pbuf_header>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d12b      	bne.n	8005bdc <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005b92:	4b1f      	ldr	r3, [pc, #124]	; (8005c10 <icmp_input+0x1f4>)
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	709a      	strb	r2, [r3, #2]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	22ff      	movs	r2, #255	; 0xff
 8005bae:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	729a      	strb	r2, [r3, #10]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	9302      	str	r3, [sp, #8]
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	23ff      	movs	r3, #255	; 0xff
 8005bc8:	2200      	movs	r2, #0
 8005bca:	69f9      	ldr	r1, [r7, #28]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fa4d 	bl	800606c <ip4_output_if>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8005bd6:	e001      	b.n	8005bdc <icmp_input+0x1c0>
    break;
 8005bd8:	bf00      	nop
 8005bda:	e000      	b.n	8005bde <icmp_input+0x1c2>
    break;
 8005bdc:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fe fcec 	bl	80045bc <pbuf_free>
  return;
 8005be4:	e011      	b.n	8005c0a <icmp_input+0x1ee>
    goto lenerr;
 8005be6:	bf00      	nop
 8005be8:	e002      	b.n	8005bf0 <icmp_input+0x1d4>
    goto lenerr;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <icmp_input+0x1d4>
      goto lenerr;
 8005bee:	bf00      	nop
lenerr:
  pbuf_free(p);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7fe fce3 	bl	80045bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005bf6:	e008      	b.n	8005c0a <icmp_input+0x1ee>
      goto icmperr;
 8005bf8:	bf00      	nop
 8005bfa:	e002      	b.n	8005c02 <icmp_input+0x1e6>
      goto icmperr;
 8005bfc:	bf00      	nop
 8005bfe:	e000      	b.n	8005c02 <icmp_input+0x1e6>
        goto icmperr;
 8005c00:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fe fcda 	bl	80045bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005c08:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8005c0a:	3728      	adds	r7, #40	; 0x28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200031c0 	.word	0x200031c0
 8005c14:	200031d4 	.word	0x200031d4
 8005c18:	08008a44 	.word	0x08008a44
 8005c1c:	08008a7c 	.word	0x08008a7c
 8005c20:	08008ab4 	.word	0x08008ab4
 8005c24:	08008adc 	.word	0x08008adc

08005c28 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	461a      	mov	r2, r3
 8005c38:	2103      	movs	r1, #3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f814 	bl	8005c68 <icmp_send_response>
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	461a      	mov	r2, r3
 8005c58:	210b      	movs	r1, #11
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f804 	bl	8005c68 <icmp_send_response>
}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08c      	sub	sp, #48	; 0x30
 8005c6c:	af04      	add	r7, sp, #16
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
 8005c74:	4613      	mov	r3, r2
 8005c76:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2124      	movs	r1, #36	; 0x24
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7fe f929 	bl	8003ed4 <pbuf_alloc>
 8005c82:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d04c      	beq.n	8005d24 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	895b      	ldrh	r3, [r3, #10]
 8005c8e:	2b23      	cmp	r3, #35	; 0x23
 8005c90:	d806      	bhi.n	8005ca0 <icmp_send_response+0x38>
 8005c92:	4b26      	ldr	r3, [pc, #152]	; (8005d2c <icmp_send_response+0xc4>)
 8005c94:	f240 1261 	movw	r2, #353	; 0x161
 8005c98:	4925      	ldr	r1, [pc, #148]	; (8005d30 <icmp_send_response+0xc8>)
 8005c9a:	4826      	ldr	r0, [pc, #152]	; (8005d34 <icmp_send_response+0xcc>)
 8005c9c:	f001 fa52 	bl	8007144 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	78ba      	ldrb	r2, [r7, #2]
 8005cb6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	711a      	strb	r2, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	719a      	strb	r2, [r3, #6]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f103 0008 	add.w	r0, r3, #8
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	221c      	movs	r2, #28
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f001 fb0c 	bl	80072f8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005ce6:	f107 030c 	add.w	r3, r7, #12
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f824 	bl	8005d38 <ip4_route>
 8005cf0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d011      	beq.n	8005d1c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	709a      	strb	r2, [r3, #2]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005d02:	f107 020c 	add.w	r2, r7, #12
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	9302      	str	r3, [sp, #8]
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	23ff      	movs	r3, #255	; 0xff
 8005d14:	2100      	movs	r1, #0
 8005d16:	69f8      	ldr	r0, [r7, #28]
 8005d18:	f000 f9a8 	bl	800606c <ip4_output_if>
  }
  pbuf_free(q);
 8005d1c:	69f8      	ldr	r0, [r7, #28]
 8005d1e:	f7fe fc4d 	bl	80045bc <pbuf_free>
 8005d22:	e000      	b.n	8005d26 <icmp_send_response+0xbe>
    return;
 8005d24:	bf00      	nop
}
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	08008a44 	.word	0x08008a44
 8005d30:	08008b10 	.word	0x08008b10
 8005d34:	08008ab4 	.word	0x08008ab4

08005d38 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005d40:	4b30      	ldr	r3, [pc, #192]	; (8005e04 <ip4_route+0xcc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e036      	b.n	8005db6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02b      	beq.n	8005db0 <ip4_route+0x78>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d5e:	089b      	lsrs	r3, r3, #2
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d022      	beq.n	8005db0 <ip4_route+0x78>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01d      	beq.n	8005db0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	405a      	eors	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3308      	adds	r3, #8
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	e033      	b.n	8005df8 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d108      	bne.n	8005db0 <ip4_route+0x78>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	330c      	adds	r3, #12
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d101      	bne.n	8005db0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	e023      	b.n	8005df8 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1c5      	bne.n	8005d48 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005dbc:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <ip4_route+0xd0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d015      	beq.n	8005df0 <ip4_route+0xb8>
 8005dc4:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <ip4_route+0xd0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00d      	beq.n	8005df0 <ip4_route+0xb8>
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <ip4_route+0xd0>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <ip4_route+0xd0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3304      	adds	r3, #4
 8005dea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e001      	b.n	8005df8 <ip4_route+0xc0>
  }

  return netif_default;
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <ip4_route+0xd0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20008348 	.word	0x20008348
 8005e08:	2000834c 	.word	0x2000834c

08005e0c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d004      	beq.n	8005e32 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7fe fbc7 	bl	80045bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e113      	b.n	800605a <ip4_input+0x24e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8005e3e:	897b      	ldrh	r3, [r7, #10]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	885b      	ldrh	r3, [r3, #2]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fd fae3 	bl	8003416 <lwip_htons>
 8005e50:	4603      	mov	r3, r0
 8005e52:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	891b      	ldrh	r3, [r3, #8]
 8005e58:	893a      	ldrh	r2, [r7, #8]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d204      	bcs.n	8005e68 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8005e5e:	893b      	ldrh	r3, [r7, #8]
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fe fa36 	bl	80042d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	895b      	ldrh	r3, [r3, #10]
 8005e6c:	897a      	ldrh	r2, [r7, #10]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d807      	bhi.n	8005e82 <ip4_input+0x76>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	891b      	ldrh	r3, [r3, #8]
 8005e76:	893a      	ldrh	r2, [r7, #8]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d802      	bhi.n	8005e82 <ip4_input+0x76>
 8005e7c:	897b      	ldrh	r3, [r7, #10]
 8005e7e:	2b13      	cmp	r3, #19
 8005e80:	d804      	bhi.n	8005e8c <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fe fb9a 	bl	80045bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e0e6      	b.n	800605a <ip4_input+0x24e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	4a74      	ldr	r2, [pc, #464]	; (8006064 <ip4_input+0x258>)
 8005e92:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4a72      	ldr	r2, [pc, #456]	; (8006064 <ip4_input+0x258>)
 8005e9a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005e9c:	4b71      	ldr	r3, [pc, #452]	; (8006064 <ip4_input+0x258>)
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea4:	2be0      	cmp	r3, #224	; 0xe0
 8005ea6:	d112      	bne.n	8005ece <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <ip4_input+0xbc>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <ip4_input+0xbc>
      netif = inp;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	e041      	b.n	8005f4c <ip4_input+0x140>
    } else {
      netif = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	e03e      	b.n	8005f4c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d014      	beq.n	8005f10 <ip4_input+0x104>
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00f      	beq.n	8005f10 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005ef0:	4b5c      	ldr	r3, [pc, #368]	; (8006064 <ip4_input+0x258>)
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d026      	beq.n	8005f4c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005efe:	4b59      	ldr	r3, [pc, #356]	; (8006064 <ip4_input+0x258>)
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	6939      	ldr	r1, [r7, #16]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 f983 	bl	8006210 <ip4_addr_isbroadcast_u32>
 8005f0a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d11d      	bne.n	8005f4c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00d      	beq.n	8005f32 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8005f16:	4b53      	ldr	r3, [pc, #332]	; (8006064 <ip4_input+0x258>)
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f1e:	d102      	bne.n	8005f26 <ip4_input+0x11a>
          netif = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]
          break;
 8005f24:	e012      	b.n	8005f4c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8005f2a:	4b4f      	ldr	r3, [pc, #316]	; (8006068 <ip4_input+0x25c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	e002      	b.n	8005f38 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d102      	bne.n	8005f46 <ip4_input+0x13a>
        netif = netif->next;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1c4      	bne.n	8005ed6 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005f4c:	4b45      	ldr	r3, [pc, #276]	; (8006064 <ip4_input+0x258>)
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f95c 	bl	8006210 <ip4_addr_isbroadcast_u32>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d105      	bne.n	8005f6a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8005f5e:	4b41      	ldr	r3, [pc, #260]	; (8006064 <ip4_input+0x258>)
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005f66:	2be0      	cmp	r3, #224	; 0xe0
 8005f68:	d104      	bne.n	8005f74 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fe fb26 	bl	80045bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e072      	b.n	800605a <ip4_input+0x24e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fe fb1e 	bl	80045bc <pbuf_free>
    return ERR_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	e06a      	b.n	800605a <ip4_input+0x24e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	88db      	ldrh	r3, [r3, #6]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fc7e 	bl	8006898 <ip4_reass>
 8005f9c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <ip4_input+0x19c>
      return ERR_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e058      	b.n	800605a <ip4_input+0x24e>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8005fae:	4a2d      	ldr	r2, [pc, #180]	; (8006064 <ip4_input+0x258>)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8005fb4:	4a2b      	ldr	r2, [pc, #172]	; (8006064 <ip4_input+0x258>)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8005fba:	4a2a      	ldr	r2, [pc, #168]	; (8006064 <ip4_input+0x258>)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	4b24      	ldr	r3, [pc, #144]	; (8006064 <ip4_input+0x258>)
 8005fd2:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8005fd4:	897b      	ldrh	r3, [r7, #10]
 8005fd6:	425b      	negs	r3, r3
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	b21b      	sxth	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fe fac8 	bl	8004574 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	7a5b      	ldrb	r3, [r3, #9]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d104      	bne.n	8005ff6 <ip4_input+0x1ea>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff fd14 	bl	8005a1c <icmp_input>
      break;
 8005ff4:	e01e      	b.n	8006034 <ip4_input+0x228>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <ip4_input+0x258>)
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	6939      	ldr	r1, [r7, #16]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 f907 	bl	8006210 <ip4_addr_isbroadcast_u32>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d112      	bne.n	800602e <ip4_input+0x222>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006008:	4b16      	ldr	r3, [pc, #88]	; (8006064 <ip4_input+0x258>)
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8006010:	2be0      	cmp	r3, #224	; 0xe0
 8006012:	d00c      	beq.n	800602e <ip4_input+0x222>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8006014:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fe fabc 	bl	8004598 <pbuf_header_force>
        p->payload = iphdr;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8006026:	2102      	movs	r1, #2
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff fdfd 	bl	8005c28 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fe fac4 	bl	80045bc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8006034:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <ip4_input+0x258>)
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800603a:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <ip4_input+0x258>)
 800603c:	2200      	movs	r2, #0
 800603e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8006040:	4b08      	ldr	r3, [pc, #32]	; (8006064 <ip4_input+0x258>)
 8006042:	2200      	movs	r2, #0
 8006044:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8006046:	4b07      	ldr	r3, [pc, #28]	; (8006064 <ip4_input+0x258>)
 8006048:	2200      	movs	r2, #0
 800604a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <ip4_input+0x258>)
 800604e:	2200      	movs	r2, #0
 8006050:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8006052:	4b04      	ldr	r3, [pc, #16]	; (8006064 <ip4_input+0x258>)
 8006054:	2200      	movs	r2, #0
 8006056:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200031c0 	.word	0x200031c0
 8006068:	20008348 	.word	0x20008348

0800606c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af04      	add	r7, sp, #16
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <ip4_output_if+0x26>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d102      	bne.n	8006098 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	3304      	adds	r3, #4
 8006096:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	9302      	str	r3, [sp, #8]
 800609e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4613      	mov	r3, r2
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6979      	ldr	r1, [r7, #20]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f805 	bl	80060c0 <ip4_output_if_src>
 80060b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	89db      	ldrh	r3, [r3, #14]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d006      	beq.n	80060e4 <ip4_output_if_src+0x24>
 80060d6:	4b48      	ldr	r3, [pc, #288]	; (80061f8 <ip4_output_if_src+0x138>)
 80060d8:	f240 3233 	movw	r2, #819	; 0x333
 80060dc:	4947      	ldr	r1, [pc, #284]	; (80061fc <ip4_output_if_src+0x13c>)
 80060de:	4848      	ldr	r0, [pc, #288]	; (8006200 <ip4_output_if_src+0x140>)
 80060e0:	f001 f830 	bl	8007144 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d060      	beq.n	80061ac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80060ea:	2314      	movs	r3, #20
 80060ec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80060ee:	2114      	movs	r1, #20
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7fe fa3f 	bl	8004574 <pbuf_header>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80060fc:	f06f 0301 	mvn.w	r3, #1
 8006100:	e075      	b.n	80061ee <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	895b      	ldrh	r3, [r3, #10]
 800610c:	2b13      	cmp	r3, #19
 800610e:	d806      	bhi.n	800611e <ip4_output_if_src+0x5e>
 8006110:	4b39      	ldr	r3, [pc, #228]	; (80061f8 <ip4_output_if_src+0x138>)
 8006112:	f44f 7258 	mov.w	r2, #864	; 0x360
 8006116:	493b      	ldr	r1, [pc, #236]	; (8006204 <ip4_output_if_src+0x144>)
 8006118:	4839      	ldr	r0, [pc, #228]	; (8006200 <ip4_output_if_src+0x140>)
 800611a:	f001 f813 	bl	8007144 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800612a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006134:	8b7b      	ldrh	r3, [r7, #26]
 8006136:	089b      	lsrs	r3, r3, #2
 8006138:	b29b      	uxth	r3, r3
 800613a:	b2db      	uxtb	r3, r3
 800613c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006140:	b2da      	uxtb	r2, r3
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800614c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	891b      	ldrh	r3, [r3, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fd f95f 	bl	8003416 <lwip_htons>
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2200      	movs	r2, #0
 8006164:	719a      	strb	r2, [r3, #6]
 8006166:	2200      	movs	r2, #0
 8006168:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800616a:	4b27      	ldr	r3, [pc, #156]	; (8006208 <ip4_output_if_src+0x148>)
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7fd f951 	bl	8003416 <lwip_htons>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800617c:	4b22      	ldr	r3, [pc, #136]	; (8006208 <ip4_output_if_src+0x148>)
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	4b20      	ldr	r3, [pc, #128]	; (8006208 <ip4_output_if_src+0x148>)
 8006186:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800618e:	4b1f      	ldr	r3, [pc, #124]	; (800620c <ip4_output_if_src+0x14c>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	e003      	b.n	80061a0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	2200      	movs	r2, #0
 80061a4:	729a      	strb	r2, [r3, #10]
 80061a6:	2200      	movs	r2, #0
 80061a8:	72da      	strb	r2, [r3, #11]
 80061aa:	e008      	b.n	80061be <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00c      	beq.n	80061e0 <ip4_output_if_src+0x120>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	891a      	ldrh	r2, [r3, #8]
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d906      	bls.n	80061e0 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fd08 	bl	8006bec <ip4_frag>
 80061dc:	4603      	mov	r3, r0
 80061de:	e006      	b.n	80061ee <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ea:	4798      	blx	r3
 80061ec:	4603      	mov	r3, r0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3720      	adds	r7, #32
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	08008b3c 	.word	0x08008b3c
 80061fc:	08008b70 	.word	0x08008b70
 8006200:	08008b7c 	.word	0x08008b7c
 8006204:	08008ba4 	.word	0x08008ba4
 8006208:	2000844e 	.word	0x2000844e
 800620c:	08008ec8 	.word	0x08008ec8

08006210 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d002      	beq.n	800622c <ip4_addr_isbroadcast_u32+0x1c>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800622c:	2301      	movs	r3, #1
 800622e:	e02a      	b.n	8006286 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800623e:	2300      	movs	r3, #0
 8006240:	e021      	b.n	8006286 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	3304      	adds	r3, #4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	429a      	cmp	r2, r3
 800624c:	d101      	bne.n	8006252 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800624e:	2300      	movs	r3, #0
 8006250:	e019      	b.n	8006286 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	3304      	adds	r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	405a      	eors	r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	3308      	adds	r3, #8
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4013      	ands	r3, r2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10d      	bne.n	8006284 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	3308      	adds	r3, #8
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	43da      	mvns	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800627c:	429a      	cmp	r2, r3
 800627e:	d101      	bne.n	8006284 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8006284:	2300      	movs	r3, #0
  }
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr

08006290 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800629a:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <ip_reass_tmr+0x54>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80062a0:	e018      	b.n	80062d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	7fdb      	ldrb	r3, [r3, #31]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <ip_reass_tmr+0x32>
      r->timer--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	7fdb      	ldrb	r3, [r3, #31]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	e008      	b.n	80062d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f80a 	bl	80062e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e3      	bne.n	80062a2 <ip_reass_tmr+0x12>
     }
   }
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20008450 	.word	0x20008450

080062e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d105      	bne.n	800630a <ip_reass_free_complete_datagram+0x22>
 80062fe:	4b45      	ldr	r3, [pc, #276]	; (8006414 <ip_reass_free_complete_datagram+0x12c>)
 8006300:	22ab      	movs	r2, #171	; 0xab
 8006302:	4945      	ldr	r1, [pc, #276]	; (8006418 <ip_reass_free_complete_datagram+0x130>)
 8006304:	4845      	ldr	r0, [pc, #276]	; (800641c <ip_reass_free_complete_datagram+0x134>)
 8006306:	f000 ff1d 	bl	8007144 <iprintf>
  if (prev != NULL) {
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d005      	beq.n	8006326 <ip_reass_free_complete_datagram+0x3e>
 800631a:	4b3e      	ldr	r3, [pc, #248]	; (8006414 <ip_reass_free_complete_datagram+0x12c>)
 800631c:	22ad      	movs	r2, #173	; 0xad
 800631e:	4940      	ldr	r1, [pc, #256]	; (8006420 <ip_reass_free_complete_datagram+0x138>)
 8006320:	483e      	ldr	r0, [pc, #248]	; (800641c <ip_reass_free_complete_datagram+0x134>)
 8006322:	f000 ff0f 	bl	8007144 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	889b      	ldrh	r3, [r3, #4]
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d12a      	bne.n	800638e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	6858      	ldr	r0, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3308      	adds	r3, #8
 800634e:	2214      	movs	r2, #20
 8006350:	4619      	mov	r1, r3
 8006352:	f000 ffd1 	bl	80072f8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8006356:	2101      	movs	r1, #1
 8006358:	69b8      	ldr	r0, [r7, #24]
 800635a:	f7ff fc75 	bl	8005c48 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800635e:	69b8      	ldr	r0, [r7, #24]
 8006360:	f7fe f9c0 	bl	80046e4 <pbuf_clen>
 8006364:	4603      	mov	r3, r0
 8006366:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006368:	8bfa      	ldrh	r2, [r7, #30]
 800636a:	8a7b      	ldrh	r3, [r7, #18]
 800636c:	4413      	add	r3, r2
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	db05      	blt.n	8006380 <ip_reass_free_complete_datagram+0x98>
 8006374:	4b27      	ldr	r3, [pc, #156]	; (8006414 <ip_reass_free_complete_datagram+0x12c>)
 8006376:	22bc      	movs	r2, #188	; 0xbc
 8006378:	492a      	ldr	r1, [pc, #168]	; (8006424 <ip_reass_free_complete_datagram+0x13c>)
 800637a:	4828      	ldr	r0, [pc, #160]	; (800641c <ip_reass_free_complete_datagram+0x134>)
 800637c:	f000 fee2 	bl	8007144 <iprintf>
    pbufs_freed += clen;
 8006380:	8bfa      	ldrh	r2, [r7, #30]
 8006382:	8a7b      	ldrh	r3, [r7, #18]
 8006384:	4413      	add	r3, r2
 8006386:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8006388:	69b8      	ldr	r0, [r7, #24]
 800638a:	f7fe f917 	bl	80045bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8006394:	e01f      	b.n	80063d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7fe f99c 	bl	80046e4 <pbuf_clen>
 80063ac:	4603      	mov	r3, r0
 80063ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80063b0:	8bfa      	ldrh	r2, [r7, #30]
 80063b2:	8a7b      	ldrh	r3, [r7, #18]
 80063b4:	4413      	add	r3, r2
 80063b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ba:	db05      	blt.n	80063c8 <ip_reass_free_complete_datagram+0xe0>
 80063bc:	4b15      	ldr	r3, [pc, #84]	; (8006414 <ip_reass_free_complete_datagram+0x12c>)
 80063be:	22cc      	movs	r2, #204	; 0xcc
 80063c0:	4918      	ldr	r1, [pc, #96]	; (8006424 <ip_reass_free_complete_datagram+0x13c>)
 80063c2:	4816      	ldr	r0, [pc, #88]	; (800641c <ip_reass_free_complete_datagram+0x134>)
 80063c4:	f000 febe 	bl	8007144 <iprintf>
    pbufs_freed += clen;
 80063c8:	8bfa      	ldrh	r2, [r7, #30]
 80063ca:	8a7b      	ldrh	r3, [r7, #18]
 80063cc:	4413      	add	r3, r2
 80063ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7fe f8f3 	bl	80045bc <pbuf_free>
  while (p != NULL) {
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1dc      	bne.n	8006396 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f8c2 	bl	8006568 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <ip_reass_free_complete_datagram+0x140>)
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	8bfa      	ldrh	r2, [r7, #30]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d905      	bls.n	80063fa <ip_reass_free_complete_datagram+0x112>
 80063ee:	4b09      	ldr	r3, [pc, #36]	; (8006414 <ip_reass_free_complete_datagram+0x12c>)
 80063f0:	22d2      	movs	r2, #210	; 0xd2
 80063f2:	490e      	ldr	r1, [pc, #56]	; (800642c <ip_reass_free_complete_datagram+0x144>)
 80063f4:	4809      	ldr	r0, [pc, #36]	; (800641c <ip_reass_free_complete_datagram+0x134>)
 80063f6:	f000 fea5 	bl	8007144 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <ip_reass_free_complete_datagram+0x140>)
 80063fc:	881a      	ldrh	r2, [r3, #0]
 80063fe:	8bfb      	ldrh	r3, [r7, #30]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	b29a      	uxth	r2, r3
 8006404:	4b08      	ldr	r3, [pc, #32]	; (8006428 <ip_reass_free_complete_datagram+0x140>)
 8006406:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8006408:	8bfb      	ldrh	r3, [r7, #30]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3720      	adds	r7, #32
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	08008bd4 	.word	0x08008bd4
 8006418:	08008c10 	.word	0x08008c10
 800641c:	08008c1c 	.word	0x08008c1c
 8006420:	08008c44 	.word	0x08008c44
 8006424:	08008c58 	.word	0x08008c58
 8006428:	20008454 	.word	0x20008454
 800642c:	08008c78 	.word	0x08008c78

08006430 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	; 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800644e:	4b28      	ldr	r3, [pc, #160]	; (80064f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8006454:	e030      	b.n	80064b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	429a      	cmp	r2, r3
 8006460:	d10c      	bne.n	800647c <ip_reass_remove_oldest_datagram+0x4c>
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	429a      	cmp	r2, r3
 800646c:	d106      	bne.n	800647c <ip_reass_remove_oldest_datagram+0x4c>
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	899a      	ldrh	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	889b      	ldrh	r3, [r3, #4]
 8006476:	b29b      	uxth	r3, r3
 8006478:	429a      	cmp	r2, r3
 800647a:	d014      	beq.n	80064a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	3301      	adds	r3, #1
 8006480:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e009      	b.n	80064a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	7fda      	ldrb	r2, [r3, #31]
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	7fdb      	ldrb	r3, [r3, #31]
 800649a:	429a      	cmp	r2, r3
 800649c:	d803      	bhi.n	80064a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1cb      	bne.n	8006456 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80064c4:	69b9      	ldr	r1, [r7, #24]
 80064c6:	6a38      	ldr	r0, [r7, #32]
 80064c8:	f7ff ff0e 	bl	80062e8 <ip_reass_free_complete_datagram>
 80064cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	da02      	bge.n	80064e4 <ip_reass_remove_oldest_datagram+0xb4>
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	dcac      	bgt.n	800643e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80064e4:	697b      	ldr	r3, [r7, #20]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3728      	adds	r7, #40	; 0x28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20008450 	.word	0x20008450

080064f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80064fe:	2000      	movs	r0, #0
 8006500:	f7fd fb16 	bl	8003b30 <memp_malloc>
 8006504:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d110      	bne.n	800652e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ff8e 	bl	8006430 <ip_reass_remove_oldest_datagram>
 8006514:	4602      	mov	r2, r0
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	4293      	cmp	r3, r2
 800651a:	dc03      	bgt.n	8006524 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800651c:	2000      	movs	r0, #0
 800651e:	f7fd fb07 	bl	8003b30 <memp_malloc>
 8006522:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	e016      	b.n	800655c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800652e:	2220      	movs	r2, #32
 8006530:	2100      	movs	r1, #0
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fe6b 	bl	800720e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2203      	movs	r2, #3
 800653c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800653e:	4b09      	ldr	r3, [pc, #36]	; (8006564 <ip_reass_enqueue_new_datagram+0x70>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8006546:	4a07      	ldr	r2, [pc, #28]	; (8006564 <ip_reass_enqueue_new_datagram+0x70>)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3308      	adds	r3, #8
 8006550:	2214      	movs	r2, #20
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fecf 	bl	80072f8 <memcpy>
  return ipr;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20008450 	.word	0x20008450

08006568 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8006572:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <ip_reass_dequeue_datagram+0x4c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	429a      	cmp	r2, r3
 800657a:	d104      	bne.n	8006586 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0c      	ldr	r2, [pc, #48]	; (80065b4 <ip_reass_dequeue_datagram+0x4c>)
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	e00d      	b.n	80065a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <ip_reass_dequeue_datagram+0x32>
 800658c:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <ip_reass_dequeue_datagram+0x50>)
 800658e:	f240 1245 	movw	r2, #325	; 0x145
 8006592:	490a      	ldr	r1, [pc, #40]	; (80065bc <ip_reass_dequeue_datagram+0x54>)
 8006594:	480a      	ldr	r0, [pc, #40]	; (80065c0 <ip_reass_dequeue_datagram+0x58>)
 8006596:	f000 fdd5 	bl	8007144 <iprintf>
    prev->next = ipr->next;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	2000      	movs	r0, #0
 80065a6:	f7fd fb0f 	bl	8003bc8 <memp_free>
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20008450 	.word	0x20008450
 80065b8:	08008bd4 	.word	0x08008bd4
 80065bc:	08008c94 	.word	0x08008c94
 80065c0:	08008c1c 	.word	0x08008c1c

080065c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08c      	sub	sp, #48	; 0x30
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80065d4:	2301      	movs	r3, #1
 80065d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fc ff16 	bl	8003416 <lwip_htons>
 80065ea:	4603      	mov	r3, r0
 80065ec:	461a      	mov	r2, r3
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	88db      	ldrh	r3, [r3, #6]
 8006606:	b29b      	uxth	r3, r3
 8006608:	4618      	mov	r0, r3
 800660a:	f7fc ff04 	bl	8003416 <lwip_htons>
 800660e:	4603      	mov	r3, r0
 8006610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006614:	b29b      	uxth	r3, r3
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	2200      	movs	r2, #0
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	2200      	movs	r2, #0
 8006628:	705a      	strb	r2, [r3, #1]
 800662a:	2200      	movs	r2, #0
 800662c:	709a      	strb	r2, [r3, #2]
 800662e:	2200      	movs	r2, #0
 8006630:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	8b3a      	ldrh	r2, [r7, #24]
 8006636:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8006638:	8b3a      	ldrh	r2, [r7, #24]
 800663a:	8b7b      	ldrh	r3, [r7, #26]
 800663c:	4413      	add	r3, r2
 800663e:	b29a      	uxth	r2, r3
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
 800664a:	e061      	b.n	8006710 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	889b      	ldrh	r3, [r3, #4]
 8006656:	b29a      	uxth	r2, r3
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	889b      	ldrh	r3, [r3, #4]
 800665c:	b29b      	uxth	r3, r3
 800665e:	429a      	cmp	r2, r3
 8006660:	d232      	bcs.n	80066c8 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006666:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01f      	beq.n	80066ae <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	889b      	ldrh	r3, [r3, #4]
 8006672:	b29a      	uxth	r2, r3
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	88db      	ldrh	r3, [r3, #6]
 8006678:	b29b      	uxth	r3, r3
 800667a:	429a      	cmp	r2, r3
 800667c:	f0c0 80e3 	bcc.w	8006846 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	88db      	ldrh	r3, [r3, #6]
 8006684:	b29a      	uxth	r2, r3
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	889b      	ldrh	r3, [r3, #4]
 800668a:	b29b      	uxth	r3, r3
 800668c:	429a      	cmp	r2, r3
 800668e:	f200 80da 	bhi.w	8006846 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	88db      	ldrh	r3, [r3, #6]
 800669c:	b29a      	uxth	r2, r3
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	889b      	ldrh	r3, [r3, #4]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d037      	beq.n	8006718 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80066ac:	e034      	b.n	8006718 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	88db      	ldrh	r3, [r3, #6]
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	889b      	ldrh	r3, [r3, #4]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f200 80c5 	bhi.w	800684a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	605a      	str	r2, [r3, #4]
      break;
 80066c6:	e027      	b.n	8006718 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	889b      	ldrh	r3, [r3, #4]
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	889b      	ldrh	r3, [r3, #4]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	429a      	cmp	r2, r3
 80066d6:	f000 80ba 	beq.w	800684e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	889b      	ldrh	r3, [r3, #4]
 80066de:	b29a      	uxth	r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	88db      	ldrh	r3, [r3, #6]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	429a      	cmp	r2, r3
 80066e8:	f0c0 80b3 	bcc.w	8006852 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	88db      	ldrh	r3, [r3, #6]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	889b      	ldrh	r3, [r3, #4]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	429a      	cmp	r2, r3
 8006700:	d001      	beq.n	8006706 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	d19a      	bne.n	800664c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8006716:	e000      	b.n	800671a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8006718:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	2b00      	cmp	r3, #0
 800671e:	d12d      	bne.n	800677c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01c      	beq.n	8006760 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	88db      	ldrh	r3, [r3, #6]
 800672a:	b29a      	uxth	r2, r3
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	889b      	ldrh	r3, [r3, #4]
 8006730:	b29b      	uxth	r3, r3
 8006732:	429a      	cmp	r2, r3
 8006734:	d906      	bls.n	8006744 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8006736:	4b51      	ldr	r3, [pc, #324]	; (800687c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8006738:	f240 12ab 	movw	r2, #427	; 0x1ab
 800673c:	4950      	ldr	r1, [pc, #320]	; (8006880 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800673e:	4851      	ldr	r0, [pc, #324]	; (8006884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8006740:	f000 fd00 	bl	8007144 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	88db      	ldrh	r3, [r3, #6]
 800674e:	b29a      	uxth	r2, r3
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	889b      	ldrh	r3, [r3, #4]
 8006754:	b29b      	uxth	r3, r3
 8006756:	429a      	cmp	r2, r3
 8006758:	d010      	beq.n	800677c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	e00d      	b.n	800677c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d006      	beq.n	8006776 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8006768:	4b44      	ldr	r3, [pc, #272]	; (800687c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800676a:	f240 12b3 	movw	r2, #435	; 0x1b3
 800676e:	4946      	ldr	r1, [pc, #280]	; (8006888 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006770:	4844      	ldr	r0, [pc, #272]	; (8006884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8006772:	f000 fce7 	bl	8007144 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	7f9b      	ldrb	r3, [r3, #30]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d059      	beq.n	8006842 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d04f      	beq.n	8006834 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d006      	beq.n	80067aa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	889b      	ldrh	r3, [r3, #4]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	e041      	b.n	8006834 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80067b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80067ba:	e012      	b.n	80067e2 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	88db      	ldrh	r3, [r3, #6]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ca:	889b      	ldrh	r3, [r3, #4]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d002      	beq.n	80067d8 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	623b      	str	r3, [r7, #32]
            break;
 80067d6:	e007      	b.n	80067e8 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e9      	bne.n	80067bc <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d022      	beq.n	8006834 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80067f8:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80067fc:	4923      	ldr	r1, [pc, #140]	; (800688c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80067fe:	4821      	ldr	r0, [pc, #132]	; (8006884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8006800:	f000 fca0 	bl	8007144 <iprintf>
          LWIP_ASSERT("sanity check",
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680c:	429a      	cmp	r2, r3
 800680e:	d106      	bne.n	800681e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8006810:	4b1a      	ldr	r3, [pc, #104]	; (800687c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8006812:	f240 12d5 	movw	r2, #469	; 0x1d5
 8006816:	491d      	ldr	r1, [pc, #116]	; (800688c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8006818:	481a      	ldr	r0, [pc, #104]	; (8006884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800681a:	f000 fc93 	bl	8007144 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d006      	beq.n	8006834 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8006828:	f240 12d7 	movw	r2, #471	; 0x1d7
 800682c:	4918      	ldr	r1, [pc, #96]	; (8006890 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800682e:	4815      	ldr	r0, [pc, #84]	; (8006884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8006830:	f000 fc88 	bl	8007144 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	2b00      	cmp	r3, #0
 8006838:	bf14      	ite	ne
 800683a:	2301      	movne	r3, #1
 800683c:	2300      	moveq	r3, #0
 800683e:	b2db      	uxtb	r3, r3
 8006840:	e018      	b.n	8006874 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006842:	2300      	movs	r3, #0
 8006844:	e016      	b.n	8006874 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 8006846:	bf00      	nop
 8006848:	e004      	b.n	8006854 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800684a:	bf00      	nop
 800684c:	e002      	b.n	8006854 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8006852:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8006854:	68b8      	ldr	r0, [r7, #8]
 8006856:	f7fd ff45 	bl	80046e4 <pbuf_clen>
 800685a:	4603      	mov	r3, r0
 800685c:	461a      	mov	r2, r3
 800685e:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	b29a      	uxth	r2, r3
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8006868:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800686a:	68b8      	ldr	r0, [r7, #8]
 800686c:	f7fd fea6 	bl	80045bc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006870:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8006874:	4618      	mov	r0, r3
 8006876:	3730      	adds	r7, #48	; 0x30
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	08008bd4 	.word	0x08008bd4
 8006880:	08008cb0 	.word	0x08008cb0
 8006884:	08008c1c 	.word	0x08008c1c
 8006888:	08008cd0 	.word	0x08008cd0
 800688c:	08008d08 	.word	0x08008d08
 8006890:	08008d18 	.word	0x08008d18
 8006894:	20008454 	.word	0x20008454

08006898 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08e      	sub	sp, #56	; 0x38
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	f040 8131 	bne.w	8006b16 <ip4_reass+0x27e>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	88db      	ldrh	r3, [r3, #6]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fc fdab 	bl	8003416 <lwip_htons>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	885b      	ldrh	r3, [r3, #2]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fc fd9f 	bl	8003416 <lwip_htons>
 80068d8:	4603      	mov	r3, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fd fef7 	bl	80046e4 <pbuf_clen>
 80068f6:	4603      	mov	r3, r0
 80068f8:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80068fa:	4b8e      	ldr	r3, [pc, #568]	; (8006b34 <ip4_reass+0x29c>)
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006902:	4413      	add	r3, r2
 8006904:	2b0a      	cmp	r3, #10
 8006906:	dd10      	ble.n	800692a <ip4_reass+0x92>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006908:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800690a:	4619      	mov	r1, r3
 800690c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690e:	f7ff fd8f 	bl	8006430 <ip_reass_remove_oldest_datagram>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8100 	beq.w	8006b1a <ip4_reass+0x282>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800691a:	4b86      	ldr	r3, [pc, #536]	; (8006b34 <ip4_reass+0x29c>)
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006922:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006924:	2b0a      	cmp	r3, #10
 8006926:	f300 80f8 	bgt.w	8006b1a <ip4_reass+0x282>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800692a:	4b83      	ldr	r3, [pc, #524]	; (8006b38 <ip4_reass+0x2a0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	633b      	str	r3, [r7, #48]	; 0x30
 8006930:	e015      	b.n	800695e <ip4_reass+0xc6>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	429a      	cmp	r2, r3
 800693c:	d10c      	bne.n	8006958 <ip4_reass+0xc0>
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	429a      	cmp	r2, r3
 8006948:	d106      	bne.n	8006958 <ip4_reass+0xc0>
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	899a      	ldrh	r2, [r3, #12]
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	889b      	ldrh	r3, [r3, #4]
 8006952:	b29b      	uxth	r3, r3
 8006954:	429a      	cmp	r2, r3
 8006956:	d006      	beq.n	8006966 <ip4_reass+0xce>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	633b      	str	r3, [r7, #48]	; 0x30
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e6      	bne.n	8006932 <ip4_reass+0x9a>
 8006964:	e000      	b.n	8006968 <ip4_reass+0xd0>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8006966:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <ip4_reass+0xea>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800696e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006970:	4619      	mov	r1, r3
 8006972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006974:	f7ff fdbe 	bl	80064f4 <ip_reass_enqueue_new_datagram>
 8006978:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11c      	bne.n	80069ba <ip4_reass+0x122>
      goto nullreturn;
 8006980:	e0d0      	b.n	8006b24 <ip4_reass+0x28c>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	88db      	ldrh	r3, [r3, #6]
 8006986:	b29b      	uxth	r3, r3
 8006988:	4618      	mov	r0, r3
 800698a:	f7fc fd44 	bl	8003416 <lwip_htons>
 800698e:	4603      	mov	r3, r0
 8006990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006994:	2b00      	cmp	r3, #0
 8006996:	d110      	bne.n	80069ba <ip4_reass+0x122>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	89db      	ldrh	r3, [r3, #14]
 800699c:	4618      	mov	r0, r3
 800699e:	f7fc fd3a 	bl	8003416 <lwip_htons>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d006      	beq.n	80069ba <ip4_reass+0x122>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	3308      	adds	r3, #8
 80069b0:	2214      	movs	r2, #20
 80069b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fc9f 	bl	80072f8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	88db      	ldrh	r3, [r3, #6]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00e      	beq.n	80069f4 <ip4_reass+0x15c>
    u16_t datagram_len = (u16_t)(offset + len);
 80069d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80069d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069da:	4413      	add	r3, r2
 80069dc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80069de:	8b7a      	ldrh	r2, [r7, #26]
 80069e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069e2:	429a      	cmp	r2, r3
 80069e4:	f0c0 809b 	bcc.w	8006b1e <ip4_reass+0x286>
 80069e8:	8b7b      	ldrh	r3, [r7, #26]
 80069ea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80069ee:	4293      	cmp	r3, r2
 80069f0:	f200 8095 	bhi.w	8006b1e <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069fa:	f7ff fde3 	bl	80065c4 <ip_reass_chain_frag_into_datagram_and_validate>
 80069fe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a06:	f000 808c 	beq.w	8006b22 <ip4_reass+0x28a>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006a0a:	4b4a      	ldr	r3, [pc, #296]	; (8006b34 <ip4_reass+0x29c>)
 8006a0c:	881a      	ldrh	r2, [r3, #0]
 8006a0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a10:	4413      	add	r3, r2
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	4b47      	ldr	r3, [pc, #284]	; (8006b34 <ip4_reass+0x29c>)
 8006a16:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00d      	beq.n	8006a3a <ip4_reass+0x1a2>
    u16_t datagram_len = (u16_t)(offset + len);
 8006a1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a22:	4413      	add	r3, r2
 8006a24:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	8a7a      	ldrh	r2, [r7, #18]
 8006a2a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	7f9b      	ldrb	r3, [r3, #30]
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d168      	bne.n	8006b12 <ip4_reass+0x27a>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	8b9b      	ldrh	r3, [r3, #28]
 8006a44:	3314      	adds	r3, #20
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	3308      	adds	r3, #8
 8006a62:	2214      	movs	r2, #20
 8006a64:	4619      	mov	r1, r3
 8006a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a68:	f000 fc46 	bl	80072f8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	8b9b      	ldrh	r3, [r3, #28]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fc fcd0 	bl	8003416 <lwip_htons>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	2200      	movs	r2, #0
 8006a82:	719a      	strb	r2, [r3, #6]
 8006a84:	2200      	movs	r2, #0
 8006a86:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	729a      	strb	r2, [r3, #10]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8006a98:	e00e      	b.n	8006ab8 <ip4_reass+0x220>
      iprh = (struct ip_reass_helper*)r->payload;
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8006aa0:	f06f 0113 	mvn.w	r1, #19
 8006aa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006aa6:	f7fd fd65 	bl	8004574 <pbuf_header>
      pbuf_cat(p, r);
 8006aaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7fd fe51 	bl	8004754 <pbuf_cat>
      r = iprh->next_pbuf;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1ed      	bne.n	8006a9a <ip4_reass+0x202>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8006abe:	4b1e      	ldr	r3, [pc, #120]	; (8006b38 <ip4_reass+0x2a0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d102      	bne.n	8006ace <ip4_reass+0x236>
      ipr_prev = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006acc:	e010      	b.n	8006af0 <ip4_reass+0x258>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006ace:	4b1a      	ldr	r3, [pc, #104]	; (8006b38 <ip4_reass+0x2a0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad4:	e007      	b.n	8006ae6 <ip4_reass+0x24e>
        if (ipr_prev->next == ipr) {
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d006      	beq.n	8006aee <ip4_reass+0x256>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f4      	bne.n	8006ad6 <ip4_reass+0x23e>
 8006aec:	e000      	b.n	8006af0 <ip4_reass+0x258>
          break;
 8006aee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006af4:	f7ff fd38 	bl	8006568 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7fd fdf3 	bl	80046e4 <pbuf_clen>
 8006afe:	4603      	mov	r3, r0
 8006b00:	461a      	mov	r2, r3
 8006b02:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <ip4_reass+0x29c>)
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	1a9b      	subs	r3, r3, r2
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <ip4_reass+0x29c>)
 8006b0c:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	e00c      	b.n	8006b2c <ip4_reass+0x294>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e00a      	b.n	8006b2c <ip4_reass+0x294>
    goto nullreturn;
 8006b16:	bf00      	nop
 8006b18:	e004      	b.n	8006b24 <ip4_reass+0x28c>
      goto nullreturn;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <ip4_reass+0x28c>
      goto nullreturn;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <ip4_reass+0x28c>
    goto nullreturn;
 8006b22:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7fd fd49 	bl	80045bc <pbuf_free>
  return NULL;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3738      	adds	r7, #56	; 0x38
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20008454 	.word	0x20008454
 8006b38:	20008450 	.word	0x20008450

08006b3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8006b40:	2001      	movs	r0, #1
 8006b42:	f7fc fff5 	bl	8003b30 <memp_malloc>
 8006b46:	4603      	mov	r3, r0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <ip_frag_free_pbuf_custom_ref+0x1c>
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8006b5c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8006b60:	4906      	ldr	r1, [pc, #24]	; (8006b7c <ip_frag_free_pbuf_custom_ref+0x30>)
 8006b62:	4807      	ldr	r0, [pc, #28]	; (8006b80 <ip_frag_free_pbuf_custom_ref+0x34>)
 8006b64:	f000 faee 	bl	8007144 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f7fd f82c 	bl	8003bc8 <memp_free>
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	08008bd4 	.word	0x08008bd4
 8006b7c:	08008d3c 	.word	0x08008d3c
 8006b80:	08008c1c 	.word	0x08008c1c

08006b84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <ipfrag_free_pbuf_custom+0x20>
 8006b96:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <ipfrag_free_pbuf_custom+0x58>)
 8006b98:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8006b9c:	4910      	ldr	r1, [pc, #64]	; (8006be0 <ipfrag_free_pbuf_custom+0x5c>)
 8006b9e:	4811      	ldr	r0, [pc, #68]	; (8006be4 <ipfrag_free_pbuf_custom+0x60>)
 8006ba0:	f000 fad0 	bl	8007144 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d006      	beq.n	8006bba <ipfrag_free_pbuf_custom+0x36>
 8006bac:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <ipfrag_free_pbuf_custom+0x58>)
 8006bae:	f240 22b9 	movw	r2, #697	; 0x2b9
 8006bb2:	490d      	ldr	r1, [pc, #52]	; (8006be8 <ipfrag_free_pbuf_custom+0x64>)
 8006bb4:	480b      	ldr	r0, [pc, #44]	; (8006be4 <ipfrag_free_pbuf_custom+0x60>)
 8006bb6:	f000 fac5 	bl	8007144 <iprintf>
  if (pcr->original != NULL) {
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d004      	beq.n	8006bcc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fd fcf8 	bl	80045bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff ffbd 	bl	8006b4c <ip_frag_free_pbuf_custom_ref>
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	08008bd4 	.word	0x08008bd4
 8006be0:	08008d48 	.word	0x08008d48
 8006be4:	08008c1c 	.word	0x08008c1c
 8006be8:	08008d54 	.word	0x08008d54

08006bec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b092      	sub	sp, #72	; 0x48
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c00:	3b14      	subs	r3, #20
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da00      	bge.n	8006c08 <ip4_frag+0x1c>
 8006c06:	3307      	adds	r3, #7
 8006c08:	10db      	asrs	r3, r3, #3
 8006c0a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8006c0c:	2314      	movs	r3, #20
 8006c0e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	d009      	beq.n	8006c3a <ip4_frag+0x4e>
 8006c26:	4b7a      	ldr	r3, [pc, #488]	; (8006e10 <ip4_frag+0x224>)
 8006c28:	f240 22e1 	movw	r2, #737	; 0x2e1
 8006c2c:	4979      	ldr	r1, [pc, #484]	; (8006e14 <ip4_frag+0x228>)
 8006c2e:	487a      	ldr	r0, [pc, #488]	; (8006e18 <ip4_frag+0x22c>)
 8006c30:	f000 fa88 	bl	8007144 <iprintf>
 8006c34:	f06f 0305 	mvn.w	r3, #5
 8006c38:	e0e6      	b.n	8006e08 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	88db      	ldrh	r3, [r3, #6]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fc fbe8 	bl	8003416 <lwip_htons>
 8006c46:	4603      	mov	r3, r0
 8006c48:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8006c4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c50:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006c52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d009      	beq.n	8006c70 <ip4_frag+0x84>
 8006c5c:	4b6c      	ldr	r3, [pc, #432]	; (8006e10 <ip4_frag+0x224>)
 8006c5e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8006c62:	496e      	ldr	r1, [pc, #440]	; (8006e1c <ip4_frag+0x230>)
 8006c64:	486c      	ldr	r0, [pc, #432]	; (8006e18 <ip4_frag+0x22c>)
 8006c66:	f000 fa6d 	bl	8007144 <iprintf>
 8006c6a:	f06f 0305 	mvn.w	r3, #5
 8006c6e:	e0cb      	b.n	8006e08 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	891b      	ldrh	r3, [r3, #8]
 8006c74:	3b14      	subs	r3, #20
 8006c76:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8006c78:	e0bd      	b.n	8006df6 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8006c7a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c7c:	00da      	lsls	r2, r3, #3
 8006c7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006c80:	4293      	cmp	r3, r2
 8006c82:	bfa8      	it	ge
 8006c84:	4613      	movge	r3, r2
 8006c86:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2114      	movs	r1, #20
 8006c8c:	2002      	movs	r0, #2
 8006c8e:	f7fd f921 	bl	8003ed4 <pbuf_alloc>
 8006c92:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 80b3 	beq.w	8006e02 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	895b      	ldrh	r3, [r3, #10]
 8006ca0:	2b13      	cmp	r3, #19
 8006ca2:	d806      	bhi.n	8006cb2 <ip4_frag+0xc6>
 8006ca4:	4b5a      	ldr	r3, [pc, #360]	; (8006e10 <ip4_frag+0x224>)
 8006ca6:	f44f 7242 	mov.w	r2, #776	; 0x308
 8006caa:	495d      	ldr	r1, [pc, #372]	; (8006e20 <ip4_frag+0x234>)
 8006cac:	485a      	ldr	r0, [pc, #360]	; (8006e18 <ip4_frag+0x22c>)
 8006cae:	f000 fa49 	bl	8007144 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2214      	movs	r2, #20
 8006cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fb1c 	bl	80072f8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8006cc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8006cca:	e04f      	b.n	8006d6c <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	895a      	ldrh	r2, [r3, #10]
 8006cd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006cd6:	8b7a      	ldrh	r2, [r7, #26]
 8006cd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	bf28      	it	cs
 8006cde:	4613      	movcs	r3, r2
 8006ce0:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8006ce2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d105      	bne.n	8006cf4 <ip4_frag+0x108>
        poff = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]
        continue;
 8006cf2:	e03b      	b.n	8006d6c <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8006cf4:	f7ff ff22 	bl	8006b3c <ip_frag_alloc_pbuf_custom_ref>
 8006cf8:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 8006d00:	6a38      	ldr	r0, [r7, #32]
 8006d02:	f7fd fc5b 	bl	80045bc <pbuf_free>
        goto memerr;
 8006d06:	e07d      	b.n	8006e04 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006d08:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006d0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d10:	4413      	add	r3, r2
 8006d12:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8006d14:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006d16:	9201      	str	r2, [sp, #4]
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	2004      	movs	r0, #4
 8006d20:	f7fd fa6e 	bl	8004200 <pbuf_alloced_custom>
 8006d24:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d106      	bne.n	8006d3a <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 8006d2c:	6978      	ldr	r0, [r7, #20]
 8006d2e:	f7ff ff0d 	bl	8006b4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8006d32:	6a38      	ldr	r0, [r7, #32]
 8006d34:	f7fd fc42 	bl	80045bc <pbuf_free>
        goto memerr;
 8006d38:	e064      	b.n	8006e04 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7fd fce8 	bl	8004710 <pbuf_ref>
      pcr->original = p;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	4a36      	ldr	r2, [pc, #216]	; (8006e24 <ip4_frag+0x238>)
 8006d4a:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8006d4c:	6939      	ldr	r1, [r7, #16]
 8006d4e:	6a38      	ldr	r0, [r7, #32]
 8006d50:	f7fd fd00 	bl	8004754 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8006d54:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8006d56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8006d5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <ip4_frag+0x180>
        poff = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8006d6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1ac      	bne.n	8006ccc <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 8006d72:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006d74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006d76:	4413      	add	r3, r2
 8006d78:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d7e:	f1a3 0213 	sub.w	r2, r3, #19
 8006d82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d84:	429a      	cmp	r2, r3
 8006d86:	bfcc      	ite	gt
 8006d88:	2301      	movgt	r3, #1
 8006d8a:	2300      	movle	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8006d90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d96:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8006d9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006da0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006da4:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006da6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fc fb34 	bl	8003416 <lwip_htons>
 8006dae:	4603      	mov	r3, r0
 8006db0:	461a      	mov	r2, r3
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8006db6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006db8:	3314      	adds	r3, #20
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fc fb2a 	bl	8003416 <lwip_htons>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	2200      	movs	r2, #0
 8006dce:	729a      	strb	r2, [r3, #10]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6a39      	ldr	r1, [r7, #32]
 8006ddc:	68b8      	ldr	r0, [r7, #8]
 8006dde:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8006de0:	6a38      	ldr	r0, [r7, #32]
 8006de2:	f7fd fbeb 	bl	80045bc <pbuf_free>
    left -= fragsize;
 8006de6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006de8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8006dee:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006df0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006df2:	4413      	add	r3, r2
 8006df4:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8006df6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f47f af3e 	bne.w	8006c7a <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e002      	b.n	8006e08 <ip4_frag+0x21c>
      goto memerr;
 8006e02:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3740      	adds	r7, #64	; 0x40
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	08008bd4 	.word	0x08008bd4
 8006e14:	08008d60 	.word	0x08008d60
 8006e18:	08008c1c 	.word	0x08008c1c
 8006e1c:	08008d88 	.word	0x08008d88
 8006e20:	08008da4 	.word	0x08008da4
 8006e24:	08006b85 	.word	0x08006b85

08006e28 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8006e32:	230e      	movs	r3, #14
 8006e34:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	895b      	ldrh	r3, [r3, #10]
 8006e3a:	2b0e      	cmp	r3, #14
 8006e3c:	d977      	bls.n	8006f2e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	7b1a      	ldrb	r2, [r3, #12]
 8006e48:	7b5b      	ldrb	r3, [r3, #13]
 8006e4a:	021b      	lsls	r3, r3, #8
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d023      	beq.n	8006ea4 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d10f      	bne.n	8006e84 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11b      	bne.n	8006ea4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8006e70:	2b5e      	cmp	r3, #94	; 0x5e
 8006e72:	d117      	bne.n	8006ea4 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	7b5b      	ldrb	r3, [r3, #13]
 8006e78:	f043 0310 	orr.w	r3, r3, #16
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	735a      	strb	r2, [r3, #13]
 8006e82:	e00f      	b.n	8006ea4 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	2206      	movs	r2, #6
 8006e88:	4931      	ldr	r1, [pc, #196]	; (8006f50 <ethernet_input+0x128>)
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f9af 	bl	80071ee <memcmp>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d106      	bne.n	8006ea4 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7b5b      	ldrb	r3, [r3, #13]
 8006e9a:	f043 0308 	orr.w	r3, r3, #8
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8006ea4:	89fb      	ldrh	r3, [r7, #14]
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d003      	beq.n	8006eb2 <ethernet_input+0x8a>
 8006eaa:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8006eae:	d01e      	beq.n	8006eee <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8006eb0:	e046      	b.n	8006f40 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d038      	beq.n	8006f32 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	895b      	ldrh	r3, [r3, #10]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	db33      	blt.n	8006f36 <ethernet_input+0x10e>
 8006ece:	8afb      	ldrh	r3, [r7, #22]
 8006ed0:	425b      	negs	r3, r3
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	b21b      	sxth	r3, r3
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7fd fb4b 	bl	8004574 <pbuf_header>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d128      	bne.n	8006f36 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fe ff90 	bl	8005e0c <ip4_input>
      break;
 8006eec:	e01d      	b.n	8006f2a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01e      	beq.n	8006f3a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	895b      	ldrh	r3, [r3, #10]
 8006f00:	461a      	mov	r2, r3
 8006f02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	db19      	blt.n	8006f3e <ethernet_input+0x116>
 8006f0a:	8afb      	ldrh	r3, [r7, #22]
 8006f0c:	425b      	negs	r3, r3
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	b21b      	sxth	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7fd fb2d 	bl	8004574 <pbuf_header>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10e      	bne.n	8006f3e <ethernet_input+0x116>
        etharp_input(p, netif);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fe f960 	bl	80051e8 <etharp_input>
      break;
 8006f28:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e00c      	b.n	8006f48 <ethernet_input+0x120>
    goto free_and_return;
 8006f2e:	bf00      	nop
 8006f30:	e006      	b.n	8006f40 <ethernet_input+0x118>
        goto free_and_return;
 8006f32:	bf00      	nop
 8006f34:	e004      	b.n	8006f40 <ethernet_input+0x118>
        goto free_and_return;
 8006f36:	bf00      	nop
 8006f38:	e002      	b.n	8006f40 <ethernet_input+0x118>
        goto free_and_return;
 8006f3a:	bf00      	nop
 8006f3c:	e000      	b.n	8006f40 <ethernet_input+0x118>
        goto free_and_return;
 8006f3e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7fd fb3b 	bl	80045bc <pbuf_free>
  return ERR_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	08008ecc 	.word	0x08008ecc

08006f54 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8006f62:	8c3b      	ldrh	r3, [r7, #32]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fc fa56 	bl	8003416 <lwip_htons>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8006f6e:	210e      	movs	r1, #14
 8006f70:	68b8      	ldr	r0, [r7, #8]
 8006f72:	f7fd faff 	bl	8004574 <pbuf_header>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d125      	bne.n	8006fc8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	8afa      	ldrh	r2, [r7, #22]
 8006f86:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2206      	movs	r2, #6
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 f9b2 	bl	80072f8 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3306      	adds	r3, #6
 8006f98:	2206      	movs	r2, #6
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f9ab 	bl	80072f8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fa8:	2b06      	cmp	r3, #6
 8006faa:	d006      	beq.n	8006fba <ethernet_output+0x66>
 8006fac:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <ethernet_output+0x84>)
 8006fae:	f240 122b 	movw	r2, #299	; 0x12b
 8006fb2:	490a      	ldr	r1, [pc, #40]	; (8006fdc <ethernet_output+0x88>)
 8006fb4:	480a      	ldr	r0, [pc, #40]	; (8006fe0 <ethernet_output+0x8c>)
 8006fb6:	f000 f8c5 	bl	8007144 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	4798      	blx	r3
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	e002      	b.n	8006fce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8006fc8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8006fca:	f06f 0301 	mvn.w	r3, #1
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	08008dc4 	.word	0x08008dc4
 8006fdc:	08008dfc 	.word	0x08008dfc
 8006fe0:	08008e30 	.word	0x08008e30

08006fe4 <std>:
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	4604      	mov	r4, r0
 8006fea:	e9c0 3300 	strd	r3, r3, [r0]
 8006fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ff2:	6083      	str	r3, [r0, #8]
 8006ff4:	8181      	strh	r1, [r0, #12]
 8006ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ff8:	81c2      	strh	r2, [r0, #14]
 8006ffa:	6183      	str	r3, [r0, #24]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	2208      	movs	r2, #8
 8007000:	305c      	adds	r0, #92	; 0x5c
 8007002:	f000 f904 	bl	800720e <memset>
 8007006:	4b05      	ldr	r3, [pc, #20]	; (800701c <std+0x38>)
 8007008:	6224      	str	r4, [r4, #32]
 800700a:	6263      	str	r3, [r4, #36]	; 0x24
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <std+0x3c>)
 800700e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <std+0x40>)
 8007012:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <std+0x44>)
 8007016:	6323      	str	r3, [r4, #48]	; 0x30
 8007018:	bd10      	pop	{r4, pc}
 800701a:	bf00      	nop
 800701c:	08007169 	.word	0x08007169
 8007020:	0800718b 	.word	0x0800718b
 8007024:	080071c3 	.word	0x080071c3
 8007028:	080071e7 	.word	0x080071e7

0800702c <stdio_exit_handler>:
 800702c:	4a02      	ldr	r2, [pc, #8]	; (8007038 <stdio_exit_handler+0xc>)
 800702e:	4903      	ldr	r1, [pc, #12]	; (800703c <stdio_exit_handler+0x10>)
 8007030:	4803      	ldr	r0, [pc, #12]	; (8007040 <stdio_exit_handler+0x14>)
 8007032:	f000 b869 	b.w	8007108 <_fwalk_sglue>
 8007036:	bf00      	nop
 8007038:	2000000c 	.word	0x2000000c
 800703c:	08007bad 	.word	0x08007bad
 8007040:	20000018 	.word	0x20000018

08007044 <cleanup_stdio>:
 8007044:	6841      	ldr	r1, [r0, #4]
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <cleanup_stdio+0x34>)
 8007048:	b510      	push	{r4, lr}
 800704a:	4299      	cmp	r1, r3
 800704c:	4604      	mov	r4, r0
 800704e:	d001      	beq.n	8007054 <cleanup_stdio+0x10>
 8007050:	f000 fdac 	bl	8007bac <_fflush_r>
 8007054:	68a1      	ldr	r1, [r4, #8]
 8007056:	4b09      	ldr	r3, [pc, #36]	; (800707c <cleanup_stdio+0x38>)
 8007058:	4299      	cmp	r1, r3
 800705a:	d002      	beq.n	8007062 <cleanup_stdio+0x1e>
 800705c:	4620      	mov	r0, r4
 800705e:	f000 fda5 	bl	8007bac <_fflush_r>
 8007062:	68e1      	ldr	r1, [r4, #12]
 8007064:	4b06      	ldr	r3, [pc, #24]	; (8007080 <cleanup_stdio+0x3c>)
 8007066:	4299      	cmp	r1, r3
 8007068:	d004      	beq.n	8007074 <cleanup_stdio+0x30>
 800706a:	4620      	mov	r0, r4
 800706c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007070:	f000 bd9c 	b.w	8007bac <_fflush_r>
 8007074:	bd10      	pop	{r4, pc}
 8007076:	bf00      	nop
 8007078:	20008458 	.word	0x20008458
 800707c:	200084c0 	.word	0x200084c0
 8007080:	20008528 	.word	0x20008528

08007084 <global_stdio_init.part.0>:
 8007084:	b510      	push	{r4, lr}
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <global_stdio_init.part.0+0x30>)
 8007088:	4c0b      	ldr	r4, [pc, #44]	; (80070b8 <global_stdio_init.part.0+0x34>)
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <global_stdio_init.part.0+0x38>)
 800708c:	4620      	mov	r0, r4
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	2104      	movs	r1, #4
 8007092:	2200      	movs	r2, #0
 8007094:	f7ff ffa6 	bl	8006fe4 <std>
 8007098:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800709c:	2201      	movs	r2, #1
 800709e:	2109      	movs	r1, #9
 80070a0:	f7ff ffa0 	bl	8006fe4 <std>
 80070a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80070a8:	2202      	movs	r2, #2
 80070aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ae:	2112      	movs	r1, #18
 80070b0:	f7ff bf98 	b.w	8006fe4 <std>
 80070b4:	20008590 	.word	0x20008590
 80070b8:	20008458 	.word	0x20008458
 80070bc:	0800702d 	.word	0x0800702d

080070c0 <__sfp_lock_acquire>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__sfp_lock_acquire+0x8>)
 80070c2:	f000 b917 	b.w	80072f4 <__retarget_lock_acquire_recursive>
 80070c6:	bf00      	nop
 80070c8:	20008599 	.word	0x20008599

080070cc <__sfp_lock_release>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__sfp_lock_release+0x8>)
 80070ce:	f000 b912 	b.w	80072f6 <__retarget_lock_release_recursive>
 80070d2:	bf00      	nop
 80070d4:	20008599 	.word	0x20008599

080070d8 <__sinit>:
 80070d8:	b510      	push	{r4, lr}
 80070da:	4604      	mov	r4, r0
 80070dc:	f7ff fff0 	bl	80070c0 <__sfp_lock_acquire>
 80070e0:	6a23      	ldr	r3, [r4, #32]
 80070e2:	b11b      	cbz	r3, 80070ec <__sinit+0x14>
 80070e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e8:	f7ff bff0 	b.w	80070cc <__sfp_lock_release>
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <__sinit+0x28>)
 80070ee:	6223      	str	r3, [r4, #32]
 80070f0:	4b04      	ldr	r3, [pc, #16]	; (8007104 <__sinit+0x2c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f5      	bne.n	80070e4 <__sinit+0xc>
 80070f8:	f7ff ffc4 	bl	8007084 <global_stdio_init.part.0>
 80070fc:	e7f2      	b.n	80070e4 <__sinit+0xc>
 80070fe:	bf00      	nop
 8007100:	08007045 	.word	0x08007045
 8007104:	20008590 	.word	0x20008590

08007108 <_fwalk_sglue>:
 8007108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800710c:	4607      	mov	r7, r0
 800710e:	4688      	mov	r8, r1
 8007110:	4614      	mov	r4, r2
 8007112:	2600      	movs	r6, #0
 8007114:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007118:	f1b9 0901 	subs.w	r9, r9, #1
 800711c:	d505      	bpl.n	800712a <_fwalk_sglue+0x22>
 800711e:	6824      	ldr	r4, [r4, #0]
 8007120:	2c00      	cmp	r4, #0
 8007122:	d1f7      	bne.n	8007114 <_fwalk_sglue+0xc>
 8007124:	4630      	mov	r0, r6
 8007126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712a:	89ab      	ldrh	r3, [r5, #12]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d907      	bls.n	8007140 <_fwalk_sglue+0x38>
 8007130:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007134:	3301      	adds	r3, #1
 8007136:	d003      	beq.n	8007140 <_fwalk_sglue+0x38>
 8007138:	4629      	mov	r1, r5
 800713a:	4638      	mov	r0, r7
 800713c:	47c0      	blx	r8
 800713e:	4306      	orrs	r6, r0
 8007140:	3568      	adds	r5, #104	; 0x68
 8007142:	e7e9      	b.n	8007118 <_fwalk_sglue+0x10>

08007144 <iprintf>:
 8007144:	b40f      	push	{r0, r1, r2, r3}
 8007146:	b507      	push	{r0, r1, r2, lr}
 8007148:	4906      	ldr	r1, [pc, #24]	; (8007164 <iprintf+0x20>)
 800714a:	ab04      	add	r3, sp, #16
 800714c:	6808      	ldr	r0, [r1, #0]
 800714e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007152:	6881      	ldr	r1, [r0, #8]
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	f000 f9f9 	bl	800754c <_vfiprintf_r>
 800715a:	b003      	add	sp, #12
 800715c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007160:	b004      	add	sp, #16
 8007162:	4770      	bx	lr
 8007164:	20000064 	.word	0x20000064

08007168 <__sread>:
 8007168:	b510      	push	{r4, lr}
 800716a:	460c      	mov	r4, r1
 800716c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007170:	f000 f878 	bl	8007264 <_read_r>
 8007174:	2800      	cmp	r0, #0
 8007176:	bfab      	itete	ge
 8007178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800717a:	89a3      	ldrhlt	r3, [r4, #12]
 800717c:	181b      	addge	r3, r3, r0
 800717e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007182:	bfac      	ite	ge
 8007184:	6563      	strge	r3, [r4, #84]	; 0x54
 8007186:	81a3      	strhlt	r3, [r4, #12]
 8007188:	bd10      	pop	{r4, pc}

0800718a <__swrite>:
 800718a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718e:	461f      	mov	r7, r3
 8007190:	898b      	ldrh	r3, [r1, #12]
 8007192:	4605      	mov	r5, r0
 8007194:	05db      	lsls	r3, r3, #23
 8007196:	460c      	mov	r4, r1
 8007198:	4616      	mov	r6, r2
 800719a:	d505      	bpl.n	80071a8 <__swrite+0x1e>
 800719c:	2302      	movs	r3, #2
 800719e:	2200      	movs	r2, #0
 80071a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a4:	f000 f84c 	bl	8007240 <_lseek_r>
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	4632      	mov	r2, r6
 80071ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	4628      	mov	r0, r5
 80071b4:	463b      	mov	r3, r7
 80071b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071be:	f000 b863 	b.w	8007288 <_write_r>

080071c2 <__sseek>:
 80071c2:	b510      	push	{r4, lr}
 80071c4:	460c      	mov	r4, r1
 80071c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ca:	f000 f839 	bl	8007240 <_lseek_r>
 80071ce:	1c43      	adds	r3, r0, #1
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	bf15      	itete	ne
 80071d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80071d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071de:	81a3      	strheq	r3, [r4, #12]
 80071e0:	bf18      	it	ne
 80071e2:	81a3      	strhne	r3, [r4, #12]
 80071e4:	bd10      	pop	{r4, pc}

080071e6 <__sclose>:
 80071e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ea:	f000 b819 	b.w	8007220 <_close_r>

080071ee <memcmp>:
 80071ee:	b510      	push	{r4, lr}
 80071f0:	3901      	subs	r1, #1
 80071f2:	4402      	add	r2, r0
 80071f4:	4290      	cmp	r0, r2
 80071f6:	d101      	bne.n	80071fc <memcmp+0xe>
 80071f8:	2000      	movs	r0, #0
 80071fa:	e005      	b.n	8007208 <memcmp+0x1a>
 80071fc:	7803      	ldrb	r3, [r0, #0]
 80071fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007202:	42a3      	cmp	r3, r4
 8007204:	d001      	beq.n	800720a <memcmp+0x1c>
 8007206:	1b18      	subs	r0, r3, r4
 8007208:	bd10      	pop	{r4, pc}
 800720a:	3001      	adds	r0, #1
 800720c:	e7f2      	b.n	80071f4 <memcmp+0x6>

0800720e <memset>:
 800720e:	4603      	mov	r3, r0
 8007210:	4402      	add	r2, r0
 8007212:	4293      	cmp	r3, r2
 8007214:	d100      	bne.n	8007218 <memset+0xa>
 8007216:	4770      	bx	lr
 8007218:	f803 1b01 	strb.w	r1, [r3], #1
 800721c:	e7f9      	b.n	8007212 <memset+0x4>
	...

08007220 <_close_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	2300      	movs	r3, #0
 8007224:	4d05      	ldr	r5, [pc, #20]	; (800723c <_close_r+0x1c>)
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	f7f9 fb10 	bl	8000850 <_close>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_close_r+0x1a>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_close_r+0x1a>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	20008594 	.word	0x20008594

08007240 <_lseek_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	2200      	movs	r2, #0
 800724a:	4d05      	ldr	r5, [pc, #20]	; (8007260 <_lseek_r+0x20>)
 800724c:	602a      	str	r2, [r5, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f7f9 fb22 	bl	8000898 <_lseek>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_lseek_r+0x1e>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_lseek_r+0x1e>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20008594 	.word	0x20008594

08007264 <_read_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	4611      	mov	r1, r2
 800726c:	2200      	movs	r2, #0
 800726e:	4d05      	ldr	r5, [pc, #20]	; (8007284 <_read_r+0x20>)
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7f9 fab3 	bl	80007de <_read>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_read_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_read_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	20008594 	.word	0x20008594

08007288 <_write_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4604      	mov	r4, r0
 800728c:	4608      	mov	r0, r1
 800728e:	4611      	mov	r1, r2
 8007290:	2200      	movs	r2, #0
 8007292:	4d05      	ldr	r5, [pc, #20]	; (80072a8 <_write_r+0x20>)
 8007294:	602a      	str	r2, [r5, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	f7f9 fabe 	bl	8000818 <_write>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_write_r+0x1e>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_write_r+0x1e>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	20008594 	.word	0x20008594

080072ac <__libc_init_array>:
 80072ac:	b570      	push	{r4, r5, r6, lr}
 80072ae:	2600      	movs	r6, #0
 80072b0:	4d0c      	ldr	r5, [pc, #48]	; (80072e4 <__libc_init_array+0x38>)
 80072b2:	4c0d      	ldr	r4, [pc, #52]	; (80072e8 <__libc_init_array+0x3c>)
 80072b4:	1b64      	subs	r4, r4, r5
 80072b6:	10a4      	asrs	r4, r4, #2
 80072b8:	42a6      	cmp	r6, r4
 80072ba:	d109      	bne.n	80072d0 <__libc_init_array+0x24>
 80072bc:	f000 fdd6 	bl	8007e6c <_init>
 80072c0:	2600      	movs	r6, #0
 80072c2:	4d0a      	ldr	r5, [pc, #40]	; (80072ec <__libc_init_array+0x40>)
 80072c4:	4c0a      	ldr	r4, [pc, #40]	; (80072f0 <__libc_init_array+0x44>)
 80072c6:	1b64      	subs	r4, r4, r5
 80072c8:	10a4      	asrs	r4, r4, #2
 80072ca:	42a6      	cmp	r6, r4
 80072cc:	d105      	bne.n	80072da <__libc_init_array+0x2e>
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d4:	4798      	blx	r3
 80072d6:	3601      	adds	r6, #1
 80072d8:	e7ee      	b.n	80072b8 <__libc_init_array+0xc>
 80072da:	f855 3b04 	ldr.w	r3, [r5], #4
 80072de:	4798      	blx	r3
 80072e0:	3601      	adds	r6, #1
 80072e2:	e7f2      	b.n	80072ca <__libc_init_array+0x1e>
 80072e4:	08008f18 	.word	0x08008f18
 80072e8:	08008f18 	.word	0x08008f18
 80072ec:	08008f18 	.word	0x08008f18
 80072f0:	08008f1c 	.word	0x08008f1c

080072f4 <__retarget_lock_acquire_recursive>:
 80072f4:	4770      	bx	lr

080072f6 <__retarget_lock_release_recursive>:
 80072f6:	4770      	bx	lr

080072f8 <memcpy>:
 80072f8:	440a      	add	r2, r1
 80072fa:	4291      	cmp	r1, r2
 80072fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007300:	d100      	bne.n	8007304 <memcpy+0xc>
 8007302:	4770      	bx	lr
 8007304:	b510      	push	{r4, lr}
 8007306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800730a:	4291      	cmp	r1, r2
 800730c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007310:	d1f9      	bne.n	8007306 <memcpy+0xe>
 8007312:	bd10      	pop	{r4, pc}

08007314 <_free_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4605      	mov	r5, r0
 8007318:	2900      	cmp	r1, #0
 800731a:	d040      	beq.n	800739e <_free_r+0x8a>
 800731c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007320:	1f0c      	subs	r4, r1, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfb8      	it	lt
 8007326:	18e4      	addlt	r4, r4, r3
 8007328:	f000 f8dc 	bl	80074e4 <__malloc_lock>
 800732c:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <_free_r+0x8c>)
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	b933      	cbnz	r3, 8007340 <_free_r+0x2c>
 8007332:	6063      	str	r3, [r4, #4]
 8007334:	6014      	str	r4, [r2, #0]
 8007336:	4628      	mov	r0, r5
 8007338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800733c:	f000 b8d8 	b.w	80074f0 <__malloc_unlock>
 8007340:	42a3      	cmp	r3, r4
 8007342:	d908      	bls.n	8007356 <_free_r+0x42>
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	1821      	adds	r1, r4, r0
 8007348:	428b      	cmp	r3, r1
 800734a:	bf01      	itttt	eq
 800734c:	6819      	ldreq	r1, [r3, #0]
 800734e:	685b      	ldreq	r3, [r3, #4]
 8007350:	1809      	addeq	r1, r1, r0
 8007352:	6021      	streq	r1, [r4, #0]
 8007354:	e7ed      	b.n	8007332 <_free_r+0x1e>
 8007356:	461a      	mov	r2, r3
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	b10b      	cbz	r3, 8007360 <_free_r+0x4c>
 800735c:	42a3      	cmp	r3, r4
 800735e:	d9fa      	bls.n	8007356 <_free_r+0x42>
 8007360:	6811      	ldr	r1, [r2, #0]
 8007362:	1850      	adds	r0, r2, r1
 8007364:	42a0      	cmp	r0, r4
 8007366:	d10b      	bne.n	8007380 <_free_r+0x6c>
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	4401      	add	r1, r0
 800736c:	1850      	adds	r0, r2, r1
 800736e:	4283      	cmp	r3, r0
 8007370:	6011      	str	r1, [r2, #0]
 8007372:	d1e0      	bne.n	8007336 <_free_r+0x22>
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	4408      	add	r0, r1
 800737a:	6010      	str	r0, [r2, #0]
 800737c:	6053      	str	r3, [r2, #4]
 800737e:	e7da      	b.n	8007336 <_free_r+0x22>
 8007380:	d902      	bls.n	8007388 <_free_r+0x74>
 8007382:	230c      	movs	r3, #12
 8007384:	602b      	str	r3, [r5, #0]
 8007386:	e7d6      	b.n	8007336 <_free_r+0x22>
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	1821      	adds	r1, r4, r0
 800738c:	428b      	cmp	r3, r1
 800738e:	bf01      	itttt	eq
 8007390:	6819      	ldreq	r1, [r3, #0]
 8007392:	685b      	ldreq	r3, [r3, #4]
 8007394:	1809      	addeq	r1, r1, r0
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	6063      	str	r3, [r4, #4]
 800739a:	6054      	str	r4, [r2, #4]
 800739c:	e7cb      	b.n	8007336 <_free_r+0x22>
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	2000859c 	.word	0x2000859c

080073a4 <sbrk_aligned>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	4e0e      	ldr	r6, [pc, #56]	; (80073e0 <sbrk_aligned+0x3c>)
 80073a8:	460c      	mov	r4, r1
 80073aa:	6831      	ldr	r1, [r6, #0]
 80073ac:	4605      	mov	r5, r0
 80073ae:	b911      	cbnz	r1, 80073b6 <sbrk_aligned+0x12>
 80073b0:	f000 fcba 	bl	8007d28 <_sbrk_r>
 80073b4:	6030      	str	r0, [r6, #0]
 80073b6:	4621      	mov	r1, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 fcb5 	bl	8007d28 <_sbrk_r>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	d00a      	beq.n	80073d8 <sbrk_aligned+0x34>
 80073c2:	1cc4      	adds	r4, r0, #3
 80073c4:	f024 0403 	bic.w	r4, r4, #3
 80073c8:	42a0      	cmp	r0, r4
 80073ca:	d007      	beq.n	80073dc <sbrk_aligned+0x38>
 80073cc:	1a21      	subs	r1, r4, r0
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 fcaa 	bl	8007d28 <_sbrk_r>
 80073d4:	3001      	adds	r0, #1
 80073d6:	d101      	bne.n	80073dc <sbrk_aligned+0x38>
 80073d8:	f04f 34ff 	mov.w	r4, #4294967295
 80073dc:	4620      	mov	r0, r4
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	200085a0 	.word	0x200085a0

080073e4 <_malloc_r>:
 80073e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e8:	1ccd      	adds	r5, r1, #3
 80073ea:	f025 0503 	bic.w	r5, r5, #3
 80073ee:	3508      	adds	r5, #8
 80073f0:	2d0c      	cmp	r5, #12
 80073f2:	bf38      	it	cc
 80073f4:	250c      	movcc	r5, #12
 80073f6:	2d00      	cmp	r5, #0
 80073f8:	4607      	mov	r7, r0
 80073fa:	db01      	blt.n	8007400 <_malloc_r+0x1c>
 80073fc:	42a9      	cmp	r1, r5
 80073fe:	d905      	bls.n	800740c <_malloc_r+0x28>
 8007400:	230c      	movs	r3, #12
 8007402:	2600      	movs	r6, #0
 8007404:	603b      	str	r3, [r7, #0]
 8007406:	4630      	mov	r0, r6
 8007408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074e0 <_malloc_r+0xfc>
 8007410:	f000 f868 	bl	80074e4 <__malloc_lock>
 8007414:	f8d8 3000 	ldr.w	r3, [r8]
 8007418:	461c      	mov	r4, r3
 800741a:	bb5c      	cbnz	r4, 8007474 <_malloc_r+0x90>
 800741c:	4629      	mov	r1, r5
 800741e:	4638      	mov	r0, r7
 8007420:	f7ff ffc0 	bl	80073a4 <sbrk_aligned>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	4604      	mov	r4, r0
 8007428:	d155      	bne.n	80074d6 <_malloc_r+0xf2>
 800742a:	f8d8 4000 	ldr.w	r4, [r8]
 800742e:	4626      	mov	r6, r4
 8007430:	2e00      	cmp	r6, #0
 8007432:	d145      	bne.n	80074c0 <_malloc_r+0xdc>
 8007434:	2c00      	cmp	r4, #0
 8007436:	d048      	beq.n	80074ca <_malloc_r+0xe6>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	4631      	mov	r1, r6
 800743c:	4638      	mov	r0, r7
 800743e:	eb04 0903 	add.w	r9, r4, r3
 8007442:	f000 fc71 	bl	8007d28 <_sbrk_r>
 8007446:	4581      	cmp	r9, r0
 8007448:	d13f      	bne.n	80074ca <_malloc_r+0xe6>
 800744a:	6821      	ldr	r1, [r4, #0]
 800744c:	4638      	mov	r0, r7
 800744e:	1a6d      	subs	r5, r5, r1
 8007450:	4629      	mov	r1, r5
 8007452:	f7ff ffa7 	bl	80073a4 <sbrk_aligned>
 8007456:	3001      	adds	r0, #1
 8007458:	d037      	beq.n	80074ca <_malloc_r+0xe6>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	442b      	add	r3, r5
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	f8d8 3000 	ldr.w	r3, [r8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d038      	beq.n	80074da <_malloc_r+0xf6>
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	42a2      	cmp	r2, r4
 800746c:	d12b      	bne.n	80074c6 <_malloc_r+0xe2>
 800746e:	2200      	movs	r2, #0
 8007470:	605a      	str	r2, [r3, #4]
 8007472:	e00f      	b.n	8007494 <_malloc_r+0xb0>
 8007474:	6822      	ldr	r2, [r4, #0]
 8007476:	1b52      	subs	r2, r2, r5
 8007478:	d41f      	bmi.n	80074ba <_malloc_r+0xd6>
 800747a:	2a0b      	cmp	r2, #11
 800747c:	d917      	bls.n	80074ae <_malloc_r+0xca>
 800747e:	1961      	adds	r1, r4, r5
 8007480:	42a3      	cmp	r3, r4
 8007482:	6025      	str	r5, [r4, #0]
 8007484:	bf18      	it	ne
 8007486:	6059      	strne	r1, [r3, #4]
 8007488:	6863      	ldr	r3, [r4, #4]
 800748a:	bf08      	it	eq
 800748c:	f8c8 1000 	streq.w	r1, [r8]
 8007490:	5162      	str	r2, [r4, r5]
 8007492:	604b      	str	r3, [r1, #4]
 8007494:	4638      	mov	r0, r7
 8007496:	f104 060b 	add.w	r6, r4, #11
 800749a:	f000 f829 	bl	80074f0 <__malloc_unlock>
 800749e:	f026 0607 	bic.w	r6, r6, #7
 80074a2:	1d23      	adds	r3, r4, #4
 80074a4:	1af2      	subs	r2, r6, r3
 80074a6:	d0ae      	beq.n	8007406 <_malloc_r+0x22>
 80074a8:	1b9b      	subs	r3, r3, r6
 80074aa:	50a3      	str	r3, [r4, r2]
 80074ac:	e7ab      	b.n	8007406 <_malloc_r+0x22>
 80074ae:	42a3      	cmp	r3, r4
 80074b0:	6862      	ldr	r2, [r4, #4]
 80074b2:	d1dd      	bne.n	8007470 <_malloc_r+0x8c>
 80074b4:	f8c8 2000 	str.w	r2, [r8]
 80074b8:	e7ec      	b.n	8007494 <_malloc_r+0xb0>
 80074ba:	4623      	mov	r3, r4
 80074bc:	6864      	ldr	r4, [r4, #4]
 80074be:	e7ac      	b.n	800741a <_malloc_r+0x36>
 80074c0:	4634      	mov	r4, r6
 80074c2:	6876      	ldr	r6, [r6, #4]
 80074c4:	e7b4      	b.n	8007430 <_malloc_r+0x4c>
 80074c6:	4613      	mov	r3, r2
 80074c8:	e7cc      	b.n	8007464 <_malloc_r+0x80>
 80074ca:	230c      	movs	r3, #12
 80074cc:	4638      	mov	r0, r7
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	f000 f80e 	bl	80074f0 <__malloc_unlock>
 80074d4:	e797      	b.n	8007406 <_malloc_r+0x22>
 80074d6:	6025      	str	r5, [r4, #0]
 80074d8:	e7dc      	b.n	8007494 <_malloc_r+0xb0>
 80074da:	605b      	str	r3, [r3, #4]
 80074dc:	deff      	udf	#255	; 0xff
 80074de:	bf00      	nop
 80074e0:	2000859c 	.word	0x2000859c

080074e4 <__malloc_lock>:
 80074e4:	4801      	ldr	r0, [pc, #4]	; (80074ec <__malloc_lock+0x8>)
 80074e6:	f7ff bf05 	b.w	80072f4 <__retarget_lock_acquire_recursive>
 80074ea:	bf00      	nop
 80074ec:	20008598 	.word	0x20008598

080074f0 <__malloc_unlock>:
 80074f0:	4801      	ldr	r0, [pc, #4]	; (80074f8 <__malloc_unlock+0x8>)
 80074f2:	f7ff bf00 	b.w	80072f6 <__retarget_lock_release_recursive>
 80074f6:	bf00      	nop
 80074f8:	20008598 	.word	0x20008598

080074fc <__sfputc_r>:
 80074fc:	6893      	ldr	r3, [r2, #8]
 80074fe:	b410      	push	{r4}
 8007500:	3b01      	subs	r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	6093      	str	r3, [r2, #8]
 8007506:	da07      	bge.n	8007518 <__sfputc_r+0x1c>
 8007508:	6994      	ldr	r4, [r2, #24]
 800750a:	42a3      	cmp	r3, r4
 800750c:	db01      	blt.n	8007512 <__sfputc_r+0x16>
 800750e:	290a      	cmp	r1, #10
 8007510:	d102      	bne.n	8007518 <__sfputc_r+0x1c>
 8007512:	bc10      	pop	{r4}
 8007514:	f000 bb72 	b.w	8007bfc <__swbuf_r>
 8007518:	6813      	ldr	r3, [r2, #0]
 800751a:	1c58      	adds	r0, r3, #1
 800751c:	6010      	str	r0, [r2, #0]
 800751e:	7019      	strb	r1, [r3, #0]
 8007520:	4608      	mov	r0, r1
 8007522:	bc10      	pop	{r4}
 8007524:	4770      	bx	lr

08007526 <__sfputs_r>:
 8007526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007528:	4606      	mov	r6, r0
 800752a:	460f      	mov	r7, r1
 800752c:	4614      	mov	r4, r2
 800752e:	18d5      	adds	r5, r2, r3
 8007530:	42ac      	cmp	r4, r5
 8007532:	d101      	bne.n	8007538 <__sfputs_r+0x12>
 8007534:	2000      	movs	r0, #0
 8007536:	e007      	b.n	8007548 <__sfputs_r+0x22>
 8007538:	463a      	mov	r2, r7
 800753a:	4630      	mov	r0, r6
 800753c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007540:	f7ff ffdc 	bl	80074fc <__sfputc_r>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d1f3      	bne.n	8007530 <__sfputs_r+0xa>
 8007548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800754c <_vfiprintf_r>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	460d      	mov	r5, r1
 8007552:	4614      	mov	r4, r2
 8007554:	4698      	mov	r8, r3
 8007556:	4606      	mov	r6, r0
 8007558:	b09d      	sub	sp, #116	; 0x74
 800755a:	b118      	cbz	r0, 8007564 <_vfiprintf_r+0x18>
 800755c:	6a03      	ldr	r3, [r0, #32]
 800755e:	b90b      	cbnz	r3, 8007564 <_vfiprintf_r+0x18>
 8007560:	f7ff fdba 	bl	80070d8 <__sinit>
 8007564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007566:	07d9      	lsls	r1, r3, #31
 8007568:	d405      	bmi.n	8007576 <_vfiprintf_r+0x2a>
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	059a      	lsls	r2, r3, #22
 800756e:	d402      	bmi.n	8007576 <_vfiprintf_r+0x2a>
 8007570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007572:	f7ff febf 	bl	80072f4 <__retarget_lock_acquire_recursive>
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	071b      	lsls	r3, r3, #28
 800757a:	d501      	bpl.n	8007580 <_vfiprintf_r+0x34>
 800757c:	692b      	ldr	r3, [r5, #16]
 800757e:	b99b      	cbnz	r3, 80075a8 <_vfiprintf_r+0x5c>
 8007580:	4629      	mov	r1, r5
 8007582:	4630      	mov	r0, r6
 8007584:	f000 fb78 	bl	8007c78 <__swsetup_r>
 8007588:	b170      	cbz	r0, 80075a8 <_vfiprintf_r+0x5c>
 800758a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800758c:	07dc      	lsls	r4, r3, #31
 800758e:	d504      	bpl.n	800759a <_vfiprintf_r+0x4e>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	b01d      	add	sp, #116	; 0x74
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	89ab      	ldrh	r3, [r5, #12]
 800759c:	0598      	lsls	r0, r3, #22
 800759e:	d4f7      	bmi.n	8007590 <_vfiprintf_r+0x44>
 80075a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a2:	f7ff fea8 	bl	80072f6 <__retarget_lock_release_recursive>
 80075a6:	e7f3      	b.n	8007590 <_vfiprintf_r+0x44>
 80075a8:	2300      	movs	r3, #0
 80075aa:	9309      	str	r3, [sp, #36]	; 0x24
 80075ac:	2320      	movs	r3, #32
 80075ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075b2:	2330      	movs	r3, #48	; 0x30
 80075b4:	f04f 0901 	mov.w	r9, #1
 80075b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800776c <_vfiprintf_r+0x220>
 80075c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075c4:	4623      	mov	r3, r4
 80075c6:	469a      	mov	sl, r3
 80075c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075cc:	b10a      	cbz	r2, 80075d2 <_vfiprintf_r+0x86>
 80075ce:	2a25      	cmp	r2, #37	; 0x25
 80075d0:	d1f9      	bne.n	80075c6 <_vfiprintf_r+0x7a>
 80075d2:	ebba 0b04 	subs.w	fp, sl, r4
 80075d6:	d00b      	beq.n	80075f0 <_vfiprintf_r+0xa4>
 80075d8:	465b      	mov	r3, fp
 80075da:	4622      	mov	r2, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	4630      	mov	r0, r6
 80075e0:	f7ff ffa1 	bl	8007526 <__sfputs_r>
 80075e4:	3001      	adds	r0, #1
 80075e6:	f000 80a9 	beq.w	800773c <_vfiprintf_r+0x1f0>
 80075ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ec:	445a      	add	r2, fp
 80075ee:	9209      	str	r2, [sp, #36]	; 0x24
 80075f0:	f89a 3000 	ldrb.w	r3, [sl]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80a1 	beq.w	800773c <_vfiprintf_r+0x1f0>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007604:	f10a 0a01 	add.w	sl, sl, #1
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	9307      	str	r3, [sp, #28]
 800760c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007610:	931a      	str	r3, [sp, #104]	; 0x68
 8007612:	4654      	mov	r4, sl
 8007614:	2205      	movs	r2, #5
 8007616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761a:	4854      	ldr	r0, [pc, #336]	; (800776c <_vfiprintf_r+0x220>)
 800761c:	f000 fb94 	bl	8007d48 <memchr>
 8007620:	9a04      	ldr	r2, [sp, #16]
 8007622:	b9d8      	cbnz	r0, 800765c <_vfiprintf_r+0x110>
 8007624:	06d1      	lsls	r1, r2, #27
 8007626:	bf44      	itt	mi
 8007628:	2320      	movmi	r3, #32
 800762a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800762e:	0713      	lsls	r3, r2, #28
 8007630:	bf44      	itt	mi
 8007632:	232b      	movmi	r3, #43	; 0x2b
 8007634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007638:	f89a 3000 	ldrb.w	r3, [sl]
 800763c:	2b2a      	cmp	r3, #42	; 0x2a
 800763e:	d015      	beq.n	800766c <_vfiprintf_r+0x120>
 8007640:	4654      	mov	r4, sl
 8007642:	2000      	movs	r0, #0
 8007644:	f04f 0c0a 	mov.w	ip, #10
 8007648:	9a07      	ldr	r2, [sp, #28]
 800764a:	4621      	mov	r1, r4
 800764c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007650:	3b30      	subs	r3, #48	; 0x30
 8007652:	2b09      	cmp	r3, #9
 8007654:	d94d      	bls.n	80076f2 <_vfiprintf_r+0x1a6>
 8007656:	b1b0      	cbz	r0, 8007686 <_vfiprintf_r+0x13a>
 8007658:	9207      	str	r2, [sp, #28]
 800765a:	e014      	b.n	8007686 <_vfiprintf_r+0x13a>
 800765c:	eba0 0308 	sub.w	r3, r0, r8
 8007660:	fa09 f303 	lsl.w	r3, r9, r3
 8007664:	4313      	orrs	r3, r2
 8007666:	46a2      	mov	sl, r4
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	e7d2      	b.n	8007612 <_vfiprintf_r+0xc6>
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	1d19      	adds	r1, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	9103      	str	r1, [sp, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	bfbb      	ittet	lt
 8007678:	425b      	neglt	r3, r3
 800767a:	f042 0202 	orrlt.w	r2, r2, #2
 800767e:	9307      	strge	r3, [sp, #28]
 8007680:	9307      	strlt	r3, [sp, #28]
 8007682:	bfb8      	it	lt
 8007684:	9204      	strlt	r2, [sp, #16]
 8007686:	7823      	ldrb	r3, [r4, #0]
 8007688:	2b2e      	cmp	r3, #46	; 0x2e
 800768a:	d10c      	bne.n	80076a6 <_vfiprintf_r+0x15a>
 800768c:	7863      	ldrb	r3, [r4, #1]
 800768e:	2b2a      	cmp	r3, #42	; 0x2a
 8007690:	d134      	bne.n	80076fc <_vfiprintf_r+0x1b0>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	3402      	adds	r4, #2
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	9203      	str	r2, [sp, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	bfb8      	it	lt
 80076a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80076a4:	9305      	str	r3, [sp, #20]
 80076a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007770 <_vfiprintf_r+0x224>
 80076aa:	2203      	movs	r2, #3
 80076ac:	4650      	mov	r0, sl
 80076ae:	7821      	ldrb	r1, [r4, #0]
 80076b0:	f000 fb4a 	bl	8007d48 <memchr>
 80076b4:	b138      	cbz	r0, 80076c6 <_vfiprintf_r+0x17a>
 80076b6:	2240      	movs	r2, #64	; 0x40
 80076b8:	9b04      	ldr	r3, [sp, #16]
 80076ba:	eba0 000a 	sub.w	r0, r0, sl
 80076be:	4082      	lsls	r2, r0
 80076c0:	4313      	orrs	r3, r2
 80076c2:	3401      	adds	r4, #1
 80076c4:	9304      	str	r3, [sp, #16]
 80076c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ca:	2206      	movs	r2, #6
 80076cc:	4829      	ldr	r0, [pc, #164]	; (8007774 <_vfiprintf_r+0x228>)
 80076ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076d2:	f000 fb39 	bl	8007d48 <memchr>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d03f      	beq.n	800775a <_vfiprintf_r+0x20e>
 80076da:	4b27      	ldr	r3, [pc, #156]	; (8007778 <_vfiprintf_r+0x22c>)
 80076dc:	bb1b      	cbnz	r3, 8007726 <_vfiprintf_r+0x1da>
 80076de:	9b03      	ldr	r3, [sp, #12]
 80076e0:	3307      	adds	r3, #7
 80076e2:	f023 0307 	bic.w	r3, r3, #7
 80076e6:	3308      	adds	r3, #8
 80076e8:	9303      	str	r3, [sp, #12]
 80076ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ec:	443b      	add	r3, r7
 80076ee:	9309      	str	r3, [sp, #36]	; 0x24
 80076f0:	e768      	b.n	80075c4 <_vfiprintf_r+0x78>
 80076f2:	460c      	mov	r4, r1
 80076f4:	2001      	movs	r0, #1
 80076f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076fa:	e7a6      	b.n	800764a <_vfiprintf_r+0xfe>
 80076fc:	2300      	movs	r3, #0
 80076fe:	f04f 0c0a 	mov.w	ip, #10
 8007702:	4619      	mov	r1, r3
 8007704:	3401      	adds	r4, #1
 8007706:	9305      	str	r3, [sp, #20]
 8007708:	4620      	mov	r0, r4
 800770a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800770e:	3a30      	subs	r2, #48	; 0x30
 8007710:	2a09      	cmp	r2, #9
 8007712:	d903      	bls.n	800771c <_vfiprintf_r+0x1d0>
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0c6      	beq.n	80076a6 <_vfiprintf_r+0x15a>
 8007718:	9105      	str	r1, [sp, #20]
 800771a:	e7c4      	b.n	80076a6 <_vfiprintf_r+0x15a>
 800771c:	4604      	mov	r4, r0
 800771e:	2301      	movs	r3, #1
 8007720:	fb0c 2101 	mla	r1, ip, r1, r2
 8007724:	e7f0      	b.n	8007708 <_vfiprintf_r+0x1bc>
 8007726:	ab03      	add	r3, sp, #12
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	462a      	mov	r2, r5
 800772c:	4630      	mov	r0, r6
 800772e:	4b13      	ldr	r3, [pc, #76]	; (800777c <_vfiprintf_r+0x230>)
 8007730:	a904      	add	r1, sp, #16
 8007732:	f3af 8000 	nop.w
 8007736:	4607      	mov	r7, r0
 8007738:	1c78      	adds	r0, r7, #1
 800773a:	d1d6      	bne.n	80076ea <_vfiprintf_r+0x19e>
 800773c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800773e:	07d9      	lsls	r1, r3, #31
 8007740:	d405      	bmi.n	800774e <_vfiprintf_r+0x202>
 8007742:	89ab      	ldrh	r3, [r5, #12]
 8007744:	059a      	lsls	r2, r3, #22
 8007746:	d402      	bmi.n	800774e <_vfiprintf_r+0x202>
 8007748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800774a:	f7ff fdd4 	bl	80072f6 <__retarget_lock_release_recursive>
 800774e:	89ab      	ldrh	r3, [r5, #12]
 8007750:	065b      	lsls	r3, r3, #25
 8007752:	f53f af1d 	bmi.w	8007590 <_vfiprintf_r+0x44>
 8007756:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007758:	e71c      	b.n	8007594 <_vfiprintf_r+0x48>
 800775a:	ab03      	add	r3, sp, #12
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	462a      	mov	r2, r5
 8007760:	4630      	mov	r0, r6
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <_vfiprintf_r+0x230>)
 8007764:	a904      	add	r1, sp, #16
 8007766:	f000 f87d 	bl	8007864 <_printf_i>
 800776a:	e7e4      	b.n	8007736 <_vfiprintf_r+0x1ea>
 800776c:	08008eda 	.word	0x08008eda
 8007770:	08008ee0 	.word	0x08008ee0
 8007774:	08008ee4 	.word	0x08008ee4
 8007778:	00000000 	.word	0x00000000
 800777c:	08007527 	.word	0x08007527

08007780 <_printf_common>:
 8007780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007784:	4616      	mov	r6, r2
 8007786:	4699      	mov	r9, r3
 8007788:	688a      	ldr	r2, [r1, #8]
 800778a:	690b      	ldr	r3, [r1, #16]
 800778c:	4607      	mov	r7, r0
 800778e:	4293      	cmp	r3, r2
 8007790:	bfb8      	it	lt
 8007792:	4613      	movlt	r3, r2
 8007794:	6033      	str	r3, [r6, #0]
 8007796:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800779a:	460c      	mov	r4, r1
 800779c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077a0:	b10a      	cbz	r2, 80077a6 <_printf_common+0x26>
 80077a2:	3301      	adds	r3, #1
 80077a4:	6033      	str	r3, [r6, #0]
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	0699      	lsls	r1, r3, #26
 80077aa:	bf42      	ittt	mi
 80077ac:	6833      	ldrmi	r3, [r6, #0]
 80077ae:	3302      	addmi	r3, #2
 80077b0:	6033      	strmi	r3, [r6, #0]
 80077b2:	6825      	ldr	r5, [r4, #0]
 80077b4:	f015 0506 	ands.w	r5, r5, #6
 80077b8:	d106      	bne.n	80077c8 <_printf_common+0x48>
 80077ba:	f104 0a19 	add.w	sl, r4, #25
 80077be:	68e3      	ldr	r3, [r4, #12]
 80077c0:	6832      	ldr	r2, [r6, #0]
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	42ab      	cmp	r3, r5
 80077c6:	dc2b      	bgt.n	8007820 <_printf_common+0xa0>
 80077c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077cc:	1e13      	subs	r3, r2, #0
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	bf18      	it	ne
 80077d2:	2301      	movne	r3, #1
 80077d4:	0692      	lsls	r2, r2, #26
 80077d6:	d430      	bmi.n	800783a <_printf_common+0xba>
 80077d8:	4649      	mov	r1, r9
 80077da:	4638      	mov	r0, r7
 80077dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077e0:	47c0      	blx	r8
 80077e2:	3001      	adds	r0, #1
 80077e4:	d023      	beq.n	800782e <_printf_common+0xae>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	6922      	ldr	r2, [r4, #16]
 80077ea:	f003 0306 	and.w	r3, r3, #6
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	bf14      	ite	ne
 80077f2:	2500      	movne	r5, #0
 80077f4:	6833      	ldreq	r3, [r6, #0]
 80077f6:	f04f 0600 	mov.w	r6, #0
 80077fa:	bf08      	it	eq
 80077fc:	68e5      	ldreq	r5, [r4, #12]
 80077fe:	f104 041a 	add.w	r4, r4, #26
 8007802:	bf08      	it	eq
 8007804:	1aed      	subeq	r5, r5, r3
 8007806:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800780a:	bf08      	it	eq
 800780c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007810:	4293      	cmp	r3, r2
 8007812:	bfc4      	itt	gt
 8007814:	1a9b      	subgt	r3, r3, r2
 8007816:	18ed      	addgt	r5, r5, r3
 8007818:	42b5      	cmp	r5, r6
 800781a:	d11a      	bne.n	8007852 <_printf_common+0xd2>
 800781c:	2000      	movs	r0, #0
 800781e:	e008      	b.n	8007832 <_printf_common+0xb2>
 8007820:	2301      	movs	r3, #1
 8007822:	4652      	mov	r2, sl
 8007824:	4649      	mov	r1, r9
 8007826:	4638      	mov	r0, r7
 8007828:	47c0      	blx	r8
 800782a:	3001      	adds	r0, #1
 800782c:	d103      	bne.n	8007836 <_printf_common+0xb6>
 800782e:	f04f 30ff 	mov.w	r0, #4294967295
 8007832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007836:	3501      	adds	r5, #1
 8007838:	e7c1      	b.n	80077be <_printf_common+0x3e>
 800783a:	2030      	movs	r0, #48	; 0x30
 800783c:	18e1      	adds	r1, r4, r3
 800783e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007848:	4422      	add	r2, r4
 800784a:	3302      	adds	r3, #2
 800784c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007850:	e7c2      	b.n	80077d8 <_printf_common+0x58>
 8007852:	2301      	movs	r3, #1
 8007854:	4622      	mov	r2, r4
 8007856:	4649      	mov	r1, r9
 8007858:	4638      	mov	r0, r7
 800785a:	47c0      	blx	r8
 800785c:	3001      	adds	r0, #1
 800785e:	d0e6      	beq.n	800782e <_printf_common+0xae>
 8007860:	3601      	adds	r6, #1
 8007862:	e7d9      	b.n	8007818 <_printf_common+0x98>

08007864 <_printf_i>:
 8007864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	7e0f      	ldrb	r7, [r1, #24]
 800786a:	4691      	mov	r9, r2
 800786c:	2f78      	cmp	r7, #120	; 0x78
 800786e:	4680      	mov	r8, r0
 8007870:	460c      	mov	r4, r1
 8007872:	469a      	mov	sl, r3
 8007874:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800787a:	d807      	bhi.n	800788c <_printf_i+0x28>
 800787c:	2f62      	cmp	r7, #98	; 0x62
 800787e:	d80a      	bhi.n	8007896 <_printf_i+0x32>
 8007880:	2f00      	cmp	r7, #0
 8007882:	f000 80d5 	beq.w	8007a30 <_printf_i+0x1cc>
 8007886:	2f58      	cmp	r7, #88	; 0x58
 8007888:	f000 80c1 	beq.w	8007a0e <_printf_i+0x1aa>
 800788c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007894:	e03a      	b.n	800790c <_printf_i+0xa8>
 8007896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800789a:	2b15      	cmp	r3, #21
 800789c:	d8f6      	bhi.n	800788c <_printf_i+0x28>
 800789e:	a101      	add	r1, pc, #4	; (adr r1, 80078a4 <_printf_i+0x40>)
 80078a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078a4:	080078fd 	.word	0x080078fd
 80078a8:	08007911 	.word	0x08007911
 80078ac:	0800788d 	.word	0x0800788d
 80078b0:	0800788d 	.word	0x0800788d
 80078b4:	0800788d 	.word	0x0800788d
 80078b8:	0800788d 	.word	0x0800788d
 80078bc:	08007911 	.word	0x08007911
 80078c0:	0800788d 	.word	0x0800788d
 80078c4:	0800788d 	.word	0x0800788d
 80078c8:	0800788d 	.word	0x0800788d
 80078cc:	0800788d 	.word	0x0800788d
 80078d0:	08007a17 	.word	0x08007a17
 80078d4:	0800793d 	.word	0x0800793d
 80078d8:	080079d1 	.word	0x080079d1
 80078dc:	0800788d 	.word	0x0800788d
 80078e0:	0800788d 	.word	0x0800788d
 80078e4:	08007a39 	.word	0x08007a39
 80078e8:	0800788d 	.word	0x0800788d
 80078ec:	0800793d 	.word	0x0800793d
 80078f0:	0800788d 	.word	0x0800788d
 80078f4:	0800788d 	.word	0x0800788d
 80078f8:	080079d9 	.word	0x080079d9
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	1d1a      	adds	r2, r3, #4
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	602a      	str	r2, [r5, #0]
 8007904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800790c:	2301      	movs	r3, #1
 800790e:	e0a0      	b.n	8007a52 <_printf_i+0x1ee>
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	682b      	ldr	r3, [r5, #0]
 8007914:	0607      	lsls	r7, r0, #24
 8007916:	f103 0104 	add.w	r1, r3, #4
 800791a:	6029      	str	r1, [r5, #0]
 800791c:	d501      	bpl.n	8007922 <_printf_i+0xbe>
 800791e:	681e      	ldr	r6, [r3, #0]
 8007920:	e003      	b.n	800792a <_printf_i+0xc6>
 8007922:	0646      	lsls	r6, r0, #25
 8007924:	d5fb      	bpl.n	800791e <_printf_i+0xba>
 8007926:	f9b3 6000 	ldrsh.w	r6, [r3]
 800792a:	2e00      	cmp	r6, #0
 800792c:	da03      	bge.n	8007936 <_printf_i+0xd2>
 800792e:	232d      	movs	r3, #45	; 0x2d
 8007930:	4276      	negs	r6, r6
 8007932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007936:	230a      	movs	r3, #10
 8007938:	4859      	ldr	r0, [pc, #356]	; (8007aa0 <_printf_i+0x23c>)
 800793a:	e012      	b.n	8007962 <_printf_i+0xfe>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	6820      	ldr	r0, [r4, #0]
 8007940:	1d19      	adds	r1, r3, #4
 8007942:	6029      	str	r1, [r5, #0]
 8007944:	0605      	lsls	r5, r0, #24
 8007946:	d501      	bpl.n	800794c <_printf_i+0xe8>
 8007948:	681e      	ldr	r6, [r3, #0]
 800794a:	e002      	b.n	8007952 <_printf_i+0xee>
 800794c:	0641      	lsls	r1, r0, #25
 800794e:	d5fb      	bpl.n	8007948 <_printf_i+0xe4>
 8007950:	881e      	ldrh	r6, [r3, #0]
 8007952:	2f6f      	cmp	r7, #111	; 0x6f
 8007954:	bf0c      	ite	eq
 8007956:	2308      	moveq	r3, #8
 8007958:	230a      	movne	r3, #10
 800795a:	4851      	ldr	r0, [pc, #324]	; (8007aa0 <_printf_i+0x23c>)
 800795c:	2100      	movs	r1, #0
 800795e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007962:	6865      	ldr	r5, [r4, #4]
 8007964:	2d00      	cmp	r5, #0
 8007966:	bfa8      	it	ge
 8007968:	6821      	ldrge	r1, [r4, #0]
 800796a:	60a5      	str	r5, [r4, #8]
 800796c:	bfa4      	itt	ge
 800796e:	f021 0104 	bicge.w	r1, r1, #4
 8007972:	6021      	strge	r1, [r4, #0]
 8007974:	b90e      	cbnz	r6, 800797a <_printf_i+0x116>
 8007976:	2d00      	cmp	r5, #0
 8007978:	d04b      	beq.n	8007a12 <_printf_i+0x1ae>
 800797a:	4615      	mov	r5, r2
 800797c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007980:	fb03 6711 	mls	r7, r3, r1, r6
 8007984:	5dc7      	ldrb	r7, [r0, r7]
 8007986:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800798a:	4637      	mov	r7, r6
 800798c:	42bb      	cmp	r3, r7
 800798e:	460e      	mov	r6, r1
 8007990:	d9f4      	bls.n	800797c <_printf_i+0x118>
 8007992:	2b08      	cmp	r3, #8
 8007994:	d10b      	bne.n	80079ae <_printf_i+0x14a>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	07de      	lsls	r6, r3, #31
 800799a:	d508      	bpl.n	80079ae <_printf_i+0x14a>
 800799c:	6923      	ldr	r3, [r4, #16]
 800799e:	6861      	ldr	r1, [r4, #4]
 80079a0:	4299      	cmp	r1, r3
 80079a2:	bfde      	ittt	le
 80079a4:	2330      	movle	r3, #48	; 0x30
 80079a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079ae:	1b52      	subs	r2, r2, r5
 80079b0:	6122      	str	r2, [r4, #16]
 80079b2:	464b      	mov	r3, r9
 80079b4:	4621      	mov	r1, r4
 80079b6:	4640      	mov	r0, r8
 80079b8:	f8cd a000 	str.w	sl, [sp]
 80079bc:	aa03      	add	r2, sp, #12
 80079be:	f7ff fedf 	bl	8007780 <_printf_common>
 80079c2:	3001      	adds	r0, #1
 80079c4:	d14a      	bne.n	8007a5c <_printf_i+0x1f8>
 80079c6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ca:	b004      	add	sp, #16
 80079cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	f043 0320 	orr.w	r3, r3, #32
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	2778      	movs	r7, #120	; 0x78
 80079da:	4832      	ldr	r0, [pc, #200]	; (8007aa4 <_printf_i+0x240>)
 80079dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	6829      	ldr	r1, [r5, #0]
 80079e4:	061f      	lsls	r7, r3, #24
 80079e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80079ea:	d402      	bmi.n	80079f2 <_printf_i+0x18e>
 80079ec:	065f      	lsls	r7, r3, #25
 80079ee:	bf48      	it	mi
 80079f0:	b2b6      	uxthmi	r6, r6
 80079f2:	07df      	lsls	r7, r3, #31
 80079f4:	bf48      	it	mi
 80079f6:	f043 0320 	orrmi.w	r3, r3, #32
 80079fa:	6029      	str	r1, [r5, #0]
 80079fc:	bf48      	it	mi
 80079fe:	6023      	strmi	r3, [r4, #0]
 8007a00:	b91e      	cbnz	r6, 8007a0a <_printf_i+0x1a6>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	f023 0320 	bic.w	r3, r3, #32
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	2310      	movs	r3, #16
 8007a0c:	e7a6      	b.n	800795c <_printf_i+0xf8>
 8007a0e:	4824      	ldr	r0, [pc, #144]	; (8007aa0 <_printf_i+0x23c>)
 8007a10:	e7e4      	b.n	80079dc <_printf_i+0x178>
 8007a12:	4615      	mov	r5, r2
 8007a14:	e7bd      	b.n	8007992 <_printf_i+0x12e>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	6826      	ldr	r6, [r4, #0]
 8007a1a:	1d18      	adds	r0, r3, #4
 8007a1c:	6961      	ldr	r1, [r4, #20]
 8007a1e:	6028      	str	r0, [r5, #0]
 8007a20:	0635      	lsls	r5, r6, #24
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	d501      	bpl.n	8007a2a <_printf_i+0x1c6>
 8007a26:	6019      	str	r1, [r3, #0]
 8007a28:	e002      	b.n	8007a30 <_printf_i+0x1cc>
 8007a2a:	0670      	lsls	r0, r6, #25
 8007a2c:	d5fb      	bpl.n	8007a26 <_printf_i+0x1c2>
 8007a2e:	8019      	strh	r1, [r3, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	4615      	mov	r5, r2
 8007a34:	6123      	str	r3, [r4, #16]
 8007a36:	e7bc      	b.n	80079b2 <_printf_i+0x14e>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	1d1a      	adds	r2, r3, #4
 8007a3e:	602a      	str	r2, [r5, #0]
 8007a40:	681d      	ldr	r5, [r3, #0]
 8007a42:	6862      	ldr	r2, [r4, #4]
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 f97f 	bl	8007d48 <memchr>
 8007a4a:	b108      	cbz	r0, 8007a50 <_printf_i+0x1ec>
 8007a4c:	1b40      	subs	r0, r0, r5
 8007a4e:	6060      	str	r0, [r4, #4]
 8007a50:	6863      	ldr	r3, [r4, #4]
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	2300      	movs	r3, #0
 8007a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a5a:	e7aa      	b.n	80079b2 <_printf_i+0x14e>
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	4649      	mov	r1, r9
 8007a60:	4640      	mov	r0, r8
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	47d0      	blx	sl
 8007a66:	3001      	adds	r0, #1
 8007a68:	d0ad      	beq.n	80079c6 <_printf_i+0x162>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	079b      	lsls	r3, r3, #30
 8007a6e:	d413      	bmi.n	8007a98 <_printf_i+0x234>
 8007a70:	68e0      	ldr	r0, [r4, #12]
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	4298      	cmp	r0, r3
 8007a76:	bfb8      	it	lt
 8007a78:	4618      	movlt	r0, r3
 8007a7a:	e7a6      	b.n	80079ca <_printf_i+0x166>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4632      	mov	r2, r6
 8007a80:	4649      	mov	r1, r9
 8007a82:	4640      	mov	r0, r8
 8007a84:	47d0      	blx	sl
 8007a86:	3001      	adds	r0, #1
 8007a88:	d09d      	beq.n	80079c6 <_printf_i+0x162>
 8007a8a:	3501      	adds	r5, #1
 8007a8c:	68e3      	ldr	r3, [r4, #12]
 8007a8e:	9903      	ldr	r1, [sp, #12]
 8007a90:	1a5b      	subs	r3, r3, r1
 8007a92:	42ab      	cmp	r3, r5
 8007a94:	dcf2      	bgt.n	8007a7c <_printf_i+0x218>
 8007a96:	e7eb      	b.n	8007a70 <_printf_i+0x20c>
 8007a98:	2500      	movs	r5, #0
 8007a9a:	f104 0619 	add.w	r6, r4, #25
 8007a9e:	e7f5      	b.n	8007a8c <_printf_i+0x228>
 8007aa0:	08008eeb 	.word	0x08008eeb
 8007aa4:	08008efc 	.word	0x08008efc

08007aa8 <__sflush_r>:
 8007aa8:	898a      	ldrh	r2, [r1, #12]
 8007aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aac:	4605      	mov	r5, r0
 8007aae:	0710      	lsls	r0, r2, #28
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	d457      	bmi.n	8007b64 <__sflush_r+0xbc>
 8007ab4:	684b      	ldr	r3, [r1, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	dc04      	bgt.n	8007ac4 <__sflush_r+0x1c>
 8007aba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dc01      	bgt.n	8007ac4 <__sflush_r+0x1c>
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	d0fa      	beq.n	8007ac0 <__sflush_r+0x18>
 8007aca:	2300      	movs	r3, #0
 8007acc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ad0:	682f      	ldr	r7, [r5, #0]
 8007ad2:	6a21      	ldr	r1, [r4, #32]
 8007ad4:	602b      	str	r3, [r5, #0]
 8007ad6:	d032      	beq.n	8007b3e <__sflush_r+0x96>
 8007ad8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	075a      	lsls	r2, r3, #29
 8007ade:	d505      	bpl.n	8007aec <__sflush_r+0x44>
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	1ac0      	subs	r0, r0, r3
 8007ae4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ae6:	b10b      	cbz	r3, 8007aec <__sflush_r+0x44>
 8007ae8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aea:	1ac0      	subs	r0, r0, r3
 8007aec:	2300      	movs	r3, #0
 8007aee:	4602      	mov	r2, r0
 8007af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007af2:	4628      	mov	r0, r5
 8007af4:	6a21      	ldr	r1, [r4, #32]
 8007af6:	47b0      	blx	r6
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	d106      	bne.n	8007b0c <__sflush_r+0x64>
 8007afe:	6829      	ldr	r1, [r5, #0]
 8007b00:	291d      	cmp	r1, #29
 8007b02:	d82b      	bhi.n	8007b5c <__sflush_r+0xb4>
 8007b04:	4a28      	ldr	r2, [pc, #160]	; (8007ba8 <__sflush_r+0x100>)
 8007b06:	410a      	asrs	r2, r1
 8007b08:	07d6      	lsls	r6, r2, #31
 8007b0a:	d427      	bmi.n	8007b5c <__sflush_r+0xb4>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	6062      	str	r2, [r4, #4]
 8007b10:	6922      	ldr	r2, [r4, #16]
 8007b12:	04d9      	lsls	r1, r3, #19
 8007b14:	6022      	str	r2, [r4, #0]
 8007b16:	d504      	bpl.n	8007b22 <__sflush_r+0x7a>
 8007b18:	1c42      	adds	r2, r0, #1
 8007b1a:	d101      	bne.n	8007b20 <__sflush_r+0x78>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b903      	cbnz	r3, 8007b22 <__sflush_r+0x7a>
 8007b20:	6560      	str	r0, [r4, #84]	; 0x54
 8007b22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b24:	602f      	str	r7, [r5, #0]
 8007b26:	2900      	cmp	r1, #0
 8007b28:	d0ca      	beq.n	8007ac0 <__sflush_r+0x18>
 8007b2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	d002      	beq.n	8007b38 <__sflush_r+0x90>
 8007b32:	4628      	mov	r0, r5
 8007b34:	f7ff fbee 	bl	8007314 <_free_r>
 8007b38:	2000      	movs	r0, #0
 8007b3a:	6360      	str	r0, [r4, #52]	; 0x34
 8007b3c:	e7c1      	b.n	8007ac2 <__sflush_r+0x1a>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b0      	blx	r6
 8007b44:	1c41      	adds	r1, r0, #1
 8007b46:	d1c8      	bne.n	8007ada <__sflush_r+0x32>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0c5      	beq.n	8007ada <__sflush_r+0x32>
 8007b4e:	2b1d      	cmp	r3, #29
 8007b50:	d001      	beq.n	8007b56 <__sflush_r+0xae>
 8007b52:	2b16      	cmp	r3, #22
 8007b54:	d101      	bne.n	8007b5a <__sflush_r+0xb2>
 8007b56:	602f      	str	r7, [r5, #0]
 8007b58:	e7b2      	b.n	8007ac0 <__sflush_r+0x18>
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b60:	81a3      	strh	r3, [r4, #12]
 8007b62:	e7ae      	b.n	8007ac2 <__sflush_r+0x1a>
 8007b64:	690f      	ldr	r7, [r1, #16]
 8007b66:	2f00      	cmp	r7, #0
 8007b68:	d0aa      	beq.n	8007ac0 <__sflush_r+0x18>
 8007b6a:	0793      	lsls	r3, r2, #30
 8007b6c:	bf18      	it	ne
 8007b6e:	2300      	movne	r3, #0
 8007b70:	680e      	ldr	r6, [r1, #0]
 8007b72:	bf08      	it	eq
 8007b74:	694b      	ldreq	r3, [r1, #20]
 8007b76:	1bf6      	subs	r6, r6, r7
 8007b78:	600f      	str	r7, [r1, #0]
 8007b7a:	608b      	str	r3, [r1, #8]
 8007b7c:	2e00      	cmp	r6, #0
 8007b7e:	dd9f      	ble.n	8007ac0 <__sflush_r+0x18>
 8007b80:	4633      	mov	r3, r6
 8007b82:	463a      	mov	r2, r7
 8007b84:	4628      	mov	r0, r5
 8007b86:	6a21      	ldr	r1, [r4, #32]
 8007b88:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007b8c:	47e0      	blx	ip
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	dc06      	bgt.n	8007ba0 <__sflush_r+0xf8>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	e790      	b.n	8007ac2 <__sflush_r+0x1a>
 8007ba0:	4407      	add	r7, r0
 8007ba2:	1a36      	subs	r6, r6, r0
 8007ba4:	e7ea      	b.n	8007b7c <__sflush_r+0xd4>
 8007ba6:	bf00      	nop
 8007ba8:	dfbffffe 	.word	0xdfbffffe

08007bac <_fflush_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	690b      	ldr	r3, [r1, #16]
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	b913      	cbnz	r3, 8007bbc <_fflush_r+0x10>
 8007bb6:	2500      	movs	r5, #0
 8007bb8:	4628      	mov	r0, r5
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	b118      	cbz	r0, 8007bc6 <_fflush_r+0x1a>
 8007bbe:	6a03      	ldr	r3, [r0, #32]
 8007bc0:	b90b      	cbnz	r3, 8007bc6 <_fflush_r+0x1a>
 8007bc2:	f7ff fa89 	bl	80070d8 <__sinit>
 8007bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0f3      	beq.n	8007bb6 <_fflush_r+0xa>
 8007bce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bd0:	07d0      	lsls	r0, r2, #31
 8007bd2:	d404      	bmi.n	8007bde <_fflush_r+0x32>
 8007bd4:	0599      	lsls	r1, r3, #22
 8007bd6:	d402      	bmi.n	8007bde <_fflush_r+0x32>
 8007bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bda:	f7ff fb8b 	bl	80072f4 <__retarget_lock_acquire_recursive>
 8007bde:	4628      	mov	r0, r5
 8007be0:	4621      	mov	r1, r4
 8007be2:	f7ff ff61 	bl	8007aa8 <__sflush_r>
 8007be6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007be8:	4605      	mov	r5, r0
 8007bea:	07da      	lsls	r2, r3, #31
 8007bec:	d4e4      	bmi.n	8007bb8 <_fflush_r+0xc>
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	059b      	lsls	r3, r3, #22
 8007bf2:	d4e1      	bmi.n	8007bb8 <_fflush_r+0xc>
 8007bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bf6:	f7ff fb7e 	bl	80072f6 <__retarget_lock_release_recursive>
 8007bfa:	e7dd      	b.n	8007bb8 <_fflush_r+0xc>

08007bfc <__swbuf_r>:
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfe:	460e      	mov	r6, r1
 8007c00:	4614      	mov	r4, r2
 8007c02:	4605      	mov	r5, r0
 8007c04:	b118      	cbz	r0, 8007c0e <__swbuf_r+0x12>
 8007c06:	6a03      	ldr	r3, [r0, #32]
 8007c08:	b90b      	cbnz	r3, 8007c0e <__swbuf_r+0x12>
 8007c0a:	f7ff fa65 	bl	80070d8 <__sinit>
 8007c0e:	69a3      	ldr	r3, [r4, #24]
 8007c10:	60a3      	str	r3, [r4, #8]
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	071a      	lsls	r2, r3, #28
 8007c16:	d525      	bpl.n	8007c64 <__swbuf_r+0x68>
 8007c18:	6923      	ldr	r3, [r4, #16]
 8007c1a:	b31b      	cbz	r3, 8007c64 <__swbuf_r+0x68>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	6922      	ldr	r2, [r4, #16]
 8007c20:	b2f6      	uxtb	r6, r6
 8007c22:	1a98      	subs	r0, r3, r2
 8007c24:	6963      	ldr	r3, [r4, #20]
 8007c26:	4637      	mov	r7, r6
 8007c28:	4283      	cmp	r3, r0
 8007c2a:	dc04      	bgt.n	8007c36 <__swbuf_r+0x3a>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f7ff ffbc 	bl	8007bac <_fflush_r>
 8007c34:	b9e0      	cbnz	r0, 8007c70 <__swbuf_r+0x74>
 8007c36:	68a3      	ldr	r3, [r4, #8]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	60a3      	str	r3, [r4, #8]
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	6022      	str	r2, [r4, #0]
 8007c42:	701e      	strb	r6, [r3, #0]
 8007c44:	6962      	ldr	r2, [r4, #20]
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d004      	beq.n	8007c56 <__swbuf_r+0x5a>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	07db      	lsls	r3, r3, #31
 8007c50:	d506      	bpl.n	8007c60 <__swbuf_r+0x64>
 8007c52:	2e0a      	cmp	r6, #10
 8007c54:	d104      	bne.n	8007c60 <__swbuf_r+0x64>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f7ff ffa7 	bl	8007bac <_fflush_r>
 8007c5e:	b938      	cbnz	r0, 8007c70 <__swbuf_r+0x74>
 8007c60:	4638      	mov	r0, r7
 8007c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c64:	4621      	mov	r1, r4
 8007c66:	4628      	mov	r0, r5
 8007c68:	f000 f806 	bl	8007c78 <__swsetup_r>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d0d5      	beq.n	8007c1c <__swbuf_r+0x20>
 8007c70:	f04f 37ff 	mov.w	r7, #4294967295
 8007c74:	e7f4      	b.n	8007c60 <__swbuf_r+0x64>
	...

08007c78 <__swsetup_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4b2a      	ldr	r3, [pc, #168]	; (8007d24 <__swsetup_r+0xac>)
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	460c      	mov	r4, r1
 8007c82:	b118      	cbz	r0, 8007c8c <__swsetup_r+0x14>
 8007c84:	6a03      	ldr	r3, [r0, #32]
 8007c86:	b90b      	cbnz	r3, 8007c8c <__swsetup_r+0x14>
 8007c88:	f7ff fa26 	bl	80070d8 <__sinit>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c92:	0718      	lsls	r0, r3, #28
 8007c94:	d422      	bmi.n	8007cdc <__swsetup_r+0x64>
 8007c96:	06d9      	lsls	r1, r3, #27
 8007c98:	d407      	bmi.n	8007caa <__swsetup_r+0x32>
 8007c9a:	2309      	movs	r3, #9
 8007c9c:	602b      	str	r3, [r5, #0]
 8007c9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	e034      	b.n	8007d14 <__swsetup_r+0x9c>
 8007caa:	0758      	lsls	r0, r3, #29
 8007cac:	d512      	bpl.n	8007cd4 <__swsetup_r+0x5c>
 8007cae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cb0:	b141      	cbz	r1, 8007cc4 <__swsetup_r+0x4c>
 8007cb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb6:	4299      	cmp	r1, r3
 8007cb8:	d002      	beq.n	8007cc0 <__swsetup_r+0x48>
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f7ff fb2a 	bl	8007314 <_free_r>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	6363      	str	r3, [r4, #52]	; 0x34
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cca:	81a3      	strh	r3, [r4, #12]
 8007ccc:	2300      	movs	r3, #0
 8007cce:	6063      	str	r3, [r4, #4]
 8007cd0:	6923      	ldr	r3, [r4, #16]
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f043 0308 	orr.w	r3, r3, #8
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	6923      	ldr	r3, [r4, #16]
 8007cde:	b94b      	cbnz	r3, 8007cf4 <__swsetup_r+0x7c>
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cea:	d003      	beq.n	8007cf4 <__swsetup_r+0x7c>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f000 f85d 	bl	8007dae <__smakebuf_r>
 8007cf4:	89a0      	ldrh	r0, [r4, #12]
 8007cf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cfa:	f010 0301 	ands.w	r3, r0, #1
 8007cfe:	d00a      	beq.n	8007d16 <__swsetup_r+0x9e>
 8007d00:	2300      	movs	r3, #0
 8007d02:	60a3      	str	r3, [r4, #8]
 8007d04:	6963      	ldr	r3, [r4, #20]
 8007d06:	425b      	negs	r3, r3
 8007d08:	61a3      	str	r3, [r4, #24]
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	b943      	cbnz	r3, 8007d20 <__swsetup_r+0xa8>
 8007d0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d12:	d1c4      	bne.n	8007c9e <__swsetup_r+0x26>
 8007d14:	bd38      	pop	{r3, r4, r5, pc}
 8007d16:	0781      	lsls	r1, r0, #30
 8007d18:	bf58      	it	pl
 8007d1a:	6963      	ldrpl	r3, [r4, #20]
 8007d1c:	60a3      	str	r3, [r4, #8]
 8007d1e:	e7f4      	b.n	8007d0a <__swsetup_r+0x92>
 8007d20:	2000      	movs	r0, #0
 8007d22:	e7f7      	b.n	8007d14 <__swsetup_r+0x9c>
 8007d24:	20000064 	.word	0x20000064

08007d28 <_sbrk_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	4d05      	ldr	r5, [pc, #20]	; (8007d44 <_sbrk_r+0x1c>)
 8007d2e:	4604      	mov	r4, r0
 8007d30:	4608      	mov	r0, r1
 8007d32:	602b      	str	r3, [r5, #0]
 8007d34:	f7f8 fdbc 	bl	80008b0 <_sbrk>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_sbrk_r+0x1a>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_sbrk_r+0x1a>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	20008594 	.word	0x20008594

08007d48 <memchr>:
 8007d48:	4603      	mov	r3, r0
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	b2c9      	uxtb	r1, r1
 8007d4e:	4402      	add	r2, r0
 8007d50:	4293      	cmp	r3, r2
 8007d52:	4618      	mov	r0, r3
 8007d54:	d101      	bne.n	8007d5a <memchr+0x12>
 8007d56:	2000      	movs	r0, #0
 8007d58:	e003      	b.n	8007d62 <memchr+0x1a>
 8007d5a:	7804      	ldrb	r4, [r0, #0]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	428c      	cmp	r4, r1
 8007d60:	d1f6      	bne.n	8007d50 <memchr+0x8>
 8007d62:	bd10      	pop	{r4, pc}

08007d64 <__swhatbuf_r>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d6c:	4615      	mov	r5, r2
 8007d6e:	2900      	cmp	r1, #0
 8007d70:	461e      	mov	r6, r3
 8007d72:	b096      	sub	sp, #88	; 0x58
 8007d74:	da0c      	bge.n	8007d90 <__swhatbuf_r+0x2c>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d7e:	bf0c      	ite	eq
 8007d80:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d84:	2340      	movne	r3, #64	; 0x40
 8007d86:	2000      	movs	r0, #0
 8007d88:	6031      	str	r1, [r6, #0]
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	b016      	add	sp, #88	; 0x58
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
 8007d90:	466a      	mov	r2, sp
 8007d92:	f000 f849 	bl	8007e28 <_fstat_r>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	dbed      	blt.n	8007d76 <__swhatbuf_r+0x12>
 8007d9a:	9901      	ldr	r1, [sp, #4]
 8007d9c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007da0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007da4:	4259      	negs	r1, r3
 8007da6:	4159      	adcs	r1, r3
 8007da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dac:	e7eb      	b.n	8007d86 <__swhatbuf_r+0x22>

08007dae <__smakebuf_r>:
 8007dae:	898b      	ldrh	r3, [r1, #12]
 8007db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007db2:	079d      	lsls	r5, r3, #30
 8007db4:	4606      	mov	r6, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	d507      	bpl.n	8007dca <__smakebuf_r+0x1c>
 8007dba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	6163      	str	r3, [r4, #20]
 8007dc6:	b002      	add	sp, #8
 8007dc8:	bd70      	pop	{r4, r5, r6, pc}
 8007dca:	466a      	mov	r2, sp
 8007dcc:	ab01      	add	r3, sp, #4
 8007dce:	f7ff ffc9 	bl	8007d64 <__swhatbuf_r>
 8007dd2:	9900      	ldr	r1, [sp, #0]
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f7ff fb04 	bl	80073e4 <_malloc_r>
 8007ddc:	b948      	cbnz	r0, 8007df2 <__smakebuf_r+0x44>
 8007dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de2:	059a      	lsls	r2, r3, #22
 8007de4:	d4ef      	bmi.n	8007dc6 <__smakebuf_r+0x18>
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	f043 0302 	orr.w	r3, r3, #2
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	e7e3      	b.n	8007dba <__smakebuf_r+0xc>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	6020      	str	r0, [r4, #0]
 8007df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfa:	81a3      	strh	r3, [r4, #12]
 8007dfc:	9b00      	ldr	r3, [sp, #0]
 8007dfe:	6120      	str	r0, [r4, #16]
 8007e00:	6163      	str	r3, [r4, #20]
 8007e02:	9b01      	ldr	r3, [sp, #4]
 8007e04:	b15b      	cbz	r3, 8007e1e <__smakebuf_r+0x70>
 8007e06:	4630      	mov	r0, r6
 8007e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e0c:	f000 f81e 	bl	8007e4c <_isatty_r>
 8007e10:	b128      	cbz	r0, 8007e1e <__smakebuf_r+0x70>
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	f023 0303 	bic.w	r3, r3, #3
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	81a3      	strh	r3, [r4, #12]
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	431d      	orrs	r5, r3
 8007e22:	81a5      	strh	r5, [r4, #12]
 8007e24:	e7cf      	b.n	8007dc6 <__smakebuf_r+0x18>
	...

08007e28 <_fstat_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4d06      	ldr	r5, [pc, #24]	; (8007e48 <_fstat_r+0x20>)
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	4611      	mov	r1, r2
 8007e34:	602b      	str	r3, [r5, #0]
 8007e36:	f7f8 fd16 	bl	8000866 <_fstat>
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	d102      	bne.n	8007e44 <_fstat_r+0x1c>
 8007e3e:	682b      	ldr	r3, [r5, #0]
 8007e40:	b103      	cbz	r3, 8007e44 <_fstat_r+0x1c>
 8007e42:	6023      	str	r3, [r4, #0]
 8007e44:	bd38      	pop	{r3, r4, r5, pc}
 8007e46:	bf00      	nop
 8007e48:	20008594 	.word	0x20008594

08007e4c <_isatty_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4d05      	ldr	r5, [pc, #20]	; (8007e68 <_isatty_r+0x1c>)
 8007e52:	4604      	mov	r4, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	602b      	str	r3, [r5, #0]
 8007e58:	f7f8 fd14 	bl	8000884 <_isatty>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_isatty_r+0x1a>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_isatty_r+0x1a>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20008594 	.word	0x20008594

08007e6c <_init>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr

08007e78 <_fini>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	bf00      	nop
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr
